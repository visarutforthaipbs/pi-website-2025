{
  "version": 3,
  "sources": ["../../../@strapi/content-type-builder/admin/src/components/BoxWrapper.tsx", "../../../@strapi/content-type-builder/admin/src/components/Tr.tsx", "../../../@strapi/content-type-builder/admin/src/components/ComponentList.tsx", "../../../@strapi/content-type-builder/admin/src/components/ComponentCard/ComponentIcon/ComponentIcon.tsx", "../../../@strapi/content-type-builder/admin/src/components/ComponentCard/ComponentCard.tsx", "../../../@strapi/content-type-builder/admin/src/components/DynamicZoneList.tsx", "../../../@strapi/content-type-builder/admin/src/components/NestedFooter.tsx", "../../../@strapi/content-type-builder/admin/src/components/List.tsx", "../../../@strapi/content-type-builder/admin/src/icons/Curve.tsx", "../../../@strapi/content-type-builder/admin/src/components/DisplayedType.tsx", "../../../@strapi/content-type-builder/admin/src/components/UpperFirst.tsx", "../../../@strapi/content-type-builder/admin/src/components/ListRow.tsx", "../../../@strapi/content-type-builder/admin/src/utils/getAttributeDisplayedType.ts", "../../../@strapi/content-type-builder/admin/src/pages/ListView/LinkToCMSettingsView.tsx", "../../../@strapi/content-type-builder/admin/src/pages/ListView/ListView.tsx"],
  "sourcesContent": ["import { Box } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\nexport const BoxWrapper = styled(Box)`\n  table {\n    width: 100%;\n    white-space: nowrap;\n  }\n\n  thead {\n    border-bottom: 1px solid ${({ theme }) => theme.colors.neutral150};\n\n    tr {\n      border-top: 0;\n    }\n  }\n\n  tr {\n    border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\n\n    & td,\n    & th {\n      padding: ${({ theme }) => theme.spaces[4]};\n    }\n\n    & td:first-of-type,\n    & th:first-of-type {\n      padding: 0 ${({ theme }) => theme.spaces[1]};\n    }\n  }\n\n  th,\n  td {\n    vertical-align: middle;\n    text-align: left;\n    color: ${({ theme }) => theme.colors.neutral600};\n    outline-offset: -4px;\n  }\n`;\n", "import { styled } from 'styled-components';\n\n// Keep component-row for css specificity\nexport const Tr = styled.tr<{\n  $isFromDynamicZone?: boolean;\n  $isChildOfDynamicZone?: boolean;\n}>`\n  &.component-row,\n  &.dynamiczone-row {\n    position: relative;\n    border-top: none !important;\n\n    table tr:first-child {\n      border-top: none;\n    }\n\n    > td:first-of-type {\n      padding: 0 0 0 2rem;\n      position: relative;\n\n      &::before {\n        content: '';\n        width: 0.4rem;\n        height: calc(100% - 40px);\n        position: absolute;\n        top: -7px;\n        left: 2.6rem;\n        border-radius: 4px;\n\n        ${({ $isFromDynamicZone, $isChildOfDynamicZone, theme }) => {\n          if ($isChildOfDynamicZone) {\n            return `background-color: ${theme.colors.primary200};`;\n          }\n\n          if ($isFromDynamicZone) {\n            return `background-color: ${theme.colors.primary200};`;\n          }\n\n          return `background: ${theme.colors.neutral150};`;\n        }}\n      }\n    }\n  }\n\n  &.dynamiczone-row > td:first-of-type {\n    padding: 0;\n  }\n`;\n", "import get from 'lodash/get';\n\nimport { useDataManager } from '../hooks/useDataManager';\n\nimport { List } from './List';\nimport { Tr } from './Tr';\n\nimport type { Internal } from '@strapi/types';\n\ninterface ComponentListProps {\n  component: Internal.UID.Component;\n  customRowComponent: any;\n  firstLoopComponentUid?: string;\n  isFromDynamicZone?: boolean;\n  isNestedInDZComponent?: boolean;\n}\n\nexport const ComponentList = ({\n  customRowComponent,\n  component,\n  isFromDynamicZone = false,\n  isNestedInDZComponent = false,\n  firstLoopComponentUid,\n}: ComponentListProps) => {\n  const { modifiedData } = useDataManager();\n  const {\n    schema: { attributes },\n  } = get(modifiedData, ['components', component], {\n    schema: { attributes: [] },\n  });\n\n  return (\n    <Tr $isChildOfDynamicZone={isFromDynamicZone} className=\"component-row\">\n      <td colSpan={12}>\n        <List\n          customRowComponent={customRowComponent}\n          items={attributes}\n          targetUid={component}\n          firstLoopComponentUid={firstLoopComponentUid || component}\n          editTarget=\"components\"\n          isFromDynamicZone={isFromDynamicZone}\n          isNestedInDZComponent={isNestedInDZComponent}\n          isSub\n          secondLoopComponentUid={firstLoopComponentUid ? component : null}\n        />\n      </td>\n    </Tr>\n  );\n};\n", "import { Flex } from '@strapi/design-system';\n\nimport { COMPONENT_ICONS } from '../../IconPicker/constants';\n\ninterface ComponentIconProps {\n  isActive?: boolean;\n  icon?: keyof typeof COMPONENT_ICONS;\n}\n\nexport const ComponentIcon = ({ isActive = false, icon = 'dashboard' }: ComponentIconProps) => {\n  const Icon = COMPONENT_ICONS[icon] || COMPONENT_ICONS.dashboard;\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      background={isActive ? 'primary200' : 'neutral200'}\n      justifyContent=\"center\"\n      height={8}\n      width={8}\n      borderRadius=\"50%\"\n    >\n      <Icon height=\"2rem\" width=\"2rem\" />\n    </Flex>\n  );\n};\n", "import { Box, Flex, Typography } from '@strapi/design-system';\nimport { Cross } from '@strapi/icons';\nimport get from 'lodash/get';\nimport { styled } from 'styled-components';\n\nimport { useDataManager } from '../../hooks/useDataManager';\n\nimport { ComponentIcon } from './ComponentIcon';\n\ninterface ComponentCardProps {\n  component: string;\n  dzName: string;\n  index: number;\n  isActive?: boolean;\n  isInDevelopmentMode?: boolean;\n  onClick?: () => void;\n}\n\nconst CloseButton = styled(Box)`\n  position: absolute;\n  display: none;\n  top: 5px;\n  right: 0.8rem;\n\n  svg {\n    width: 1rem;\n    height: 1rem;\n\n    path {\n      fill: ${({ theme }) => theme.colors.primary600};\n    }\n  }\n`;\n\nconst ComponentBox = styled(Flex)`\n  width: 14rem;\n  height: 8rem;\n  position: relative;\n  border: 1px solid ${({ theme }) => theme.colors.neutral200};\n  background: ${({ theme }) => theme.colors.neutral100};\n  border-radius: ${({ theme }) => theme.borderRadius};\n  max-width: 100%;\n\n  &.active,\n  &:focus,\n  &:hover {\n    border: 1px solid ${({ theme }) => theme.colors.primary200};\n    background: ${({ theme }) => theme.colors.primary100};\n    color: ${({ theme }) => theme.colors.primary600};\n\n    ${CloseButton} {\n      display: block;\n    }\n\n    /* > ComponentIcon */\n    > div:first-child {\n      background: ${({ theme }) => theme.colors.primary200};\n      color: ${({ theme }) => theme.colors.primary600};\n\n      svg {\n        path {\n          fill: ${({ theme }) => theme.colors.primary600};\n        }\n      }\n    }\n  }\n`;\n\nexport const ComponentCard = ({\n  component,\n  dzName,\n  index,\n  isActive = false,\n  isInDevelopmentMode = false,\n  onClick,\n}: ComponentCardProps) => {\n  const { modifiedData, removeComponentFromDynamicZone } = useDataManager();\n  const {\n    schema: { icon, displayName },\n  } = get(modifiedData, ['components', component], { schema: {} });\n\n  const onClose = (e: any) => {\n    e.stopPropagation();\n    removeComponentFromDynamicZone(dzName, index);\n  };\n\n  return (\n    <ComponentBox\n      alignItems=\"center\"\n      direction=\"column\"\n      className={isActive ? 'active' : ''}\n      borderRadius=\"borderRadius\"\n      justifyContent=\"center\"\n      paddingLeft={4}\n      paddingRight={4}\n      shrink={0}\n      onClick={onClick}\n      role=\"tab\"\n      tabIndex={isActive ? 0 : -1}\n      cursor=\"pointer\"\n      aria-selected={isActive}\n      aria-controls={`dz-${dzName}-panel-${index}`}\n      id={`dz-${dzName}-tab-${index}`}\n    >\n      <ComponentIcon icon={icon} isActive={isActive} />\n\n      <Box marginTop={1} maxWidth=\"100%\">\n        <Typography variant=\"pi\" fontWeight=\"bold\" ellipsis>\n          {displayName}\n        </Typography>\n      </Box>\n\n      {isInDevelopmentMode && (\n        <CloseButton tag=\"button\" onClick={onClose}>\n          <Cross />\n        </CloseButton>\n      )}\n    </ComponentBox>\n  );\n};\n", "import { useState } from 'react';\n\nimport { Box, Flex, Typography } from '@strapi/design-system';\nimport { Plus } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useDataManager } from '../hooks/useDataManager';\nimport { getTrad } from '../utils/getTrad';\n\nimport { ComponentCard } from './ComponentCard';\nimport { ComponentList } from './ComponentList';\nimport { Tr } from './Tr';\n\nimport type { Internal } from '@strapi/types';\n\ninterface DynamicZoneListProps {\n  addComponent: (name?: string) => void;\n  components: Array<string>;\n  customRowComponent?: () => void;\n  name?: string;\n  targetUid: Internal.UID.Component;\n}\n\nconst StyledAddIcon = styled(Plus)`\n  width: 3.2rem;\n  height: 3.2rem;\n  padding: 0.9rem;\n  border-radius: 6.4rem;\n  background: ${({ theme }) => theme.colors.primary100};\n  path {\n    fill: ${({ theme }) => theme.colors.primary600};\n  }\n`;\n\nconst FixedBox = styled(Box)`\n  height: 9rem;\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n`;\n\nconst ScrollableStack = styled(Flex)`\n  width: 100%;\n  overflow-x: auto;\n`;\n\nconst ComponentContentBox = styled(Box)`\n  padding-top: 9rem;\n`;\n\nconst ComponentStack = styled(Flex)`\n  flex-shrink: 0;\n  width: 14rem;\n  height: 8rem;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const DynamicZoneList = ({\n  customRowComponent,\n  components = [],\n  addComponent,\n  name,\n  targetUid,\n}: DynamicZoneListProps) => {\n  const { isInDevelopmentMode } = useDataManager();\n  const [activeTab, setActiveTab] = useState(0);\n  const { formatMessage } = useIntl();\n\n  const toggle = (tab: number) => {\n    if (activeTab !== tab) {\n      setActiveTab(tab);\n    }\n  };\n\n  const handleClickAdd = () => {\n    addComponent(name);\n  };\n\n  return (\n    <Tr className=\"dynamiczone-row\" $isFromDynamicZone>\n      <td colSpan={12}>\n        <FixedBox paddingLeft={8}>\n          <ScrollableStack gap={2}>\n            {isInDevelopmentMode && (\n              <button type=\"button\" onClick={handleClickAdd}>\n                <ComponentStack direction=\"column\" alignItems=\"stretch\" gap={1}>\n                  <StyledAddIcon />\n                  <Typography variant=\"pi\" fontWeight=\"bold\" textColor=\"primary600\">\n                    {formatMessage({\n                      id: getTrad('button.component.add'),\n                      defaultMessage: 'Add a component',\n                    })}\n                  </Typography>\n                </ComponentStack>\n              </button>\n            )}\n            <Flex role=\"tablist\" gap={2}>\n              {components.map((component, index) => {\n                return (\n                  <ComponentCard\n                    key={component}\n                    dzName={name || ''}\n                    index={index}\n                    component={component}\n                    isActive={activeTab === index}\n                    isInDevelopmentMode={isInDevelopmentMode}\n                    onClick={() => toggle(index)}\n                  />\n                );\n              })}\n            </Flex>\n          </ScrollableStack>\n        </FixedBox>\n        <ComponentContentBox>\n          {components.map((component, index) => {\n            const props = {\n              customRowComponent,\n              component,\n            };\n\n            return (\n              <Box\n                id={`dz-${name}-panel-${index}`}\n                role=\"tabpanel\"\n                aria-labelledby={`dz-${name}-tab-${index}`}\n                key={component}\n                style={{ display: activeTab === index ? 'block' : 'none' }}\n              >\n                <table>\n                  <tbody>\n                    <ComponentList\n                      {...props}\n                      isFromDynamicZone\n                      component={targetUid}\n                      key={component}\n                    />\n                  </tbody>\n                </table>\n              </Box>\n            );\n          })}\n        </ComponentContentBox>\n      </td>\n    </Tr>\n  );\n};\n", "import type { ReactNode } from 'react';\n\nimport { Box, Flex, Typography } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\nconst IconBox = styled(Box)`\n  height: 2.4rem;\n  width: 2.4rem;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  svg {\n    height: 1rem;\n    width: 1rem;\n  }\n\n  svg path {\n    fill: ${({ theme, color }) => theme.colors[`${color}600`]};\n  }\n`;\n\nconst ButtonBox = styled(Box)`\n  border-radius: 0 0 ${({ theme }) => theme.borderRadius} ${({ theme }) => theme.borderRadius};\n  display: block;\n  width: 100%;\n  border: none;\n  position: relative;\n  left: -0.4rem;\n`;\n\ninterface NestedTFooterProps {\n  color: string;\n  children: ReactNode;\n  icon: ReactNode;\n  onClick?: () => void;\n}\n\nexport const NestedTFooter = ({ children, icon, color, ...props }: NestedTFooterProps) => {\n  return (\n    <ButtonBox paddingBottom={4} paddingTop={4} tag=\"button\" type=\"button\" {...props}>\n      <Flex>\n        <IconBox color={color} aria-hidden background={`${color}200`}>\n          {icon}\n        </IconBox>\n        <Box paddingLeft={3}>\n          <Typography variant=\"pi\" fontWeight=\"bold\" textColor={`${color}600`}>\n            {children}\n          </Typography>\n        </Box>\n      </Flex>\n    </ButtonBox>\n  );\n};\n", "import { ComponentType, Fragment } from 'react';\n\nimport { useTracking } from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Button,\n  EmptyStateLayout,\n  Table,\n  Tbody,\n  Td,\n  TFooter,\n  Th,\n  Thead,\n  Tr,\n  Typography,\n} from '@strapi/design-system';\nimport { Plus } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport { useIntl } from 'react-intl';\n\nimport { useDataManager } from '../hooks/useDataManager';\nimport { useFormModalNavigation } from '../hooks/useFormModalNavigation';\nimport { getTrad } from '../utils/getTrad';\n\nimport { BoxWrapper } from './BoxWrapper';\nimport { ComponentList } from './ComponentList';\nimport { DynamicZoneList } from './DynamicZoneList';\nimport { NestedTFooter } from './NestedFooter';\n\nimport type { SchemaType } from '../types';\nimport type { Internal } from '@strapi/types';\n\ninterface ListProps {\n  addComponentToDZ?: () => void;\n  customRowComponent: ComponentType<any>;\n  editTarget: SchemaType;\n  firstLoopComponentUid?: string;\n  isFromDynamicZone?: boolean;\n  isNestedInDZComponent?: boolean;\n  isMain?: boolean;\n  items: any[];\n  secondLoopComponentUid?: string | null;\n  targetUid?: Internal.UID.Schema;\n  isSub?: boolean;\n}\n\nexport const List = ({\n  addComponentToDZ,\n  customRowComponent,\n  editTarget,\n  firstLoopComponentUid,\n  isFromDynamicZone = false,\n  isMain = false,\n  isNestedInDZComponent = false,\n  isSub = false,\n  items = [],\n  secondLoopComponentUid,\n  targetUid,\n}: ListProps) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { isInDevelopmentMode, modifiedData, isInContentTypeView } = useDataManager();\n\n  const { onOpenModalAddField } = useFormModalNavigation();\n  const onClickAddField = () => {\n    trackUsage('hasClickedCTBAddFieldBanner');\n\n    onOpenModalAddField({ forTarget: editTarget, targetUid });\n  };\n\n  if (!targetUid) {\n    return (\n      <Table colCount={2} rowCount={2}>\n        <Thead>\n          <Tr>\n            <Th>\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\n                {formatMessage({ id: 'global.name', defaultMessage: 'Name' })}\n              </Typography>\n            </Th>\n            <Th>\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\n                {formatMessage({ id: 'global.type', defaultMessage: 'Type' })}\n              </Typography>\n            </Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          <Tr>\n            <Td colSpan={2}>\n              <EmptyStateLayout\n                content={formatMessage({\n                  id: getTrad('table.content.create-first-content-type'),\n                  defaultMessage: 'Create your first Collection-Type',\n                })}\n                hasRadius\n                icon={<EmptyDocuments width=\"16rem\" />}\n              />\n            </Td>\n          </Tr>\n        </Tbody>\n      </Table>\n    );\n  }\n\n  if (items.length === 0 && isMain) {\n    return (\n      <Table colCount={2} rowCount={2}>\n        <Thead>\n          <Tr>\n            <Th>\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\n                {formatMessage({ id: 'global.name', defaultMessage: 'Name' })}\n              </Typography>\n            </Th>\n            <Th>\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\n                {formatMessage({ id: 'global.type', defaultMessage: 'Type' })}\n              </Typography>\n            </Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          <Tr>\n            <Td colSpan={2}>\n              <EmptyStateLayout\n                action={\n                  <Button\n                    onClick={onClickAddField}\n                    size=\"L\"\n                    startIcon={<Plus />}\n                    variant=\"secondary\"\n                  >\n                    {formatMessage({\n                      id: getTrad('table.button.no-fields'),\n                      defaultMessage: 'Add new field',\n                    })}\n                  </Button>\n                }\n                content={formatMessage(\n                  isInContentTypeView\n                    ? {\n                        id: getTrad('table.content.no-fields.collection-type'),\n                        defaultMessage: 'Add your first field to this Collection-Type',\n                      }\n                    : {\n                        id: getTrad('table.content.no-fields.component'),\n                        defaultMessage: 'Add your first field to this component',\n                      }\n                )}\n                hasRadius\n                icon={<EmptyDocuments width=\"16rem\" />}\n              />\n            </Td>\n          </Tr>\n        </Tbody>\n      </Table>\n    );\n  }\n\n  return (\n    <BoxWrapper>\n      <Box\n        paddingLeft={6}\n        paddingRight={isMain ? 6 : 0}\n        {...(isMain && { style: { overflowX: 'auto' } })}\n      >\n        <table>\n          {isMain && (\n            <thead>\n              <tr>\n                <th>\n                  <Typography variant=\"sigma\" textColor=\"neutral800\">\n                    {formatMessage({ id: 'global.name', defaultMessage: 'Name' })}\n                  </Typography>\n                </th>\n                <th colSpan={2}>\n                  <Typography variant=\"sigma\" textColor=\"neutral800\">\n                    {formatMessage({ id: 'global.type', defaultMessage: 'Type' })}\n                  </Typography>\n                </th>\n              </tr>\n            </thead>\n          )}\n          <tbody>\n            {items.map((item) => {\n              const { type } = item;\n              const CustomRow = customRowComponent;\n\n              return (\n                <Fragment key={item.name}>\n                  <CustomRow\n                    {...item}\n                    isNestedInDZComponent={isNestedInDZComponent}\n                    targetUid={targetUid}\n                    editTarget={editTarget}\n                    firstLoopComponentUid={firstLoopComponentUid}\n                    isFromDynamicZone={isFromDynamicZone}\n                    secondLoopComponentUid={secondLoopComponentUid}\n                  />\n\n                  {type === 'component' && (\n                    <ComponentList\n                      {...item}\n                      customRowComponent={customRowComponent}\n                      targetUid={targetUid}\n                      isNestedInDZComponent={isFromDynamicZone}\n                      editTarget={editTarget}\n                      firstLoopComponentUid={firstLoopComponentUid}\n                    />\n                  )}\n\n                  {type === 'dynamiczone' && (\n                    <DynamicZoneList\n                      {...item}\n                      customRowComponent={customRowComponent}\n                      addComponent={addComponentToDZ}\n                      targetUid={targetUid}\n                    />\n                  )}\n                </Fragment>\n              );\n            })}\n          </tbody>\n        </table>\n      </Box>\n\n      {isMain && isInDevelopmentMode && (\n        <TFooter cursor=\"pointer\" icon={<Plus />} onClick={onClickAddField}>\n          {formatMessage({\n            id: getTrad(\n              `form.button.add.field.to.${\n                modifiedData.contentType\n                  ? modifiedData.contentType.schema.kind\n                  : editTarget || 'collectionType'\n              }`\n            ),\n            defaultMessage: 'Add another field',\n          })}\n        </TFooter>\n      )}\n      {isSub && isInDevelopmentMode && !isFromDynamicZone && (\n        <NestedTFooter\n          icon={<Plus />}\n          onClick={onClickAddField}\n          color={isFromDynamicZone ? 'primary' : 'neutral'}\n        >\n          {formatMessage({\n            id: getTrad(`form.button.add.field.to.component`),\n            defaultMessage: 'Add another field',\n          })}\n        </NestedTFooter>\n      )}\n    </BoxWrapper>\n  );\n};\n", "import { Box } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\nconst StyledBox = styled(Box)`\n  position: absolute;\n  left: -1.8rem;\n  top: 0px;\n\n  &:before {\n    content: '';\n    width: 0.4rem;\n    height: 1.2rem;\n    background: ${({ theme, color }) => theme.colors[color!]};\n    display: block;\n  }\n`;\n\nconst Svg = styled.svg`\n  position: relative;\n  flex-shrink: 0;\n  transform: translate(-0.5px, -1px);\n\n  * {\n    fill: ${({ theme, color }) => theme.colors[color!]};\n  }\n`;\n\ninterface CurveProps {\n  color: string;\n}\n\nexport const Curve = (props: CurveProps) => (\n  <StyledBox>\n    <Svg\n      width=\"20\"\n      height=\"23\"\n      viewBox=\"0 0 20 23\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M7.02477 14.7513C8.65865 17.0594 11.6046 18.6059 17.5596 18.8856C18.6836 18.9384 19.5976 19.8435 19.5976 20.9688V20.9688C19.5976 22.0941 18.6841 23.0125 17.5599 22.9643C10.9409 22.6805 6.454 20.9387 3.75496 17.1258C0.937988 13.1464 0.486328 7.39309 0.486328 0.593262H4.50974C4.50974 7.54693 5.06394 11.9813 7.02477 14.7513Z\"\n      />\n    </Svg>\n  </StyledBox>\n);\n", "import { Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../utils/getTrad';\n\ntype DisplayedTypeProps = {\n  type: string;\n  customField?: string | null;\n  repeatable?: boolean;\n};\n\nexport const DisplayedType = ({\n  type,\n  customField = null,\n  repeatable = false,\n}: DisplayedTypeProps) => {\n  const { formatMessage } = useIntl();\n\n  let readableType = type;\n\n  if (['integer', 'biginteger', 'float', 'decimal'].includes(type)) {\n    readableType = 'number';\n  } else if (['string'].includes(type)) {\n    readableType = 'text';\n  }\n\n  if (customField) {\n    return (\n      <Typography>\n        {formatMessage({\n          id: getTrad('attribute.customField'),\n          defaultMessage: 'Custom field',\n        })}\n      </Typography>\n    );\n  }\n\n  return (\n    <Typography textColor=\"neutral800\">\n      {formatMessage({\n        id: getTrad(`attribute.${readableType}`),\n        defaultMessage: type,\n      })}\n      &nbsp;\n      {repeatable &&\n        formatMessage({\n          id: getTrad('component.repeatable'),\n          defaultMessage: '(repeatable)',\n        })}\n    </Typography>\n  );\n};\n", "import upperFirst from 'lodash/upperFirst';\n\nexport const UpperFirst = ({ content }: { content: string }) => <>{upperFirst(content)}</>;\n", "import { memo } from 'react';\n\nimport { Box, Flex, IconButton, Typography } from '@strapi/design-system';\nimport { Lock, Pencil, Trash } from '@strapi/icons';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useDataManager } from '../hooks/useDataManager';\nimport { Curve } from '../icons/Curve';\nimport { getTrad } from '../utils/getTrad';\n\nimport { AttributeIcon, IconByType } from './AttributeIcon';\nimport { DisplayedType } from './DisplayedType';\nimport { UpperFirst } from './UpperFirst';\n\nimport type { SchemaType } from '../types';\n\nexport const BoxWrapper = styled(Box)`\n  position: relative;\n`;\n\ntype ListRowProps = {\n  configurable?: boolean;\n  customField?: string | null;\n  editTarget: SchemaType;\n  firstLoopComponentUid?: string | null;\n  isFromDynamicZone?: boolean;\n  name: string;\n  onClick: (\n    editTarget: string,\n    targetUid: string | null,\n    attributeName: string,\n    attributeType: string,\n    customField: string | null\n  ) => void;\n  relation?: string;\n  repeatable?: boolean;\n  secondLoopComponentUid?: string | null;\n  target?: string | null;\n  targetUid?: string | null;\n  type: IconByType;\n};\n\nexport const ListRow = memo(\n  ({\n    configurable = true,\n    customField = null,\n    editTarget,\n    firstLoopComponentUid = null,\n    isFromDynamicZone = false,\n    name,\n    onClick,\n    relation = '',\n    repeatable = false,\n    secondLoopComponentUid = null,\n    target = null,\n    targetUid = null,\n    type,\n  }: ListRowProps) => {\n    const { contentTypes, isInDevelopmentMode, removeAttribute } = useDataManager();\n    const { formatMessage } = useIntl();\n\n    const isMorph = type === 'relation' && relation.includes('morph');\n    const ico = ['integer', 'biginteger', 'float', 'decimal'].includes(type) ? 'number' : type;\n\n    const contentType = get(contentTypes, [target as keyof typeof contentTypes], {});\n    const contentTypeFriendlyName = get(contentType, ['schema', 'displayName'], '');\n    const isPluginContentType = get(contentType, 'plugin');\n\n    const src = target ? 'relation' : ico;\n\n    const handleClick = () => {\n      if (isMorph) {\n        return;\n      }\n\n      if (configurable !== false) {\n        const attrType = type;\n\n        onClick(\n          // Tells where the attribute is located in the main modifiedData object : contentType, component or components\n          editTarget,\n          // main data type uid\n          secondLoopComponentUid || firstLoopComponentUid || targetUid,\n          // Name of the attribute\n          name,\n          // Type of the attribute\n          attrType,\n          customField\n        );\n      }\n    };\n    let loopNumber;\n\n    if (secondLoopComponentUid && firstLoopComponentUid) {\n      loopNumber = 2;\n    } else if (firstLoopComponentUid) {\n      loopNumber = 1;\n    } else {\n      loopNumber = 0;\n    }\n\n    return (\n      <BoxWrapper\n        tag=\"tr\"\n        onClick={isInDevelopmentMode && configurable && !isMorph ? handleClick : undefined}\n      >\n        <td style={{ position: 'relative' }}>\n          {loopNumber !== 0 && <Curve color={isFromDynamicZone ? 'primary200' : 'neutral150'} />}\n          <Flex paddingLeft={2} gap={4}>\n            <AttributeIcon type={src} customField={customField} />\n            <Typography textColor=\"neutral800\" fontWeight=\"bold\">\n              {name}\n            </Typography>\n          </Flex>\n        </td>\n        <td>\n          {target ? (\n            <Typography textColor=\"neutral800\">\n              {formatMessage({\n                id: getTrad(\n                  `modelPage.attribute.${isMorph ? 'relation-polymorphic' : 'relationWith'}`\n                ),\n                defaultMessage: 'Relation with',\n              })}\n              &nbsp;\n              <span style={{ fontStyle: 'italic' }}>\n                <UpperFirst content={contentTypeFriendlyName} />\n                &nbsp;\n                {isPluginContentType &&\n                  `(${formatMessage({\n                    id: getTrad(`from`),\n                    defaultMessage: 'from',\n                  })}: ${isPluginContentType})`}\n              </span>\n            </Typography>\n          ) : (\n            <DisplayedType type={type} customField={customField} repeatable={repeatable} />\n          )}\n        </td>\n        <td>\n          {isInDevelopmentMode ? (\n            <Flex justifyContent=\"flex-end\" onClick={(e) => e.stopPropagation()}>\n              {configurable ? (\n                <Flex gap={1}>\n                  {!isMorph && (\n                    <IconButton\n                      onClick={handleClick}\n                      label={`${formatMessage({\n                        id: 'app.utils.edit',\n                        defaultMessage: 'Edit',\n                      })} ${name}`}\n                      variant=\"ghost\"\n                    >\n                      <Pencil />\n                    </IconButton>\n                  )}\n                  <IconButton\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      removeAttribute(\n                        editTarget,\n                        name,\n                        secondLoopComponentUid || firstLoopComponentUid || ''\n                      );\n                    }}\n                    label={`${formatMessage({\n                      id: 'global.delete',\n                      defaultMessage: 'Delete',\n                    })} ${name}`}\n                    variant=\"ghost\"\n                  >\n                    <Trash />\n                  </IconButton>\n                </Flex>\n              ) : (\n                <Lock />\n              )}\n            </Flex>\n          ) : (\n            /*\n            In production mode the edit icons aren't visible, therefore\n            we need to reserve the same space, otherwise the height of the\n            row might collapse, leading to bad positioned curve icons\n          */\n            <Box height=\"3.2rem\" />\n          )}\n        </td>\n      </BoxWrapper>\n    );\n  }\n);\n", "export const getAttributeDisplayedType = (type: string) => {\n  let displayedType;\n\n  switch (type) {\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'timestamp':\n      displayedType = 'date';\n      break;\n    case 'integer':\n    case 'biginteger':\n    case 'decimal':\n    case 'float':\n      displayedType = 'number';\n      break;\n    case 'string':\n    case 'text':\n      displayedType = 'text';\n      break;\n    case '':\n      displayedType = 'relation';\n      break;\n    default:\n      displayedType = type;\n  }\n\n  return displayedType;\n};\n", "import { memo } from 'react';\n\nimport { type Permission, useRBAC } from '@strapi/admin/strapi-admin';\nimport { Button } from '@strapi/design-system';\nimport { ListPlus } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useNavigate } from 'react-router-dom';\n\nconst cmPermissions: Record<string, Permission[]> = {\n  collectionTypesConfigurations: [\n    {\n      action: 'plugin::content-manager.collection-types.configure-view',\n      subject: null,\n    },\n  ],\n  componentsConfigurations: [\n    {\n      action: 'plugin::content-manager.components.configure-layout',\n      subject: null,\n    },\n  ],\n  singleTypesConfigurations: [\n    {\n      action: 'plugin::content-manager.single-types.configure-view',\n      subject: null,\n    },\n  ],\n};\n\nconst getPermission = ({\n  isInContentTypeView,\n  contentTypeKind,\n}: {\n  isInContentTypeView: boolean;\n  contentTypeKind: string;\n}) => {\n  if (isInContentTypeView) {\n    if (contentTypeKind === 'singleType') {\n      return cmPermissions.singleTypesConfigurations;\n    }\n\n    return cmPermissions.collectionTypesConfigurations;\n  }\n\n  return cmPermissions.componentsConfigurations;\n};\n\ninterface LinkToCMSettingsViewProps {\n  disabled: boolean;\n  contentTypeKind?: string;\n  isInContentTypeView?: boolean;\n  targetUid?: string;\n}\n\nexport const LinkToCMSettingsView = memo(\n  ({\n    disabled,\n    isInContentTypeView = true,\n    contentTypeKind = 'collectionType',\n    targetUid = '',\n  }: LinkToCMSettingsViewProps) => {\n    const { formatMessage } = useIntl();\n    const navigate = useNavigate();\n    const permissionsToApply = getPermission({ isInContentTypeView, contentTypeKind });\n\n    const label = formatMessage({\n      id: 'content-type-builder.form.button.configure-view',\n      defaultMessage: 'Configure the view',\n    });\n\n    const handleClick = () => {\n      if (disabled) {\n        return false;\n      }\n\n      if (isInContentTypeView) {\n        navigate(`/content-manager/collection-types/${targetUid}/configurations/edit`);\n      } else {\n        navigate(`/content-manager/components/${targetUid}/configurations/edit`);\n      }\n\n      return false;\n    };\n\n    const { isLoading, allowedActions } = useRBAC({\n      viewConfig: permissionsToApply,\n    });\n\n    if (isLoading) {\n      return null;\n    }\n\n    if (!allowedActions.canConfigureView && !allowedActions.canConfigureLayout) {\n      return null;\n    }\n\n    return (\n      <Button startIcon={<ListPlus />} variant=\"tertiary\" onClick={handleClick} disabled={disabled}>\n        {label}\n      </Button>\n    );\n  }\n);\n", "import { BackButton, useTracking, Layouts } from '@strapi/admin/strapi-admin';\nimport { Box, Button, Flex } from '@strapi/design-system';\nimport { Check, Pencil, Plus } from '@strapi/icons';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isEqual from 'lodash/isEqual';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\nimport { unstable_usePrompt as usePrompt, useMatch } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { List } from '../../components/List';\nimport { ListRow } from '../../components/ListRow';\nimport { useDataManager } from '../../hooks/useDataManager';\nimport { useFormModalNavigation } from '../../hooks/useFormModalNavigation';\nimport { getAttributeDisplayedType } from '../../utils/getAttributeDisplayedType';\nimport { getTrad } from '../../utils/getTrad';\n\nimport { LinkToCMSettingsView } from './LinkToCMSettingsView';\n\nconst LayoutsHeaderCustom = styled(Layouts.Header)`\n  overflow-wrap: anywhere;\n`;\n\nconst ListView = () => {\n  const { initialData, modifiedData, isInDevelopmentMode, isInContentTypeView, submitData } =\n    useDataManager();\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n\n  const match = useMatch('/plugins/content-type-builder/:kind/:currentUID');\n\n  const {\n    onOpenModalAddComponentsToDZ,\n    onOpenModalAddField,\n    onOpenModalEditField,\n    onOpenModalEditSchema,\n    onOpenModalEditCustomField,\n  } = useFormModalNavigation();\n\n  const firstMainDataPath = isInContentTypeView ? 'contentType' : 'component';\n  const mainDataTypeAttributesPath = [firstMainDataPath, 'schema', 'attributes'];\n  const targetUid = get(modifiedData, [firstMainDataPath, 'uid']);\n  const isTemporary = get(modifiedData, [firstMainDataPath, 'isTemporary'], false);\n  const contentTypeKind = get(modifiedData, [firstMainDataPath, 'schema', 'kind'], null);\n\n  const attributes = get(modifiedData, mainDataTypeAttributesPath, []);\n  const isFromPlugin = has(initialData, [firstMainDataPath, 'plugin']);\n  const hasModelBeenModified = !isEqual(modifiedData, initialData);\n\n  const forTarget = isInContentTypeView ? 'contentType' : 'component';\n\n  const handleClickAddComponentToDZ = (dynamicZoneTarget?: string) => {\n    onOpenModalAddComponentsToDZ({ dynamicZoneTarget, targetUid });\n  };\n\n  const handleClickEditField = async (\n    forTarget: string,\n    targetUid: string,\n    attributeName: string,\n    type: string,\n    customField: any\n  ) => {\n    const attributeType = getAttributeDisplayedType(type);\n    const step = type === 'component' ? '2' : null;\n\n    if (customField) {\n      onOpenModalEditCustomField({\n        forTarget,\n        targetUid,\n        attributeName,\n        attributeType,\n        customFieldUid: customField,\n      });\n    } else {\n      onOpenModalEditField({\n        forTarget,\n        targetUid,\n        attributeName,\n        attributeType,\n        step,\n      });\n    }\n  };\n\n  let label = get(modifiedData, [firstMainDataPath, 'schema', 'displayName'], '');\n  const kind = get(modifiedData, [firstMainDataPath, 'schema', 'kind'], '');\n\n  const isCreatingFirstContentType = match?.params.currentUID === 'create-content-type';\n\n  if (!label && isCreatingFirstContentType) {\n    label = formatMessage({\n      id: getTrad('button.model.create'),\n      defaultMessage: 'Create new collection type',\n    });\n  }\n\n  const onEdit = () => {\n    const contentType = kind || firstMainDataPath;\n\n    if (contentType === 'collectionType') {\n      trackUsage('willEditNameOfContentType');\n    }\n    if (contentType === 'singleType') {\n      trackUsage('willEditNameOfSingleType');\n    }\n\n    onOpenModalEditSchema({\n      modalType: firstMainDataPath,\n      forTarget: firstMainDataPath,\n      targetUid,\n      kind: contentType,\n    });\n  };\n\n  usePrompt({\n    when: hasModelBeenModified,\n    message: formatMessage({ id: getTrad('prompt.unsaved'), defaultMessage: 'Are you sure?' }),\n  });\n\n  const primaryAction = isInDevelopmentMode && (\n    <Flex gap={2} marginLeft={2}>\n      {/* DON'T display the add field button when the content type has not been created */}\n      {!isCreatingFirstContentType && (\n        <Button\n          startIcon={<Plus />}\n          variant=\"secondary\"\n          minWidth=\"max-content\"\n          onClick={() => {\n            onOpenModalAddField({ forTarget, targetUid });\n          }}\n        >\n          {formatMessage({\n            id: getTrad('button.attributes.add.another'),\n            defaultMessage: 'Add another field',\n          })}\n        </Button>\n      )}\n      <Button\n        startIcon={<Check />}\n        onClick={async () => await submitData()}\n        type=\"submit\"\n        disabled={isEqual(modifiedData, initialData)}\n      >\n        {formatMessage({\n          id: 'global.save',\n          defaultMessage: 'Save',\n        })}\n      </Button>\n    </Flex>\n  );\n\n  const secondaryAction = isInDevelopmentMode && !isFromPlugin && !isCreatingFirstContentType && (\n    <Button startIcon={<Pencil />} variant=\"tertiary\" onClick={onEdit}>\n      {formatMessage({\n        id: 'app.utils.edit',\n        defaultMessage: 'Edit',\n      })}\n    </Button>\n  );\n\n  return (\n    <>\n      <LayoutsHeaderCustom\n        id=\"title\"\n        primaryAction={primaryAction}\n        secondaryAction={secondaryAction}\n        title={upperFirst(label)}\n        subtitle={formatMessage({\n          id: getTrad('listView.headerLayout.description'),\n          defaultMessage: 'Build the data architecture of your content',\n        })}\n        navigationAction={<BackButton />}\n      />\n      <Layouts.Content>\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n          <Flex justifyContent=\"flex-end\">\n            <Flex gap={2}>\n              <LinkToCMSettingsView\n                key=\"link-to-cm-settings-view\"\n                targetUid={targetUid}\n                isInContentTypeView={isInContentTypeView}\n                contentTypeKind={contentTypeKind}\n                disabled={isCreatingFirstContentType || isTemporary}\n              />\n            </Flex>\n          </Flex>\n          <Box background=\"neutral0\" shadow=\"filterShadow\" hasRadius>\n            <List\n              items={attributes}\n              customRowComponent={(props) => <ListRow {...props} onClick={handleClickEditField} />}\n              addComponentToDZ={handleClickAddComponentToDZ}\n              targetUid={targetUid}\n              editTarget={forTarget}\n              isMain\n            />\n          </Box>\n        </Flex>\n      </Layouts.Content>\n    </>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default ListView;\n"],
  "mappings": "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",
  "names": ["BoxWrapper", "styled", "Box", "theme", "colors", "neutral150", "spaces", "neutral600", "Tr", "tr", "$isFromDynamicZone", "$isChildOfDynamicZone", "primary200", "ComponentList", "customRowComponent", "component", "isFromDynamicZone", "isNestedInDZComponent", "firstLoopComponentUid", "modifiedData", "useDataManager", "schema", "attributes", "get", "_jsx", "className", "td", "colSpan", "List", "items", "targetUid", "editTarget", "isSub", "secondLoopComponentUid", "ComponentIcon", "isActive", "icon", "Icon", "COMPONENT_ICONS", "dashboard", "Flex", "alignItems", "background", "justifyContent", "height", "width", "borderRadius", "CloseButton", "primary600", "ComponentBox", "neutral200", "neutral100", "primary100", "ComponentCard", "dzName", "index", "isInDevelopmentMode", "onClick", "removeComponentFromDynamicZone", "displayName", "onClose", "e", "stopPropagation", "_jsxs", "direction", "paddingLeft", "paddingRight", "shrink", "role", "tabIndex", "cursor", "aria-selected", "aria-controls", "id", "marginTop", "maxWidth", "Typography", "variant", "fontWeight", "ellipsis", "tag", "Cross", "StyledAddIcon", "Plus", "FixedBox", "ScrollableStack", "ComponentContentBox", "ComponentStack", "DynamicZoneList", "components", "addComponent", "name", "activeTab", "setActiveTab", "useState", "formatMessage", "useIntl", "toggle", "tab", "handleClickAdd", "gap", "button", "type", "textColor", "getTrad", "defaultMessage", "map", "props", "aria-labelledby", "style", "display", "table", "tbody", "_createElement", "key", "IconBox", "color", "ButtonBox", "NestedTFooter", "children", "paddingBottom", "paddingTop", "aria-hidden", "addComponentToDZ", "isMain", "trackUsage", "useTracking", "isInContentTypeView", "onOpenModalAddField", "useFormModalNavigation", "onClickAddField", "forTarget", "Table", "colCount", "rowCount", "Thead", "Th", "Tbody", "Td", "EmptyStateLayout", "content", "hasRadius", "EmptyDocuments", "length", "action", "Button", "size", "startIcon", "overflowX", "thead", "th", "item", "CustomRow", "Fragment", "TFooter", "contentType", "kind", "StyledBox", "Svg", "svg", "Curve", "viewBox", "fill", "xmlns", "path", "fillRule", "clipRule", "d", "DisplayedType", "customField", "repeatable", "readableType", "includes", "UpperFirst", "_Fragment", "upperFirst", "ListRow", "memo", "configurable", "relation", "target", "contentTypes", "removeAttribute", "isMorph", "ico", "contentTypeFriendlyName", "isPluginContentType", "src", "handleClick", "attrType", "loopNumber", "undefined", "position", "AttributeIcon", "span", "fontStyle", "IconButton", "label", "Pencil", "Trash", "Lock", "getAttributeDisplayedType", "displayedType", "cmPermissions", "collectionTypesConfigurations", "subject", "componentsConfigurations", "singleTypesConfigurations", "getPermission", "contentTypeKind", "LinkToCMSettingsView", "disabled", "navigate", "useNavigate", "permissionsToApply", "isLoading", "allowedActions", "useRBAC", "viewConfig", "canConfigureView", "canConfigureLayout", "ListPlus", "LayoutsHeaderCustom", "Layouts", "Header", "ListView", "initialData", "submitData", "match", "useMatch", "onOpenModalAddComponentsToDZ", "onOpenModalEditField", "onOpenModalEditSchema", "onOpenModalEditCustomField", "firstMainDataPath", "mainDataTypeAttributesPath", "isTemporary", "isFromPlugin", "has", "hasModelBeenModified", "isEqual", "handleClickAddComponentToDZ", "dynamicZoneTarget", "handleClickEditField", "attributeName", "attributeType", "step", "customFieldUid", "isCreatingFirstContentType", "params", "currentUID", "onEdit", "modalType", "usePrompt", "when", "message", "primaryAction", "marginLeft", "minWidth", "Check", "secondaryAction", "title", "subtitle", "navigationAction", "BackButton", "Content", "shadow"]
}

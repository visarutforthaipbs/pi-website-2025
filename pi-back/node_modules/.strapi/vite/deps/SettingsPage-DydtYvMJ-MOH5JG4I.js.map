{
  "version": 3,
  "sources": ["../../../@strapi/i18n/admin/src/utils/baseQuery.ts", "../../../@strapi/i18n/admin/src/components/CreateLocale.tsx", "../../../@strapi/i18n/admin/src/components/DeleteLocale.tsx", "../../../@strapi/i18n/admin/src/components/EditLocale.tsx", "../../../@strapi/i18n/admin/src/components/LocaleTable.tsx", "../../../@strapi/i18n/admin/src/pages/SettingsPage.tsx"],
  "sourcesContent": ["import { SerializedError } from '@reduxjs/toolkit';\nimport { type ApiError, type UnknownApiError } from '@strapi/admin/strapi-admin';\n\ntype BaseQueryError = ApiError | UnknownApiError | SerializedError;\n\nconst isBaseQueryError = (error: BaseQueryError): error is ApiError | UnknownApiError => {\n  return error.name !== undefined;\n};\n\nexport { isBaseQueryError };\n", "import * as React from 'react';\n\nimport {\n  Form,\n  type InputProps,\n  InputRenderer,\n  useField,\n  type FormHelpers,\n  useForm,\n  useAPIErrorHandler,\n  useNotification,\n  useAuth,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Button,\n  ButtonProps,\n  Divider,\n  Field,\n  Flex,\n  Grid,\n  Modal,\n  SingleSelect,\n  SingleSelectOption,\n  Tabs,\n  Typography,\n  useId,\n} from '@strapi/design-system';\nimport { Check, Plus } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport * as yup from 'yup';\n\nimport { CreateLocale } from '../../../shared/contracts/locales';\nimport { useCreateLocaleMutation, useGetDefaultLocalesQuery } from '../services/locales';\nimport { isBaseQueryError } from '../utils/baseQuery';\nimport { getTranslation } from '../utils/getTranslation';\n\n/* -------------------------------------------------------------------------------------------------\n * CreateLocale\n * -----------------------------------------------------------------------------------------------*/\n\ninterface CreateLocaleProps extends Pick<ButtonProps, 'disabled' | 'variant'> {}\n\nconst CreateLocale = ({ disabled, variant = 'default' }: CreateLocaleProps) => {\n  const { formatMessage } = useIntl();\n  const [visible, setVisible] = React.useState(false);\n\n  return (\n    <Modal.Root open={visible} onOpenChange={setVisible}>\n      <Modal.Trigger>\n        <Button\n          variant={variant}\n          disabled={disabled}\n          startIcon={<Plus />}\n          onClick={() => setVisible(true)}\n          size=\"S\"\n        >\n          {formatMessage({\n            id: getTranslation('Settings.list.actions.add'),\n            defaultMessage: 'Add new locale',\n          })}\n        </Button>\n      </Modal.Trigger>\n      <CreateModal onClose={() => setVisible(false)} />\n    </Modal.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * CreateModal\n * -----------------------------------------------------------------------------------------------*/\n\nconst LOCALE_SCHEMA = yup.object().shape({\n  code: yup.string().nullable().required({\n    id: 'Settings.locales.modal.create.code.error',\n    defaultMessage: 'Please select a locale',\n  }),\n  name: yup\n    .string()\n    .nullable()\n    .max(50, {\n      id: 'Settings.locales.modal.create.name.error.min',\n      defaultMessage: 'The locale display name can only be less than 50 characters.',\n    })\n    .required({\n      id: 'Settings.locales.modal.create.name.error.required',\n      defaultMessage: 'Please give the locale a display name',\n    }),\n  isDefault: yup.boolean(),\n});\n\ntype FormValues = CreateLocale.Request['body'];\n\nconst initialFormValues = {\n  code: '',\n  name: '',\n  isDefault: false,\n} satisfies FormValues;\n\ntype ModalCreateProps = {\n  onClose: () => void;\n};\n\nconst CreateModal = ({ onClose }: ModalCreateProps) => {\n  const titleId = useId();\n  const { toggleNotification } = useNotification();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n  const [createLocale] = useCreateLocaleMutation();\n  const { formatMessage } = useIntl();\n  const refetchPermissions = useAuth('CreateModal', (state) => state.refetchPermissions);\n\n  const handleSubmit = async (values: FormValues, helpers: FormHelpers<FormValues>) => {\n    try {\n      const res = await createLocale(values);\n\n      if ('error' in res) {\n        if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n          helpers.setErrors(formatValidationErrors(res.error));\n        } else {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n        }\n\n        return;\n      }\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: getTranslation('Settings.locales.modal.create.success'),\n          defaultMessage: 'Created locale',\n        }),\n      });\n\n      refetchPermissions();\n      onClose();\n    } catch (err) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'An error occurred, please try again',\n        }),\n      });\n    }\n  };\n\n  return (\n    <Modal.Content>\n      <Form\n        method=\"POST\"\n        initialValues={initialFormValues}\n        validationSchema={LOCALE_SCHEMA}\n        onSubmit={handleSubmit}\n      >\n        <Modal.Header>\n          <Modal.Title>\n            {formatMessage({\n              id: getTranslation('Settings.list.actions.add'),\n              defaultMessage: 'Add new locale',\n            })}\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Tabs.Root variant=\"simple\" defaultValue=\"basic\">\n            <Flex justifyContent=\"space-between\">\n              <Typography tag=\"h2\" variant=\"beta\" id={titleId}>\n                {formatMessage({\n                  id: getTranslation('Settings.locales.modal.title'),\n                  defaultMessage: 'Configuration',\n                })}\n              </Typography>\n              <Tabs.List aria-labelledby={titleId}>\n                <Tabs.Trigger value=\"basic\">\n                  {formatMessage({\n                    id: getTranslation('Settings.locales.modal.base'),\n                    defaultMessage: 'Basic settings',\n                  })}\n                </Tabs.Trigger>\n                <Tabs.Trigger value=\"advanced\">\n                  {formatMessage({\n                    id: getTranslation('Settings.locales.modal.advanced'),\n                    defaultMessage: 'Advanced settings',\n                  })}\n                </Tabs.Trigger>\n              </Tabs.List>\n            </Flex>\n\n            <Divider />\n\n            <Box paddingTop={7} paddingBottom={7}>\n              <Tabs.Content value=\"basic\">\n                <BaseForm />\n              </Tabs.Content>\n              <Tabs.Content value=\"advanced\">\n                <AdvancedForm />\n              </Tabs.Content>\n            </Box>\n          </Tabs.Root>\n        </Modal.Body>\n        <Modal.Footer>\n          <Modal.Close>\n            <Button variant=\"tertiary\">\n              {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n            </Button>\n          </Modal.Close>\n          <SubmitButton />\n        </Modal.Footer>\n      </Form>\n    </Modal.Content>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * SubmitButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst SubmitButton = () => {\n  const { formatMessage } = useIntl();\n  const isSubmitting = useForm('SubmitButton', (state) => state.isSubmitting);\n  const modified = useForm('SubmitButton', (state) => state.modified);\n\n  return (\n    <Button type=\"submit\" startIcon={<Check />} disabled={isSubmitting || !modified}>\n      {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n    </Button>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * BaseForm\n * -----------------------------------------------------------------------------------------------*/\n\ninterface BaseFormProps {\n  mode?: 'create' | 'edit';\n}\n\nconst BaseForm = ({ mode = 'create' }: BaseFormProps) => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const { data: defaultLocales, error } = useGetDefaultLocalesQuery();\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  if (!Array.isArray(defaultLocales)) {\n    return null;\n  }\n\n  const options = defaultLocales.map((locale) => ({\n    label: locale.name,\n    value: locale.code,\n  }));\n\n  const translatedForm = [\n    {\n      disabled: mode !== 'create',\n      label: {\n        id: getTranslation('Settings.locales.modal.create.code.label'),\n        defaultMessage: 'Locales',\n      },\n      name: 'code',\n      options,\n      placeholder: {\n        id: 'components.placeholder.select',\n        defaultMessage: 'Select',\n      },\n      required: true,\n      size: 6,\n      type: 'enumeration' as const,\n    },\n    {\n      hint: {\n        id: getTranslation('Settings.locales.modal.create.name.label.description'),\n        defaultMessage: 'Locale will be displayed under that name in the administration panel',\n      },\n      label: {\n        id: getTranslation('Settings.locales.modal.create.name.label'),\n        defaultMessage: 'Locale display name',\n      },\n      name: 'name',\n      required: true,\n      size: 6,\n      type: 'string' as const,\n    },\n  ].map((field) => ({\n    ...field,\n    hint: field.hint ? formatMessage(field.hint) : undefined,\n    label: formatMessage(field.label),\n    placeholder: field.placeholder ? formatMessage(field.placeholder) : undefined,\n  }));\n\n  return (\n    <Grid.Root gap={4}>\n      {translatedForm.map(({ size, ...field }) => (\n        <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n          <FormRenderer {...field} />\n        </Grid.Item>\n      ))}\n    </Grid.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * AdvancedForm\n * -----------------------------------------------------------------------------------------------*/\n\ntype AdvancedFormProps = {\n  isDefaultLocale?: boolean;\n};\n\nconst AdvancedForm = ({ isDefaultLocale }: AdvancedFormProps) => {\n  const { formatMessage } = useIntl();\n\n  const form = [\n    {\n      disabled: isDefaultLocale,\n      hint: {\n        id: getTranslation('Settings.locales.modal.advanced.setAsDefault.hint'),\n        defaultMessage: 'One default locale is required, change it by selecting another one',\n      },\n      label: {\n        id: getTranslation('Settings.locales.modal.advanced.setAsDefault'),\n        defaultMessage: 'Set as default locale',\n      },\n      name: 'isDefault',\n      size: 6,\n      type: 'boolean' as const,\n    },\n  ].map((field) => ({\n    ...field,\n    hint: field.hint ? formatMessage(field.hint) : undefined,\n    label: formatMessage(field.label),\n  })) satisfies InputProps[];\n\n  return (\n    <Grid.Root gap={4}>\n      {form.map(({ size, ...field }) => (\n        <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n          <FormRenderer {...field} />\n        </Grid.Item>\n      ))}\n    </Grid.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * FormRenderer\n * -----------------------------------------------------------------------------------------------*/\n\nconst FormRenderer = (field: InputProps) => {\n  switch (field.type) {\n    /**\n     * This will override the default input renderer\n     * choice for `enumeration`.\n     */\n    case 'enumeration':\n      return <EnumerationInput {...field} />;\n    default:\n      return <InputRenderer {...field} />;\n  }\n};\n\nconst EnumerationInput = ({\n  disabled,\n  hint,\n  label,\n  name,\n  options,\n  placeholder,\n  required,\n}: Extract<InputProps, { type: 'enumeration' }>) => {\n  const { value, error, onChange } = useField(name);\n  const { data: defaultLocales = [] } = useGetDefaultLocalesQuery();\n\n  const handleChange = (value: string) => {\n    if (Array.isArray(defaultLocales)) {\n      // We know it exists because the options are created from the list of default locales\n      const locale = defaultLocales.find((locale) => locale.code === value)!;\n\n      onChange(name, value);\n      // This lets us automatically fill the name field with the locale name\n      onChange('name', locale.name);\n    } else {\n      onChange(name, value);\n    }\n  };\n\n  return (\n    <Field.Root error={error} hint={hint} name={name} required={required}>\n      <Field.Label>{label}</Field.Label>\n      <SingleSelect\n        disabled={disabled}\n        // @ts-expect-error – This will dissapear when the DS removes support for numbers to be returned by SingleSelect.\n        onChange={handleChange}\n        placeholder={placeholder}\n        value={value}\n      >\n        {options.map((option) => (\n          <SingleSelectOption value={option.value} key={option.value}>\n            {option.label}\n          </SingleSelectOption>\n        ))}\n      </SingleSelect>\n      <Field.Error />\n      <Field.Hint />\n    </Field.Root>\n  );\n};\n\nexport { CreateLocale, BaseForm, AdvancedForm, SubmitButton, LOCALE_SCHEMA };\n", "import * as React from 'react';\n\nimport { ConfirmDialog, useAPIErrorHandler, useNotification } from '@strapi/admin/strapi-admin';\nimport { Dialog, IconButton } from '@strapi/design-system';\nimport { Trash } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { useDeleteLocaleMutation } from '../services/locales';\nimport { getTranslation } from '../utils/getTranslation';\n\nimport type { Locale } from '../../../shared/contracts/locales';\n\n/* -------------------------------------------------------------------------------------------------\n * DeleteLocale\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DeleteLocaleProps extends Locale {}\n\nconst DeleteLocale = ({ id, name }: DeleteLocaleProps) => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const [visible, setVisible] = React.useState(false);\n\n  const [deleteLocale] = useDeleteLocaleMutation();\n  const handleConfirm = async () => {\n    try {\n      const res = await deleteLocale(id);\n\n      if ('error' in res) {\n        toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n        return;\n      }\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: getTranslation('Settings.locales.modal.delete.success'),\n          defaultMessage: 'Deleted locale',\n        }),\n      });\n\n      setVisible(false);\n    } catch (err) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'An error occurred, please try again',\n        }),\n      });\n    }\n  };\n\n  return (\n    <Dialog.Root open={visible} onOpenChange={setVisible}>\n      <Dialog.Trigger>\n        <IconButton\n          onClick={() => setVisible(true)}\n          label={formatMessage(\n            {\n              id: getTranslation('Settings.list.actions.delete'),\n              defaultMessage: 'Delete {name} locale',\n            },\n            {\n              name,\n            }\n          )}\n          variant=\"ghost\"\n        >\n          <Trash />\n        </IconButton>\n      </Dialog.Trigger>\n      <ConfirmDialog onConfirm={handleConfirm} />\n    </Dialog.Root>\n  );\n};\n\nexport { DeleteLocale };\n", "import * as React from 'react';\n\nimport {\n  useNotification,\n  useAPIErrorHandler,\n  Form,\n  FormHelpers,\n  useAuth,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Button,\n  Divider,\n  Flex,\n  IconButton,\n  Modal,\n  Tabs,\n  Typography,\n  useId,\n} from '@strapi/design-system';\nimport { Pencil } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { Locale, UpdateLocale } from '../../../shared/contracts/locales';\nimport { useUpdateLocaleMutation } from '../services/locales';\nimport { isBaseQueryError } from '../utils/baseQuery';\nimport { getTranslation } from '../utils/getTranslation';\n\nimport { AdvancedForm, BaseForm, LOCALE_SCHEMA, SubmitButton } from './CreateLocale';\n\n/* -------------------------------------------------------------------------------------------------\n * EditLocale\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EditLocaleProps extends Omit<EditModalProps, 'open' | 'onOpenChange'> {}\n\nconst EditLocale = (props: EditLocaleProps) => {\n  const { formatMessage } = useIntl();\n  const [visible, setVisible] = React.useState(false);\n\n  return (\n    <>\n      <IconButton\n        onClick={() => setVisible(true)}\n        label={formatMessage(\n          {\n            id: getTranslation('Settings.list.actions.edit'),\n            defaultMessage: 'Edit {name} locale',\n          },\n          {\n            name: props.name,\n          }\n        )}\n        variant=\"ghost\"\n      >\n        <Pencil />\n      </IconButton>\n      <EditModal {...props} open={visible} onOpenChange={setVisible} />\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * EditModal\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EditModalProps extends Pick<Locale, 'id' | 'isDefault' | 'name' | 'code'> {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\ntype FormValues = UpdateLocale.Request['body'] & { code: string };\n\n/**\n * @internal\n * @description Exported to be used when someone clicks on a table row.\n */\nconst EditModal = ({ id, code, isDefault, name, open, onOpenChange }: EditModalProps) => {\n  const { toggleNotification } = useNotification();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n  const refetchPermissions = useAuth('EditModal', (state) => state.refetchPermissions);\n  const { formatMessage } = useIntl();\n  const titleId = useId();\n\n  const [updateLocale] = useUpdateLocaleMutation();\n  const handleSubmit = async (\n    { code: _code, ...data }: FormValues,\n    helpers: FormHelpers<FormValues>\n  ) => {\n    try {\n      /**\n       * We don't need to send the code, because the\n       * code can never be changed.\n       */\n      const res = await updateLocale({\n        id,\n        ...data,\n      });\n\n      if ('error' in res) {\n        if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n          helpers.setErrors(formatValidationErrors(res.error));\n        } else {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n        }\n\n        return;\n      }\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: getTranslation('Settings.locales.modal.edit.success'),\n          defaultMessage: 'Updated locale',\n        }),\n      });\n\n      refetchPermissions();\n      onOpenChange(false);\n    } catch (err) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'An error occurred, please try again',\n        }),\n      });\n    }\n  };\n\n  return (\n    <Modal.Root open={open} onOpenChange={onOpenChange}>\n      <Modal.Content>\n        <Form\n          method=\"PUT\"\n          onSubmit={handleSubmit}\n          initialValues={{\n            code,\n            name,\n            isDefault,\n          }}\n          validationSchema={LOCALE_SCHEMA}\n        >\n          <Modal.Header>\n            <Modal.Title>\n              {formatMessage(\n                {\n                  id: getTranslation('Settings.list.actions.edit'),\n                  defaultMessage: 'Edit a locale',\n                },\n                {\n                  name,\n                }\n              )}\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tabs.Root variant=\"simple\" defaultValue=\"basic\">\n              <Flex justifyContent=\"space-between\">\n                <Typography tag=\"h2\" variant=\"beta\" id={titleId}>\n                  {formatMessage({\n                    id: getTranslation('Settings.locales.modal.title'),\n                    defaultMessage: 'Configuration',\n                  })}\n                </Typography>\n                <Tabs.List aria-labelledby={titleId}>\n                  <Tabs.Trigger value=\"basic\">\n                    {formatMessage({\n                      id: getTranslation('Settings.locales.modal.base'),\n                      defaultMessage: 'Basic settings',\n                    })}\n                  </Tabs.Trigger>\n                  <Tabs.Trigger value=\"advanced\">\n                    {formatMessage({\n                      id: getTranslation('Settings.locales.modal.advanced'),\n                      defaultMessage: 'Advanced settings',\n                    })}\n                  </Tabs.Trigger>\n                </Tabs.List>\n              </Flex>\n              <Divider />\n              <Box paddingTop={7} paddingBottom={7}>\n                <Tabs.Content value=\"basic\">\n                  <BaseForm mode=\"edit\" />\n                </Tabs.Content>\n                <Tabs.Content value=\"advanced\">\n                  <AdvancedForm isDefaultLocale={isDefault} />\n                </Tabs.Content>\n              </Box>\n            </Tabs.Root>\n          </Modal.Body>\n          <Modal.Footer>\n            <Modal.Close>\n              <Button variant=\"tertiary\">\n                {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n              </Button>\n            </Modal.Close>\n            <SubmitButton />\n          </Modal.Footer>\n        </Form>\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\nexport { EditLocale, EditModal };\n", "import * as React from 'react';\n\nimport {\n  Flex,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  Typography,\n  VisuallyHidden,\n} from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { getTranslation } from '../utils/getTranslation';\n\nimport { DeleteLocale } from './DeleteLocale';\nimport { EditLocale, EditModal } from './EditLocale';\n\nimport type { Locale } from '../../../shared/contracts/locales';\n\n/* -------------------------------------------------------------------------------------------------\n * LocaleTable\n * -----------------------------------------------------------------------------------------------*/\n\ntype LocaleTableProps = {\n  locales?: Locale[];\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  onDeleteLocale?: (locale: Locale) => void;\n  onEditLocale?: (locale: Locale) => void;\n};\n\nconst LocaleTable = ({ locales = [], canDelete, canUpdate }: LocaleTableProps) => {\n  const [editLocaleId, setEditLocaleId] = React.useState<Locale['id']>();\n  const { formatMessage } = useIntl();\n\n  const handleClick = (localeId: Locale['id']) => () => {\n    if (canUpdate) {\n      setEditLocaleId(localeId);\n    }\n  };\n\n  return (\n    <Table colCount={4} rowCount={locales.length + 1}>\n      <Thead>\n        <Tr>\n          <Th>\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\n              {formatMessage({\n                id: getTranslation('Settings.locales.row.id'),\n                defaultMessage: 'ID',\n              })}\n            </Typography>\n          </Th>\n          <Th>\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\n              {formatMessage({\n                id: getTranslation('Settings.locales.row.displayName'),\n                defaultMessage: 'Display name',\n              })}\n            </Typography>\n          </Th>\n          <Th>\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\n              {formatMessage({\n                id: getTranslation('Settings.locales.row.default-locale'),\n                defaultMessage: 'Default locale',\n              })}\n            </Typography>\n          </Th>\n          <Th>\n            <VisuallyHidden>Actions</VisuallyHidden>\n          </Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {locales.map((locale) => (\n          <React.Fragment key={locale.id}>\n            <Tr\n              onClick={handleClick(locale.id)}\n              style={{ cursor: canUpdate ? 'pointer' : 'default' }}\n            >\n              <Td>\n                <Typography textColor=\"neutral800\">{locale.id}</Typography>\n              </Td>\n              <Td>\n                <Typography textColor=\"neutral800\">{locale.name}</Typography>\n              </Td>\n              <Td>\n                <Typography textColor=\"neutral800\">\n                  {locale.isDefault\n                    ? formatMessage({\n                        id: getTranslation('Settings.locales.default'),\n                        defaultMessage: 'Default',\n                      })\n                    : null}\n                </Typography>\n              </Td>\n              <Td>\n                <Flex gap={1} justifyContent=\"flex-end\" onClick={(e) => e.stopPropagation()}>\n                  {canUpdate && <EditLocale {...locale} />}\n                  {canDelete && !locale.isDefault && <DeleteLocale {...locale} />}\n                </Flex>\n              </Td>\n            </Tr>\n            <EditModal\n              {...locale}\n              onOpenChange={() => setEditLocaleId(undefined)}\n              open={editLocaleId === locale.id}\n            />\n          </React.Fragment>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\nexport { LocaleTable };\nexport type { LocaleTableProps };\n", "import * as React from 'react';\n\nimport {\n  Page,\n  useAPIErrorHandler,\n  useNotification,\n  useRBAC,\n  Layouts,\n} from '@strapi/admin/strapi-admin';\nimport { EmptyStateLayout } from '@strapi/design-system';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport { useIntl } from 'react-intl';\n\nimport { CreateLocale } from '../components/CreateLocale';\nimport { LocaleTable } from '../components/LocaleTable';\nimport { PERMISSIONS } from '../constants';\nimport { useGetLocalesQuery } from '../services/locales';\nimport { getTranslation } from '../utils/getTranslation';\n\nconst SettingsPage = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const { data: locales, isLoading: isLoadingLocales, error } = useGetLocalesQuery();\n  const {\n    isLoading: isLoadingRBAC,\n    allowedActions: { canUpdate, canCreate, canDelete },\n  } = useRBAC(PERMISSIONS);\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  const isLoading = isLoadingLocales || isLoadingRBAC;\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  if (error || !Array.isArray(locales)) {\n    return <Page.Error />;\n  }\n\n  return (\n    <Page.Main tabIndex={-1}>\n      <Layouts.Header\n        primaryAction={<CreateLocale disabled={!canCreate} />}\n        title={formatMessage({\n          id: getTranslation('plugin.name'),\n          defaultMessage: 'Internationalization',\n        })}\n        subtitle={formatMessage({\n          id: getTranslation('Settings.list.description'),\n          defaultMessage: 'Configure the settings',\n        })}\n      />\n      <Layouts.Content>\n        {locales.length > 0 ? (\n          <LocaleTable locales={locales} canDelete={canDelete} canUpdate={canUpdate} />\n        ) : (\n          <EmptyStateLayout\n            icon={<EmptyDocuments width={undefined} height={undefined} />}\n            content={formatMessage({\n              id: getTranslation('Settings.list.empty.title'),\n              defaultMessage: 'There are no locales',\n            })}\n            action={<CreateLocale disabled={!canCreate} variant=\"secondary\" />}\n          />\n        )}\n      </Layouts.Content>\n    </Page.Main>\n  );\n};\n\nconst ProtectedSettingsPage = () => {\n  return (\n    <Page.Protect permissions={PERMISSIONS.read}>\n      <SettingsPage />\n    </Page.Protect>\n  );\n};\n\nexport { ProtectedSettingsPage, SettingsPage };\n"],
  "mappings": "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",
  "names": ["isBaseQueryError", "error", "name", "undefined", "CreateLocale", "disabled", "variant", "formatMessage", "useIntl", "visible", "setVisible", "useState", "_jsxs", "Modal", "Root", "open", "onOpenChange", "_jsx", "Trigger", "Button", "startIcon", "Plus", "onClick", "size", "id", "getTranslation", "defaultMessage", "CreateModal", "onClose", "LOCALE_SCHEMA", "object", "shape", "code", "string", "nullable", "required", "max", "isDefault", "boolean", "initialFormValues", "titleId", "useId", "toggleNotification", "useNotification", "_unstableFormatAPIError", "formatAPIError", "_unstableFormatValidationErrors", "formatValidationErrors", "useAPIErrorHandler", "createLocale", "useCreateLocaleMutation", "refetchPermissions", "useAuth", "state", "handleSubmit", "values", "helpers", "res", "setErrors", "type", "message", "err", "Content", "Form", "method", "initialValues", "validationSchema", "onSubmit", "Header", "Title", "Body", "Tabs", "defaultValue", "Flex", "justifyContent", "Typography", "tag", "List", "aria-labelledby", "value", "Divider", "Box", "paddingTop", "paddingBottom", "BaseForm", "AdvancedForm", "Footer", "Close", "SubmitButton", "isSubmitting", "useForm", "modified", "Check", "mode", "data", "defaultLocales", "useGetDefaultLocalesQuery", "React", "useEffect", "Array", "isArray", "options", "map", "locale", "label", "translatedForm", "placeholder", "hint", "field", "Grid", "gap", "Item", "col", "direction", "alignItems", "FormRenderer", "isDefaultLocale", "form", "EnumerationInput", "InputRenderer", "onChange", "useField", "handleChange", "find", "Field", "Label", "SingleSelect", "option", "SingleSelectOption", "Error", "Hint", "DeleteLocale", "deleteLocale", "useDeleteLocaleMutation", "handleConfirm", "Dialog", "IconButton", "Trash", "ConfirmDialog", "onConfirm", "EditLocale", "props", "_Fragment", "Pencil", "EditModal", "updateLocale", "useUpdateLocaleMutation", "_code", "LocaleTable", "locales", "canDelete", "canUpdate", "editLocaleId", "setEditLocaleId", "handleClick", "localeId", "Table", "colCount", "rowCount", "length", "Thead", "Tr", "Th", "textColor", "VisuallyHidden", "Tbody", "Fragment", "style", "cursor", "Td", "e", "stopPropagation", "SettingsPage", "isLoading", "isLoadingLocales", "useGetLocalesQuery", "isLoadingRBAC", "allowedActions", "canCreate", "useRBAC", "PERMISSIONS", "Page", "Loading", "Main", "tabIndex", "Layouts", "primaryAction", "title", "subtitle", "EmptyStateLayout", "icon", "EmptyDocuments", "width", "height", "content", "action", "ProtectedSettingsPage", "Protect", "permissions", "read"]
}

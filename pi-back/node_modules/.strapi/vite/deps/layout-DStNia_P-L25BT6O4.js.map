{
  "version": 3,
  "sources": ["../../../@strapi/content-manager/admin/src/components/DragLayer.tsx", "../../../@strapi/content-manager/admin/src/components/DragPreviews/ComponentDragPreview.tsx", "../../../@strapi/content-manager/admin/src/components/DragPreviews/RelationDragPreview.tsx", "../../../@strapi/content-manager/admin/src/components/LeftMenu.tsx", "../../../@strapi/content-manager/admin/src/hooks/useContentManagerInitData.ts", "../../../@strapi/content-manager/admin/src/layout.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Box } from '@strapi/design-system';\nimport { DragLayerMonitor, XYCoord, useDragLayer } from 'react-dnd';\n\nfunction getStyle(\n  initialOffset: XYCoord | null,\n  currentOffset: XYCoord | null,\n  mouseOffset: XYCoord | null\n) {\n  if (!initialOffset || !currentOffset || !mouseOffset) {\n    return { display: 'none' };\n  }\n\n  const { x, y } = mouseOffset;\n\n  return {\n    transform: `translate(${x}px, ${y}px)`,\n  };\n}\n\nexport interface DragLayerProps {\n  renderItem: (item: {\n    /**\n     * TODO: it'd be great if we could make this a union where the type infers the item.\n     */\n    item: any;\n    type: ReturnType<DragLayerMonitor['getItemType']>;\n  }) => React.ReactNode;\n}\n\nconst DragLayer = ({ renderItem }: DragLayerProps) => {\n  const { itemType, isDragging, item, initialOffset, currentOffset, mouseOffset } = useDragLayer(\n    (monitor) => ({\n      item: monitor.getItem(),\n      itemType: monitor.getItemType(),\n      initialOffset: monitor.getInitialSourceClientOffset(),\n      currentOffset: monitor.getSourceClientOffset(),\n      isDragging: monitor.isDragging(),\n      mouseOffset: monitor.getClientOffset(),\n    })\n  );\n\n  if (!isDragging) {\n    return null;\n  }\n\n  return (\n    <Box\n      height=\"100%\"\n      left={0}\n      position=\"fixed\"\n      pointerEvents=\"none\"\n      top={0}\n      zIndex={100}\n      width=\"100%\"\n    >\n      <Box style={getStyle(initialOffset, currentOffset, mouseOffset)}>\n        {renderItem({ type: itemType, item })}\n      </Box>\n    </Box>\n  );\n};\n\nexport { DragLayer };\n", "import { Flex, FlexComponent, IconButton, Typography } from '@strapi/design-system';\nimport { CaretDown, Drag, Trash } from '@strapi/icons';\nimport { styled } from 'styled-components';\n\ninterface ComponentDragPreviewProps {\n  displayedValue: string;\n}\n\nconst ComponentDragPreview = ({ displayedValue }: ComponentDragPreviewProps) => {\n  return (\n    <Flex\n      background=\"neutral0\"\n      borderColor=\"neutral200\"\n      justifyContent=\"space-between\"\n      gap={3}\n      padding={3}\n      width=\"30rem\"\n    >\n      <ToggleButton type=\"button\">\n        <Flex gap={6}>\n          <DropdownIconWrapper\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            background=\"neutral200\"\n            height=\"3.2rem\"\n            width=\"3.2rem\"\n          >\n            <CaretDown />\n          </DropdownIconWrapper>\n\n          <Flex maxWidth=\"15rem\">\n            <Typography textColor=\"neutral700\" ellipsis>\n              {displayedValue}\n            </Typography>\n          </Flex>\n        </Flex>\n      </ToggleButton>\n\n      <Flex gap={2}>\n        <IconButton withTooltip={false} label=\"\" variant=\"ghost\">\n          <Trash />\n        </IconButton>\n\n        <IconButton withTooltip={false} label=\"\" variant=\"ghost\">\n          <Drag />\n        </IconButton>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst DropdownIconWrapper = styled<FlexComponent>(Flex)`\n  border-radius: 50%;\n\n  svg {\n    height: 0.6rem;\n    width: 1.1rem;\n    > path {\n      fill: ${({ theme }) => theme.colors.neutral600};\n    }\n  }\n`;\n\n// TODO: we shouldn't have to reset a whole button\nconst ToggleButton = styled.button`\n  border: none;\n  background: transparent;\n  display: block;\n  width: 100%;\n  text-align: unset;\n  padding: 0;\n`;\n\nexport { ComponentDragPreview };\nexport type { ComponentDragPreviewProps };\n", "import { Box, Flex, IconButton, Typography } from '@strapi/design-system';\nimport { Cross, Drag } from '@strapi/icons';\n\nimport { DocumentStatus } from '../../pages/EditView/components/DocumentStatus';\nimport {\n  DisconnectButton,\n  LinkEllipsis,\n  FlexWrapper,\n} from '../../pages/EditView/components/FormInputs/Relations';\n\nimport type { Data } from '@strapi/types';\n\ninterface RelationDragPreviewProps {\n  status?: string;\n  displayedValue: string;\n  id: Data.ID;\n  index: number;\n  width: number;\n}\n\nconst RelationDragPreview = ({ status, displayedValue, width }: RelationDragPreviewProps) => {\n  return (\n    <Box style={{ width }}>\n      <Flex\n        paddingTop={2}\n        paddingBottom={2}\n        paddingLeft={2}\n        paddingRight={4}\n        hasRadius\n        borderWidth={1}\n        background=\"neutral0\"\n        borderColor=\"neutral200\"\n        justifyContent=\"space-between\"\n        gap={4}\n      >\n        <FlexWrapper gap={1}>\n          <IconButton withTooltip={false} label=\"\" variant=\"ghost\">\n            <Drag />\n          </IconButton>\n          <Flex width=\"100%\" minWidth={0} justifyContent=\"space-between\">\n            <Box minWidth={0} paddingTop={1} paddingBottom={1} paddingRight={4}>\n              <LinkEllipsis href=\"\">\n                <Typography textColor=\"primary600\" ellipsis>\n                  {displayedValue}\n                </Typography>\n              </LinkEllipsis>\n            </Box>\n            {status ? <DocumentStatus status={status} /> : null}\n          </Flex>\n        </FlexWrapper>\n        <DisconnectButton type=\"button\">\n          <Cross width=\"12px\" />\n        </DisconnectButton>\n      </Flex>\n    </Box>\n  );\n};\n\nexport { RelationDragPreview };\nexport type { RelationDragPreviewProps };\n", "import * as React from 'react';\n\nimport { useQueryParams } from '@strapi/admin/strapi-admin';\nimport {\n  useCollator,\n  useFilter,\n  SubNav,\n  SubNavHeader,\n  SubNavLink,\n  SubNavSection,\n  SubNavSections,\n} from '@strapi/design-system';\nimport { parse, stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { useContentTypeSchema } from '../hooks/useContentTypeSchema';\nimport { useTypedSelector } from '../modules/hooks';\nimport { getTranslation } from '../utils/translations';\n\nimport type { ContentManagerLink } from '../hooks/useContentManagerInitData';\n\nconst SubNavLinkCustom = styled(SubNavLink)`\n  div {\n    width: inherit;\n    span:nth-child(2) {\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      width: inherit;\n    }\n  }\n`;\n\nconst LeftMenu = () => {\n  const [search, setSearch] = React.useState('');\n  const [{ query }] = useQueryParams<{ plugins?: object }>();\n  const { formatMessage, locale } = useIntl();\n\n  const collectionTypeLinks = useTypedSelector(\n    (state) => state['content-manager'].app.collectionTypeLinks\n  );\n\n  const singleTypeLinks = useTypedSelector((state) => state['content-manager'].app.singleTypeLinks);\n  const { schemas } = useContentTypeSchema();\n\n  const { startsWith } = useFilter(locale, {\n    sensitivity: 'base',\n  });\n\n  const formatter = useCollator(locale, {\n    sensitivity: 'base',\n  });\n\n  const menu = React.useMemo(\n    () =>\n      [\n        {\n          id: 'collectionTypes',\n          title: formatMessage({\n            id: getTranslation('components.LeftMenu.collection-types'),\n            defaultMessage: 'Collection Types',\n          }),\n          searchable: true,\n          links: collectionTypeLinks,\n        },\n        {\n          id: 'singleTypes',\n          title: formatMessage({\n            id: getTranslation('components.LeftMenu.single-types'),\n            defaultMessage: 'Single Types',\n          }),\n          searchable: true,\n          links: singleTypeLinks,\n        },\n      ].map((section) => ({\n        ...section,\n        links: section.links\n          /**\n           * Filter by the search value\n           */\n          .filter((link) => startsWith(link.title, search))\n          /**\n           * Sort correctly using the language\n           */\n          .sort((a, b) => formatter.compare(a.title, b.title))\n          /**\n           * Apply the formated strings to the links from react-intl\n           */\n          .map((link) => {\n            return {\n              ...link,\n              title: formatMessage({ id: link.title, defaultMessage: link.title }),\n            };\n          }),\n      })),\n    [collectionTypeLinks, search, singleTypeLinks, startsWith, formatMessage, formatter]\n  );\n\n  const handleClear = () => {\n    setSearch('');\n  };\n\n  const handleChangeSearch = ({ target: { value } }: { target: { value: string } }) => {\n    setSearch(value);\n  };\n\n  const label = formatMessage({\n    id: getTranslation('header.name'),\n    defaultMessage: 'Content Manager',\n  });\n\n  const getPluginsParamsForLink = (link: ContentManagerLink) => {\n    const schema = schemas.find((schema) => schema.uid === link.uid);\n    const isI18nEnabled = Boolean((schema?.pluginOptions?.i18n as any)?.localized);\n\n    // The search params have the i18n plugin\n    if (query.plugins && 'i18n' in query.plugins) {\n      // Prepare removal of i18n from the plugins search params\n      const { i18n, ...restPlugins } = query.plugins;\n\n      // i18n is not enabled, remove it from the plugins search params\n      if (!isI18nEnabled) {\n        return restPlugins;\n      }\n\n      // i18n is enabled, put the plugins search params back together\n      return { i18n, ...restPlugins };\n    }\n\n    return query.plugins;\n  };\n\n  return (\n    <SubNav aria-label={label}>\n      <SubNavHeader\n        label={label}\n        searchable\n        value={search}\n        onChange={handleChangeSearch}\n        onClear={handleClear}\n        searchLabel={formatMessage({\n          id: 'content-manager.components.LeftMenu.Search.label',\n          defaultMessage: 'Search for a content type',\n        })}\n      />\n      <SubNavSections>\n        {menu.map((section) => {\n          return (\n            <SubNavSection\n              key={section.id}\n              label={section.title}\n              badgeLabel={section.links.length.toString()}\n            >\n              {section.links.map((link) => {\n                return (\n                  <SubNavLinkCustom\n                    tag={NavLink}\n                    key={link.uid}\n                    to={{\n                      pathname: link.to,\n                      search: stringify({\n                        ...parse(link.search ?? ''),\n                        plugins: getPluginsParamsForLink(link),\n                      }),\n                    }}\n                    width=\"100%\"\n                  >\n                    {link.title}\n                  </SubNavLinkCustom>\n                );\n              })}\n            </SubNavSection>\n          );\n        })}\n      </SubNavSections>\n    </SubNav>\n  );\n};\n\nexport { LeftMenu };\n", "import { useEffect } from 'react';\n\nimport {\n  useAuth,\n  type Permission,\n  useNotification,\n  useStrapiApp,\n  useAPIErrorHandler,\n} from '@strapi/admin/strapi-admin';\nimport { useNotifyAT } from '@strapi/design-system';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\n\nimport { COLLECTION_TYPES, SINGLE_TYPES } from '../constants/collections';\nimport { HOOKS } from '../constants/hooks';\nimport { AppState, setInitialData } from '../modules/app';\nimport { useTypedDispatch, useTypedSelector } from '../modules/hooks';\nimport { useGetAllContentTypeSettingsQuery } from '../services/contentTypes';\nimport { useGetInitialDataQuery } from '../services/init';\nimport { getTranslation } from '../utils/translations';\n\nimport type { Component } from '../../../shared/contracts/components';\nimport type {\n  ContentType,\n  FindContentTypesSettings,\n} from '../../../shared/contracts/content-types';\nimport type { GetInitData } from '../../../shared/contracts/init';\n\nconst { MUTATE_COLLECTION_TYPES_LINKS, MUTATE_SINGLE_TYPES_LINKS } = HOOKS;\n\ninterface ContentManagerLink {\n  permissions: Permission[];\n  search: string | null;\n  kind: string;\n  title: string;\n  to: string;\n  uid: string;\n  name: string;\n  isDisplayed: boolean;\n}\n\nconst useContentManagerInitData = (): AppState => {\n  const { toggleNotification } = useNotification();\n  const dispatch = useTypedDispatch();\n  const runHookWaterfall = useStrapiApp(\n    'useContentManagerInitData',\n    (state) => state.runHookWaterfall\n  );\n  const { notifyStatus } = useNotifyAT();\n  const { formatMessage } = useIntl();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler(getTranslation);\n  const checkUserHasPermissions = useAuth(\n    'useContentManagerInitData',\n    (state) => state.checkUserHasPermissions\n  );\n\n  const state = useTypedSelector((state) => state['content-manager'].app);\n\n  const initialDataQuery = useGetInitialDataQuery(undefined, {\n    /**\n     * TODO: remove this when the CTB has been refactored to use redux-toolkit-query\n     * and it can invalidate the cache on mutation\n     */\n    refetchOnMountOrArgChange: true,\n  });\n\n  useEffect(() => {\n    if (initialDataQuery.data) {\n      notifyStatus(\n        formatMessage({\n          id: getTranslation('App.schemas.data-loaded'),\n          defaultMessage: 'The schemas have been successfully loaded.',\n        })\n      );\n    }\n  }, [formatMessage, initialDataQuery.data, notifyStatus]);\n\n  useEffect(() => {\n    if (initialDataQuery.error) {\n      toggleNotification({ type: 'danger', message: formatAPIError(initialDataQuery.error) });\n    }\n  }, [formatAPIError, initialDataQuery.error, toggleNotification]);\n\n  const contentTypeSettingsQuery = useGetAllContentTypeSettingsQuery();\n\n  useEffect(() => {\n    if (contentTypeSettingsQuery.error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(contentTypeSettingsQuery.error),\n      });\n    }\n  }, [formatAPIError, contentTypeSettingsQuery.error, toggleNotification]);\n\n  const formatData = async (\n    components: Component[],\n    contentTypes: ContentType[],\n    fieldSizes: GetInitData.Response['data']['fieldSizes'],\n    contentTypeConfigurations: FindContentTypesSettings.Response['data']\n  ) => {\n    /**\n     * We group these by the two types we support. We do with an object because we can use default\n     * values of arrays to make sure we always have an array to manipulate further on if, for example,\n     * a user has not made any single types.\n     *\n     * This means we have to manually add new content types to this hook if we add a new type – but\n     * the safety is worth it.\n     */\n    const { collectionType: collectionTypeLinks, singleType: singleTypeLinks } =\n      contentTypes.reduce<{\n        collectionType: ContentType[];\n        singleType: ContentType[];\n      }>(\n        (acc, model) => {\n          acc[model.kind].push(model);\n          return acc;\n        },\n        {\n          collectionType: [],\n          singleType: [],\n        }\n      );\n    const collectionTypeSectionLinks = generateLinks(\n      collectionTypeLinks,\n      'collectionTypes',\n      contentTypeConfigurations\n    );\n    const singleTypeSectionLinks = generateLinks(singleTypeLinks, 'singleTypes');\n\n    // Collection Types verifications\n    const collectionTypeLinksPermissions = await Promise.all(\n      collectionTypeSectionLinks.map(({ permissions }) => checkUserHasPermissions(permissions))\n    );\n\n    const authorizedCollectionTypeLinks = collectionTypeSectionLinks.filter(\n      (_, index) => collectionTypeLinksPermissions[index].length > 0\n    );\n\n    // Single Types verifications\n    const singleTypeLinksPermissions = await Promise.all(\n      singleTypeSectionLinks.map(({ permissions }) => checkUserHasPermissions(permissions))\n    );\n    const authorizedSingleTypeLinks = singleTypeSectionLinks.filter(\n      (_, index) => singleTypeLinksPermissions[index].length > 0\n    );\n    const { ctLinks } = runHookWaterfall(MUTATE_COLLECTION_TYPES_LINKS, {\n      ctLinks: authorizedCollectionTypeLinks,\n      models: contentTypes,\n    });\n    const { stLinks } = runHookWaterfall(MUTATE_SINGLE_TYPES_LINKS, {\n      stLinks: authorizedSingleTypeLinks,\n      models: contentTypes,\n    });\n\n    dispatch(\n      setInitialData({\n        authorizedCollectionTypeLinks: ctLinks,\n        authorizedSingleTypeLinks: stLinks,\n        components,\n        contentTypeSchemas: contentTypes,\n        fieldSizes,\n      })\n    );\n  };\n\n  useEffect(() => {\n    if (initialDataQuery.data && contentTypeSettingsQuery.data) {\n      formatData(\n        initialDataQuery.data.components,\n        initialDataQuery.data.contentTypes,\n        initialDataQuery.data.fieldSizes,\n        contentTypeSettingsQuery.data\n      );\n    }\n  }, [initialDataQuery.data, contentTypeSettingsQuery.data]);\n\n  return { ...state };\n};\n\nconst generateLinks = (\n  links: ContentType[],\n  type: 'collectionTypes' | 'singleTypes',\n  configurations: FindContentTypesSettings.Response['data'] = []\n) => {\n  return links\n    .filter((link) => link.isDisplayed)\n    .map((link) => {\n      const collectionTypesPermissions = [\n        { action: 'plugin::content-manager.explorer.create', subject: link.uid },\n        { action: 'plugin::content-manager.explorer.read', subject: link.uid },\n      ];\n      const singleTypesPermissions = [\n        { action: 'plugin::content-manager.explorer.read', subject: link.uid },\n      ];\n      const permissions =\n        type === 'collectionTypes' ? collectionTypesPermissions : singleTypesPermissions;\n\n      const currentContentTypeConfig = configurations.find(({ uid }) => uid === link.uid);\n\n      let search = null;\n\n      if (currentContentTypeConfig) {\n        const searchParams = {\n          page: 1,\n          pageSize: currentContentTypeConfig.settings.pageSize,\n          sort: `${currentContentTypeConfig.settings.defaultSortBy}:${currentContentTypeConfig.settings.defaultSortOrder}`,\n        };\n\n        search = stringify(searchParams, { encode: false });\n      }\n\n      return {\n        permissions,\n        search,\n        kind: link.kind,\n        title: link.info.displayName,\n        to: `/content-manager/${link.kind === 'collectionType' ? COLLECTION_TYPES : SINGLE_TYPES}/${\n          link.uid\n        }`,\n        uid: link.uid,\n        // Used for the list item key in the helper plugin\n        name: link.uid,\n        isDisplayed: link.isDisplayed,\n      } satisfies ContentManagerLink;\n    });\n};\n\nexport { useContentManagerInitData };\nexport type { ContentManagerLink };\n", "/* eslint-disable check-file/filename-naming-convention */\nimport * as React from 'react';\n\nimport { Page, useGuidedTour, Layouts } from '@strapi/admin/strapi-admin';\nimport { useIntl } from 'react-intl';\nimport { Navigate, Outlet, useLocation, useMatch } from 'react-router-dom';\n\nimport { DragLayer, DragLayerProps } from './components/DragLayer';\nimport { CardDragPreview } from './components/DragPreviews/CardDragPreview';\nimport { ComponentDragPreview } from './components/DragPreviews/ComponentDragPreview';\nimport { RelationDragPreview } from './components/DragPreviews/RelationDragPreview';\nimport { LeftMenu } from './components/LeftMenu';\nimport { ItemTypes } from './constants/dragAndDrop';\nimport { useContentManagerInitData } from './hooks/useContentManagerInitData';\nimport { getTranslation } from './utils/translations';\n\n/* -------------------------------------------------------------------------------------------------\n * Layout\n * -----------------------------------------------------------------------------------------------*/\n\nconst Layout = () => {\n  const contentTypeMatch = useMatch('/content-manager/:kind/:uid/*');\n\n  const { isLoading, collectionTypeLinks, models, singleTypeLinks } = useContentManagerInitData();\n  const authorisedModels = [...collectionTypeLinks, ...singleTypeLinks].sort((a, b) =>\n    a.title.localeCompare(b.title)\n  );\n\n  const { pathname } = useLocation();\n  const { formatMessage } = useIntl();\n  const startSection = useGuidedTour('Layout', (state) => state.startSection);\n  const startSectionRef = React.useRef(startSection);\n\n  React.useEffect(() => {\n    if (startSectionRef.current) {\n      startSectionRef.current('contentManager');\n    }\n  }, []);\n\n  if (isLoading) {\n    return (\n      <>\n        <Page.Title>\n          {formatMessage({\n            id: getTranslation('plugin.name'),\n            defaultMessage: 'Content Manager',\n          })}\n        </Page.Title>\n        <Page.Loading />\n      </>\n    );\n  }\n\n  // Array of models that are displayed in the content manager\n  const supportedModelsToDisplay = models.filter(({ isDisplayed }) => isDisplayed);\n\n  // Redirect the user to the 403 page\n  if (\n    authorisedModels.length === 0 &&\n    supportedModelsToDisplay.length > 0 &&\n    pathname !== '/content-manager/403'\n  ) {\n    return <Navigate to=\"/403\" />;\n  }\n\n  // Redirect the user to the create content type page\n  if (supportedModelsToDisplay.length === 0 && pathname !== '/no-content-types') {\n    return <Navigate to=\"/no-content-types\" />;\n  }\n\n  if (!contentTypeMatch && authorisedModels.length > 0) {\n    return (\n      <Navigate\n        to={{\n          pathname: authorisedModels[0].to,\n          search: authorisedModels[0].search ?? '',\n        }}\n        replace\n      />\n    );\n  }\n\n  return (\n    <>\n      <Page.Title>\n        {formatMessage({\n          id: getTranslation('plugin.name'),\n          defaultMessage: 'Content Manager',\n        })}\n      </Page.Title>\n      <Layouts.Root sideNav={<LeftMenu />}>\n        <DragLayer renderItem={renderDraglayerItem} />\n        <Outlet />\n      </Layouts.Root>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * renderDraglayerItem\n * -----------------------------------------------------------------------------------------------*/\n\nfunction renderDraglayerItem({ type, item }: Parameters<DragLayerProps['renderItem']>[0]) {\n  if (!type || (type && typeof type !== 'string')) {\n    return null;\n  }\n\n  /**\n   * Because a user may have multiple relations / dynamic zones / repeable fields in the same content type,\n   * we append the fieldName for the item type to make them unique, however, we then want to extract that\n   * first type to apply the correct preview.\n   */\n  const [actualType] = type.split('_');\n\n  switch (actualType) {\n    case ItemTypes.EDIT_FIELD:\n    case ItemTypes.FIELD:\n      return <CardDragPreview label={item.label} />;\n    case ItemTypes.COMPONENT:\n    case ItemTypes.DYNAMIC_ZONE:\n      return <ComponentDragPreview displayedValue={item.displayedValue} />;\n\n    case ItemTypes.RELATION:\n      return <RelationDragPreview {...item} />;\n\n    default:\n      return null;\n  }\n}\n\nexport { Layout };\n"],
  "mappings": "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",
  "names": ["getStyle", "initialOffset", "currentOffset", "mouseOffset", "display", "x", "y", "transform", "DragLayer", "renderItem", "itemType", "isDragging", "item", "useDragLayer", "monitor", "getItem", "getItemType", "getInitialSourceClientOffset", "getSourceClientOffset", "getClientOffset", "_jsx", "Box", "height", "left", "position", "pointerEvents", "top", "zIndex", "width", "style", "type", "ComponentDragPreview", "displayedValue", "_jsxs", "Flex", "background", "borderColor", "justifyContent", "gap", "padding", "ToggleButton", "DropdownIconWrapper", "alignItems", "CaretDown", "maxWidth", "Typography", "textColor", "ellipsis", "IconButton", "withTooltip", "label", "variant", "Trash", "Drag", "styled", "theme", "colors", "neutral600", "button", "RelationDragPreview", "status", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight", "hasRadius", "borderWidth", "FlexWrapper", "minWidth", "LinkEllipsis", "href", "DocumentStatus", "DisconnectButton", "Cross", "SubNavLinkCustom", "SubNavLink", "LeftMenu", "search", "setSearch", "useState", "query", "useQueryParams", "formatMessage", "locale", "useIntl", "collectionTypeLinks", "useTypedSelector", "state", "app", "singleTypeLinks", "schemas", "useContentTypeSchema", "startsWith", "useFilter", "sensitivity", "formatter", "useCollator", "menu", "useMemo", "id", "title", "getTranslation", "defaultMessage", "searchable", "links", "map", "section", "filter", "link", "sort", "a", "b", "compare", "handleClear", "handleChangeSearch", "target", "value", "getPluginsParamsForLink", "schema", "find", "uid", "isI18nEnabled", "Boolean", "pluginOptions", "i18n", "localized", "plugins", "restPlugins", "SubNav", "aria-label", "SubNavHeader", "onChange", "onClear", "searchLabel", "SubNavSections", "SubNavSection", "badgeLabel", "length", "toString", "tag", "NavLink", "to", "pathname", "stringify", "parse", "MUTATE_COLLECTION_TYPES_LINKS", "MUTATE_SINGLE_TYPES_LINKS", "HOOKS", "useContentManagerInitData", "toggleNotification", "useNotification", "dispatch", "useTypedDispatch", "runHookWaterfall", "useStrapiApp", "notifyStatus", "useNotifyAT", "_unstableFormatAPIError", "formatAPIError", "useAPIErrorHandler", "checkUserHasPermissions", "useAuth", "initialDataQuery", "useGetInitialDataQuery", "undefined", "refetchOnMountOrArgChange", "useEffect", "data", "error", "message", "contentTypeSettingsQuery", "useGetAllContentTypeSettingsQuery", "formatData", "components", "contentTypes", "fieldSizes", "contentTypeConfigurations", "collectionType", "singleType", "reduce", "acc", "model", "kind", "push", "collectionTypeSectionLinks", "generateLinks", "singleTypeSectionLinks", "collectionTypeLinksPermissions", "Promise", "all", "permissions", "authorizedCollectionTypeLinks", "_", "index", "singleTypeLinksPermissions", "authorizedSingleTypeLinks", "ctLinks", "models", "stLinks", "setInitialData", "contentTypeSchemas", "configurations", "isDisplayed", "collectionTypesPermissions", "action", "subject", "singleTypesPermissions", "currentContentTypeConfig", "searchParams", "page", "pageSize", "settings", "defaultSortBy", "defaultSortOrder", "encode", "info", "displayName", "COLLECTION_TYPES", "SINGLE_TYPES", "name", "Layout", "contentTypeMatch", "useMatch", "isLoading", "authorisedModels", "localeCompare", "useLocation", "startSection", "useGuidedTour", "startSectionRef", "useRef", "React", "current", "_Fragment", "Page", "Title", "Loading", "supportedModelsToDisplay", "Navigate", "replace", "Layouts", "Root", "sideNav", "renderDraglayerItem", "Outlet", "actualType", "split", "ItemTypes", "EDIT_FIELD", "FIELD", "CardDragPreview", "COMPONENT", "DYNAMIC_ZONE", "RELATION"]
}

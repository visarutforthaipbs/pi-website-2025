{
  "version": 3,
  "sources": ["../../../@strapi/content-manager/admin/src/preview/components/PreviewContent.tsx", "../../../@strapi/content-manager/admin/src/preview/components/PreviewHeader.tsx", "../../../@strapi/content-manager/admin/src/preview/pages/Preview.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Box, Flex } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { FormLayout } from '../../pages/EditView/components/FormLayout';\nimport { usePreviewContext } from '../pages/Preview';\n\nconst UnstablePreviewContent = () => {\n  const previewUrl = usePreviewContext('PreviewContent', (state) => state.url);\n  const layout = usePreviewContext('PreviewContent', (state) => state.layout);\n\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex flex={1} overflow=\"auto\" alignItems=\"stretch\">\n      <Box overflow=\"auto\" flex={1} borderWidth=\"0 1px 0 0\" borderColor=\"neutral150\" padding={6}>\n        <FormLayout layout={layout.layout} hasBackground />\n      </Box>\n      <Box\n        src={previewUrl}\n        /**\n         * For some reason, changing an iframe's src tag causes the browser to add a new item in the\n         * history stack. This is an issue for us as it means clicking the back button will not let us\n         * go back to the edit view. To fix it, we need to trick the browser into thinking this is a\n         * different iframe when the preview URL changes. So we set a key prop to force React\n         * to mount a different node when the src changes.\n         */\n        key={previewUrl}\n        title={formatMessage({\n          id: 'content-manager.preview.panel.title',\n          defaultMessage: 'Preview',\n        })}\n        flex={1}\n        height=\"100%\"\n        borderWidth={0}\n        tag=\"iframe\"\n      />\n    </Flex>\n  );\n};\n\nconst PreviewContent = () => {\n  const previewUrl = usePreviewContext('PreviewContent', (state) => state.url);\n\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box\n      src={previewUrl}\n      /**\n       * For some reason, changing an iframe's src tag causes the browser to add a new item in the\n       * history stack. This is an issue for us as it means clicking the back button will not let us\n       * go back to the edit view. To fix it, we need to trick the browser into thinking this is a\n       * different iframe when the preview URL changes. So we set a key prop to force React\n       * to mount a different node when the src changes.\n       */\n      key={previewUrl}\n      title={formatMessage({\n        id: 'content-manager.preview.panel.title',\n        defaultMessage: 'Preview',\n      })}\n      width=\"100%\"\n      height=\"100%\"\n      borderWidth={0}\n      tag=\"iframe\"\n    />\n  );\n};\n\nexport { PreviewContent, UnstablePreviewContent };\n", "import * as React from 'react';\n\nimport {\n  useClipboard,\n  useHistory,\n  useNotification,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport { IconButton, Tabs, Typography, Grid, Flex } from '@strapi/design-system';\nimport { Cross, Link as LinkIcon } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { Link, type To } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { DocumentStatus } from '../../pages/EditView/components/DocumentStatus';\nimport { getDocumentStatus } from '../../pages/EditView/EditViewPage';\nimport { usePreviewContext } from '../pages/Preview';\n\n/* -------------------------------------------------------------------------------------------------\n * ClosePreviewButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst ClosePreviewButton = () => {\n  const [{ query }] = useQueryParams<{\n    plugins?: Record<string, unknown>;\n  }>();\n  const { formatMessage } = useIntl();\n\n  const canGoBack = useHistory('BackButton', (state) => state.canGoBack);\n  const goBack = useHistory('BackButton', (state) => state.goBack);\n  const history = useHistory('BackButton', (state) => state.history);\n  const locationIndex = useHistory('BackButton', (state) => state.currentLocationIndex);\n\n  /**\n   * Get the link destination from the history.\n   * Rely on a fallback (the parent edit view page) if there's no page to go back .\n   */\n  const historyTo = canGoBack ? history.at(locationIndex - 2) : undefined;\n  const fallback = {\n    pathname: '..',\n    search: stringify(query, { encode: false }),\n  } satisfies To;\n  const toWithFallback = historyTo ?? fallback;\n\n  const handleClick = (e: React.MouseEvent) => {\n    if (canGoBack) {\n      // Prevent normal link behavior, go back in the history stack instead\n      e.preventDefault();\n      goBack();\n      return;\n    }\n\n    // Otherwise rely on native link behavior to go back to the edit view. We don't use navigate()\n    // here in order to get the relative=\"path\" functionality from the Link component.\n  };\n\n  return (\n    <IconButton\n      variant=\"ghost\"\n      tag={Link}\n      relative=\"path\"\n      to={toWithFallback}\n      onClick={handleClick}\n      label={formatMessage({\n        id: 'content-manager.preview.header.close',\n        defaultMessage: 'Close preview',\n      })}\n    >\n      <Cross />\n    </IconButton>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Status\n * -----------------------------------------------------------------------------------------------*/\n\nconst Status = () => {\n  // Get status\n  const document = usePreviewContext('PreviewHeader', (state) => state.document);\n  const schema = usePreviewContext('PreviewHeader', (state) => state.schema);\n  const meta = usePreviewContext('PreviewHeader', (state) => state.meta);\n  const hasDraftAndPublished = schema?.options?.draftAndPublish ?? false;\n\n  if (!hasDraftAndPublished) {\n    return null;\n  }\n\n  const status = getDocumentStatus(document, meta);\n\n  return <DocumentStatus status={status} size=\"XS\" />;\n};\n\nconst PreviewTabs = () => {\n  const { formatMessage } = useIntl();\n\n  // URL query params\n  const [{ query }, setQuery] = useQueryParams<{ status: 'draft' | 'published' }>();\n\n  // Get status\n  const document = usePreviewContext('PreviewHeader', (state) => state.document);\n  const schema = usePreviewContext('PreviewHeader', (state) => state.schema);\n  const meta = usePreviewContext('PreviewHeader', (state) => state.meta);\n  const hasDraftAndPublish = schema?.options?.draftAndPublish ?? false;\n  const documentStatus = getDocumentStatus(document, meta);\n\n  const handleTabChange = (status: string) => {\n    if (status === 'published' || status === 'draft') {\n      setQuery({ status }, 'push', true);\n    }\n  };\n\n  if (!hasDraftAndPublish) {\n    return null;\n  }\n\n  return (\n    <>\n      <Tabs.Root variant=\"simple\" value={query.status || 'draft'} onValueChange={handleTabChange}>\n        <Tabs.List\n          aria-label={formatMessage({\n            id: 'preview.tabs.label',\n            defaultMessage: 'Document status',\n          })}\n        >\n          <StatusTab value=\"draft\">\n            {formatMessage({\n              id: 'content-manager.containers.List.draft',\n              defaultMessage: 'draft',\n            })}\n          </StatusTab>\n          <StatusTab value=\"published\" disabled={documentStatus === 'draft'}>\n            {formatMessage({\n              id: 'content-manager.containers.List.published',\n              defaultMessage: 'published',\n            })}\n          </StatusTab>\n        </Tabs.List>\n      </Tabs.Root>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PreviewHeader\n * -----------------------------------------------------------------------------------------------*/\n\nconst UnstablePreviewHeader = () => {\n  // Get the document title\n  const title = usePreviewContext('PreviewHeader', (state) => state.title);\n\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { copy } = useClipboard();\n\n  const handleCopyLink = () => {\n    copy(window.location.href);\n    toggleNotification({\n      message: formatMessage({\n        id: 'content-manager.preview.copy.success',\n        defaultMessage: 'Copied preview link',\n      }),\n      type: 'success',\n    });\n  };\n\n  return (\n    <Flex gap={4} background=\"neutral0\" borderColor=\"neutral150\" tag=\"header\">\n      {/* Title and status */}\n      <TitleContainer height=\"100%\" paddingLeft={2} paddingRight={4}>\n        <ClosePreviewButton />\n        <PreviewTitle\n          tag=\"h1\"\n          title={title}\n          maxWidth=\"200px\"\n          fontSize={2}\n          paddingLeft={2}\n          paddingRight={3}\n          fontWeight={600}\n        >\n          {title}\n        </PreviewTitle>\n        <Status />\n      </TitleContainer>\n\n      {/* Tabs and actions */}\n      <Flex flex={1} paddingRight={2} justifyContent=\"space-between\">\n        <PreviewTabs />\n        <IconButton\n          type=\"button\"\n          label={formatMessage({\n            id: 'preview.copy.label',\n            defaultMessage: 'Copy preview link',\n          })}\n          onClick={handleCopyLink}\n        >\n          <LinkIcon />\n        </IconButton>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst PreviewHeader = () => {\n  // Get the document title\n  const title = usePreviewContext('PreviewHeader', (state) => state.title);\n\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { copy } = useClipboard();\n\n  const handleCopyLink = () => {\n    copy(window.location.href);\n    toggleNotification({\n      message: formatMessage({\n        id: 'content-manager.preview.copy.success',\n        defaultMessage: 'Copied preview link',\n      }),\n      type: 'success',\n    });\n  };\n\n  return (\n    <Grid.Root\n      gap={3}\n      gridCols={3}\n      paddingLeft={2}\n      paddingRight={2}\n      background=\"neutral0\"\n      borderColor=\"neutral150\"\n      tag=\"header\"\n    >\n      {/* Title and status */}\n      <Grid.Item xs={1} paddingTop={2} paddingBottom={2} gap={3}>\n        <ClosePreviewButton />\n        <PreviewTitle tag=\"h1\" fontWeight={600} fontSize={2} maxWidth=\"200px\" title={title}>\n          {title}\n        </PreviewTitle>\n        <Status />\n      </Grid.Item>\n      {/* Tabs */}\n      <Grid.Item xs={1} marginBottom=\"-1px\" alignItems=\"end\" margin=\"auto\">\n        <PreviewTabs />\n      </Grid.Item>\n      {/* Copy link */}\n      <Grid.Item xs={1} justifyContent=\"end\" paddingTop={2} paddingBottom={2}>\n        <IconButton\n          type=\"button\"\n          label={formatMessage({\n            id: 'preview.copy.label',\n            defaultMessage: 'Copy preview link',\n          })}\n          onClick={handleCopyLink}\n        >\n          <LinkIcon />\n        </IconButton>\n      </Grid.Item>\n    </Grid.Root>\n  );\n};\n\nconst PreviewTitle = styled(Typography)`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst StatusTab = styled(Tabs.Trigger)`\n  text-transform: uppercase;\n`;\n\nconst TitleContainer = styled(Flex)`\n  border-right: 1px solid ${({ theme }) => theme.colors.neutral150};\n`;\n\nexport { PreviewHeader, UnstablePreviewHeader };\n", "import * as React from 'react';\n\nimport {\n  Page,\n  useQueryParams,\n  useRBAC,\n  createContext,\n  Form as FormContext,\n} from '@strapi/admin/strapi-admin';\nimport { Box, Flex, FocusTrap, Portal } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\n\nimport { GetPreviewUrl } from '../../../../shared/contracts/preview';\nimport { COLLECTION_TYPES } from '../../constants/collections';\nimport { DocumentRBAC } from '../../features/DocumentRBAC';\nimport { type UseDocument, useDocument } from '../../hooks/useDocument';\nimport { type EditLayout, useDocumentLayout } from '../../hooks/useDocumentLayout';\nimport { buildValidParams } from '../../utils/api';\nimport { PreviewContent, UnstablePreviewContent } from '../components/PreviewContent';\nimport { PreviewHeader, UnstablePreviewHeader } from '../components/PreviewHeader';\nimport { useGetPreviewUrlQuery } from '../services/preview';\n\nimport type { UID } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * PreviewProvider\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PreviewContextValue {\n  url: string;\n  title: string;\n  document: NonNullable<ReturnType<UseDocument>['document']>;\n  meta: NonNullable<ReturnType<UseDocument>['meta']>;\n  schema: NonNullable<ReturnType<UseDocument>['schema']>;\n  layout: EditLayout;\n}\n\nconst [PreviewProvider, usePreviewContext] = createContext<PreviewContextValue>('PreviewPage');\n\n/* -------------------------------------------------------------------------------------------------\n * PreviewPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst PreviewPage = () => {\n  const { formatMessage } = useIntl();\n\n  // Read all the necessary data from the URL to find the right preview URL\n  const {\n    slug: model,\n    id: documentId,\n    collectionType,\n  } = useParams<{\n    slug: UID.ContentType;\n    id: string;\n    collectionType: string;\n  }>();\n  const [{ query }] = useQueryParams<{\n    plugins?: Record<string, unknown>;\n  }>();\n\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  if (!collectionType) {\n    throw new Error('Could not find collectionType in url params');\n  }\n\n  if (!model) {\n    throw new Error('Could not find model in url params');\n  }\n\n  // Only collection types must have a documentId\n  if (collectionType === COLLECTION_TYPES && !documentId) {\n    throw new Error('Could not find documentId in url params');\n  }\n\n  const previewUrlResponse = useGetPreviewUrlQuery({\n    params: {\n      contentType: model,\n    },\n    query: {\n      documentId,\n      locale: params.locale,\n      status: params.status as GetPreviewUrl.Request['query']['status'],\n    },\n  });\n\n  const documentResponse = useDocument({\n    model,\n    collectionType,\n    documentId,\n    params,\n  });\n\n  const documentLayoutResponse = useDocumentLayout(model);\n\n  if (\n    documentResponse.isLoading ||\n    previewUrlResponse.isLoading ||\n    documentLayoutResponse.isLoading\n  ) {\n    return <Page.Loading />;\n  }\n\n  if (\n    previewUrlResponse.error ||\n    documentLayoutResponse.error ||\n    !documentResponse.document ||\n    !documentResponse.meta ||\n    !documentResponse.schema\n  ) {\n    return <Page.Error />;\n  }\n\n  if (!previewUrlResponse.data?.data?.url) {\n    return <Page.NoData />;\n  }\n\n  const documentTitle = documentResponse.getTitle(documentLayoutResponse.edit.settings.mainField);\n\n  return (\n    <>\n      <Page.Title>\n        {formatMessage(\n          {\n            id: 'content-manager.preview.page-title',\n            defaultMessage: '{contentType} preview',\n          },\n          {\n            contentType: documentTitle,\n          }\n        )}\n      </Page.Title>\n      <PreviewProvider\n        url={previewUrlResponse.data.data.url}\n        document={documentResponse.document}\n        title={documentTitle}\n        meta={documentResponse.meta}\n        schema={documentResponse.schema}\n        layout={documentLayoutResponse.edit}\n      >\n        <FormContext method=\"POST\" initialValues={documentResponse.document} height=\"100%\">\n          <Flex direction=\"column\" height=\"100%\" alignItems=\"stretch\">\n            {window.strapi.future.isEnabled('unstablePreviewSideEditor') ? (\n              <>\n                <UnstablePreviewHeader />\n                <UnstablePreviewContent />\n              </>\n            ) : (\n              <>\n                <PreviewHeader />\n                <PreviewContent />\n              </>\n            )}\n          </Flex>\n        </FormContext>\n      </PreviewProvider>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedPreviewPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedPreviewPageImpl = () => {\n  const { slug: model } = useParams<{\n    slug: string;\n  }>();\n  const {\n    permissions = [],\n    isLoading,\n    error,\n  } = useRBAC([\n    { action: 'plugin::content-manager.explorer.read', subject: model },\n    { action: 'plugin::content-manager.explorer.update', subject: model },\n  ]);\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  if (error || !model) {\n    return (\n      <Box\n        height=\"100vh\"\n        width=\"100vw\"\n        position=\"fixed\"\n        top={0}\n        left={0}\n        zIndex={2}\n        background=\"neutral0\"\n      >\n        <Page.Error />\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      height=\"100vh\"\n      width=\"100vw\"\n      position=\"fixed\"\n      top={0}\n      left={0}\n      zIndex={2}\n      background=\"neutral0\"\n    >\n      <Page.Protect\n        permissions={permissions.filter((permission) =>\n          permission.action.includes('explorer.read')\n        )}\n      >\n        <DocumentRBAC permissions={permissions}>\n          <PreviewPage />\n        </DocumentRBAC>\n      </Page.Protect>\n    </Box>\n  );\n};\n\nconst ProtectedPreviewPage = () => {\n  return (\n    <Portal>\n      <FocusTrap>\n        <ProtectedPreviewPageImpl />\n      </FocusTrap>\n    </Portal>\n  );\n};\n\nexport { ProtectedPreviewPage, usePreviewContext };\n"],
  "mappings": "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",
  "names": ["UnstablePreviewContent", "previewUrl", "usePreviewContext", "state", "url", "layout", "formatMessage", "useIntl", "_jsxs", "Flex", "flex", "overflow", "alignItems", "_jsx", "Box", "borderWidth", "borderColor", "padding", "FormLayout", "hasBackground", "src", "title", "id", "defaultMessage", "height", "tag", "PreviewContent", "width", "ClosePreviewButton", "query", "useQueryParams", "canGoBack", "useHistory", "goBack", "history", "locationIndex", "currentLocationIndex", "historyTo", "at", "undefined", "fallback", "pathname", "search", "stringify", "encode", "toWithFallback", "handleClick", "e", "preventDefault", "IconButton", "variant", "Link", "relative", "to", "onClick", "label", "Cross", "Status", "document", "schema", "meta", "hasDraftAndPublished", "options", "draftAndPublish", "status", "getDocumentStatus", "DocumentStatus", "size", "PreviewTabs", "setQuery", "hasDraftAndPublish", "documentStatus", "handleTabChange", "_Fragment", "Tabs", "Root", "value", "onValueChange", "List", "aria-label", "StatusTab", "disabled", "UnstablePreviewHeader", "toggleNotification", "useNotification", "copy", "useClipboard", "handleCopyLink", "window", "location", "href", "message", "type", "gap", "background", "TitleContainer", "paddingLeft", "paddingRight", "PreviewTitle", "maxWidth", "fontSize", "fontWeight", "justifyContent", "LinkIcon", "PreviewHeader", "Grid", "gridCols", "Item", "xs", "paddingTop", "paddingBottom", "marginBottom", "margin", "styled", "Typography", "Trigger", "theme", "colors", "neutral150", "PreviewProvider", "createContext", "PreviewPage", "slug", "model", "documentId", "collectionType", "useParams", "params", "useMemo", "buildValidParams", "Error", "COLLECTION_TYPES", "previewUrlResponse", "useGetPreviewUrlQuery", "contentType", "locale", "documentResponse", "useDocument", "documentLayoutResponse", "useDocumentLayout", "isLoading", "Page", "Loading", "error", "data", "NoData", "documentTitle", "getTitle", "edit", "settings", "mainField", "Title", "FormContext", "method", "initialValues", "direction", "strapi", "future", "isEnabled", "ProtectedPreviewPageImpl", "permissions", "useRBAC", "action", "subject", "position", "top", "left", "zIndex", "Protect", "filter", "permission", "includes", "DocumentRBAC", "ProtectedPreviewPage", "Portal", "FocusTrap"]
}

{
  "version": 3,
  "sources": ["../../../@strapi/review-workflows/admin/src/services/admin.ts", "../../../@strapi/review-workflows/admin/src/routes/settings/hooks/useKeyboardDragAndDrop.ts", "../../../@strapi/review-workflows/admin/src/routes/settings/hooks/useDragAndDrop.ts", "../../../@strapi/review-workflows/admin/src/routes/settings/components/AddStage.tsx", "../../../@strapi/review-workflows/admin/src/routes/settings/components/Stages.tsx", "../../../@strapi/review-workflows/admin/src/routes/settings/components/WorkflowAttributes.tsx", "../../../@strapi/review-workflows/admin/src/routes/settings/id.tsx"],
  "sourcesContent": ["import { SanitizedAdminUser } from '@strapi/admin/strapi-admin';\n\nimport { reviewWorkflowsApi } from './api';\n\ntype Roles = SanitizedAdminUser['roles'];\ntype RolesResponse = { data: Roles };\n\nconst adminApi = reviewWorkflowsApi.injectEndpoints({\n  endpoints(builder) {\n    return {\n      getAdminRoles: builder.query<Roles, void>({\n        query: () => ({\n          url: `/admin/roles`,\n          method: 'GET',\n        }),\n        transformResponse: (res: RolesResponse) => {\n          return res.data;\n        },\n      }),\n    };\n  },\n});\n\nconst { useGetAdminRolesQuery } = adminApi;\n\nexport { useGetAdminRolesQuery };\nexport type { SanitizedAdminUser, Roles };\n", "import * as React from 'react';\n\nexport type UseKeyboardDragAndDropCallbacks<TIndex extends number | Array<number> = number> = {\n  onCancel?: (index: TIndex) => void;\n  onDropItem?: (currentIndex: TIndex, newIndex?: TIndex) => void;\n  onGrabItem?: (index: TIndex) => void;\n  onMoveItem?: (newIndex: TIndex, currentIndex: TIndex) => void;\n};\n\n/**\n * Utility hook designed to implement keyboard accessibile drag and drop by\n * returning an onKeyDown handler to be passed to the drag icon button.\n *\n * @internal - You should use `useDragAndDrop` instead.\n */\nexport const useKeyboardDragAndDrop = <TIndex extends number | Array<number> = number>(\n  active: boolean,\n  index: TIndex,\n  { onCancel, onDropItem, onGrabItem, onMoveItem }: UseKeyboardDragAndDropCallbacks<TIndex>\n) => {\n  const [isSelected, setIsSelected] = React.useState(false);\n\n  const handleMove = (movement: 'UP' | 'DOWN') => {\n    if (!isSelected) {\n      return;\n    }\n    if (typeof index === 'number' && onMoveItem) {\n      if (movement === 'UP') {\n        onMoveItem((index - 1) as TIndex, index);\n      } else if (movement === 'DOWN') {\n        onMoveItem((index + 1) as TIndex, index);\n      }\n    }\n  };\n\n  const handleDragClick = () => {\n    if (isSelected) {\n      if (onDropItem) {\n        onDropItem(index);\n      }\n      setIsSelected(false);\n    } else {\n      if (onGrabItem) {\n        onGrabItem(index);\n      }\n      setIsSelected(true);\n    }\n  };\n\n  const handleCancel = () => {\n    if (isSelected) {\n      setIsSelected(false);\n\n      if (onCancel) {\n        onCancel(index);\n      }\n    }\n  };\n\n  const handleKeyDown = <E extends Element>(e: React.KeyboardEvent<E>) => {\n    if (!active) {\n      return;\n    }\n\n    if (e.key === 'Tab' && !isSelected) {\n      return;\n    }\n\n    e.preventDefault();\n\n    switch (e.key) {\n      case ' ':\n      case 'Enter':\n        handleDragClick();\n        break;\n\n      case 'Escape':\n        handleCancel();\n        break;\n\n      case 'ArrowDown':\n      case 'ArrowRight':\n        handleMove('DOWN');\n        break;\n\n      case 'ArrowUp':\n      case 'ArrowLeft':\n        handleMove('UP');\n        break;\n\n      default:\n    }\n  };\n\n  return handleKeyDown;\n};\n", "import * as React from 'react';\n\nimport {\n  useDrag,\n  useDrop,\n  type HandlerManager,\n  type ConnectDragSource,\n  type ConnectDropTarget,\n  type ConnectDragPreview,\n  type DragSourceMonitor,\n} from 'react-dnd';\n\nimport {\n  useKeyboardDragAndDrop,\n  type UseKeyboardDragAndDropCallbacks,\n} from './useKeyboardDragAndDrop';\n\nimport type { Data } from '@strapi/types';\n\nconst DIRECTIONS = {\n  UPWARD: 'upward',\n  DOWNWARD: 'downward',\n} as const;\n\nconst DROP_SENSITIVITY = {\n  REGULAR: 'regular',\n  IMMEDIATE: 'immediate',\n} as const;\n\ninterface UseDragAndDropOptions<\n  TIndex extends number | Array<number> = number,\n  TItem extends { index: TIndex } = { index: TIndex },\n> extends UseKeyboardDragAndDropCallbacks<TIndex> {\n  type?: string;\n  index: TIndex;\n  item?: TItem;\n  onStart?: () => void;\n  onEnd?: () => void;\n  dropSensitivity?: (typeof DROP_SENSITIVITY)[keyof typeof DROP_SENSITIVITY];\n}\n\ntype Identifier = ReturnType<HandlerManager['getHandlerId']>;\n\ntype UseDragAndDropReturn<E extends Element = HTMLElement> = [\n  props: {\n    handlerId: Identifier;\n    isDragging: boolean;\n    handleKeyDown: <E extends Element>(event: React.KeyboardEvent<E>) => void;\n    isOverDropTarget: boolean;\n    direction: (typeof DIRECTIONS)[keyof typeof DIRECTIONS] | null;\n  },\n  objectRef: React.RefObject<E>,\n  dropRef: ConnectDropTarget,\n  dragRef: ConnectDragSource,\n  dragPreviewRef: ConnectDragPreview,\n];\n\ntype DropCollectedProps = {\n  handlerId: Identifier;\n  isOver: boolean;\n};\n\n/**\n * A utility hook abstracting the general drag and drop hooks from react-dnd.\n * Centralising the same behaviours and by default offering keyboard support.\n */\nconst useDragAndDrop = <\n  TIndex extends number | Array<number>,\n  TItem extends { index: TIndex; id?: Data.ID; [key: string]: unknown } = {\n    index: TIndex;\n    [key: string]: unknown;\n  },\n  E extends Element = HTMLElement,\n>(\n  active: boolean,\n  {\n    type = 'STRAPI_DND',\n    index,\n    item,\n    onStart,\n    onEnd,\n    onGrabItem,\n    onDropItem,\n    onCancel,\n    onMoveItem,\n    dropSensitivity = DROP_SENSITIVITY.REGULAR,\n  }: UseDragAndDropOptions<TIndex, TItem>\n): UseDragAndDropReturn<E> => {\n  const objectRef = React.useRef<E>(null);\n\n  const [{ handlerId, isOver }, dropRef] = useDrop<TItem, void, DropCollectedProps>({\n    accept: type,\n    collect(monitor) {\n      return {\n        handlerId: monitor.getHandlerId(),\n        isOver: monitor.isOver({ shallow: true }),\n      };\n    },\n    drop(item) {\n      const draggedIndex = item.index;\n      const newIndex = index;\n\n      if (isOver && onDropItem) {\n        onDropItem(draggedIndex, newIndex);\n      }\n    },\n    hover(item, monitor) {\n      if (!objectRef.current || !onMoveItem) {\n        return;\n      }\n\n      const dragIndex = item.index;\n      const newIndex = index;\n\n      const hoverBoundingRect = objectRef.current?.getBoundingClientRect();\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      const clientOffset = monitor.getClientOffset();\n      if (!clientOffset) return;\n\n      const hoverClientY = clientOffset && clientOffset.y - hoverBoundingRect.top;\n      if (typeof dragIndex === 'number' && typeof newIndex === 'number') {\n        if (dragIndex === newIndex) {\n          // Don't replace items with themselves\n          return;\n        }\n\n        if (dropSensitivity === DROP_SENSITIVITY.REGULAR) {\n          // Dragging downwards\n          if (dragIndex < newIndex && hoverClientY < hoverMiddleY) {\n            return;\n          }\n\n          // Dragging upwards\n          if (dragIndex > newIndex && hoverClientY > hoverMiddleY) {\n            return;\n          }\n        }\n\n        // Time to actually perform the action\n        onMoveItem(newIndex, dragIndex);\n        item.index = newIndex;\n      } else {\n        // Using numbers as indices doesn't work for nested list items with path like [1, 1, 0]\n        if (Array.isArray(dragIndex) && Array.isArray(newIndex)) {\n          // Indices comparison to find item position in nested list\n          const minLength = Math.min(dragIndex.length, newIndex.length);\n          let areEqual = true;\n          let isLessThan = false;\n          let isGreaterThan = false;\n\n          for (let i = 0; i < minLength; i++) {\n            if (dragIndex[i] < newIndex[i]) {\n              isLessThan = true;\n              areEqual = false;\n              break;\n            } else if (dragIndex[i] > newIndex[i]) {\n              isGreaterThan = true;\n              areEqual = false;\n              break;\n            }\n          }\n\n          // Don't replace items with themselves\n          if (areEqual && dragIndex.length === newIndex.length) {\n            return;\n          }\n\n          if (dropSensitivity === DROP_SENSITIVITY.REGULAR) {\n            // Dragging downwards\n            if (isLessThan && !isGreaterThan && hoverClientY < hoverMiddleY) {\n              return;\n            }\n\n            // Dragging upwards\n            if (isGreaterThan && !isLessThan && hoverClientY > hoverMiddleY) {\n              return;\n            }\n          }\n        }\n\n        onMoveItem(newIndex, dragIndex);\n        item.index = newIndex;\n      }\n    },\n  });\n\n  const getDragDirection = (monitor: DragSourceMonitor<TItem, void>) => {\n    if (\n      monitor &&\n      monitor.isDragging() &&\n      !monitor.didDrop() &&\n      monitor.getInitialClientOffset() &&\n      monitor.getClientOffset()\n    ) {\n      const deltaY = monitor.getInitialClientOffset()!.y - monitor.getClientOffset()!.y;\n\n      if (deltaY > 0) return DIRECTIONS.UPWARD;\n\n      if (deltaY < 0) return DIRECTIONS.DOWNWARD;\n\n      return null;\n    }\n\n    return null;\n  };\n\n  const [{ isDragging, direction }, dragRef, dragPreviewRef] = useDrag({\n    type,\n    item() {\n      if (onStart) {\n        onStart();\n      }\n\n      /**\n       * This will be attached and it helps define the preview sizes\n       * when a component is flexy e.g. Relations\n       */\n      const { width } = objectRef.current?.getBoundingClientRect() ?? {};\n\n      return { index, width, ...item };\n    },\n    end() {\n      if (onEnd) {\n        onEnd();\n      }\n    },\n    canDrag: active,\n    /**\n     * This is useful when the item is in a virtualized list.\n     * However, if we don't have an ID then we want the libraries\n     * defaults to take care of this.\n     */\n    isDragging: item?.id\n      ? (monitor) => {\n          return item.id === monitor.getItem().id;\n        }\n      : undefined,\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n      initialOffset: monitor.getInitialClientOffset(),\n      currentOffset: monitor.getClientOffset(),\n      direction: getDragDirection(monitor),\n    }),\n  });\n\n  const handleKeyDown = useKeyboardDragAndDrop(active, index, {\n    onGrabItem,\n    onDropItem,\n    onCancel,\n    onMoveItem,\n  });\n\n  return [\n    { handlerId, isDragging, handleKeyDown, isOverDropTarget: isOver, direction },\n    objectRef,\n    dropRef,\n    dragRef,\n    dragPreviewRef,\n  ];\n};\n\nexport {\n  useDragAndDrop,\n  UseDragAndDropReturn,\n  UseDragAndDropOptions,\n  DIRECTIONS,\n  DROP_SENSITIVITY,\n};\n", "import { Box, BoxComponent, ButtonProps, Flex, Typography } from '@strapi/design-system';\nimport { PlusCircle } from '@strapi/icons';\nimport { styled } from 'styled-components';\n\nexport const AddStage = ({ children, ...props }: ButtonProps) => {\n  return (\n    <StyledButton\n      tag=\"button\"\n      background=\"neutral0\"\n      borderColor=\"neutral150\"\n      paddingBottom={3}\n      paddingLeft={4}\n      paddingRight={4}\n      paddingTop={3}\n      shadow=\"filterShadow\"\n      {...props}\n    >\n      <Typography variant=\"pi\" fontWeight=\"bold\">\n        <Flex tag=\"span\" gap={2}>\n          <PlusCircle width=\"2.4rem\" height=\"2.4rem\" aria-hidden />\n          {children}\n        </Flex>\n      </Typography>\n    </StyledButton>\n  );\n};\n\nconst StyledButton = styled<BoxComponent<'button'>>(Box)`\n  border-radius: 26px;\n  color: ${({ theme }) => theme.colors.neutral500};\n\n  &:hover {\n    color: ${({ theme }) => theme.colors.primary600};\n  }\n\n  &:active {\n    color: ${({ theme }) => theme.colors.primary600};\n  }\n`;\n", "import * as React from 'react';\n\nimport {\n  useField,\n  useForm,\n  useTracking,\n  ConfirmDialog,\n  useNotification,\n  InputRenderer as AdminInputRenderer,\n  InputProps,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Flex,\n  MultiSelectOption,\n  Accordion,\n  Grid,\n  IconButton,\n  MultiSelect,\n  MultiSelectGroup,\n  SingleSelect,\n  SingleSelectOption,\n  TextInput,\n  VisuallyHidden,\n  useComposedRefs,\n  Menu,\n  MenuItem,\n  Field,\n  Dialog,\n} from '@strapi/design-system';\nimport { Duplicate, Drag, More, EyeStriked } from '@strapi/icons';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { Stage as IStage, StagePermission } from '../../../../../shared/contracts/review-workflows';\nimport { useGetAdminRolesQuery } from '../../../services/admin';\nimport { AVAILABLE_COLORS, getStageColorByHex } from '../../../utils/colors';\nimport { DRAG_DROP_TYPES } from '../constants';\nimport { useDragAndDrop } from '../hooks/useDragAndDrop';\n\nimport { AddStage } from './AddStage';\n\ninterface WorkflowStage extends Pick<IStage, 'id' | 'name' | 'permissions' | 'color'> {\n  __temp_key__: string;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Stages\n * -----------------------------------------------------------------------------------------------*/\ninterface StagesProps {\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  isCreating?: boolean;\n}\n\nconst Stages = ({ canDelete = true, canUpdate = true, isCreating }: StagesProps) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const addFieldRow = useForm('Stages', (state) => state.addFieldRow);\n  const { value: stages = [] } = useField<WorkflowStage[]>('stages');\n\n  return (\n    <Flex direction=\"column\" gap={6} width=\"100%\">\n      <Box position=\"relative\" width=\"100%\">\n        <Background\n          background=\"neutral200\"\n          height=\"100%\"\n          left=\"50%\"\n          position=\"absolute\"\n          top=\"0\"\n          width={2}\n        />\n\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={6} position=\"relative\" tag=\"ol\">\n          {stages.map((stage, index) => {\n            return (\n              <Box key={stage.__temp_key__} tag=\"li\">\n                <Stage\n                  index={index}\n                  canDelete={stages.length > 1 && canDelete}\n                  canReorder={stages.length > 1}\n                  canUpdate={canUpdate}\n                  stagesCount={stages.length}\n                  defaultOpen={!stage.id}\n                  {...stage}\n                />\n              </Box>\n            );\n          })}\n        </Flex>\n      </Box>\n\n      {canUpdate && (\n        <AddStage\n          type=\"button\"\n          onClick={() => {\n            addFieldRow('stages', { name: '' });\n            trackUsage('willCreateStage');\n          }}\n        >\n          {formatMessage({\n            id: 'Settings.review-workflows.stage.add',\n            defaultMessage: 'Add new stage',\n          })}\n        </AddStage>\n      )}\n    </Flex>\n  );\n};\n\nconst Background = styled(Box)`\n  transform: translateX(-50%);\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * Stage\n * -----------------------------------------------------------------------------------------------*/\ninterface StageProps extends WorkflowStage {\n  canDelete?: boolean;\n  canReorder?: boolean;\n  canUpdate?: boolean;\n  index: number;\n  stagesCount: number;\n  defaultOpen?: boolean;\n}\n\nconst Stage = ({\n  index,\n  canDelete = false,\n  canReorder = false,\n  canUpdate = false,\n  stagesCount,\n  name,\n  permissions,\n  color,\n  defaultOpen,\n}: StageProps) => {\n  const [liveText, setLiveText] = React.useState<string>();\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const stageErrors = useForm('Stages', (state) => state.errors.stages as object[]);\n  const error = stageErrors?.[index];\n  const addFieldRow = useForm('Stage', (state) => state.addFieldRow);\n  const moveFieldRow = useForm('Stage', (state) => state.moveFieldRow);\n  const removeFieldRow = useForm('Stage', (state) => state.removeFieldRow);\n\n  const getItemPos = (index: number) => `${index + 1} of ${stagesCount}`;\n\n  const handleGrabStage = (index: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: 'dnd.grab-item',\n          defaultMessage: `{item}, grabbed. Current position in list: {position}. Press up and down arrow to change position, Spacebar to drop, Escape to cancel.`,\n        },\n        {\n          item: name,\n          position: getItemPos(index),\n        }\n      )\n    );\n  };\n\n  const handleDropStage = (index: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: 'dnd.drop-item',\n          defaultMessage: `{item}, dropped. Final position in list: {position}.`,\n        },\n        {\n          item: name,\n          position: getItemPos(index),\n        }\n      )\n    );\n  };\n\n  const handleCancelDragStage = () => {\n    setLiveText(\n      formatMessage(\n        {\n          id: 'dnd.cancel-item',\n          defaultMessage: '{item}, dropped. Re-order cancelled.',\n        },\n        {\n          item: name,\n        }\n      )\n    );\n  };\n\n  const handleMoveStage = (newIndex: number, oldIndex: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: 'dnd.reorder',\n          defaultMessage: '{item}, moved. New position in list: {position}.',\n        },\n        {\n          item: name,\n          position: getItemPos(newIndex),\n        }\n      )\n    );\n\n    moveFieldRow('stages', oldIndex, newIndex);\n  };\n\n  const [{ handlerId, isDragging, handleKeyDown }, stageRef, dropRef, dragRef, dragPreviewRef] =\n    useDragAndDrop(canReorder, {\n      index,\n      item: {\n        index,\n        name,\n      },\n      onGrabItem: handleGrabStage,\n      onDropItem: handleDropStage,\n      onMoveItem: handleMoveStage,\n      onCancel: handleCancelDragStage,\n      type: DRAG_DROP_TYPES.STAGE,\n    });\n\n  // @ts-expect-error – the stageRef is incorrectly typed.\n  const composedRef = useComposedRefs<HTMLDivElement>(stageRef, dropRef);\n\n  React.useEffect(() => {\n    dragPreviewRef(getEmptyImage(), { captureDraggingState: false });\n  }, [dragPreviewRef, index]);\n\n  const handleCloneClick = () => {\n    addFieldRow('stages', { name, color, permissions });\n  };\n\n  const id = React.useId();\n\n  return (\n    <Box ref={composedRef} shadow=\"tableShadow\">\n      {liveText && <VisuallyHidden aria-live=\"assertive\">{liveText}</VisuallyHidden>}\n\n      {isDragging ? (\n        <Box\n          background=\"primary100\"\n          borderStyle=\"dashed\"\n          borderColor=\"primary600\"\n          borderWidth=\"1px\"\n          display=\"block\"\n          hasRadius\n          padding={6}\n        />\n      ) : (\n        <AccordionRoot\n          onValueChange={(value) => {\n            if (value) {\n              trackUsage('willEditStage');\n            }\n          }}\n          defaultValue={defaultOpen ? id : undefined}\n          $error={Object.values(error ?? {}).length > 0}\n        >\n          <Accordion.Item value={id}>\n            <Accordion.Header>\n              <Accordion.Trigger>{name}</Accordion.Trigger>\n              <Accordion.Actions>\n                {canDelete || canUpdate ? (\n                  <>\n                    <Menu.Root>\n                      <ContextMenuTrigger size=\"S\" endIcon={null} paddingLeft={2} paddingRight={2}>\n                        <More aria-hidden focusable={false} />\n                        <VisuallyHidden tag=\"span\">\n                          {formatMessage({\n                            id: '[tbdb].components.DynamicZone.more-actions',\n                            defaultMessage: 'More actions',\n                          })}\n                        </VisuallyHidden>\n                      </ContextMenuTrigger>\n                      {/* z-index needs to be as big as the one defined for the wrapper in Stages, otherwise the menu\n                       * disappears behind the accordion\n                       */}\n                      <Menu.Content popoverPlacement=\"bottom-end\" zIndex={2}>\n                        <Menu.SubRoot>\n                          {canUpdate && (\n                            <MenuItem onClick={handleCloneClick}>\n                              {formatMessage({\n                                id: 'Settings.review-workflows.stage.delete',\n                                defaultMessage: 'Duplicate stage',\n                              })}\n                            </MenuItem>\n                          )}\n\n                          {canDelete && (\n                            <DeleteMenuItem onClick={() => removeFieldRow('stages', index)}>\n                              {formatMessage({\n                                id: 'Settings.review-workflows.stage.delete',\n                                defaultMessage: 'Delete',\n                              })}\n                            </DeleteMenuItem>\n                          )}\n                        </Menu.SubRoot>\n                      </Menu.Content>\n                    </Menu.Root>\n\n                    {canUpdate && (\n                      <IconButton\n                        background=\"transparent\"\n                        hasRadius\n                        variant=\"ghost\"\n                        data-handler-id={handlerId}\n                        ref={dragRef}\n                        label={formatMessage({\n                          id: 'Settings.review-workflows.stage.drag',\n                          defaultMessage: 'Drag',\n                        })}\n                        onClick={(e) => e.stopPropagation()}\n                        onKeyDown={handleKeyDown}\n                      >\n                        <Drag />\n                      </IconButton>\n                    )}\n                  </>\n                ) : null}\n              </Accordion.Actions>\n            </Accordion.Header>\n            <Accordion.Content>\n              <Grid.Root gap={4} padding={6}>\n                {[\n                  {\n                    disabled: !canUpdate,\n                    label: formatMessage({\n                      id: 'Settings.review-workflows.stage.name.label',\n                      defaultMessage: 'Stage name',\n                    }),\n                    name: `stages.${index}.name`,\n                    required: true,\n                    size: 6,\n                    type: 'string' as const,\n                  },\n                  {\n                    disabled: !canUpdate,\n                    label: formatMessage({\n                      id: 'content-manager.reviewWorkflows.stage.color',\n                      defaultMessage: 'Color',\n                    }),\n                    name: `stages.${index}.color`,\n                    required: true,\n                    size: 6,\n                    type: 'color' as const,\n                  },\n                  {\n                    disabled: !canUpdate,\n                    label: formatMessage({\n                      id: 'Settings.review-workflows.stage.permissions.label',\n                      defaultMessage: 'Roles that can change this stage',\n                    }),\n                    name: `stages.${index}.permissions`,\n                    placeholder: formatMessage({\n                      id: 'Settings.review-workflows.stage.permissions.placeholder',\n                      defaultMessage: 'Select a role',\n                    }),\n                    required: true,\n                    size: 6,\n                    type: 'permissions' as const,\n                  },\n                ].map(({ size, ...field }) => (\n                  <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n                    <InputRenderer {...field} />\n                  </Grid.Item>\n                ))}\n              </Grid.Root>\n            </Accordion.Content>\n          </Accordion.Item>\n        </AccordionRoot>\n      )}\n    </Box>\n  );\n};\n\nconst AccordionRoot = styled(Accordion.Root)<{ $error?: boolean }>`\n  border: 1px solid\n    ${({ theme, $error }) => ($error ? theme.colors.danger600 : theme.colors.neutral200)};\n`;\n\nconst DeleteMenuItem = styled(MenuItem)`\n  color: ${({ theme }) => theme.colors.danger600};\n`;\n\n// Removing the font-size from the child-span aligns the\n// more icon vertically\nconst ContextMenuTrigger = styled(Menu.Trigger)`\n  :hover,\n  :focus {\n    background-color: ${({ theme }) => theme.colors.neutral100};\n  }\n\n  > span {\n    font-size: 0;\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * InputRenderer\n * -----------------------------------------------------------------------------------------------*/\n\ntype InputRendererProps = InputProps | ColorSelectorProps | PermissionsFieldProps;\n\nconst InputRenderer = (props: InputRendererProps) => {\n  switch (props.type) {\n    case 'color':\n      return <ColorSelector {...props} />;\n    case 'permissions':\n      return <PermissionsField {...props} />;\n    default:\n      return <AdminInputRenderer {...props} />;\n  }\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ColorSelector\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ColorSelectorProps\n  extends Omit<Extract<InputProps, { type: 'enumeration' }>, 'type' | 'options'> {\n  type: 'color';\n}\n\nconst ColorSelector = ({ disabled, label, name, required }: ColorSelectorProps) => {\n  const { formatMessage } = useIntl();\n  const { value, error, onChange } = useField<string>(name);\n\n  const colorOptions = AVAILABLE_COLORS.map(({ hex, name }) => ({\n    value: hex,\n    label: formatMessage(\n      {\n        id: 'Settings.review-workflows.stage.color.name',\n        defaultMessage: '{name}',\n      },\n      { name }\n    ),\n    color: hex,\n  }));\n\n  const { themeColorName } = getStageColorByHex(value) ?? {};\n\n  return (\n    <Field.Root error={error} name={name} required={required}>\n      <Field.Label>{label}</Field.Label>\n      <SingleSelect\n        disabled={disabled}\n        onChange={(v) => {\n          onChange(name, v.toString());\n        }}\n        value={value?.toUpperCase()}\n        startIcon={\n          <Flex\n            tag=\"span\"\n            height={2}\n            background={value}\n            borderColor={themeColorName === 'neutral0' ? 'neutral150' : 'transparent'}\n            hasRadius\n            shrink={0}\n            width={2}\n          />\n        }\n      >\n        {colorOptions.map(({ value, label, color }) => {\n          const { themeColorName } = getStageColorByHex(color) || {};\n\n          return (\n            <SingleSelectOption\n              value={value}\n              key={value}\n              startIcon={\n                <Flex\n                  tag=\"span\"\n                  height={2}\n                  background={color}\n                  borderColor={themeColorName === 'neutral0' ? 'neutral150' : 'transparent'}\n                  hasRadius\n                  shrink={0}\n                  width={2}\n                />\n              }\n            >\n              {label}\n            </SingleSelectOption>\n          );\n        })}\n      </SingleSelect>\n      <Field.Error />\n    </Field.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PermissionsField\n * -----------------------------------------------------------------------------------------------*/\ninterface PermissionsFieldProps\n  extends Omit<Extract<InputProps, { type: 'enumeration' }>, 'type' | 'options'> {\n  type: 'permissions';\n}\n\nconst PermissionsField = ({ disabled, name, placeholder, required }: PermissionsFieldProps) => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const [isApplyAllConfirmationOpen, setIsApplyAllConfirmationOpen] = React.useState(false);\n  const { value = [], error, onChange } = useField<StagePermission[]>(name);\n  const allStages = useForm<WorkflowStage[]>('PermissionsField', (state) => state.values.stages);\n  const onFormValueChange = useForm('PermissionsField', (state) => state.onChange);\n  const rolesErrorCount = React.useRef(0);\n\n  const { data: roles = [], isLoading, error: getRolesError } = useGetAdminRolesQuery();\n\n  // Super admins always have permissions to do everything and therefore\n  // there is no point for this role to show up in the role combobox\n  const filteredRoles = roles?.filter((role) => role.code !== 'strapi-super-admin') ?? [];\n\n  React.useEffect(() => {\n    if (\n      !isLoading &&\n      getRolesError &&\n      'status' in getRolesError &&\n      getRolesError.status == 403 &&\n      rolesErrorCount.current === 0\n    ) {\n      rolesErrorCount.current = 1;\n\n      toggleNotification({\n        blockTransition: true,\n        type: 'danger',\n        message: formatMessage({\n          id: 'review-workflows.stage.permissions.noPermissions.description',\n          defaultMessage: 'You don’t have the permission to see roles. Contact your administrator.',\n        }),\n      });\n    }\n  }, [formatMessage, isLoading, roles, toggleNotification, getRolesError]);\n\n  if (!isLoading && filteredRoles.length === 0) {\n    return (\n      <Field.Root\n        name={name}\n        hint={formatMessage({\n          id: 'Settings.review-workflows.stage.permissions.noPermissions.description',\n          defaultMessage: 'You don’t have the permission to see roles',\n        })}\n        required={required}\n      >\n        <Field.Label>\n          {formatMessage({\n            id: 'Settings.review-workflows.stage.permissions.label',\n            defaultMessage: 'Roles that can change this stage',\n          })}\n        </Field.Label>\n        <TextInput\n          disabled\n          placeholder={formatMessage({\n            id: 'components.NotAllowedInput.text',\n            defaultMessage: 'No permissions to see this field',\n          })}\n          startAction={<EyeStriked fill=\"neutral600\" />}\n          type=\"text\"\n          value=\"\"\n        />\n        <Field.Hint />\n      </Field.Root>\n    );\n  }\n\n  return (\n    <>\n      <Flex alignItems=\"flex-end\" gap={3}>\n        <PermissionWrapper grow={1}>\n          <Field.Root error={error} name={name} required>\n            <Field.Label>\n              {formatMessage({\n                id: 'Settings.review-workflows.stage.permissions.label',\n                defaultMessage: 'Roles that can change this stage',\n              })}\n            </Field.Label>\n            <MultiSelect\n              disabled={disabled}\n              onChange={(values) => {\n                // Because the select components expects strings for values, but\n                // the yup schema validates we are sending full permission objects to the API,\n                // we must coerce the string value back to an object\n                const permissions = values.map((value) => ({\n                  role: parseInt(value, 10),\n                  action: 'admin::review-workflows.stage.transition',\n                }));\n\n                onChange(name, permissions);\n              }}\n              placeholder={placeholder}\n              // The Select component expects strings for values\n              value={value.map((permission) => `${permission.role}`)}\n              withTags\n            >\n              <MultiSelectGroup\n                label={formatMessage({\n                  id: 'Settings.review-workflows.stage.permissions.allRoles.label',\n                  defaultMessage: 'All roles',\n                })}\n                values={filteredRoles.map((r) => `${r.id}`)}\n              >\n                {filteredRoles.map((role) => {\n                  return (\n                    <NestedOption key={role.id} value={`${role.id}`}>\n                      {role.name}\n                    </NestedOption>\n                  );\n                })}\n              </MultiSelectGroup>\n            </MultiSelect>\n            <Field.Error />\n          </Field.Root>\n        </PermissionWrapper>\n        <Dialog.Root open={isApplyAllConfirmationOpen} onOpenChange={setIsApplyAllConfirmationOpen}>\n          <Dialog.Trigger>\n            <IconButton\n              disabled={disabled}\n              label={formatMessage({\n                id: 'Settings.review-workflows.stage.permissions.apply.label',\n                defaultMessage: 'Apply to all stages',\n              })}\n              size=\"L\"\n            >\n              <Duplicate />\n            </IconButton>\n          </Dialog.Trigger>\n          <ConfirmDialog\n            onConfirm={() => {\n              onFormValueChange(\n                'stages',\n                allStages.map((stage) => ({\n                  ...stage,\n                  permissions: value,\n                }))\n              );\n\n              setIsApplyAllConfirmationOpen(false);\n              toggleNotification({\n                type: 'success',\n                message: formatMessage({\n                  id: 'Settings.review-workflows.page.edit.confirm.stages.permissions.copy.success',\n                  defaultMessage: 'Applied roles to all other stages of the workflow',\n                }),\n              });\n            }}\n            variant=\"default\"\n          >\n            {formatMessage({\n              id: 'Settings.review-workflows.page.edit.confirm.stages.permissions.copy',\n              defaultMessage:\n                'Roles that can change that stage will be applied to all the other stages.',\n            })}\n          </ConfirmDialog>\n        </Dialog.Root>\n      </Flex>\n    </>\n  );\n};\n\nconst NestedOption = styled(MultiSelectOption)`\n  padding-left: ${({ theme }) => theme.spaces[7]};\n`;\n\n// Grow the size of the permission Select\nconst PermissionWrapper = styled(Flex)`\n  > * {\n    flex-grow: 1;\n  }\n`;\n\nexport { Stages };\nexport type { StagesProps, WorkflowStage };\n", "import { InputRenderer, useField, useForm } from '@strapi/admin/strapi-admin';\nimport {\n  Field,\n  Grid,\n  MultiSelect,\n  MultiSelectGroup,\n  MultiSelectOption,\n  Typography,\n  useCollator,\n  SingleSelect,\n  SingleSelectOption,\n} from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useGetContentTypesQuery } from '../../../services/content-manager';\nimport { useReviewWorkflows } from '../hooks/useReviewWorkflows';\n\nimport type { WorkflowStage } from './Stages';\n\n/* -------------------------------------------------------------------------------------------------\n * WorkflowAttributes\n * -----------------------------------------------------------------------------------------------*/\ninterface WorkflowAttributesProps {\n  canUpdate?: boolean;\n}\n\nconst WorkflowAttributes = ({ canUpdate = true }: WorkflowAttributesProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Grid.Root background=\"neutral0\" hasRadius gap={4} padding={6} shadow=\"tableShadow\">\n      <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n        <InputRenderer\n          disabled={!canUpdate}\n          label={formatMessage({\n            id: 'Settings.review-workflows.workflow.name.label',\n            defaultMessage: 'Workflow Name',\n          })}\n          name=\"name\"\n          required\n          type=\"string\"\n        />\n      </Grid.Item>\n      <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n        <ContentTypesSelector disabled={!canUpdate} />\n      </Grid.Item>\n      <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n        <StageSelector disabled={!canUpdate} />\n      </Grid.Item>\n    </Grid.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ContentTypesSelector\n * -----------------------------------------------------------------------------------------------*/\ninterface ContentTypesSelectorProps {\n  disabled?: boolean;\n}\n\nconst ContentTypesSelector = ({ disabled }: ContentTypesSelectorProps) => {\n  const { formatMessage, locale } = useIntl();\n  const { data: contentTypes, isLoading } = useGetContentTypesQuery();\n  const { workflows } = useReviewWorkflows();\n  const currentWorkflow = useForm('ContentTypesSelector', (state) => state.values);\n\n  const { error, value, onChange } = useField('contentTypes');\n\n  const formatter = useCollator(locale, {\n    sensitivity: 'base',\n  });\n\n  const isDisabled =\n    disabled ||\n    isLoading ||\n    !contentTypes ||\n    (contentTypes.collectionType.length === 0 && contentTypes.singleType.length === 0);\n\n  const collectionTypes = (contentTypes?.collectionType ?? [])\n    .toSorted((a, b) => formatter.compare(a.info.displayName, b.info.displayName))\n    .map((contentType) => ({\n      label: contentType.info.displayName,\n      value: contentType.uid,\n    }));\n\n  const singleTypes = (contentTypes?.singleType ?? []).map((contentType) => ({\n    label: contentType.info.displayName,\n    value: contentType.uid,\n  }));\n\n  return (\n    <Field.Root error={error} name={'contentTypes'}>\n      <Field.Label>\n        {formatMessage({\n          id: 'Settings.review-workflows.workflow.contentTypes.label',\n          defaultMessage: 'Associated to',\n        })}\n      </Field.Label>\n      <MultiSelect\n        customizeContent={(value) =>\n          formatMessage(\n            {\n              id: 'Settings.review-workflows.workflow.contentTypes.displayValue',\n              defaultMessage:\n                '{count} {count, plural, one {content type} other {content types}} selected',\n            },\n            { count: value?.length }\n          )\n        }\n        disabled={isDisabled}\n        onChange={(values) => {\n          onChange('contentTypes', values);\n        }}\n        value={value}\n        placeholder={formatMessage({\n          id: 'Settings.review-workflows.workflow.contentTypes.placeholder',\n          defaultMessage: 'Select',\n        })}\n      >\n        {[\n          ...(collectionTypes.length > 0\n            ? [\n                {\n                  label: formatMessage({\n                    id: 'Settings.review-workflows.workflow.contentTypes.collectionTypes.label',\n                    defaultMessage: 'Collection Types',\n                  }),\n                  children: collectionTypes,\n                },\n              ]\n            : []),\n\n          ...(singleTypes.length > 0\n            ? [\n                {\n                  label: formatMessage({\n                    id: 'Settings.review-workflows.workflow.contentTypes.singleTypes.label',\n                    defaultMessage: 'Single Types',\n                  }),\n                  children: singleTypes,\n                },\n              ]\n            : []),\n        ].map((opt) => {\n          return (\n            <MultiSelectGroup\n              key={opt.label}\n              label={opt.label}\n              values={opt.children.map((child) => child.value.toString())}\n            >\n              {opt.children.map((child) => {\n                const { name: assignedWorkflowName } =\n                  workflows?.find(\n                    (workflow) =>\n                      ((currentWorkflow && workflow.id !== currentWorkflow.id) ||\n                        !currentWorkflow) &&\n                      workflow.contentTypes.includes(child.value)\n                  ) ?? {};\n\n                return (\n                  <NestedOption key={child.value} value={child.value}>\n                    <Typography>\n                      {\n                        // @ts-expect-error - formatMessage options doesn't expect to be a React component but that's what we need actually for the <i> and <em> components\n                        formatMessage(\n                          {\n                            id: 'Settings.review-workflows.workflow.contentTypes.assigned.notice',\n                            defaultMessage:\n                              '{label} {name, select, undefined {} other {<i>(assigned to <em>{name}</em> workflow)</i>}}',\n                          },\n                          {\n                            label: child.label,\n                            name: assignedWorkflowName,\n                            em: (...children) => (\n                              <Typography tag=\"em\" fontWeight=\"bold\">\n                                {children}\n                              </Typography>\n                            ),\n                            i: (...children) => (\n                              <ContentTypeTakeNotice>{children}</ContentTypeTakeNotice>\n                            ),\n                          }\n                        )\n                      }\n                    </Typography>\n                  </NestedOption>\n                );\n              })}\n            </MultiSelectGroup>\n          );\n        })}\n      </MultiSelect>\n    </Field.Root>\n  );\n};\n\nconst NestedOption = styled(MultiSelectOption)`\n  padding-left: ${({ theme }) => theme.spaces[7]};\n`;\n\nconst ContentTypeTakeNotice = styled(Typography)`\n  font-style: italic;\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * StageSelector\n * -----------------------------------------------------------------------------------------------*/\ninterface StageSelectorProps {\n  disabled?: boolean;\n}\n\nconst StageSelector = ({ disabled }: StageSelectorProps) => {\n  const { value: stages = [] } = useField<WorkflowStage[]>('stages');\n  const { formatMessage } = useIntl();\n\n  const { error, value, onChange } = useField('stageRequiredToPublish');\n\n  // stages with empty names are not valid, so we avoid them from being used to avoid errors\n  const validStages = stages.filter((stage) => stage.name);\n\n  return (\n    <Field.Root\n      error={error}\n      name=\"stageRequiredToPublish\"\n      hint={formatMessage({\n        id: 'settings.review-workflows.workflow.stageRequiredToPublish.hint',\n        defaultMessage:\n          'Prevents entries from being published if they are not at the required stage.',\n      })}\n    >\n      <Field.Label>\n        {formatMessage({\n          id: 'settings.review-workflows.workflow.stageRequiredToPublish.label',\n          defaultMessage: 'Required stage for publishing',\n        })}\n      </Field.Label>\n      <SingleSelect\n        disabled={disabled}\n        onChange={(value) => {\n          onChange('stageRequiredToPublish', value);\n        }}\n        value={value}\n      >\n        <SingleSelectOption value={''}>\n          {formatMessage({\n            id: 'settings.review-workflows.workflow.stageRequiredToPublish.any',\n            defaultMessage: 'Any stage',\n          })}\n        </SingleSelectOption>\n        {validStages.map((stage, i) => (\n          <SingleSelectOption\n            key={`requiredToPublishStage-${stage.id || stage.__temp_key__}`}\n            value={stage.id?.toString() || stage.__temp_key__}\n          >\n            {stage.name}\n          </SingleSelectOption>\n        ))}\n      </SingleSelect>\n      <Field.Hint />\n    </Field.Root>\n  );\n};\n\nexport { WorkflowAttributes };\nexport type { WorkflowAttributesProps };\n", "import * as React from 'react';\n\nimport {\n  ConfirmDialog,\n  BackButton,\n  useNotification,\n  useAPIErrorHandler,\n  useRBAC,\n  Form,\n  Page,\n  FormProps,\n  FormHelpers,\n} from '@strapi/admin/strapi-admin';\nimport { useLicenseLimits } from '@strapi/admin/strapi-admin/ee';\nimport { Button, Dialog, Flex, Typography } from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport { generateNKeysBetween } from 'fractional-indexing';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport * as yup from 'yup';\n\nimport { LimitsModal } from '../../components/LimitsModal';\nimport {\n  CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME,\n  CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME,\n} from '../../constants';\nimport { useTypedSelector } from '../../modules/hooks';\nimport { isBaseQueryError } from '../../utils/api';\n\nimport * as Layout from './components/Layout';\nimport { Stages, WorkflowStage } from './components/Stages';\nimport { WorkflowAttributes } from './components/WorkflowAttributes';\nimport { useReviewWorkflows } from './hooks/useReviewWorkflows';\n\nimport type { Stage, Workflow } from '../../../../shared/contracts/review-workflows';\n\n/* -------------------------------------------------------------------------------------------------\n * EditPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst WORKFLOW_SCHEMA = yup.object({\n  contentTypes: yup.array().of(yup.string()),\n  name: yup\n    .string()\n    .max(255, {\n      id: 'review-workflows.validation.name.max-length',\n      defaultMessage: 'Name can not be longer than 255 characters',\n    })\n    .required()\n    .nullable(),\n  stages: yup\n    .array()\n    .of(\n      yup.object().shape({\n        name: yup\n          .string()\n          .nullable()\n          .required({\n            id: 'review-workflows.validation.stage.name',\n            defaultMessage: 'Name is required',\n          })\n          .max(255, {\n            id: 'review-workflows.validation.stage.max-length',\n            defaultMessage: 'Name can not be longer than 255 characters',\n          })\n          .test(\n            'unique-name',\n            {\n              id: 'review-workflows.validation.stage.duplicate',\n              defaultMessage: 'Stage name must be unique',\n            },\n            (stageName, context) => {\n              // @ts-expect-error it does exist.\n              const { stages } = context.from[1].value;\n\n              return stages.filter((stage: Stage) => stage.name === stageName).length === 1;\n            }\n          ),\n        color: yup\n          .string()\n          .nullable()\n          .required({\n            id: 'review-workflows.validation.stage.color',\n            defaultMessage: 'Color is required',\n          })\n          .matches(/^#(?:[0-9a-fA-F]{3}){1,2}$/i),\n\n        permissions: yup\n          .array(\n            yup.object({\n              role: yup\n                .number()\n                .strict()\n                .typeError({\n                  id: 'review-workflows.validation.stage.permissions.role.number',\n                  defaultMessage: 'Role must be of type number',\n                })\n                .required(),\n              action: yup.string().required({\n                id: 'review-workflows.validation.stage.permissions.action.required',\n                defaultMessage: 'Action is a required argument',\n              }),\n            })\n          )\n          .strict(),\n      })\n    )\n    .min(1),\n  stageRequiredToPublish: yup.string().nullable(),\n});\n\nconst EditPage = () => {\n  const { id = '' } = useParams<{ id: string }>();\n  const isCreatingWorkflow = id === 'create';\n  const { formatMessage } = useIntl();\n  const { _unstableFormatValidationErrors: formatValidationErrors } = useAPIErrorHandler();\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const {\n    isLoading: isLoadingWorkflow,\n    meta,\n    workflows,\n    error,\n    update,\n    create,\n  } = useReviewWorkflows();\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions['settings']?.['review-workflows']\n  );\n  const {\n    allowedActions: { canDelete, canUpdate, canCreate },\n  } = useRBAC(permissions);\n\n  const [savePrompts, setSavePrompts] = React.useState<{\n    hasDeletedServerStages?: boolean;\n    hasReassignedContentTypes?: boolean;\n  }>({});\n  const { getFeature, isLoading: isLicenseLoading } = useLicenseLimits();\n  const [showLimitModal, setShowLimitModal] = React.useState<'workflow' | 'stage' | null>(null);\n\n  const currentWorkflow = workflows?.find((workflow) => workflow.id === parseInt(id, 10));\n  const contentTypesFromOtherWorkflows = workflows\n    ?.filter((workflow) => workflow.id !== parseInt(id, 10))\n    .flatMap((workflow) => workflow.contentTypes);\n\n  const limits = getFeature<string>('review-workflows');\n  const numberOfWorkflows = limits?.[CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME];\n  const stagesPerWorkflow = limits?.[CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME];\n\n  interface FormValues {\n    name: string;\n    stages: WorkflowStage[];\n    contentTypes: string[];\n    stageRequiredToPublish: string | null;\n  }\n\n  const submitForm = async (data: FormValues, helpers: Pick<FormHelpers, 'setErrors'>) => {\n    try {\n      const { stageRequiredToPublish, ...rest } = data;\n      const stageRequiredToPublishName =\n        stageRequiredToPublish === ''\n          ? null\n          : rest.stages.find(\n              (stage) =>\n                stage.id === Number(stageRequiredToPublish) ||\n                stage.__temp_key__ === stageRequiredToPublish\n            )?.name;\n\n      if (!isCreatingWorkflow) {\n        const res = await update(id, {\n          ...rest,\n          // compare permissions of stages and only submit them if at least one has\n          // changed; this enables partial updates e.g. for users who don't have\n          // permissions to see roles\n          stages: rest.stages.map((stage) => {\n            let hasUpdatedPermissions = true;\n            const serverStage = currentWorkflow?.stages?.find(\n              (serverStage) => serverStage.id === stage?.id\n            );\n            if (serverStage) {\n              hasUpdatedPermissions =\n                serverStage.permissions?.length !== stage.permissions?.length ||\n                !serverStage.permissions?.every(\n                  (serverPermission) =>\n                    !!stage.permissions?.find(\n                      (permission) => permission.role === serverPermission.role\n                    )\n                );\n            }\n            return {\n              ...stage,\n              permissions: hasUpdatedPermissions ? stage.permissions : undefined,\n            } satisfies Stage;\n          }),\n          stageRequiredToPublishName,\n        });\n\n        if ('error' in res && isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n          helpers.setErrors(formatValidationErrors(res.error));\n        }\n      } else {\n        const res = await create({\n          ...rest,\n          stageRequiredToPublishName,\n        });\n\n        if ('error' in res && isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n          helpers.setErrors(formatValidationErrors(res.error));\n        } else if ('data' in res) {\n          navigate(`../${res.data.id}`, { replace: true });\n        }\n      }\n    } catch (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'An error occurred',\n        }),\n      });\n    }\n    setSavePrompts({});\n  };\n\n  const handleConfirmDeleteDialog =\n    (data: FormValues, helpers: Pick<FormHelpers, 'setErrors'>) => async () => {\n      await submitForm(data, helpers);\n    };\n\n  const handleConfirmClose = () => {\n    setSavePrompts({});\n  };\n\n  const handleSubmit: FormProps<FormValues>['onSubmit'] = async (data, helpers) => {\n    const isContentTypeReassignment = data.contentTypes.some((contentType) =>\n      contentTypesFromOtherWorkflows?.includes(contentType)\n    );\n    const hasDeletedServerStages =\n      !isCreatingWorkflow &&\n      !currentWorkflow?.stages.every((stage) =>\n        data.stages.some((newStage) => newStage.id === stage.id)\n      );\n\n    if (meta && numberOfWorkflows && meta?.workflowCount > parseInt(numberOfWorkflows, 10)) {\n      /**\n       * If the current license has a limit, check if the total count of workflows\n       * exceeds that limit and display the limits modal instead of sending the\n       * update, because it would throw an API error.\n       */\n      setShowLimitModal('workflow');\n\n      /**\n       * If the current license has a limit, check if the total count of stages\n       * exceeds that limit and display the limits modal instead of sending the\n       * update, because it would throw an API error.\n       */\n    } else if (\n      data.stages &&\n      stagesPerWorkflow &&\n      data.stages.length > parseInt(stagesPerWorkflow, 10)\n    ) {\n      setShowLimitModal('stage');\n    } else if (hasDeletedServerStages || isContentTypeReassignment) {\n      if (hasDeletedServerStages) {\n        setSavePrompts((prev) => ({ ...prev, hasDeletedServerStages: true }));\n      }\n\n      if (isContentTypeReassignment) {\n        setSavePrompts((prev) => ({ ...prev, hasReassignedContentTypes: true }));\n      }\n    } else {\n      await submitForm(data, helpers);\n    }\n  };\n\n  /**\n   * If the current license has a limit:\n   * check if the total count of workflows or stages exceeds that limit and display\n   * the limits modal on page load. It can be closed by the user, but the\n   * API will throw an error in case they try to create a new workflow or update the\n   * stages.\n   *\n   * If the current license does not have a limit (e.g. offline license):\n   * do nothing (for now). In case they are trying to create the 201st workflow/ stage\n   * the API will throw an error.\n   *\n   */\n  React.useEffect(() => {\n    if (!isLoadingWorkflow && !isLicenseLoading) {\n      if (meta && numberOfWorkflows && meta?.workflowCount > parseInt(numberOfWorkflows, 10)) {\n        setShowLimitModal('workflow');\n      } else if (\n        currentWorkflow &&\n        currentWorkflow.stages &&\n        stagesPerWorkflow &&\n        currentWorkflow.stages.length > parseInt(stagesPerWorkflow, 10)\n      ) {\n        setShowLimitModal('stage');\n      }\n    }\n  }, [\n    currentWorkflow,\n    isLicenseLoading,\n    isLoadingWorkflow,\n    limits,\n    meta,\n    numberOfWorkflows,\n    stagesPerWorkflow,\n  ]);\n\n  const initialValues: FormValues = React.useMemo(() => {\n    if (isCreatingWorkflow || !currentWorkflow) {\n      return {\n        name: '',\n        stages: [],\n        contentTypes: [],\n        stageRequiredToPublish: '',\n      };\n    } else {\n      return {\n        name: currentWorkflow.name,\n        stages: addTmpKeysToStages(currentWorkflow.stages),\n        contentTypes: currentWorkflow.contentTypes,\n        stageRequiredToPublish: currentWorkflow.stageRequiredToPublish?.id.toString() ?? '',\n      };\n    }\n  }, [currentWorkflow, isCreatingWorkflow]);\n\n  if (isLoadingWorkflow) {\n    return <Page.Loading />;\n  }\n\n  if (error) {\n    return <Page.Error />;\n  }\n\n  return (\n    <>\n      <Layout.DragLayerRendered />\n\n      <Form\n        method={isCreatingWorkflow ? 'POST' : 'PUT'}\n        initialValues={initialValues}\n        validationSchema={WORKFLOW_SCHEMA}\n        onSubmit={handleSubmit}\n      >\n        {({ modified, isSubmitting, values, setErrors }) => (\n          <>\n            <Layout.Header\n              navigationAction={<BackButton fallback=\"..\" />}\n              primaryAction={\n                canUpdate || canCreate ? (\n                  <Button\n                    startIcon={<Check />}\n                    type=\"submit\"\n                    disabled={!modified || isSubmitting || values.stages.length === 0}\n                    // if the confirm dialog is open the loading state is on\n                    // the confirm button already\n                    loading={!Boolean(Object.keys(savePrompts).length > 0) && isSubmitting}\n                  >\n                    {formatMessage({\n                      id: 'global.save',\n                      defaultMessage: 'Save',\n                    })}\n                  </Button>\n                ) : null\n              }\n              subtitle={formatMessage(\n                {\n                  id: 'review-workflows.page.subtitle',\n                  defaultMessage: '{count, plural, one {# stage} other {# stages}}',\n                },\n                { count: currentWorkflow?.stages?.length ?? 0 }\n              )}\n              title={\n                currentWorkflow?.name ||\n                formatMessage({\n                  id: 'Settings.review-workflows.create.page.title',\n                  defaultMessage: 'Create Review Workflow',\n                })\n              }\n            />\n            <Layout.Root>\n              <Flex alignItems=\"stretch\" direction=\"column\" gap={7}>\n                <WorkflowAttributes canUpdate={canUpdate || canCreate} />\n                <Stages\n                  canDelete={canDelete}\n                  canUpdate={canUpdate || canCreate}\n                  isCreating={isCreatingWorkflow}\n                />\n              </Flex>\n            </Layout.Root>\n            <Dialog.Root\n              open={Object.keys(savePrompts).length > 0}\n              onOpenChange={handleConfirmClose}\n            >\n              <ConfirmDialog onConfirm={handleConfirmDeleteDialog(values, { setErrors })}>\n                <Flex direction=\"column\" gap={5}>\n                  {savePrompts.hasDeletedServerStages && (\n                    <Typography textAlign=\"center\" variant=\"omega\">\n                      {formatMessage({\n                        id: 'review-workflows.page.delete.confirm.stages.body',\n                        defaultMessage:\n                          'All entries assigned to deleted stages will be moved to the previous stage.',\n                      })}\n                    </Typography>\n                  )}\n\n                  {savePrompts.hasReassignedContentTypes && (\n                    <Typography textAlign=\"center\" variant=\"omega\">\n                      {formatMessage(\n                        {\n                          id: 'review-workflows.page.delete.confirm.contentType.body',\n                          defaultMessage:\n                            '{count} {count, plural, one {content-type} other {content-types}} {count, plural, one {is} other {are}} already mapped to {count, plural, one {another workflow} other {other workflows}}. If you save changes, {count, plural, one {this} other {these}} {count, plural, one {content-type} other {{count} content-types}} will no more be mapped to the {count, plural, one {another workflow} other {other workflows}} and all corresponding information will be removed.',\n                        },\n                        {\n                          count:\n                            contentTypesFromOtherWorkflows?.filter((contentType) =>\n                              values.contentTypes.includes(contentType)\n                            ).length ?? 0,\n                        }\n                      )}\n                    </Typography>\n                  )}\n\n                  <Typography textAlign=\"center\" variant=\"omega\">\n                    {formatMessage({\n                      id: 'review-workflows.page.delete.confirm.confirm',\n                      defaultMessage: 'Are you sure you want to save?',\n                    })}\n                  </Typography>\n                </Flex>\n              </ConfirmDialog>\n            </Dialog.Root>\n          </>\n        )}\n      </Form>\n\n      <LimitsModal.Root\n        open={showLimitModal === 'workflow'}\n        onOpenChange={() => setShowLimitModal(null)}\n      >\n        <LimitsModal.Title>\n          {formatMessage({\n            id: 'review-workflows.edit.page.workflows.limit.title',\n            defaultMessage: 'You’ve reached the limit of workflows in your plan',\n          })}\n        </LimitsModal.Title>\n\n        <LimitsModal.Body>\n          {formatMessage({\n            id: 'review-workflows.edit.page.workflows.limit.body',\n            defaultMessage: 'Delete a workflow or contact Sales to enable more workflows.',\n          })}\n        </LimitsModal.Body>\n      </LimitsModal.Root>\n\n      <LimitsModal.Root\n        open={showLimitModal === 'stage'}\n        onOpenChange={() => setShowLimitModal(null)}\n      >\n        <LimitsModal.Title>\n          {formatMessage({\n            id: 'review-workflows.edit.page.stages.limit.title',\n            defaultMessage: 'You have reached the limit of stages for this workflow in your plan',\n          })}\n        </LimitsModal.Title>\n\n        <LimitsModal.Body>\n          {formatMessage({\n            id: 'review-workflows.edit.page.stages.limit.body',\n            defaultMessage: 'Try deleting some stages or contact Sales to enable more stages.',\n          })}\n        </LimitsModal.Body>\n      </LimitsModal.Root>\n    </>\n  );\n};\n\nconst addTmpKeysToStages = (data: Workflow['stages']) => {\n  const keys = generateNKeysBetween(undefined, undefined, data.length);\n\n  return data.map((datum, index) => ({\n    ...datum,\n    __temp_key__: keys[index],\n  }));\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedEditPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedEditPage = () => {\n  const permissions = useTypedSelector((state) => {\n    const {\n      create = [],\n      update = [],\n      read = [],\n    } = state.admin_app.permissions.settings?.['review-workflows'] ?? {};\n\n    return [...create, ...update, ...read];\n  });\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <EditPage />\n    </Page.Protect>\n  );\n};\n\nexport { ProtectedEditPage };\n"],
  "mappings": "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",
  "names": ["adminApi", "reviewWorkflowsApi", "injectEndpoints", "endpoints", "builder", "getAdminRoles", "query", "url", "method", "transformResponse", "res", "data", "useGetAdminRolesQuery", "useKeyboardDragAndDrop", "active", "index", "onCancel", "onDropItem", "onGrabItem", "onMoveItem", "isSelected", "setIsSelected", "useState", "handleMove", "movement", "handleDragClick", "handleCancel", "handleKeyDown", "e", "key", "preventDefault", "DIRECTIONS", "UPWARD", "DOWNWARD", "DROP_SENSITIVITY", "REGULAR", "IMMEDIATE", "useDragAndDrop", "type", "item", "onStart", "onEnd", "dropSensitivity", "objectRef", "useRef", "handlerId", "isOver", "dropRef", "useDrop", "accept", "collect", "monitor", "getHandlerId", "shallow", "drop", "draggedIndex", "newIndex", "hover", "current", "dragIndex", "hoverBoundingRect", "getBoundingClientRect", "hoverMiddleY", "bottom", "top", "clientOffset", "getClientOffset", "hoverClientY", "y", "Array", "isArray", "minLength", "Math", "min", "length", "areEqual", "isLessThan", "isGreaterThan", "i", "getDragDirection", "isDragging", "didDrop", "getInitialClientOffset", "deltaY", "direction", "dragRef", "dragPreviewRef", "useDrag", "width", "end", "canDrag", "id", "getItem", "undefined", "initialOffset", "currentOffset", "isOverDropTarget", "AddStage", "children", "props", "_jsx", "StyledButton", "tag", "background", "borderColor", "paddingBottom", "paddingLeft", "paddingRight", "paddingTop", "shadow", "Typography", "variant", "fontWeight", "_jsxs", "Flex", "gap", "PlusCircle", "height", "aria-hidden", "styled", "Box", "theme", "colors", "neutral500", "primary600", "Stages", "canDelete", "canUpdate", "isCreating", "formatMessage", "useIntl", "trackUsage", "useTracking", "addFieldRow", "useForm", "state", "value", "stages", "useField", "position", "Background", "left", "alignItems", "map", "stage", "Stage", "canReorder", "stagesCount", "defaultOpen", "__temp_key__", "onClick", "name", "defaultMessage", "permissions", "color", "liveText", "setLiveText", "stageErrors", "errors", "error", "moveFieldRow", "removeFieldRow", "getItemPos", "handleGrabStage", "handleDropStage", "handleCancelDragStage", "handleMoveStage", "oldIndex", "stageRef", "DRAG_DROP_TYPES", "STAGE", "composedRef", "useComposedRefs", "React", "useEffect", "getEmptyImage", "captureDraggingState", "handleCloneClick", "useId", "ref", "VisuallyHidden", "aria-live", "borderStyle", "borderWidth", "display", "hasRadius", "padding", "AccordionRoot", "onValueChange", "defaultValue", "$error", "Object", "values", "Accordion", "Item", "Header", "Trigger", "Actions", "_Fragment", "Menu", "Root", "ContextMenuTrigger", "size", "endIcon", "More", "focusable", "Content", "popoverPlacement", "zIndex", "SubRoot", "MenuItem", "DeleteMenuItem", "IconButton", "data-handler-id", "label", "stopPropagation", "onKeyDown", "Drag", "Grid", "disabled", "required", "placeholder", "field", "col", "InputRenderer", "danger600", "neutral200", "neutral100", "ColorSelector", "PermissionsField", "AdminInputRenderer", "onChange", "colorOptions", "AVAILABLE_COLORS", "hex", "themeColorName", "getStageColorByHex", "Field", "Label", "SingleSelect", "v", "toString", "toUpperCase", "startIcon", "shrink", "SingleSelectOption", "Error", "toggleNotification", "useNotification", "isApplyAllConfirmationOpen", "setIsApplyAllConfirmationOpen", "allStages", "onFormValueChange", "rolesErrorCount", "roles", "isLoading", "getRolesError", "filteredRoles", "filter", "role", "code", "status", "blockTransition", "message", "hint", "TextInput", "startAction", "EyeStriked", "fill", "Hint", "PermissionWrapper", "grow", "MultiSelect", "parseInt", "action", "permission", "withTags", "MultiSelectGroup", "r", "NestedOption", "Dialog", "open", "onOpenChange", "Duplicate", "ConfirmDialog", "onConfirm", "MultiSelectOption", "spaces", "WorkflowAttributes", "ContentTypesSelector", "StageSelector", "locale", "contentTypes", "useGetContentTypesQuery", "workflows", "useReviewWorkflows", "currentWorkflow", "formatter", "useCollator", "sensitivity", "isDisabled", "collectionType", "singleType", "collectionTypes", "toSorted", "a", "b", "compare", "info", "displayName", "contentType", "uid", "singleTypes", "customizeContent", "count", "opt", "child", "assignedWorkflowName", "find", "workflow", "includes", "em", "ContentTypeTakeNotice", "validStages", "WORKFLOW_SCHEMA", "object", "array", "of", "string", "max", "nullable", "shape", "test", "stageName", "context", "from", "matches", "number", "strict", "typeError", "stageRequiredToPublish", "EditPage", "useParams", "isCreatingWorkflow", "_unstableFormatValidationErrors", "formatValidationErrors", "useAPIErrorHandler", "navigate", "useNavigate", "isLoadingWorkflow", "meta", "update", "create", "useTypedSelector", "admin_app", "allowedActions", "canCreate", "useRBAC", "savePrompts", "setSavePrompts", "getFeature", "isLicenseLoading", "useLicenseLimits", "showLimitModal", "setShowLimitModal", "contentTypesFromOtherWorkflows", "flatMap", "limits", "numberOfWorkflows", "CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME", "stagesPerWorkflow", "CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME", "submitForm", "helpers", "rest", "stageRequiredToPublishName", "Number", "hasUpdatedPermissions", "serverStage", "every", "serverPermission", "isBaseQueryError", "setErrors", "replace", "handleConfirmDeleteDialog", "handleConfirmClose", "handleSubmit", "isContentTypeReassignment", "some", "hasDeletedServerStages", "newStage", "workflowCount", "prev", "hasReassignedContentTypes", "initialValues", "useMemo", "addTmpKeysToStages", "Page", "Loading", "Layout", "Form", "validationSchema", "onSubmit", "modified", "isSubmitting", "navigationAction", "BackButton", "fallback", "primaryAction", "Button", "Check", "loading", "Boolean", "keys", "subtitle", "title", "textAlign", "LimitsModal", "Title", "Body", "generateNKeysBetween", "datum", "ProtectedEditPage", "read", "settings", "Protect"]
}

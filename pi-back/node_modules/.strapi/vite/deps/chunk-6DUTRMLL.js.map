{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/pages/Settings/pages/Users/components/MagicLinkWrapper.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Users/components/MagicLinkCE.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Users/components/SelectRoles.tsx"],
  "sourcesContent": ["import { IconButton } from '@strapi/design-system';\nimport { Duplicate } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { ContentBox } from '../../../../../components/ContentBox';\nimport { useNotification } from '../../../../../features/Notifications';\nimport { useClipboard } from '../../../../../hooks/useClipboard';\n\ninterface MagicLinkWrapperProps {\n  children: string;\n  target: string;\n}\n\nconst MagicLinkWrapper = ({ children, target }: MagicLinkWrapperProps) => {\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const { copy } = useClipboard();\n\n  const copyLabel = formatMessage({\n    id: 'app.component.CopyToClipboard.label',\n    defaultMessage: 'Copy to clipboard',\n  });\n\n  const handleClick = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n\n    const didCopy = await copy(target);\n\n    if (didCopy) {\n      toggleNotification({\n        type: 'info',\n        message: formatMessage({ id: 'notification.link-copied' }),\n      });\n    }\n  };\n\n  return (\n    <ContentBox\n      endAction={\n        <IconButton label={copyLabel} variant=\"ghost\" onClick={handleClick}>\n          <Duplicate />\n        </IconButton>\n      }\n      title={target}\n      titleEllipsis\n      subtitle={children}\n      icon={<span style={{ fontSize: 32 }}>✉️</span>}\n      iconBackground=\"neutral100\"\n    />\n  );\n};\n\nexport { MagicLinkWrapper };\nexport type { MagicLinkWrapperProps };\n", "import { useIntl } from 'react-intl';\n\nimport { getBasename } from '../../../../../core/utils/basename';\n\nimport { MagicLinkWrapper } from './MagicLinkWrapper';\n\ninterface MagicLinkCEProps {\n  registrationToken: string;\n}\n\nconst MagicLinkCE = ({ registrationToken }: MagicLinkCEProps) => {\n  const { formatMessage } = useIntl();\n  const target = `${\n    window.location.origin\n  }${getBasename()}/auth/register?registrationToken=${registrationToken}`;\n\n  return (\n    <MagicLinkWrapper target={target}>\n      {formatMessage({\n        id: 'app.components.Users.MagicLink.connect',\n        defaultMessage: 'Copy and share this link to give access to this user',\n      })}\n    </MagicLinkWrapper>\n  );\n};\n\nexport { MagicLinkCE };\nexport type { MagicLinkCEProps };\n", "import { Field, MultiSelect, MultiSelectOption } from '@strapi/design-system';\nimport { Loader as LoadingIcon } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled, keyframes } from 'styled-components';\n\nimport { useField } from '../../../../../components/Form';\nimport { useAdminRoles } from '../../../../../hooks/useAdminRoles';\n\ninterface SelectRolesProps {\n  disabled?: boolean;\n}\n\nconst SelectRoles = ({ disabled }: SelectRolesProps) => {\n  const { isLoading, roles } = useAdminRoles();\n\n  const { formatMessage } = useIntl();\n  const { value = [], onChange, error } = useField<string[]>('roles');\n\n  return (\n    <Field.Root\n      error={error}\n      hint={formatMessage({\n        id: 'app.components.Users.ModalCreateBody.block-title.roles.description',\n        defaultMessage: 'A user can have one or several roles',\n      })}\n      name=\"roles\"\n      required\n    >\n      <Field.Label>\n        {formatMessage({\n          id: 'app.components.Users.ModalCreateBody.block-title.roles',\n          defaultMessage: \"User's roles\",\n        })}\n      </Field.Label>\n      <MultiSelect\n        disabled={disabled}\n        onChange={(v) => {\n          onChange('roles', v);\n        }}\n        placeholder={formatMessage({\n          id: 'app.components.Select.placeholder',\n          defaultMessage: 'Select',\n        })}\n        startIcon={isLoading ? <Loader /> : undefined}\n        value={value.map((v) => v.toString())}\n        withTags\n      >\n        {roles.map((role) => {\n          return (\n            <MultiSelectOption key={role.id} value={role.id.toString()}>\n              {formatMessage({\n                id: `global.${role.code}`,\n                defaultMessage: role.name,\n              })}\n            </MultiSelectOption>\n          );\n        })}\n      </MultiSelect>\n      <Field.Error />\n      <Field.Hint />\n    </Field.Root>\n  );\n};\n\nconst rotation = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(359deg);\n  }\n`;\n\nconst LoadingWrapper = styled.div`\n  animation: ${rotation} 2s infinite linear;\n`;\n\nconst Loader = () => (\n  <LoadingWrapper>\n    <LoadingIcon />\n  </LoadingWrapper>\n);\n\nexport { SelectRoles };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAMA,mBAAmB,CAAC,EAAEC,UAAUC,OAAM,MAAyB;AACnE,QAAM,EAAEC,mBAAkB,IAAKC,gBAAAA;AAC/B,QAAM,EAAEC,cAAa,IAAKC,QAAAA;AAC1B,QAAM,EAAEC,KAAI,IAAKC,aAAAA;AAEjB,QAAMC,YAAYJ,cAAc;IAC9BK,IAAI;IACJC,gBAAgB;EAClB,CAAA;AAEA,QAAMC,cAAc,OAAOC,MAAAA;AACzBA,MAAEC,eAAc;AAEhB,UAAMC,UAAU,MAAMR,KAAKL,MAAAA;AAE3B,QAAIa,SAAS;AACXZ,yBAAmB;QACjBa,MAAM;QACNC,SAASZ,cAAc;UAAEK,IAAI;QAA2B,CAAA;MAC1D,CAAA;IACF;EACF;AAEA,aACEQ,wBAACC,YAAAA;IACCC,eACEF,wBAACG,YAAAA;MAAWC,OAAOb;MAAWc,SAAQ;MAAQC,SAASZ;MACrD,cAAAM,wBAACO,eAAAA,CAAAA,CAAAA;;IAGLC,OAAOxB;IACPyB,eAAa;IACbC,UAAU3B;IACV4B,UAAMX,wBAACY,QAAAA;MAAKC,OAAO;QAAEC,UAAU;MAAG;MAAG,UAAA;;IACrCC,gBAAe;;AAGrB;ACxCA,IAAMC,cAAc,CAAC,EAAEC,kBAAiB,MAAoB;AAC1D,QAAM,EAAE9B,cAAa,IAAKC,QAAAA;AAC1B,QAAMJ,SAAS,GACbkC,OAAOC,SAASC,MAAM,GACrBC,YAAAA,CAAAA,oCAAiDJ,iBAAAA;AAEpD,aACEjB,wBAAClB,kBAAAA;IAAiBE;cACfG,cAAc;MACbK,IAAI;MACJC,gBAAgB;IAClB,CAAA;;AAGN;ACZA,IAAM6B,cAAc,CAAC,EAAEC,SAAQ,MAAoB;AACjD,QAAM,EAAEC,WAAWC,MAAK,IAAKC,cAAAA;AAE7B,QAAM,EAAEvC,cAAa,IAAKC,QAAAA;AAC1B,QAAM,EAAEuC,QAAQ,CAAA,GAAIC,UAAUC,MAAK,IAAKC,SAAmB,OAAA;AAE3D,aACEC,yBAACC,MAAMC,MAAI;IACTJ;IACAK,MAAM/C,cAAc;MAClBK,IAAI;MACJC,gBAAgB;IAClB,CAAA;IACA0C,MAAK;IACLC,UAAQ;;UAERpC,wBAACgC,MAAMK,OAAK;kBACTlD,cAAc;UACbK,IAAI;UACJC,gBAAgB;QAClB,CAAA;;UAEFO,wBAACsC,aAAAA;QACCf;QACAK,UAAU,CAACW,MAAAA;AACTX,mBAAS,SAASW,CAAAA;QACpB;QACAC,aAAarD,cAAc;UACzBK,IAAI;UACJC,gBAAgB;QAClB,CAAA;QACAgD,WAAWjB,gBAAYxB,wBAAC0C,QAAYC,CAAAA,CAAAA,IAAAA;QACpChB,OAAOA,MAAMiB,IAAI,CAACL,MAAMA,EAAEM,SAAQ,CAAA;QAClCC,UAAQ;kBAEPrB,MAAMmB,IAAI,CAACG,SAAAA;AACV,qBACE/C,wBAACgD,mBAAAA;YAAgCrB,OAAOoB,KAAKvD,GAAGqD,SAAQ;sBACrD1D,cAAc;cACbK,IAAI,UAAUuD,KAAKE,IAAI;cACvBxD,gBAAgBsD,KAAKZ;YACvB,CAAA;UAJsBY,GAAAA,KAAKvD,EAAE;QAOnC,CAAA;;UAEFQ,wBAACgC,MAAMkB,OAAK,CAAA,CAAA;UACZlD,wBAACgC,MAAMmB,MAAI,CAAA,CAAA;;;AAGjB;AAEA,IAAMC,WAAWC;;;;;;;;AASjB,IAAMC,iBAAiBC,GAAOC;eACfJ,QAAS;;AAGxB,IAAMV,SAAS,UACb1C,wBAACsD,gBAAAA;EACC,cAAAtD,wBAACyD,eAAAA,CAAAA,CAAAA;;",
  "names": ["MagicLinkWrapper", "children", "target", "toggleNotification", "useNotification", "formatMessage", "useIntl", "copy", "useClipboard", "copyLabel", "id", "defaultMessage", "handleClick", "e", "preventDefault", "didCopy", "type", "message", "_jsx", "ContentBox", "endAction", "IconButton", "label", "variant", "onClick", "Duplicate", "title", "titleEllipsis", "subtitle", "icon", "span", "style", "fontSize", "iconBackground", "MagicLinkCE", "registrationToken", "window", "location", "origin", "getBasename", "SelectRoles", "disabled", "isLoading", "roles", "useAdminRoles", "value", "onChange", "error", "useField", "_jsxs", "Field", "Root", "hint", "name", "required", "Label", "MultiSelect", "v", "placeholder", "startIcon", "Loader", "undefined", "map", "toString", "withTags", "role", "MultiSelectOption", "code", "Error", "Hint", "rotation", "keyframes", "LoadingWrapper", "styled", "div", "LoadingIcon"]
}

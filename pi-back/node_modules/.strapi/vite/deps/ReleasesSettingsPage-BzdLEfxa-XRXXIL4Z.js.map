{
  "version": 3,
  "sources": ["../../../@strapi/content-releases/admin/src/modules/hooks.ts", "../../../@strapi/content-releases/admin/src/pages/ReleasesSettingsPage.tsx"],
  "sourcesContent": ["import { Dispatch } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nimport type { Store } from '@strapi/admin/strapi-admin';\n\ntype RootState = ReturnType<Store['getState']>;\n\nconst useTypedDispatch: () => Dispatch = useDispatch;\nconst useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport { useTypedSelector, useTypedDispatch };\n", "import {\n  Form,\n  Layouts,\n  Page,\n  useAPIErrorHandler,\n  isFetchError,\n  useNotification,\n  useField,\n  useRBAC,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Button,\n  Combobox,\n  ComboboxOption,\n  Field,\n  Flex,\n  Grid,\n  Typography,\n} from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { useTypedSelector } from '../modules/hooks';\nimport { useGetReleaseSettingsQuery, useUpdateReleaseSettingsMutation } from '../services/release';\nimport { getTimezones } from '../utils/time';\nimport { SETTINGS_SCHEMA } from '../validation/schemas';\n\nimport type { UpdateSettings } from '../../../shared/contracts/settings';\n\nconst ReleasesSettingsPage = () => {\n  const { formatMessage } = useIntl();\n  const { formatAPIError } = useAPIErrorHandler();\n  const { toggleNotification } = useNotification();\n  const { data, isLoading: isLoadingSettings } = useGetReleaseSettingsQuery();\n  const [updateReleaseSettings, { isLoading: isSubmittingForm }] =\n    useUpdateReleaseSettingsMutation();\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions['settings']?.['releases']\n  );\n  const {\n    allowedActions: { canUpdate },\n  } = useRBAC(permissions);\n\n  const { timezoneList } = getTimezones(new Date());\n\n  const handleSubmit = async (body: UpdateSettings.Request['body']) => {\n    const { defaultTimezone } = body;\n    const isBodyTimezoneValid = timezoneList.some((timezone) => timezone.value === defaultTimezone);\n    const newBody =\n      !defaultTimezone || !isBodyTimezoneValid ? { defaultTimezone: null } : { ...body };\n    try {\n      const response = await updateReleaseSettings(newBody);\n\n      if ('data' in response) {\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: 'content-releases.pages.Settings.releases.setting.default-timezone-notification-success',\n            defaultMessage: 'Default timezone updated.',\n          }),\n        });\n      } else if (isFetchError(response.error)) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(response.error),\n        });\n      } else {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n        });\n      }\n    } catch (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  if (isLoadingSettings) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Layouts.Root>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Releases',\n          }\n        )}\n      </Page.Title>\n      <Page.Main aria-busy={isLoadingSettings} tabIndex={-1}>\n        <Form\n          method=\"PUT\"\n          initialValues={{\n            defaultTimezone: data?.data.defaultTimezone,\n          }}\n          onSubmit={handleSubmit}\n          validationSchema={SETTINGS_SCHEMA}\n        >\n          {({ modified, isSubmitting }: { modified: boolean; isSubmitting: boolean }) => {\n            return (\n              <>\n                <Layouts.Header\n                  primaryAction={\n                    canUpdate ? (\n                      <Button\n                        disabled={!modified || isSubmittingForm}\n                        loading={isSubmitting}\n                        startIcon={<Check />}\n                        type=\"submit\"\n                      >\n                        {formatMessage({\n                          id: 'global.save',\n                          defaultMessage: 'Save',\n                        })}\n                      </Button>\n                    ) : null\n                  }\n                  title={formatMessage({\n                    id: 'content-releases.pages.Settings.releases.title',\n                    defaultMessage: 'Releases',\n                  })}\n                  subtitle={formatMessage({\n                    id: 'content-releases.pages.Settings.releases.description',\n                    defaultMessage: 'Create and manage content updates',\n                  })}\n                />\n                <Layouts.Content>\n                  <Flex\n                    direction=\"column\"\n                    background=\"neutral0\"\n                    alignItems=\"stretch\"\n                    padding={6}\n                    gap={6}\n                    shadow=\"filterShadow\"\n                    hasRadius\n                  >\n                    <Typography variant=\"delta\" tag=\"h2\">\n                      {formatMessage({\n                        id: 'content-releases.pages.Settings.releases.preferences.title',\n                        defaultMessage: 'Preferences',\n                      })}\n                    </Typography>\n                    <Grid.Root>\n                      <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                        <TimezoneDropdown />\n                      </Grid.Item>\n                    </Grid.Root>\n                  </Flex>\n                </Layouts.Content>\n              </>\n            );\n          }}\n        </Form>\n      </Page.Main>\n    </Layouts.Root>\n  );\n};\n\nconst TimezoneDropdown = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions['settings']?.['releases']\n  );\n  const {\n    allowedActions: { canUpdate },\n  } = useRBAC(permissions);\n  const { formatMessage } = useIntl();\n  const { timezoneList } = getTimezones(new Date());\n  const field = useField('defaultTimezone');\n  return (\n    <Field.Root\n      name=\"defaultTimezone\"\n      hint={formatMessage({\n        id: 'content-releases.pages.Settings.releases.timezone.hint',\n        defaultMessage: 'The timezone of every release can still be changed individually. ',\n      })}\n      error={field.error}\n    >\n      <Field.Label>\n        {formatMessage({\n          id: 'content-releases.pages.Settings.releases.timezone.label',\n          defaultMessage: 'Default timezone',\n        })}\n      </Field.Label>\n      <Combobox\n        autocomplete={{ type: 'list', filter: 'contains' }}\n        onChange={(value) => field.onChange('defaultTimezone', value)}\n        onTextValueChange={(value) => field.onChange('defaultTimezone', value)}\n        onClear={() => field.onChange('defaultTimezone', '')}\n        value={field.value}\n        disabled={!canUpdate}\n      >\n        {timezoneList.map((timezone) => (\n          <ComboboxOption key={timezone.value} value={timezone.value}>\n            {timezone.value.replace(/&/, ' ')}\n          </ComboboxOption>\n        ))}\n      </Combobox>\n      <Field.Hint />\n      <Field.Error />\n    </Field.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedSettingsPage\n * -----------------------------------------------------------------------------------------------*/\n\nexport const ProtectedReleasesSettingsPage = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions['settings']?.['releases']?.read\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <ReleasesSettingsPage />\n    </Page.Protect>\n  );\n};\n"],
  "mappings": "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",
  "names": ["useTypedSelector", "useSelector", "ReleasesSettingsPage", "formatMessage", "useIntl", "formatAPIError", "useAPIErrorHandler", "toggleNotification", "useNotification", "data", "isLoading", "isLoadingSettings", "useGetReleaseSettingsQuery", "updateReleaseSettings", "isSubmittingForm", "useUpdateReleaseSettingsMutation", "permissions", "state", "admin_app", "allowedActions", "canUpdate", "useRBAC", "timezoneList", "getTimezones", "Date", "handleSubmit", "body", "defaultTimezone", "isBodyTimezoneValid", "some", "timezone", "value", "newBody", "response", "type", "message", "id", "defaultMessage", "isFetchError", "error", "_jsx", "Page", "Loading", "_jsxs", "Layouts", "Root", "Title", "name", "Main", "aria-busy", "tabIndex", "Form", "method", "initialValues", "onSubmit", "validationSchema", "SETTINGS_SCHEMA", "modified", "isSubmitting", "_Fragment", "Header", "primaryAction", "Button", "disabled", "loading", "startIcon", "Check", "title", "subtitle", "Content", "Flex", "direction", "background", "alignItems", "padding", "gap", "shadow", "hasRadius", "Typography", "variant", "tag", "Grid", "Item", "col", "s", "TimezoneDropdown", "field", "useField", "Field", "hint", "Label", "Combobox", "autocomplete", "filter", "onChange", "onTextValueChange", "onClear", "map", "ComboboxOption", "replace", "Hint", "Error", "ProtectedReleasesSettingsPage", "read", "Protect"]
}

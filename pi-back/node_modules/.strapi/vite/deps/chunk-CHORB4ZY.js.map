{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/pages/Settings/pages/Users/components/CreateActionCE.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Users/components/NewUserForm.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Users/ListPage.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Button, ButtonProps } from '@strapi/design-system';\nimport { Mail } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\ninterface CreateActionCEProps extends Pick<ButtonProps, 'onClick'> {}\n\nconst CreateActionCE = React.forwardRef<HTMLButtonElement, CreateActionCEProps>((props, ref) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Button ref={ref} startIcon={<Mail />} size=\"S\" {...props}>\n      {formatMessage({\n        id: 'Settings.permissions.users.create',\n        defaultMessage: 'Invite new user',\n      })}\n    </Button>\n  );\n});\n\nexport { CreateActionCE };\nexport type { CreateActionCEProps };\n", "import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  Flex,\n  Grid,\n  Modal,\n  Typography,\n  Breadcrumbs,\n  Crumb,\n} from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport * as yup from 'yup';\n\nimport { Form, type FormHelpers } from '../../../../../components/Form';\nimport { InputRenderer } from '../../../../../components/FormInputs/Renderer';\nimport { useNotification } from '../../../../../features/Notifications';\nimport { useAPIErrorHandler } from '../../../../../hooks/useAPIErrorHandler';\nimport { useEnterprise } from '../../../../../hooks/useEnterprise';\nimport { useCreateUserMutation } from '../../../../../services/users';\nimport { FormLayoutInputProps } from '../../../../../types/forms';\nimport { isBaseQueryError } from '../../../../../utils/baseQuery';\nimport { translatedErrors } from '../../../../../utils/translatedErrors';\n\nimport { MagicLinkCE } from './MagicLinkCE';\nimport { SelectRoles } from './SelectRoles';\n\nimport type { Data } from '@strapi/types';\n\ninterface ModalFormProps {\n  onToggle: () => void;\n}\n\ntype FormLayout = FormLayoutInputProps[][];\n\nconst ModalForm = ({ onToggle }: ModalFormProps) => {\n  const [currentStep, setStep] = React.useState<keyof typeof STEPPER>('create');\n  const [registrationToken, setRegistrationToken] = React.useState('');\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n  const roleLayout = useEnterprise<FormLayout, FormLayout, FormLayout>(\n    ROLE_LAYOUT,\n    async () =>\n      (\n        await import(\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/ModalForm'\n        )\n      ).ROLE_LAYOUT,\n    {\n      combine(ceRoles, eeRoles) {\n        return [...ceRoles, ...eeRoles];\n      },\n\n      defaultValue: [],\n    }\n  );\n\n  const initialValues = useEnterprise<InitialData>(\n    FORM_INITIAL_VALUES,\n    async () =>\n      (\n        await import(\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/ModalForm'\n        )\n      ).FORM_INITIAL_VALUES,\n    {\n      combine(ceValues, eeValues) {\n        return {\n          ...ceValues,\n          ...eeValues,\n        };\n      },\n\n      defaultValue: FORM_INITIAL_VALUES,\n    }\n  );\n  const MagicLink = useEnterprise(\n    MagicLinkCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/MagicLinkEE'\n        )\n      ).MagicLinkEE\n  );\n\n  const [createUser] = useCreateUserMutation();\n\n  const headerTitle = formatMessage({\n    id: 'Settings.permissions.users.create',\n    defaultMessage: 'Invite new user',\n  });\n\n  const handleSubmit = async (body: InitialData, { setErrors }: FormHelpers<InitialData>) => {\n    const res = await createUser({\n      ...body,\n      roles: body.roles ?? [],\n    });\n\n    if ('data' in res) {\n      // NOTE: when enabling SSO, the user doesn't have to register and the token is undefined\n      if (res.data.registrationToken) {\n        setRegistrationToken(res.data.registrationToken);\n      }\n\n      goNext();\n    } else {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(res.error),\n      });\n\n      if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n        setErrors(formatValidationErrors(res.error));\n      }\n    }\n  };\n\n  const goNext = () => {\n    if (next) {\n      setStep(next);\n    } else {\n      onToggle();\n    }\n  };\n\n  const { buttonSubmitLabel, isDisabled, next } = STEPPER[currentStep];\n\n  // block rendering until the EE component is fully loaded\n  if (!MagicLink) {\n    return null;\n  }\n\n  return (\n    <Modal.Root defaultOpen onOpenChange={onToggle}>\n      <Modal.Content>\n        <Modal.Header>\n          {/**\n           * TODO: this is not semantically correct and should be amended.\n           */}\n          <Breadcrumbs label={headerTitle}>\n            <Crumb isCurrent>{headerTitle}</Crumb>\n          </Breadcrumbs>\n        </Modal.Header>\n        <Form\n          method={currentStep === 'create' ? 'POST' : 'PUT'}\n          initialValues={initialValues ?? {}}\n          onSubmit={handleSubmit}\n          validationSchema={FORM_SCHEMA}\n        >\n          {({ isSubmitting }) => {\n            return (\n              <>\n                <Modal.Body>\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                    {currentStep !== 'create' && (\n                      <MagicLink registrationToken={registrationToken} />\n                    )}\n                    <Box>\n                      <Typography variant=\"beta\" tag=\"h2\">\n                        {formatMessage({\n                          id: 'app.components.Users.ModalCreateBody.block-title.details',\n                          defaultMessage: 'User details',\n                        })}\n                      </Typography>\n                      <Box paddingTop={4}>\n                        <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n                          <Grid.Root gap={5}>\n                            {FORM_LAYOUT.map((row) => {\n                              return row.map(({ size, ...field }) => {\n                                return (\n                                  <Grid.Item\n                                    key={field.name}\n                                    col={size}\n                                    direction=\"column\"\n                                    alignItems=\"stretch\"\n                                  >\n                                    <InputRenderer\n                                      {...field}\n                                      disabled={isDisabled}\n                                      label={formatMessage(field.label)}\n                                      placeholder={formatMessage(field.placeholder)}\n                                    />\n                                  </Grid.Item>\n                                );\n                              });\n                            })}\n                          </Grid.Root>\n                        </Flex>\n                      </Box>\n                    </Box>\n                    <Box>\n                      <Typography variant=\"beta\" tag=\"h2\">\n                        {formatMessage({\n                          id: 'global.roles',\n                          defaultMessage: \"User's role\",\n                        })}\n                      </Typography>\n                      <Box paddingTop={4}>\n                        <Grid.Root gap={5}>\n                          <Grid.Item col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n                            <SelectRoles disabled={isDisabled} />\n                          </Grid.Item>\n                          {roleLayout.map((row) => {\n                            return row.map(({ size, ...field }) => {\n                              return (\n                                <Grid.Item\n                                  key={field.name}\n                                  col={size}\n                                  direction=\"column\"\n                                  alignItems=\"stretch\"\n                                >\n                                  <InputRenderer\n                                    {...field}\n                                    disabled={isDisabled}\n                                    label={formatMessage(field.label)}\n                                    placeholder={\n                                      field.placeholder\n                                        ? formatMessage(field.placeholder)\n                                        : undefined\n                                    }\n                                    hint={field.hint ? formatMessage(field.hint) : undefined}\n                                  />\n                                </Grid.Item>\n                              );\n                            });\n                          })}\n                        </Grid.Root>\n                      </Box>\n                    </Box>\n                  </Flex>\n                </Modal.Body>\n                <Modal.Footer>\n                  <Button variant=\"tertiary\" onClick={onToggle} type=\"button\">\n                    {formatMessage({\n                      id: 'app.components.Button.cancel',\n                      defaultMessage: 'Cancel',\n                    })}\n                  </Button>\n                  {currentStep === 'create' ? (\n                    <Button type=\"submit\" loading={isSubmitting}>\n                      {formatMessage(buttonSubmitLabel)}\n                    </Button>\n                  ) : (\n                    <Button type=\"button\" loading={isSubmitting} onClick={onToggle}>\n                      {formatMessage(buttonSubmitLabel)}\n                    </Button>\n                  )}\n                </Modal.Footer>\n              </>\n            );\n          }}\n        </Form>\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\ninterface InitialData {\n  firstname?: string;\n  lastname?: string;\n  email?: string;\n  roles?: Data.ID[];\n  useSSORegistration?: boolean;\n}\n\nconst FORM_INITIAL_VALUES = {\n  firstname: '',\n  lastname: '',\n  email: '',\n  roles: [],\n};\n\nconst ROLE_LAYOUT: FormLayout = [];\n\nconst FORM_LAYOUT = [\n  [\n    {\n      label: {\n        id: 'Auth.form.firstname.label',\n        defaultMessage: 'First name',\n      },\n      name: 'firstname',\n      placeholder: {\n        id: 'Auth.form.firstname.placeholder',\n        defaultMessage: 'e.g. Kai',\n      },\n      type: 'string' as const,\n      size: 6,\n      required: true,\n    },\n    {\n      label: {\n        id: 'Auth.form.lastname.label',\n        defaultMessage: 'Last name',\n      },\n      name: 'lastname',\n      placeholder: {\n        id: 'Auth.form.lastname.placeholder',\n        defaultMessage: 'e.g. Doe',\n      },\n      type: 'string' as const,\n      size: 6,\n    },\n  ],\n  [\n    {\n      label: {\n        id: 'Auth.form.email.label',\n        defaultMessage: 'Email',\n      },\n      name: 'email',\n      placeholder: {\n        id: 'Auth.form.email.placeholder',\n        defaultMessage: 'e.g. kai.doe@strapi.io',\n      },\n      type: 'email' as const,\n      size: 6,\n      required: true,\n    },\n  ],\n] satisfies FormLayout;\n\nconst FORM_SCHEMA = yup.object().shape({\n  firstname: yup\n    .string()\n    .trim()\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    })\n    .nullable(),\n  lastname: yup.string(),\n  email: yup\n    .string()\n    .email(translatedErrors.email)\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    })\n    .nullable(),\n  roles: yup\n    .array()\n    .min(1, {\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    })\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    }),\n});\n\nconst STEPPER = {\n  create: {\n    buttonSubmitLabel: {\n      id: 'app.containers.Users.ModalForm.footer.button-success',\n      defaultMessage: 'Invite user',\n    },\n    isDisabled: false,\n    next: 'magic-link',\n  },\n  'magic-link': {\n    buttonSubmitLabel: { id: 'global.finish', defaultMessage: 'Finish' },\n    isDisabled: true,\n    next: null,\n  },\n} as const;\n\nexport { ModalForm };\nexport type { InitialData };\n", "import * as React from 'react';\n\nimport { Flex, Typography, Status, IconButton, Dialog } from '@strapi/design-system';\nimport { Pencil, Trash } from '@strapi/icons';\nimport * as qs from 'qs';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { NavLink, useLocation, useNavigate } from 'react-router-dom';\n\nimport { SanitizedAdminUser } from '../../../../../../shared/contracts/shared';\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\nimport { Filters } from '../../../../components/Filters';\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { Pagination } from '../../../../components/Pagination';\nimport { SearchInput } from '../../../../components/SearchInput';\nimport { Table } from '../../../../components/Table';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { useEnterprise } from '../../../../hooks/useEnterprise';\nimport { useRBAC } from '../../../../hooks/useRBAC';\nimport { useAdminUsers, useDeleteManyUsersMutation } from '../../../../services/users';\nimport { getDisplayName } from '../../../../utils/users';\n\nimport { CreateActionCE } from './components/CreateActionCE';\nimport { ModalForm } from './components/NewUserForm';\n\n/* -------------------------------------------------------------------------------------------------\n * ListPageCE\n * -----------------------------------------------------------------------------------------------*/\n\nconst ListPageCE = () => {\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const [isModalOpened, setIsModalOpen] = React.useState(false);\n  const permissions = useTypedSelector((state) => state.admin_app.permissions);\n  const {\n    allowedActions: { canCreate, canDelete, canRead },\n  } = useRBAC(permissions.settings?.users);\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const { search } = useLocation();\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = React.useState(false);\n  const [idsToDelete, setIdsToDelete] = React.useState<Array<SanitizedAdminUser['id']>>([]);\n  const { data, isError, isLoading } = useAdminUsers(qs.parse(search, { ignoreQueryPrefix: true }));\n\n  const { pagination, users = [] } = data ?? {};\n\n  const CreateAction = useEnterprise(\n    CreateActionCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/CreateActionEE'\n        )\n      ).CreateActionEE\n  );\n\n  const headers = TABLE_HEADERS.map((header) => ({\n    ...header,\n    label: formatMessage(header.label),\n  }));\n\n  const title = formatMessage({\n    id: 'global.users',\n    defaultMessage: 'Users',\n  });\n\n  const handleToggle = () => {\n    setIsModalOpen((prev) => !prev);\n  };\n\n  const [deleteAll] = useDeleteManyUsersMutation();\n  const handleDeleteAll = async (ids: Array<SanitizedAdminUser['id']>) => {\n    try {\n      const res = await deleteAll({ ids });\n\n      if ('error' in res) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(res.error),\n        });\n      }\n    } catch (err) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'global.error',\n          defaultMessage: 'An error occurred',\n        }),\n      });\n    }\n  };\n\n  const handleRowClick = (id: SanitizedAdminUser['id']) => () => {\n    if (canRead) {\n      navigate(id.toString());\n    }\n  };\n\n  const handleDeleteClick = (id: SanitizedAdminUser['id']) => async () => {\n    setIdsToDelete([id]);\n    setShowDeleteConfirmation(true);\n  };\n\n  const confirmDelete = async () => {\n    await handleDeleteAll(idsToDelete);\n    setShowDeleteConfirmation(false);\n  };\n\n  // block rendering until the EE component is fully loaded\n  if (!CreateAction) {\n    return null;\n  }\n\n  if (isError) {\n    return <Page.Error />;\n  }\n\n  return (\n    <Page.Main aria-busy={isLoading}>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Users',\n          }\n        )}\n      </Page.Title>\n      <Layouts.Header\n        primaryAction={canCreate && <CreateAction onClick={handleToggle} />}\n        title={title}\n        subtitle={formatMessage({\n          id: 'Settings.permissions.users.listview.header.subtitle',\n          defaultMessage: 'All the users who have access to the Strapi admin panel',\n        })}\n      />\n      <Layouts.Action\n        startActions={\n          <>\n            <SearchInput\n              label={formatMessage(\n                { id: 'app.component.search.label', defaultMessage: 'Search for {target}' },\n                { target: title }\n              )}\n            />\n            <Filters.Root options={FILTERS}>\n              <Filters.Trigger />\n              <Filters.Popover />\n              <Filters.List />\n            </Filters.Root>\n          </>\n        }\n      />\n      <Layouts.Content>\n        <Table.Root rows={users} headers={headers}>\n          <Table.ActionBar />\n          <Table.Content>\n            <Table.Head>\n              {canDelete ? <Table.HeaderCheckboxCell /> : null}\n              {headers.map((header) => (\n                <Table.HeaderCell key={header.name} {...header} />\n              ))}\n            </Table.Head>\n            <Table.Empty />\n            <Table.Loading />\n            <Table.Body>\n              {users.map((user) => (\n                <Table.Row\n                  key={user.id}\n                  onClick={handleRowClick(user.id)}\n                  cursor={canRead ? 'pointer' : 'default'}\n                >\n                  {canDelete ? <Table.CheckboxCell id={user.id} /> : null}\n                  {headers.map(({ cellFormatter, name, ...rest }) => {\n                    return (\n                      <Table.Cell key={name}>\n                        {typeof cellFormatter === 'function' ? (\n                          cellFormatter(user, { name, ...rest })\n                        ) : (\n                          // @ts-expect-error – name === \"roles\" has the data value of `AdminRole[]` but the header has a cellFormatter value so this shouldn't be called.\n                          <Typography textColor=\"neutral800\">{user[name] || '-'}</Typography>\n                        )}\n                      </Table.Cell>\n                    );\n                  })}\n                  {canRead || canDelete ? (\n                    <Table.Cell onClick={(e) => e.stopPropagation()}>\n                      <Flex justifyContent=\"end\">\n                        {canRead ? (\n                          <IconButton\n                            tag={NavLink}\n                            to={user.id.toString()}\n                            label={formatMessage(\n                              { id: 'app.component.table.edit', defaultMessage: 'Edit {target}' },\n                              { target: getDisplayName(user) }\n                            )}\n                            variant=\"ghost\"\n                          >\n                            <Pencil />\n                          </IconButton>\n                        ) : null}\n                        {canDelete ? (\n                          <IconButton\n                            onClick={handleDeleteClick(user.id)}\n                            label={formatMessage(\n                              { id: 'global.delete-target', defaultMessage: 'Delete {target}' },\n                              { target: getDisplayName(user) }\n                            )}\n                            variant=\"ghost\"\n                          >\n                            <Trash />\n                          </IconButton>\n                        ) : null}\n                      </Flex>\n                    </Table.Cell>\n                  ) : null}\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table.Content>\n        </Table.Root>\n        <Pagination.Root {...pagination}>\n          <Pagination.PageSize />\n          <Pagination.Links />\n        </Pagination.Root>\n      </Layouts.Content>\n      {isModalOpened && <ModalForm onToggle={handleToggle} />}\n      <Dialog.Root open={showDeleteConfirmation} onOpenChange={setShowDeleteConfirmation}>\n        <ConfirmDialog onConfirm={confirmDelete} />\n      </Dialog.Root>\n    </Page.Main>\n  );\n};\n\nconst TABLE_HEADERS: Array<\n  Omit<Table.Header<SanitizedAdminUser, any>, 'label'> & { label: MessageDescriptor }\n> = [\n  {\n    name: 'firstname',\n    label: {\n      id: 'Settings.permissions.users.firstname',\n      defaultMessage: 'Firstname',\n    },\n    sortable: true,\n  },\n  {\n    name: 'lastname',\n    label: {\n      id: 'Settings.permissions.users.lastname',\n      defaultMessage: 'Lastname',\n    },\n    sortable: true,\n  },\n  {\n    name: 'email',\n    label: { id: 'Settings.permissions.users.email', defaultMessage: 'Email' },\n    sortable: true,\n  },\n  {\n    name: 'roles',\n    label: {\n      id: 'Settings.permissions.users.roles',\n      defaultMessage: 'Roles',\n    },\n    sortable: false,\n    cellFormatter({ roles }) {\n      return (\n        <Typography textColor=\"neutral800\">{roles.map((role) => role.name).join(',\\n')}</Typography>\n      );\n    },\n  },\n  {\n    name: 'username',\n    label: {\n      id: 'Settings.permissions.users.username',\n      defaultMessage: 'Username',\n    },\n    sortable: true,\n  },\n  {\n    name: 'isActive',\n    label: {\n      id: 'Settings.permissions.users.user-status',\n      defaultMessage: 'User status',\n    },\n    sortable: false,\n    cellFormatter({ isActive }) {\n      return (\n        <Flex>\n          <Status\n            size=\"S\"\n            borderWidth={0}\n            background=\"transparent\"\n            color=\"neutral800\"\n            variant={isActive ? 'success' : 'danger'}\n          >\n            <Typography>{isActive ? 'Active' : 'Inactive'}</Typography>\n          </Status>\n        </Flex>\n      );\n    },\n  },\n];\n\nconst FILTERS = [\n  {\n    name: 'firstname',\n    label: 'Firstname',\n    type: 'string',\n  },\n  {\n    name: 'lastname',\n    label: 'Lastname',\n    type: 'string',\n  },\n  {\n    name: 'email',\n    label: 'Email',\n    type: 'email',\n  },\n  {\n    name: 'username',\n    label: 'Username',\n    type: 'string',\n  },\n  {\n    name: 'isActive',\n    label: 'Active user',\n    type: 'boolean',\n  },\n] satisfies Filters.Filter[];\n\n/* -------------------------------------------------------------------------------------------------\n * ListPage\n * -----------------------------------------------------------------------------------------------*/\n\n// component which determines whether this page should render the CE or EE page\nconst ListPage = () => {\n  const UsersListPage = useEnterprise(\n    ListPageCE,\n    async () =>\n      // eslint-disable-next-line import/no-cycle\n      (await import('../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/ListPage'))\n        .UserListPageEE\n  );\n\n  // block rendering until the EE component is fully loaded\n  if (!UsersListPage) {\n    return null;\n  }\n\n  return <UsersListPage />;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedListPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedListPage = () => {\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings?.users.read);\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <ListPage />\n    </Page.Protect>\n  );\n};\n\nexport { ProtectedListPage, ListPage, ListPageCE };\n"],
  "mappings": "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",
  "names": ["CreateActionCE", "forwardRef", "props", "ref", "formatMessage", "useIntl", "_jsx", "Button", "startIcon", "Mail", "size", "id", "defaultMessage", "ModalForm", "onToggle", "currentStep", "setStep", "useState", "registrationToken", "setRegistrationToken", "toggleNotification", "useNotification", "_unstableFormatAPIError", "formatAPIError", "_unstableFormatValidationErrors", "formatValidationErrors", "useAPIErrorHandler", "roleLayout", "useEnterprise", "ROLE_LAYOUT", "combine", "ceRoles", "eeRoles", "defaultValue", "initialValues", "FORM_INITIAL_VALUES", "ceValues", "eeValues", "MagicLink", "MagicLinkCE", "MagicLinkEE", "createUser", "useCreateUserMutation", "headerTitle", "handleSubmit", "body", "setErrors", "res", "roles", "data", "goNext", "type", "message", "error", "isBaseQueryError", "name", "next", "buttonSubmitLabel", "isDisabled", "STEPPER", "Modal", "Root", "defaultOpen", "onOpenChange", "_jsxs", "Content", "Header", "Breadcrumbs", "label", "Crumb", "isCurrent", "Form", "method", "onSubmit", "validationSchema", "FORM_SCHEMA", "isSubmitting", "_Fragment", "Body", "Flex", "direction", "alignItems", "gap", "Box", "Typography", "variant", "tag", "paddingTop", "Grid", "FORM_LAYOUT", "map", "row", "field", "Item", "col", "InputRenderer", "disabled", "placeholder", "xs", "SelectRoles", "undefined", "hint", "Footer", "onClick", "loading", "firstname", "lastname", "email", "required", "object", "shape", "string", "trim", "translatedErrors", "nullable", "array", "min", "create", "ListPageCE", "isModalOpened", "setIsModalOpen", "permissions", "useTypedSelector", "state", "admin_app", "allowedActions", "canCreate", "canDelete", "canRead", "useRBAC", "settings", "users", "navigate", "useNavigate", "search", "useLocation", "showDeleteConfirmation", "setShowDeleteConfirmation", "idsToDelete", "setIdsToDelete", "isError", "isLoading", "useAdminUsers", "parse", "ignoreQueryPrefix", "pagination", "CreateAction", "CreateActionEE", "headers", "TABLE_HEADERS", "header", "title", "handleToggle", "prev", "deleteAll", "useDeleteManyUsersMutation", "handleDeleteAll", "ids", "err", "handleRowClick", "toString", "handleDeleteClick", "confirmDelete", "Page", "Error", "Main", "aria-busy", "Title", "Layouts", "primaryAction", "subtitle", "Action", "startActions", "SearchInput", "target", "Filters", "options", "FILTERS", "Trigger", "Popover", "List", "Table", "rows", "ActionBar", "Head", "HeaderCheckboxCell", "HeaderCell", "Empty", "Loading", "user", "Row", "cursor", "CheckboxCell", "cellFormatter", "rest", "Cell", "textColor", "e", "stopPropagation", "justifyContent", "IconButton", "NavLink", "to", "getDisplayName", "Pencil", "Trash", "Pagination", "PageSize", "Links", "Dialog", "open", "ConfirmDialog", "onConfirm", "sortable", "role", "join", "isActive", "Status", "borderWidth", "background", "color", "ListPage", "UsersListPage", "UserListPageEE", "ProtectedListPage", "read", "Protect"]
}

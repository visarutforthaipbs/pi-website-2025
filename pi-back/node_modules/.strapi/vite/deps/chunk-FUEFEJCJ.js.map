{
  "version": 3,
  "sources": ["../../../@strapi/i18n/admin/src/pluginId.ts", "../../../@strapi/i18n/admin/src/utils/getTranslation.ts", "../../../@strapi/i18n/admin/src/components/CheckboxConfirmation.tsx", "../../../@strapi/i18n/admin/src/utils/fields.ts", "../../../@strapi/i18n/admin/src/utils/strings.ts", "../../../@strapi/i18n/admin/src/hooks/useI18n.ts", "../../../@strapi/i18n/admin/src/services/api.ts", "../../../@strapi/i18n/admin/src/services/locales.ts", "../../../@strapi/i18n/admin/src/services/relations.ts", "../../../@strapi/i18n/admin/src/utils/clean.ts", "../../../@strapi/i18n/admin/src/components/BulkLocaleActionModal.tsx", "../../../@strapi/i18n/admin/src/components/CMHeaderActions.tsx", "../../../@strapi/i18n/admin/src/components/CMListViewModalsAdditionalInformation.tsx", "../../../@strapi/i18n/admin/src/components/LocalePicker.tsx", "../../../@strapi/i18n/admin/src/constants.ts", "../../../@strapi/i18n/admin/src/contentManagerHooks/editView.tsx", "../../../@strapi/i18n/admin/src/components/LocaleListCell.tsx", "../../../@strapi/i18n/admin/src/contentManagerHooks/listView.tsx", "../../../@strapi/i18n/admin/src/contentReleasesHooks/releaseDetailsView.ts", "../../../@strapi/i18n/admin/src/middlewares/extendCTBAttributeInitialData.ts", "../../../@strapi/i18n/admin/src/middlewares/extendCTBInitialData.ts", "../../../@strapi/i18n/admin/src/middlewares/rbac-middleware.ts", "../../../@strapi/i18n/admin/src/utils/prefixPluginTranslations.ts", "../../../@strapi/i18n/admin/src/utils/schemas.ts", "../../../@strapi/i18n/admin/src/index.ts"],
  "sourcesContent": ["export const pluginId = 'i18n';\n", "import { pluginId } from '../pluginId';\n\nconst getTranslation = (id: string) => `${pluginId}.${id}`;\n\nexport { getTranslation };\n", "import * as React from 'react';\n\nimport { Button, Checkbox, Dialog, Field, Flex, Typography } from '@strapi/design-system';\nimport { WarningCircle } from '@strapi/icons';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { getTranslation } from '../utils/getTranslation';\n\nconst TextAlignTypography = styled(Typography)`\n  text-align: center;\n`;\n\ninterface IntlMessage extends MessageDescriptor {\n  values: object;\n}\n\ninterface CheckboxConfirmationProps {\n  description: IntlMessage;\n  intlLabel: IntlMessage;\n  isCreating?: boolean;\n  name: string;\n  onChange: (event: { target: { name: string; value: boolean; type: string } }) => void;\n  value: boolean;\n}\n\nconst CheckboxConfirmation = ({\n  description,\n  isCreating = false,\n  intlLabel,\n  name,\n  onChange,\n  value,\n}: CheckboxConfirmationProps) => {\n  const { formatMessage } = useIntl();\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const handleChange = (value: boolean) => {\n    if (isCreating || value) {\n      return onChange({ target: { name, value, type: 'checkbox' } });\n    }\n\n    if (!value) {\n      return setIsOpen(true);\n    }\n\n    return null;\n  };\n\n  const handleConfirm = () => {\n    onChange({ target: { name, value: false, type: 'checkbox' } });\n  };\n\n  const label = intlLabel.id\n    ? formatMessage(\n        { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\n        { ...intlLabel.values }\n      )\n    : name;\n\n  const hint = description\n    ? formatMessage(\n        { id: description.id, defaultMessage: description.defaultMessage },\n        { ...description.values }\n      )\n    : '';\n\n  return (\n    <Dialog.Root open={isOpen} onOpenChange={setIsOpen}>\n      <Field.Root hint={hint} name={name}>\n        <Checkbox onCheckedChange={handleChange} checked={value}>\n          {label}\n        </Checkbox>\n        <Field.Hint />\n      </Field.Root>\n      <Dialog.Content>\n        <Dialog.Header>\n          {formatMessage({\n            id: getTranslation('CheckboxConfirmation.Modal.title'),\n            defaultMessage: 'Disable localization',\n          })}\n        </Dialog.Header>\n        <Dialog.Body icon={<WarningCircle />}>\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n            <Flex justifyContent=\"center\">\n              <TextAlignTypography>\n                {formatMessage({\n                  id: getTranslation('CheckboxConfirmation.Modal.content'),\n                  defaultMessage:\n                    'Disabling localization will engender the deletion of all your content but the one associated to your default locale (if existing).',\n                })}\n              </TextAlignTypography>\n            </Flex>\n            <Flex justifyContent=\"center\">\n              <Typography fontWeight=\"semiBold\">\n                {formatMessage({\n                  id: getTranslation('CheckboxConfirmation.Modal.body'),\n                  defaultMessage: 'Do you want to disable it?',\n                })}\n              </Typography>\n            </Flex>\n          </Flex>\n        </Dialog.Body>\n        <Dialog.Footer>\n          <Dialog.Cancel>\n            <Button variant=\"tertiary\">\n              {formatMessage({\n                id: 'components.popUpWarning.button.cancel',\n                defaultMessage: 'No, cancel',\n              })}\n            </Button>\n          </Dialog.Cancel>\n          <Dialog.Action>\n            <Button variant=\"danger-light\" onClick={handleConfirm}>\n              {formatMessage({\n                id: getTranslation('CheckboxConfirmation.Modal.button-confirm'),\n                defaultMessage: 'Yes, disable',\n              })}\n            </Button>\n          </Dialog.Action>\n        </Dialog.Footer>\n      </Dialog.Content>\n    </Dialog.Root>\n  );\n};\n\nexport { CheckboxConfirmation };\n", "const LOCALIZED_FIELDS = [\n  'biginteger',\n  'boolean',\n  'component',\n  'date',\n  'datetime',\n  'decimal',\n  'dynamiczone',\n  'email',\n  'enumeration',\n  'float',\n  'integer',\n  'json',\n  'media',\n  'number',\n  'password',\n  'richtext',\n  'blocks',\n  'string',\n  'text',\n  'time',\n];\n\nconst doesPluginOptionsHaveI18nLocalized = (\n  opts?: object\n): opts is { i18n: { localized: boolean } } =>\n  typeof opts === 'object' &&\n  opts !== null &&\n  'i18n' in opts &&\n  typeof opts.i18n === 'object' &&\n  opts.i18n !== null &&\n  'localized' in opts.i18n &&\n  typeof opts.i18n.localized === 'boolean';\n\nexport { LOCALIZED_FIELDS, doesPluginOptionsHaveI18nLocalized };\n", "const capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1);\n\nexport { capitalize };\n", "import * as React from 'react';\n\nimport { useAuth } from '@strapi/admin/strapi-admin';\nimport { unstable_useDocument as useDocument } from '@strapi/content-manager/strapi-admin';\nimport { useParams } from 'react-router-dom';\n\nimport { doesPluginOptionsHaveI18nLocalized } from '../utils/fields';\nimport { capitalize } from '../utils/strings';\n\ntype UseI18n = () => {\n  hasI18n: boolean;\n  canCreate: string[];\n  canRead: string[];\n  canUpdate: string[];\n  canDelete: string[];\n  canPublish: string[];\n};\n\n/**\n * @alpha\n * @description This hook is used to get the i18n status of a content type.\n * Also returns the CRUDP permission locale properties for the content type\n * so we know which locales the user can perform actions on.\n */\nconst useI18n: UseI18n = () => {\n  // Extract the params from the URL to pass to our useDocument hook\n  const params = useParams<{ collectionType: string; slug: string; model: string }>();\n\n  const userPermissions = useAuth('useI18n', (state) => state.permissions);\n  const actions = React.useMemo(() => {\n    const permissions = userPermissions.filter((permission) => permission.subject === params.slug);\n\n    return permissions.reduce<Omit<ReturnType<UseI18n>, 'hasI18n'>>(\n      (acc, permission) => {\n        const [actionShorthand] = permission.action.split('.').slice(-1);\n\n        return {\n          ...acc,\n          [`can${capitalize(actionShorthand)}`]: permission.properties?.locales ?? [],\n        };\n      },\n      { canCreate: [], canRead: [], canUpdate: [], canDelete: [], canPublish: [] }\n    );\n  }, [params.slug, userPermissions]);\n\n  // TODO: use specific hook to get schema only\n  const { schema } = useDocument(\n    {\n      // We can non-null assert these because below we skip the query if they are not present\n      collectionType: params.collectionType!,\n      model: params.slug!,\n    },\n    {\n      skip: true,\n    }\n  );\n\n  if (doesPluginOptionsHaveI18nLocalized(schema?.pluginOptions)) {\n    return {\n      hasI18n: schema.pluginOptions.i18n.localized,\n      ...actions,\n    };\n  }\n\n  return {\n    hasI18n: false,\n    ...actions,\n  };\n};\n\nexport { useI18n };\n", "import { adminApi } from '@strapi/admin/strapi-admin';\n\nconst i18nApi = adminApi.enhanceEndpoints({\n  addTagTypes: ['Locale'],\n});\n\nexport { i18nApi };\n", "import { i18nApi } from './api';\n\nimport type { GetISOLocales } from '../../../shared/contracts/iso-locales';\nimport type {\n  GetLocales,\n  CreateLocale,\n  DeleteLocale,\n  UpdateLocale,\n} from '../../../shared/contracts/locales';\n\nconst localesApi = i18nApi.injectEndpoints({\n  endpoints: (builder) => ({\n    createLocale: builder.mutation<CreateLocale.Response, CreateLocale.Request['body']>({\n      query: (data) => ({\n        url: '/i18n/locales',\n        method: 'POST',\n        data,\n      }),\n      invalidatesTags: [{ type: 'Locale', id: 'LIST' }],\n    }),\n    deleteLocale: builder.mutation<DeleteLocale.Response, DeleteLocale.Params['id']>({\n      query: (id) => ({\n        url: `/i18n/locales/${id}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: (result, error, id) => [{ type: 'Locale', id }],\n    }),\n    getLocales: builder.query<GetLocales.Response, void>({\n      query: () => '/i18n/locales',\n      providesTags: (res) => [\n        { type: 'Locale', id: 'LIST' },\n        ...(Array.isArray(res)\n          ? res.map((locale) => ({\n              type: 'Locale' as const,\n              id: locale.id,\n            }))\n          : []),\n      ],\n    }),\n    getDefaultLocales: builder.query<GetISOLocales.Response, void>({\n      query: () => '/i18n/iso-locales',\n    }),\n    updateLocale: builder.mutation<\n      UpdateLocale.Response,\n      UpdateLocale.Request['body'] & UpdateLocale.Params\n    >({\n      query: ({ id, ...data }) => ({\n        url: `/i18n/locales/${id}`,\n        method: 'PUT',\n        data,\n      }),\n      invalidatesTags: (result, error, { id }) => [{ type: 'Locale', id }],\n    }),\n  }),\n});\n\nconst {\n  useCreateLocaleMutation,\n  useDeleteLocaleMutation,\n  useGetLocalesQuery,\n  useGetDefaultLocalesQuery,\n  useUpdateLocaleMutation,\n} = localesApi;\n\nexport {\n  useCreateLocaleMutation,\n  useDeleteLocaleMutation,\n  useGetLocalesQuery,\n  useGetDefaultLocalesQuery,\n  useUpdateLocaleMutation,\n};\n", "import { i18nApi } from './api';\n\nimport type { CountManyEntriesDraftRelations } from '../../../shared/contracts/content-manager';\n\nconst relationsApi = i18nApi.injectEndpoints({\n  overrideExisting: true,\n  endpoints: (builder) => ({\n    getManyDraftRelationCount: builder.query<\n      CountManyEntriesDraftRelations.Response['data'],\n      CountManyEntriesDraftRelations.Request['query'] & {\n        model: string;\n      }\n    >({\n      query: ({ model, ...params }) => ({\n        url: `/content-manager/collection-types/${model}/actions/countManyEntriesDraftRelations`,\n        method: 'GET',\n        config: {\n          params,\n        },\n      }),\n      transformResponse: (response: CountManyEntriesDraftRelations.Response) => response.data,\n    }),\n  }),\n});\n\nconst { useGetManyDraftRelationCountQuery } = relationsApi;\n\nexport { useGetManyDraftRelationCountQuery };\n", "import type { Schema } from '@strapi/types';\n\ntype Data = Record<keyof Schema.ContentType['attributes'], any>;\n\nconst cleanData = (\n  data: Data,\n  schema: Schema.ContentType,\n  components: Record<string, Schema.Component>\n) => {\n  const cleanedData = removeFields(data, [\n    'createdAt',\n    'createdBy',\n    'updatedAt',\n    'updatedBy',\n    'id',\n    'documentId',\n    'publishedAt',\n    'strapi_stage',\n    'strapi_assignee',\n    'locale',\n    'status',\n  ]);\n\n  const cleanedDataWithoutPasswordAndRelation = recursiveRemoveFieldTypes(\n    cleanedData,\n    schema,\n    components,\n    ['relation', 'password']\n  );\n\n  return cleanedDataWithoutPasswordAndRelation;\n};\n\nconst removeFields = (data: Data, fields: Array<keyof Schema.ContentType['attributes']>) => {\n  return Object.keys(data).reduce((acc, current) => {\n    if (fields.includes(current)) {\n      return acc;\n    }\n    acc[current] = data[current];\n    return acc;\n  }, {} as Data);\n};\n\nconst recursiveRemoveFieldTypes = (\n  data: Data,\n  schema: Schema.Schema,\n  components: Record<string, Schema.Component>,\n  fields: Array<keyof Schema.ContentType['attributes']>\n) => {\n  return Object.keys(data).reduce((acc, current) => {\n    const attribute = schema.attributes[current] ?? { type: undefined };\n\n    if (fields.includes(attribute.type)) {\n      return acc;\n    }\n\n    if (attribute.type === 'dynamiczone') {\n      acc[current] = data[current].map((componentValue: any, index: number) => {\n        const { id: _, ...rest } = recursiveRemoveFieldTypes(\n          componentValue,\n          components[componentValue.__component],\n          components,\n          fields\n        );\n\n        return {\n          ...rest,\n          __temp_key__: index + 1,\n        };\n      });\n    } else if (attribute.type === 'component') {\n      const { repeatable, component } = attribute;\n\n      if (repeatable) {\n        acc[current] = (data[current] ?? []).map((compoData: any, index: number) => {\n          const { id: _, ...rest } = recursiveRemoveFieldTypes(\n            compoData,\n            components[component],\n            components,\n            fields\n          );\n\n          return {\n            ...rest,\n            __temp_key__: index + 1,\n          };\n        });\n      } else {\n        const { id: _, ...rest } = recursiveRemoveFieldTypes(\n          data[current] ?? {},\n          components[component],\n          components,\n          fields\n        );\n\n        acc[current] = rest;\n      }\n    } else {\n      acc[current] = data[current];\n    }\n\n    return acc;\n  }, {} as any);\n};\n\nexport { cleanData };\n", "import * as React from 'react';\n\nimport { FormErrors, Table, useTable } from '@strapi/admin/strapi-admin';\nimport { Box, Typography, IconButton, Flex, Tooltip, Status, Modal } from '@strapi/design-system';\nimport { Pencil, CheckCircle, CrossCircle, ArrowsCounterClockwise } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { type MessageDescriptor, useIntl, PrimitiveType } from 'react-intl';\nimport { Link } from 'react-router-dom';\n\nimport { Locale } from '../../../shared/contracts/locales';\nimport { getTranslation } from '../utils/getTranslation';\nimport { capitalize } from '../utils/strings';\n\nimport { LocaleStatus } from './CMHeaderActions';\n\nimport type { Modules } from '@strapi/types';\n\ntype Status = Modules.Documents.Params.PublicationStatus.Kind | 'modified';\n\n/* -------------------------------------------------------------------------------------------------\n * EntryValidationText\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EntryValidationTextProps {\n  status: Status;\n  validationErrors: FormErrors[string] | null;\n  action: 'bulk-publish' | 'bulk-unpublish';\n}\n\ninterface TranslationMessage extends MessageDescriptor {\n  values?: Record<string, PrimitiveType>;\n}\n\nconst isErrorMessageDescriptor = (object?: string | object): object is TranslationMessage => {\n  return (\n    typeof object === 'object' && object !== null && 'id' in object && 'defaultMessage' in object\n  );\n};\n\nconst EntryValidationText = ({\n  status = 'draft',\n  validationErrors,\n  action,\n}: EntryValidationTextProps) => {\n  const { formatMessage } = useIntl();\n\n  /**\n   * TODO: Should this be extracted an made into a factory to recursively get\n   * error messages??\n   */\n  const getErrorStr = (key: string, value?: FormErrors[string]): string => {\n    if (typeof value === 'string') {\n      return `${key}: ${value}`;\n    } else if (isErrorMessageDescriptor(value)) {\n      return `${key}: ${formatMessage(value)}`;\n    } else if (Array.isArray(value)) {\n      return value.map((v) => getErrorStr(key, v)).join(' ');\n    } else if (typeof value === 'object' && !Array.isArray(value)) {\n      return Object.entries(value)\n        .map(([k, v]) => getErrorStr(k, v))\n        .join(' ');\n    } else {\n      /**\n       * unlikely to happen, but we need to return something\n       */\n      return '';\n    }\n  };\n\n  if (validationErrors) {\n    const validationErrorsMessages = Object.entries(validationErrors)\n      .map(([key, value]) => {\n        return getErrorStr(key, value);\n      })\n      .join(' ');\n\n    return (\n      <Flex gap={2}>\n        <CrossCircle fill=\"danger600\" />\n        <Tooltip label={validationErrorsMessages}>\n          <Typography\n            maxWidth={'30rem'}\n            textColor=\"danger600\"\n            variant=\"omega\"\n            fontWeight=\"semiBold\"\n            ellipsis\n          >\n            {validationErrorsMessages}\n          </Typography>\n        </Tooltip>\n      </Flex>\n    );\n  }\n\n  const getStatusMessage = () => {\n    if (action === 'bulk-publish') {\n      if (status === 'published') {\n        return {\n          icon: <CheckCircle fill=\"success600\" />,\n          text: formatMessage({\n            id: 'content-manager.bulk-publish.already-published',\n            defaultMessage: 'Already Published',\n          }),\n          textColor: 'success600',\n          fontWeight: 'bold',\n        };\n      } else if (status === 'modified') {\n        return {\n          icon: <ArrowsCounterClockwise fill=\"alternative600\" />,\n          text: formatMessage({\n            id: 'app.utils.ready-to-publish-changes',\n            defaultMessage: 'Ready to publish changes',\n          }),\n        };\n      } else {\n        return {\n          icon: <CheckCircle fill=\"success600\" />,\n          text: formatMessage({\n            id: 'app.utils.ready-to-publish',\n            defaultMessage: 'Ready to publish',\n          }),\n        };\n      }\n    } else {\n      if (status === 'draft') {\n        return {\n          icon: <CheckCircle fill=\"success600\" />,\n          text: formatMessage({\n            id: 'content-manager.bulk-unpublish.already-unpublished',\n            defaultMessage: 'Already Unpublished',\n          }),\n          textColor: 'success600',\n          fontWeight: 'bold',\n        };\n      } else {\n        return {\n          icon: <CheckCircle fill=\"success600\" />,\n          text: formatMessage({\n            id: 'app.utils.ready-to-unpublish-changes',\n            defaultMessage: 'Ready to unpublish',\n          }),\n          textColor: 'success600',\n          fontWeight: 'bold',\n        };\n      }\n    }\n  };\n\n  const { icon, text, textColor = 'success600', fontWeight = 'normal' } = getStatusMessage();\n\n  return (\n    <Flex gap={2}>\n      {icon}\n      <Typography textColor={textColor} fontWeight={fontWeight}>\n        {text}\n      </Typography>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * BoldChunk\n * -----------------------------------------------------------------------------------------------*/\n\nconst BoldChunk = (chunks: React.ReactNode) => <Typography fontWeight=\"bold\">{chunks}</Typography>;\n\n/* -------------------------------------------------------------------------------------------------\n * BulkLocaleActionModal\n * -----------------------------------------------------------------------------------------------*/\n\ninterface BulkLocaleActionModalProps {\n  rows: LocaleStatus[];\n  headers: {\n    label: string;\n    name: string;\n  }[];\n  localesMetadata: Locale[];\n  validationErrors?: FormErrors;\n  action: 'bulk-publish' | 'bulk-unpublish';\n}\n\nconst BulkLocaleActionModal = ({\n  headers,\n  rows,\n  localesMetadata,\n  validationErrors = {},\n  action,\n}: BulkLocaleActionModalProps) => {\n  const { formatMessage } = useIntl();\n\n  const selectedRows = useTable<LocaleStatus[]>(\n    'BulkLocaleActionModal',\n    (state) => state.selectedRows\n  );\n\n  const getFormattedCountMessage = () => {\n    const currentStatusByLocale = rows.reduce<Record<string, string>>((acc, { locale, status }) => {\n      acc[locale] = status;\n      return acc;\n    }, {});\n    const localesWithErrors = Object.keys(validationErrors);\n\n    const publishedCount = selectedRows.filter(\n      ({ locale }) => currentStatusByLocale[locale] === 'published'\n    ).length;\n\n    const draftCount = selectedRows.filter(\n      ({ locale }) =>\n        (currentStatusByLocale[locale] === 'draft' ||\n          currentStatusByLocale[locale] === 'modified') &&\n        !localesWithErrors.includes(locale)\n    ).length;\n\n    const withErrorsCount = localesWithErrors.length;\n    const messageId =\n      action === 'bulk-publish'\n        ? 'content-manager.containers.list.selectedEntriesModal.selectedCount.publish'\n        : 'content-manager.containers.list.selectedEntriesModal.selectedCount.unpublish';\n\n    const defaultMessage =\n      action === 'bulk-publish'\n        ? '<b>{publishedCount}</b> {publishedCount, plural, =0 {entries} one {entry} other {entries}} already published. <b>{draftCount}</b> {draftCount, plural, =0 {entries} one {entry} other {entries}} ready to publish. <b>{withErrorsCount}</b> {withErrorsCount, plural, =0 {entries} one {entry} other {entries}} waiting for action.'\n        : '<b>{draftCount}</b> {draftCount, plural, =0 {entries} one {entry} other {entries}} already unpublished. <b>{publishedCount}</b> {publishedCount, plural, =0 {entries} one {entry} other {entries}} ready to unpublish.';\n\n    return formatMessage(\n      {\n        id: messageId,\n        defaultMessage,\n      },\n      {\n        withErrorsCount,\n        draftCount,\n        publishedCount,\n        b: BoldChunk,\n      }\n    );\n  };\n\n  return (\n    <Modal.Body>\n      <Typography>{getFormattedCountMessage()}</Typography>\n      <Box marginTop={5}>\n        <Table.Content>\n          <Table.Head>\n            <Table.HeaderCheckboxCell />\n            {headers.map((head) => (\n              <Table.HeaderCell key={head.name} {...head} />\n            ))}\n          </Table.Head>\n          <Table.Body>\n            {rows.map(({ locale, status }, index) => {\n              const error = validationErrors?.[locale] ?? null;\n\n              const statusVariant =\n                status === 'draft' ? 'primary' : status === 'published' ? 'success' : 'alternative';\n\n              return (\n                <Table.Row key={index}>\n                  <Table.CheckboxCell id={locale} aria-label={`Select ${locale}`} />\n                  <Table.Cell>\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\n                      {Array.isArray(localesMetadata)\n                        ? localesMetadata.find((localeEntry) => localeEntry.code === locale)?.name\n                        : locale}\n                    </Typography>\n                  </Table.Cell>\n                  <Table.Cell>\n                    <Box display=\"flex\">\n                      <Status\n                        display=\"flex\"\n                        paddingLeft=\"6px\"\n                        paddingRight=\"6px\"\n                        paddingTop=\"2px\"\n                        paddingBottom=\"2px\"\n                        size={'S'}\n                        variant={statusVariant}\n                      >\n                        <Typography tag=\"span\" variant=\"pi\" fontWeight=\"bold\">\n                          {capitalize(status)}\n                        </Typography>\n                      </Status>\n                    </Box>\n                  </Table.Cell>\n                  <Table.Cell>\n                    <EntryValidationText validationErrors={error} status={status} action={action} />\n                  </Table.Cell>\n                  <Table.Cell>\n                    <IconButton\n                      tag={Link}\n                      to={{\n                        search: stringify({ plugins: { i18n: { locale } } }),\n                      }}\n                      label={formatMessage(\n                        {\n                          id: getTranslation('Settings.list.actions.edit'),\n                          defaultMessage: 'Edit {name} locale',\n                        },\n                        {\n                          name: locale,\n                        }\n                      )}\n                      variant=\"ghost\"\n                    >\n                      <Pencil />\n                    </IconButton>\n                  </Table.Cell>\n                </Table.Row>\n              );\n            })}\n          </Table.Body>\n        </Table.Content>\n      </Box>\n    </Modal.Body>\n  );\n};\n\nexport { BulkLocaleActionModal };\nexport type { BulkLocaleActionModalProps };\n", "import * as React from 'react';\n\nimport { skipToken } from '@reduxjs/toolkit/query';\nimport {\n  useNotification,\n  useQueryParams,\n  Table,\n  useAPIErrorHandler,\n  FormErrors,\n  useForm,\n} from '@strapi/admin/strapi-admin';\nimport {\n  type DocumentActionComponent,\n  type DocumentActionProps,\n  unstable_useDocument as useDocument,\n  unstable_useDocumentActions as useDocumentActions,\n  buildValidParams,\n  HeaderActionProps,\n} from '@strapi/content-manager/strapi-admin';\nimport {\n  Flex,\n  Status,\n  Typography,\n  Button,\n  Modal,\n  Field,\n  SingleSelect,\n  SingleSelectOption,\n  Dialog,\n  type StatusVariant,\n} from '@strapi/design-system';\nimport { WarningCircle, ListPlus, Trash, Download, Cross, Plus } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { useI18n } from '../hooks/useI18n';\nimport { useGetLocalesQuery } from '../services/locales';\nimport { useGetManyDraftRelationCountQuery } from '../services/relations';\nimport { cleanData } from '../utils/clean';\nimport { getTranslation } from '../utils/getTranslation';\nimport { capitalize } from '../utils/strings';\n\nimport { BulkLocaleActionModal } from './BulkLocaleActionModal';\n\nimport type { Locale } from '../../../shared/contracts/locales';\nimport type { I18nBaseQuery } from '../types';\nimport type { Modules } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * LocalePickerAction\n * -----------------------------------------------------------------------------------------------*/\n\ninterface LocaleOptionProps {\n  isDraftAndPublishEnabled: boolean;\n  locale: Locale;\n  status: 'draft' | 'published' | 'modified';\n  entryExists: boolean;\n}\n\nconst statusVariants: Record<LocaleOptionProps['status'], StatusVariant> = {\n  draft: 'secondary',\n  published: 'success',\n  modified: 'alternative',\n};\n\nconst LocaleOption = ({\n  isDraftAndPublishEnabled,\n  locale,\n  status,\n  entryExists,\n}: LocaleOptionProps) => {\n  const { formatMessage } = useIntl();\n\n  if (!entryExists) {\n    return formatMessage(\n      {\n        id: getTranslation('CMEditViewLocalePicker.locale.create'),\n        defaultMessage: 'Create <bold>{locale}</bold> locale',\n      },\n      {\n        bold: (locale: React.ReactNode) => <b>{locale}</b>,\n        locale: locale.name,\n      }\n    );\n  }\n\n  return (\n    <Flex width=\"100%\" gap={1} justifyContent=\"space-between\">\n      <Typography>{locale.name}</Typography>\n      {isDraftAndPublishEnabled ? (\n        <Status\n          display=\"flex\"\n          paddingLeft=\"6px\"\n          paddingRight=\"6px\"\n          paddingTop=\"2px\"\n          paddingBottom=\"2px\"\n          size=\"S\"\n          variant={statusVariants[status]}\n        >\n          <Typography tag=\"span\" variant=\"pi\" fontWeight=\"bold\">\n            {capitalize(status)}\n          </Typography>\n        </Status>\n      ) : null}\n    </Flex>\n  );\n};\n\nconst LocalePickerAction = ({\n  document,\n  meta,\n  model,\n  collectionType,\n  documentId,\n}: HeaderActionProps) => {\n  const { formatMessage } = useIntl();\n  const [{ query }, setQuery] = useQueryParams<I18nBaseQuery>();\n  const { hasI18n, canCreate, canRead } = useI18n();\n  const { data: locales = [] } = useGetLocalesQuery();\n  const currentDesiredLocale = query.plugins?.i18n?.locale;\n  const { schema } = useDocument({\n    model,\n    collectionType,\n    documentId,\n    params: { locale: currentDesiredLocale },\n  });\n\n  const handleSelect = React.useCallback(\n    (value: string) => {\n      setQuery({\n        plugins: {\n          ...query.plugins,\n          i18n: {\n            locale: value,\n          },\n        },\n      });\n    },\n    [query.plugins, setQuery]\n  );\n\n  React.useEffect(() => {\n    if (!Array.isArray(locales) || !hasI18n) {\n      return;\n    }\n    /**\n     * Handle the case where the current locale query param doesn't exist\n     * in the list of available locales, so we redirect to the default locale.\n     */\n    const doesLocaleExist = locales.find((loc) => loc.code === currentDesiredLocale);\n    const defaultLocale = locales.find((locale) => locale.isDefault);\n    if (!doesLocaleExist && defaultLocale?.code) {\n      handleSelect(defaultLocale.code);\n    }\n  }, [handleSelect, hasI18n, locales, currentDesiredLocale]);\n\n  const currentLocale = Array.isArray(locales)\n    ? locales.find((locale) => locale.code === currentDesiredLocale)\n    : undefined;\n\n  const allCurrentLocales = [\n    { status: getDocumentStatus(document, meta), locale: currentLocale?.code },\n    ...(document?.localizations ?? []),\n  ];\n\n  if (!hasI18n || !Array.isArray(locales) || locales.length === 0) {\n    return null;\n  }\n\n  const displayedLocales = locales.filter((locale) => {\n    /**\n     * If you can read we allow you to see the locale exists\n     * otherwise the locale is hidden.\n     */\n    return canRead.includes(locale.code);\n  });\n\n  return {\n    label: formatMessage({\n      id: getTranslation('Settings.locales.modal.locales.label'),\n      defaultMessage: 'Locales',\n    }),\n    options: displayedLocales.map((locale) => {\n      const entryWithLocaleExists = allCurrentLocales.some((doc) => doc.locale === locale.code);\n\n      const currentLocaleDoc = allCurrentLocales.find((doc) =>\n        'locale' in doc ? doc.locale === locale.code : false\n      );\n\n      const permissionsToCheck = currentLocaleDoc ? canRead : canCreate;\n\n      return {\n        disabled: !permissionsToCheck.includes(locale.code),\n        value: locale.code,\n        label: (\n          <LocaleOption\n            isDraftAndPublishEnabled={!!schema?.options?.draftAndPublish}\n            locale={locale}\n            status={currentLocaleDoc?.status}\n            entryExists={entryWithLocaleExists}\n          />\n        ),\n        startIcon: !entryWithLocaleExists ? <Plus /> : null,\n      };\n    }),\n    customizeContent: () => currentLocale?.name,\n    onSelect: handleSelect,\n    value: currentLocale,\n  };\n};\n\ntype UseDocument = typeof useDocument;\n\nconst getDocumentStatus = (\n  document: ReturnType<UseDocument>['document'],\n  meta: ReturnType<UseDocument>['meta']\n): 'draft' | 'published' | 'modified' => {\n  const docStatus = document?.status;\n  const statuses = meta?.availableStatus ?? [];\n\n  /**\n   * Creating an entry\n   */\n  if (!docStatus) {\n    return 'draft';\n  }\n\n  /**\n   * We're viewing a draft, but the document could have a published version\n   */\n  if (docStatus === 'draft' && statuses.find((doc) => doc.publishedAt !== null)) {\n    return 'published';\n  }\n\n  return docStatus;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * FillFromAnotherLocaleAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst FillFromAnotherLocaleAction = ({\n  documentId,\n  meta,\n  model,\n  collectionType,\n}: HeaderActionProps) => {\n  const { formatMessage } = useIntl();\n  const [{ query }] = useQueryParams<I18nBaseQuery>();\n  const { hasI18n } = useI18n();\n  const currentDesiredLocale = query.plugins?.i18n?.locale;\n  const [localeSelected, setLocaleSelected] = React.useState<string | null>(null);\n  const setValues = useForm('FillFromAnotherLocale', (state) => state.setValues);\n\n  const { getDocument } = useDocumentActions();\n  const { schema, components } = useDocument({\n    model,\n    documentId,\n    collectionType,\n    params: { locale: currentDesiredLocale },\n  });\n  const { data: locales = [] } = useGetLocalesQuery();\n\n  const availableLocales = Array.isArray(locales)\n    ? locales.filter((locale) => meta?.availableLocales.some((l) => l.locale === locale.code))\n    : [];\n\n  const fillFromLocale = (onClose: () => void) => async () => {\n    const response = await getDocument({\n      collectionType,\n      model,\n      documentId,\n      params: { locale: localeSelected },\n    });\n    if (!response || !schema) {\n      return;\n    }\n\n    const { data } = response;\n\n    const cleanedData = cleanData(data, schema, components);\n\n    setValues(cleanedData);\n\n    onClose();\n  };\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  return {\n    type: 'icon',\n    icon: <Download />,\n    disabled: availableLocales.length === 0,\n    label: formatMessage({\n      id: getTranslation('CMEditViewCopyLocale.copy-text'),\n      defaultMessage: 'Fill in from another locale',\n    }),\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: getTranslation('CMEditViewCopyLocale.dialog.title'),\n        defaultMessage: 'Confirmation',\n      }),\n      content: ({ onClose }: { onClose: () => void }) => (\n        <>\n          <Dialog.Body>\n            <Flex direction=\"column\" gap={3}>\n              <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n              <Typography textAlign=\"center\">\n                {formatMessage({\n                  id: getTranslation('CMEditViewCopyLocale.dialog.body'),\n                  defaultMessage:\n                    'Your current content will be erased and filled by the content of the selected locale:',\n                })}\n              </Typography>\n              <Field.Root width=\"100%\">\n                <Field.Label>\n                  {formatMessage({\n                    id: getTranslation('CMEditViewCopyLocale.dialog.field.label'),\n                    defaultMessage: 'Locale',\n                  })}\n                </Field.Label>\n                <SingleSelect\n                  value={localeSelected}\n                  placeholder={formatMessage({\n                    id: getTranslation('CMEditViewCopyLocale.dialog.field.placeholder'),\n                    defaultMessage: 'Select one locale...',\n                  })}\n                  // @ts-expect-error – the DS will handle numbers, but we're not allowing the API.\n                  onChange={(value) => setLocaleSelected(value)}\n                >\n                  {availableLocales.map((locale) => (\n                    <SingleSelectOption key={locale.code} value={locale.code}>\n                      {locale.name}\n                    </SingleSelectOption>\n                  ))}\n                </SingleSelect>\n              </Field.Root>\n            </Flex>\n          </Dialog.Body>\n          <Dialog.Footer>\n            <Flex gap={2} width=\"100%\">\n              <Button flex=\"auto\" variant=\"tertiary\" onClick={onClose}>\n                {formatMessage({\n                  id: getTranslation('CMEditViewCopyLocale.cancel-text'),\n                  defaultMessage: 'No, cancel',\n                })}\n              </Button>\n              <Button flex=\"auto\" variant=\"success\" onClick={fillFromLocale(onClose)}>\n                {formatMessage({\n                  id: getTranslation('CMEditViewCopyLocale.submit-text'),\n                  defaultMessage: 'Yes, fill in',\n                })}\n              </Button>\n            </Flex>\n          </Dialog.Footer>\n        </>\n      ),\n    },\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DeleteLocaleAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst DeleteLocaleAction: DocumentActionComponent = ({\n  document,\n  documentId,\n  model,\n  collectionType,\n}) => {\n  const { formatMessage } = useIntl();\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const { delete: deleteAction } = useDocumentActions();\n  const { hasI18n, canDelete } = useI18n();\n\n  // Get the current locale object, using the URL instead of document so it works while creating\n  const [{ query }] = useQueryParams<I18nBaseQuery>();\n  const { data: locales = [] } = useGetLocalesQuery();\n  const currentDesiredLocale = query.plugins?.i18n?.locale;\n  const locale = !('error' in locales) && locales.find((loc) => loc.code === currentDesiredLocale);\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  return {\n    disabled:\n      (document?.locale && !canDelete.includes(document.locale)) || !document || !document.id,\n    position: ['header', 'table-row'],\n    label: formatMessage(\n      {\n        id: getTranslation('actions.delete.label'),\n        defaultMessage: 'Delete entry ({locale})',\n      },\n      { locale: locale && locale.name }\n    ),\n    icon: <StyledTrash />,\n    variant: 'danger',\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: getTranslation('actions.delete.dialog.title'),\n        defaultMessage: 'Confirmation',\n      }),\n      content: (\n        <Flex direction=\"column\" gap={2}>\n          <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\n            {formatMessage({\n              id: getTranslation('actions.delete.dialog.body'),\n              defaultMessage: 'Are you sure?',\n            })}\n          </Typography>\n        </Flex>\n      ),\n      onConfirm: async () => {\n        const unableToDelete =\n          // We are unable to delete a collection type without a document ID\n          // & unable to delete generally if there is no document locale\n          (collectionType !== 'single-types' && !documentId) || !document?.locale;\n\n        if (unableToDelete) {\n          console.error(\n            \"You're trying to delete a document without an id or locale, this is likely a bug with Strapi. Please open an issue.\"\n          );\n\n          toggleNotification({\n            message: formatMessage({\n              id: getTranslation('actions.delete.error'),\n              defaultMessage: 'An error occurred while trying to delete the document locale.',\n            }),\n            type: 'danger',\n          });\n\n          return;\n        }\n\n        const res = await deleteAction({\n          documentId,\n          model,\n          collectionType,\n          params: { locale: document.locale },\n        });\n\n        if (!('error' in res)) {\n          navigate({ pathname: `../${collectionType}/${model}` }, { replace: true });\n        }\n      },\n    },\n  };\n};\n\nexport type LocaleStatus = {\n  locale: string;\n  status: Modules.Documents.Params.PublicationStatus.Kind | 'modified';\n};\n\ninterface ExtendedDocumentActionProps extends DocumentActionProps {\n  action?: 'bulk-publish' | 'bulk-unpublish';\n}\n\n/* -------------------------------------------------------------------------------------------------\n * BulkLocaleAction\n *\n * This component is used to handle bulk publish and unpublish actions on locales.\n * -----------------------------------------------------------------------------------------------*/\n\nconst BulkLocaleAction: DocumentActionComponent = ({\n  document,\n  documentId,\n  model,\n  collectionType,\n  action,\n}: ExtendedDocumentActionProps) => {\n  const locale = document?.locale ?? null;\n  const [{ query }] = useQueryParams<{ status: 'draft' | 'published' }>();\n\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n  const isOnPublishedTab = query.status === 'published';\n\n  const { formatMessage } = useIntl();\n  const { hasI18n, canPublish } = useI18n();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const [selectedRows, setSelectedRows] = React.useState<any[]>([]);\n  const [isDraftRelationConfirmationOpen, setIsDraftRelationConfirmationOpen] =\n    React.useState<boolean>(false);\n\n  const { publishMany: publishManyAction, unpublishMany: unpublishManyAction } =\n    useDocumentActions();\n\n  const { schema, validate } = useDocument(\n    {\n      model,\n      collectionType,\n      documentId,\n      params: {\n        locale,\n      },\n    },\n    {\n      // No need to fetch the document, the data is already available in the `document` prop\n      skip: true,\n    }\n  );\n\n  const { data: localesMetadata = [] } = useGetLocalesQuery(hasI18n ? undefined : skipToken);\n\n  const headers = [\n    {\n      label: formatMessage({\n        id: 'global.name',\n        defaultMessage: 'Name',\n      }),\n      name: 'name',\n    },\n    {\n      label: formatMessage({\n        id: getTranslation('CMEditViewBulkLocale.status'),\n        defaultMessage: 'Status',\n      }),\n      name: 'status',\n    },\n    {\n      label: formatMessage({\n        id: getTranslation('CMEditViewBulkLocale.publication-status'),\n        defaultMessage: 'Publication Status',\n      }),\n      name: 'publication-status',\n    },\n  ];\n\n  // Extract the rows for the bulk locale publish modal and any validation\n  // errors per locale\n  const [rows, validationErrors] = React.useMemo(() => {\n    if (!document) {\n      return [[], {}];\n    }\n\n    const localizations = document.localizations ?? [];\n\n    // Build the rows for the bulk locale publish modal by combining the current\n    // document with all the available locales from the document meta\n    const locales: LocaleStatus[] = localizations.map((doc: any) => {\n      const { locale, status } = doc;\n      return { locale, status };\n    });\n\n    // Add the current document locale\n    locales.unshift({\n      locale: document.locale,\n      status: document.status,\n    });\n\n    // Build the validation errors for each locale.\n    const allDocuments = [document, ...localizations];\n    const errors = allDocuments.reduce<FormErrors>((errs, document) => {\n      if (!document) {\n        return errs;\n      }\n\n      // Validate each locale entry via the useDocument validate function and store any errors in a dictionary\n      const validation = validate(document as Modules.Documents.AnyDocument);\n      if (validation !== null) {\n        errs[document.locale] = validation;\n      }\n      return errs;\n    }, {});\n\n    return [locales, errors];\n  }, [document, validate]);\n\n  const isBulkPublish = action === 'bulk-publish';\n  const localesForAction = selectedRows.reduce((acc: string[], selectedRow: LocaleStatus) => {\n    const isValidLocale =\n      // Validation errors are irrelevant if we are trying to unpublish\n      !isBulkPublish || !Object.keys(validationErrors).includes(selectedRow.locale);\n\n    const shouldAddLocale = isBulkPublish\n      ? selectedRow.status !== 'published' && isValidLocale\n      : selectedRow.status !== 'draft' && isValidLocale;\n\n    if (shouldAddLocale) {\n      acc.push(selectedRow.locale);\n    }\n\n    return acc;\n  }, []);\n\n  // TODO skipping this for now as there is a bug with the draft relation count that will be worked on separately\n  // see https://www.notion.so/strapi/Count-draft-relations-56901b492efb45ab90d42fe975b32bd8?pvs=4\n  const enableDraftRelationsCount = false;\n  const {\n    data: draftRelationsCount = 0,\n    isLoading: isDraftRelationsLoading,\n    error: isDraftRelationsError,\n  } = useGetManyDraftRelationCountQuery(\n    {\n      model,\n      documentIds: [documentId!],\n      locale: localesForAction,\n    },\n    {\n      skip: !enableDraftRelationsCount || !documentId || localesForAction.length === 0,\n    }\n  );\n\n  React.useEffect(() => {\n    if (isDraftRelationsError) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(isDraftRelationsError),\n      });\n    }\n  }, [isDraftRelationsError, toggleNotification, formatAPIError]);\n\n  if (!schema?.options?.draftAndPublish) {\n    return null;\n  }\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  if (!documentId) {\n    return null;\n  }\n\n  // This document action can be enabled given that draft and publish and i18n are\n  // enabled and we can publish the current locale.\n\n  const publish = async () => {\n    await publishManyAction({\n      model,\n      documentIds: [documentId],\n      params: {\n        ...params,\n        locale: localesForAction,\n      },\n    });\n\n    setSelectedRows([]);\n  };\n\n  const unpublish = async () => {\n    await unpublishManyAction({\n      model,\n      documentIds: [documentId],\n      params: {\n        ...params,\n        locale: localesForAction,\n      },\n    });\n\n    setSelectedRows([]);\n  };\n\n  const handleAction = async () => {\n    if (draftRelationsCount > 0) {\n      setIsDraftRelationConfirmationOpen(true);\n    } else if (isBulkPublish) {\n      await publish();\n    } else {\n      await unpublish();\n    }\n  };\n\n  if (isDraftRelationConfirmationOpen) {\n    return {\n      label: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      variant: 'danger',\n      dialog: {\n        onCancel: () => {\n          setIsDraftRelationConfirmationOpen(false);\n        },\n        onConfirm: async () => {\n          await publish();\n\n          setIsDraftRelationConfirmationOpen(false);\n        },\n        type: 'dialog',\n        title: formatMessage({\n          id: getTranslation('actions.publish.dialog.title'),\n          defaultMessage: 'Confirmation',\n        }),\n        content: (\n          <Flex direction=\"column\" alignItems=\"center\" gap={2}>\n            <WarningCircle width=\"2.4rem\" height=\"2.4rem\" fill=\"danger600\" />\n            <Typography textAlign=\"center\">\n              {formatMessage({\n                id: getTranslation('CMEditViewBulkLocale.draft-relation-warning'),\n                defaultMessage:\n                  'Some locales are related to draft entries. Publishing them could leave broken links in your app.',\n              })}\n            </Typography>\n            <Typography textAlign=\"center\">\n              {formatMessage({\n                id: getTranslation('CMEditViewBulkLocale.continue-confirmation'),\n                defaultMessage: 'Are you sure you want to continue?',\n              })}\n            </Typography>\n          </Flex>\n        ),\n      },\n    };\n  }\n\n  const hasPermission = selectedRows\n    .map(({ locale }) => locale)\n    .every((locale) => canPublish.includes(locale));\n\n  return {\n    label: formatMessage({\n      id: getTranslation(`CMEditViewBulkLocale.${isBulkPublish ? 'publish' : 'unpublish'}-title`),\n      defaultMessage: `${isBulkPublish ? 'Publish' : 'Unpublish'} Multiple Locales`,\n    }),\n    variant: isBulkPublish ? 'secondary' : 'danger',\n    icon: isBulkPublish ? <ListPlus /> : <Cross />,\n    disabled: isOnPublishedTab || canPublish.length === 0,\n    position: ['panel'],\n    dialog: {\n      type: 'modal',\n      title: formatMessage({\n        id: getTranslation(`CMEditViewBulkLocale.${isBulkPublish ? 'publish' : 'unpublish'}-title`),\n        defaultMessage: `${isBulkPublish ? 'Publish' : 'Unpublish'} Multiple Locales`,\n      }),\n      content: () => {\n        return (\n          <Table.Root\n            headers={headers}\n            rows={rows.map((row) => ({\n              ...row,\n              id: row.locale,\n            }))}\n            selectedRows={selectedRows}\n            onSelectedRowsChange={(tableSelectedRows) => setSelectedRows(tableSelectedRows)}\n          >\n            <BulkLocaleActionModal\n              validationErrors={validationErrors}\n              headers={headers}\n              rows={rows}\n              localesMetadata={localesMetadata as Locale[]}\n              action={action ?? 'bulk-publish'}\n            />\n          </Table.Root>\n        );\n      },\n      footer: () => (\n        <Modal.Footer justifyContent=\"flex-end\">\n          <Button\n            loading={isDraftRelationsLoading}\n            disabled={!hasPermission || localesForAction.length === 0}\n            variant=\"default\"\n            onClick={handleAction}\n          >\n            {formatMessage({\n              id: isBulkPublish ? 'app.utils.publish' : 'app.utils.unpublish',\n              defaultMessage: isBulkPublish ? 'Publish' : 'Unpublish',\n            })}\n          </Button>\n        </Modal.Footer>\n      ),\n    },\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * BulkLocalePublishAction\n * -----------------------------------------------------------------------------------------------*/\nconst BulkLocalePublishAction: DocumentActionComponent = (props: ExtendedDocumentActionProps) => {\n  return BulkLocaleAction({ action: 'bulk-publish', ...props });\n};\n\n/* -------------------------------------------------------------------------------------------------\n * BulkLocaleUnpublishAction\n * -----------------------------------------------------------------------------------------------*/\nconst BulkLocaleUnpublishAction: DocumentActionComponent = (props: ExtendedDocumentActionProps) => {\n  return BulkLocaleAction({ action: 'bulk-unpublish', ...props });\n};\n\n/**\n * Because the icon system is completely broken, we have to do\n * this to remove the fill from the cog.\n */\nconst StyledTrash = styled(Trash)`\n  path {\n    fill: currentColor;\n  }\n`;\n\nexport {\n  BulkLocalePublishAction,\n  BulkLocaleUnpublishAction,\n  DeleteLocaleAction,\n  LocalePickerAction,\n  FillFromAnotherLocaleAction,\n};\n", "import * as React from 'react';\n\nimport { Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { useI18n } from '../hooks/useI18n';\nimport { getTranslation } from '../utils/getTranslation';\n\nconst Emphasis = (chunks: React.ReactNode) => {\n  return (\n    <Typography fontWeight=\"semiBold\" textColor=\"danger500\">\n      {chunks}\n    </Typography>\n  );\n};\n\nconst DeleteModalAdditionalInfo = () => {\n  const { hasI18n } = useI18n();\n  const { formatMessage } = useIntl();\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  return (\n    <Typography textColor=\"danger500\">\n      {formatMessage(\n        {\n          id: getTranslation('Settings.list.actions.deleteAdditionalInfos'),\n          defaultMessage:\n            'This will delete the active locale versions <em>(from Internationalization)</em>',\n        },\n        {\n          em: Emphasis,\n        }\n      )}\n    </Typography>\n  );\n};\n\nconst PublishModalAdditionalInfo = () => {\n  const { hasI18n } = useI18n();\n  const { formatMessage } = useIntl();\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  return (\n    <Typography textColor=\"danger500\">\n      {formatMessage(\n        {\n          id: getTranslation('Settings.list.actions.publishAdditionalInfos'),\n          defaultMessage:\n            'This will publish the active locale versions <em>(from Internationalization)</em>',\n        },\n        {\n          em: Emphasis,\n        }\n      )}\n    </Typography>\n  );\n};\n\nconst UnpublishModalAdditionalInfo = () => {\n  const { hasI18n } = useI18n();\n  const { formatMessage } = useIntl();\n\n  if (!hasI18n) {\n    return null;\n  }\n\n  return (\n    <Typography textColor=\"danger500\">\n      {formatMessage(\n        {\n          id: getTranslation('Settings.list.actions.unpublishAdditionalInfos'),\n          defaultMessage:\n            'This will unpublish the active locale versions <em>(from Internationalization)</em>',\n        },\n        {\n          em: Emphasis,\n        }\n      )}\n    </Typography>\n  );\n};\n\nexport { DeleteModalAdditionalInfo, PublishModalAdditionalInfo, UnpublishModalAdditionalInfo };\n", "import * as React from 'react';\n\nimport { useQueryParams } from '@strapi/admin/strapi-admin';\nimport { SingleSelect, SingleSelectOption } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { useI18n } from '../hooks/useI18n';\nimport { useGetLocalesQuery } from '../services/locales';\nimport { getTranslation } from '../utils/getTranslation';\n\nimport type { I18nBaseQuery } from '../types';\n\ninterface Query extends I18nBaseQuery {\n  page?: number;\n}\n\nconst LocalePicker = () => {\n  const { formatMessage } = useIntl();\n  const [{ query }, setQuery] = useQueryParams<Query>();\n\n  const { hasI18n, canRead, canCreate } = useI18n();\n  const { data: locales = [] } = useGetLocalesQuery(undefined, {\n    skip: !hasI18n,\n  });\n\n  const handleChange = React.useCallback(\n    (code: string, replace = false) => {\n      setQuery(\n        {\n          page: 1,\n          plugins: { ...query.plugins, i18n: { locale: code } },\n        },\n        'push',\n        replace\n      );\n    },\n    [query.plugins, setQuery]\n  );\n\n  React.useEffect(() => {\n    if (!Array.isArray(locales) || !hasI18n) {\n      return;\n    }\n    /**\n     * Handle the case where the current locale query param doesn't exist\n     * in the list of available locales, so we redirect to the default locale.\n     */\n    const currentDesiredLocale = query.plugins?.i18n?.locale;\n    const doesLocaleExist = locales.find((loc) => loc.code === currentDesiredLocale);\n    const defaultLocale = locales.find((locale) => locale.isDefault);\n    if (!doesLocaleExist && defaultLocale?.code) {\n      handleChange(defaultLocale.code, true);\n    }\n  }, [hasI18n, handleChange, locales, query.plugins?.i18n?.locale]);\n\n  if (!hasI18n || !Array.isArray(locales) || locales.length === 0) {\n    return null;\n  }\n\n  const displayedLocales = locales.filter((locale) => {\n    /**\n     * If you can create or read we allow you to see the locale exists\n     * this is because in the ListView, you may be able to create a new entry\n     * in a locale you can't read.\n     */\n    return canCreate.includes(locale.code) || canRead.includes(locale.code);\n  });\n\n  return (\n    <SingleSelect\n      size=\"S\"\n      aria-label={formatMessage({\n        id: getTranslation('actions.select-locale'),\n        defaultMessage: 'Select locale',\n      })}\n      value={query.plugins?.i18n?.locale || locales.find((locale) => locale.isDefault)?.code}\n      // @ts-expect-error – This can be removed in V2 of the DS.\n      onChange={handleChange}\n    >\n      {displayedLocales.map((locale) => (\n        <SingleSelectOption key={locale.id} value={locale.code}>\n          {locale.name}\n        </SingleSelectOption>\n      ))}\n    </SingleSelect>\n  );\n};\n\nexport { LocalePicker };\n", "export const PERMISSIONS = {\n  accessMain: [{ action: 'plugin::i18n.locale.read', subject: null }],\n  create: [{ action: 'plugin::i18n.locale.create', subject: null }],\n  delete: [{ action: 'plugin::i18n.locale.delete', subject: null }],\n  update: [{ action: 'plugin::i18n.locale.update', subject: null }],\n  read: [{ action: 'plugin::i18n.locale.read', subject: null }],\n};\n", "/* eslint-disable check-file/filename-naming-convention */\nimport * as React from 'react';\n\nimport { Flex, VisuallyHidden } from '@strapi/design-system';\nimport { Earth, EarthStriked } from '@strapi/icons';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { getTranslation } from '../utils/getTranslation';\n\nimport type { EditFieldLayout, EditLayout } from '@strapi/content-manager/strapi-admin';\n\ninterface MutateEditViewArgs {\n  layout: EditLayout;\n}\n\nconst mutateEditViewHook = ({ layout }: MutateEditViewArgs): MutateEditViewArgs => {\n  // If i18n isn't explicitly enabled on the content type, then no field can be localized\n  if (\n    !('i18n' in layout.options) ||\n    (typeof layout.options.i18n === 'object' &&\n      layout.options.i18n !== null &&\n      'localized' in layout.options.i18n &&\n      !layout.options.i18n.localized)\n  ) {\n    return { layout };\n  }\n\n  const components = Object.entries(layout.components).reduce<EditLayout['components']>(\n    (acc, [key, componentLayout]) => {\n      return {\n        ...acc,\n        [key]: {\n          ...componentLayout,\n          layout: componentLayout.layout.map((row) => row.map(addLabelActionToField)),\n        },\n      };\n    },\n    {}\n  );\n\n  return {\n    layout: {\n      ...layout,\n      components,\n      layout: layout.layout.map((panel) => panel.map((row) => row.map(addLabelActionToField))),\n    },\n  } satisfies Pick<MutateEditViewArgs, 'layout'>;\n};\n\nconst addLabelActionToField = (field: EditFieldLayout) => {\n  const isFieldLocalized = doesFieldHaveI18nPluginOpt(field.attribute.pluginOptions)\n    ? field.attribute.pluginOptions.i18n.localized\n    : true || ['uid', 'relation'].includes(field.attribute.type);\n\n  const labelActionProps = {\n    title: {\n      id: isFieldLocalized\n        ? getTranslation('Field.localized')\n        : getTranslation('Field.not-localized'),\n      defaultMessage: isFieldLocalized\n        ? 'This value is unique for the selected locale'\n        : 'This value is the same across all locales',\n    },\n    icon: isFieldLocalized ? <Earth /> : null,\n  };\n\n  return {\n    ...field,\n    labelAction: isFieldLocalized ? <LabelAction {...labelActionProps} /> : null,\n  };\n};\n\nconst doesFieldHaveI18nPluginOpt = (\n  pluginOpts?: object\n): pluginOpts is { i18n: { localized: boolean } } => {\n  if (!pluginOpts) {\n    return false;\n  }\n\n  return (\n    'i18n' in pluginOpts &&\n    typeof pluginOpts.i18n === 'object' &&\n    pluginOpts.i18n !== null &&\n    'localized' in pluginOpts.i18n\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * LabelAction\n * -----------------------------------------------------------------------------------------------*/\n\ninterface LabelActionProps {\n  title: MessageDescriptor;\n  icon: React.ReactNode;\n}\n\nconst LabelAction = ({ title, icon }: LabelActionProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Span tag=\"span\">\n      <VisuallyHidden tag=\"span\">{formatMessage(title)}</VisuallyHidden>\n      {React.cloneElement(icon as React.ReactElement, {\n        'aria-hidden': true,\n        focusable: false, // See: https://allyjs.io/tutorials/focusing-in-svg.html#making-svg-elements-focusable\n      })}\n    </Span>\n  );\n};\n\nconst Span = styled(Flex)`\n  svg {\n    width: 12px;\n    height: 12px;\n\n    fill: ${({ theme }) => theme.colors.neutral500};\n\n    path {\n      fill: ${({ theme }) => theme.colors.neutral500};\n    }\n  }\n`;\n\nexport { mutateEditViewHook };\n", "import { Box, Flex, Popover, Typography, useCollator, Button } from '@strapi/design-system';\nimport { CaretDown } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { Locale } from '../../../shared/contracts/locales';\nimport { useGetLocalesQuery } from '../services/locales';\n\ninterface LocaleListCellProps {\n  localizations: { locale: string }[];\n  locale: string;\n}\n\nconst LocaleListCell = ({ locale: currentLocale, localizations }: LocaleListCellProps) => {\n  const { locale: language } = useIntl();\n  const { data: locales = [] } = useGetLocalesQuery();\n  const formatter = useCollator(language, {\n    sensitivity: 'base',\n  });\n\n  if (!Array.isArray(locales) || !localizations) {\n    return null;\n  }\n\n  const availableLocales = localizations.map((loc) => loc.locale);\n\n  const localesForDocument = locales\n    .reduce<Locale[]>((acc, locale) => {\n      const createdLocale = [currentLocale, ...availableLocales].find((loc) => {\n        return loc === locale.code;\n      });\n\n      if (createdLocale) {\n        acc.push(locale);\n      }\n\n      return acc;\n    }, [])\n    .map((locale) => {\n      if (locale.isDefault) {\n        return `${locale.name} (default)`;\n      }\n\n      return locale.name;\n    })\n    .toSorted((a, b) => formatter.compare(a, b));\n\n  return (\n    <Popover.Root>\n      <Popover.Trigger>\n        <Button variant=\"ghost\" type=\"button\" onClick={(e) => e.stopPropagation()}>\n          <Flex minWidth=\"100%\" alignItems=\"center\" justifyContent=\"center\" fontWeight=\"regular\">\n            <Typography textColor=\"neutral800\" ellipsis marginRight={2}>\n              {localesForDocument.join(', ')}\n            </Typography>\n            <Flex>\n              <CaretDown width=\"1.2rem\" height=\"1.2rem\" />\n            </Flex>\n          </Flex>\n        </Button>\n      </Popover.Trigger>\n      <Popover.Content sideOffset={16}>\n        <ul>\n          {localesForDocument.map((name) => (\n            <Box key={name} padding={3} tag=\"li\">\n              <Typography>{name}</Typography>\n            </Box>\n          ))}\n        </ul>\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n\nexport { LocaleListCell };\nexport type { LocaleListCellProps };\n", "/* eslint-disable check-file/filename-naming-convention */\nimport { LocaleListCell } from '../components/LocaleListCell';\nimport { doesPluginOptionsHaveI18nLocalized } from '../utils/fields';\nimport { getTranslation } from '../utils/getTranslation';\n\nimport type { ListFieldLayout, ListLayout } from '@strapi/content-manager/strapi-admin';\n\n/* -------------------------------------------------------------------------------------------------\n * addColumnToTableHook\n * -----------------------------------------------------------------------------------------------*/\ninterface AddColumnToTableHookArgs {\n  layout: ListLayout;\n  displayedHeaders: ListFieldLayout[];\n}\n\nconst addColumnToTableHook = ({ displayedHeaders, layout }: AddColumnToTableHookArgs) => {\n  const { options } = layout;\n\n  const isFieldLocalized = doesPluginOptionsHaveI18nLocalized(options)\n    ? options.i18n.localized\n    : false;\n\n  if (!isFieldLocalized) {\n    return { displayedHeaders, layout };\n  }\n\n  return {\n    displayedHeaders: [\n      ...displayedHeaders,\n      {\n        attribute: { type: 'string' },\n        label: {\n          id: getTranslation('list-view.table.header.label'),\n          defaultMessage: 'Available in',\n        },\n        searchable: false,\n        sortable: false,\n        name: 'locales',\n        // @ts-expect-error – ID is seen as number | string; this will change when we move the type over.\n        cellFormatter: (props, _header, meta) => <LocaleListCell {...props} {...meta} />,\n      },\n    ],\n    layout,\n  };\n};\n\nexport { addColumnToTableHook };\n", "import type { Schema } from '@strapi/types';\n/* -------------------------------------------------------------------------------------------------\n * addLocaleToReleasesHook\n * -----------------------------------------------------------------------------------------------*/\ninterface AddLocaleToReleasesHookArgs {\n  displayedHeaders: {\n    key: string;\n    fieldSchema: Schema.Attribute.Kind | 'custom';\n    metadatas: {\n      label: { id: string; defaultMessage: string };\n      searchable: boolean;\n      sortable: boolean;\n    };\n    name: string;\n  }[];\n  hasI18nEnabled: boolean;\n}\n\nconst addLocaleToReleasesHook = ({ displayedHeaders = [] }: AddLocaleToReleasesHookArgs) => {\n  return {\n    displayedHeaders: [\n      ...displayedHeaders,\n      {\n        label: {\n          id: 'content-releases.page.ReleaseDetails.table.header.label.locale',\n          defaultMessage: 'locale',\n        },\n        name: 'locale',\n      },\n    ],\n    hasI18nEnabled: true,\n  };\n};\n\nexport { addLocaleToReleasesHook };\n", "import get from 'lodash/get';\n\nimport type { Middleware } from '@reduxjs/toolkit';\nimport type { Store } from '@strapi/admin/strapi-admin';\n\nconst extendCTBAttributeInitialDataMiddleware: () => Middleware<\n  object,\n  ReturnType<Store['getState']>\n> = () => {\n  return ({ getState }) =>\n    (next) =>\n    (action) => {\n      const enhanceAction = () => {\n        // the block here is to catch the error when trying to access the state\n        // of the ctb when the plugin is not mounted\n        try {\n          const store = getState();\n\n          const hasi18nEnabled = get(\n            store,\n            [\n              'content-type-builder_dataManagerProvider',\n              'modifiedData',\n              'contentType',\n              'schema',\n              'pluginOptions',\n              'i18n',\n              'localized',\n            ],\n            false\n          );\n\n          if (hasi18nEnabled) {\n            const pluginOptions = action.options\n              ? { ...action.options.pluginOptions, i18n: { localized: true } }\n              : { i18n: { localized: true } };\n\n            return next({\n              ...action,\n              options: {\n                pluginOptions,\n              },\n            });\n          }\n\n          return next(action);\n        } catch (err) {\n          return next(action);\n        }\n      };\n\n      if (\n        action.type === 'ContentTypeBuilder/FormModal/SET_ATTRIBUTE_DATA_SCHEMA' &&\n        action.forTarget === 'contentType' &&\n        !['relation', 'component'].includes(action.attributeType) &&\n        !action.isEditing\n      ) {\n        return enhanceAction();\n      }\n\n      if (\n        action.type === 'ContentTypeBuilder/FormModal/SET_CUSTOM_FIELD_DATA_SCHEMA' &&\n        action.forTarget === 'contentType' &&\n        !action.isEditing\n      ) {\n        return enhanceAction();\n      }\n\n      if (\n        (action.type ===\n          'ContentTypeBuilder/FormModal/RESET_PROPS_AND_SET_FORM_FOR_ADDING_AN_EXISTING_COMPO' ||\n          action.type === 'ContentTypeBuilder/FormModal/RESET_PROPS_AND_SAVE_CURRENT_DATA') &&\n        action.forTarget === 'contentType'\n      ) {\n        return enhanceAction();\n      }\n\n      return next(action);\n    };\n};\n\nexport { extendCTBAttributeInitialDataMiddleware };\n", "import type { Middleware } from '@reduxjs/toolkit';\nimport type { Store } from '@strapi/admin/strapi-admin';\n\nconst extendCTBInitialDataMiddleware: () => Middleware<\n  object,\n  ReturnType<Store['getState']>\n> = () => {\n  return () => (next) => (action) => {\n    if (\n      action.type === 'ContentTypeBuilder/FormModal/SET_DATA_TO_EDIT' &&\n      action.modalType === 'contentType'\n    ) {\n      const i18n = { localized: false };\n\n      const pluginOptions = action.data.pluginOptions\n        ? { ...action.data.pluginOptions, i18n }\n        : { i18n };\n\n      const data = { ...action.data, pluginOptions };\n\n      if (action.actionType === 'create') {\n        return next({ ...action, data });\n      }\n\n      // Override the action if the pluginOption config does not contain i18n\n      // In this case we need to set the proper initialData shape\n      if (!action.data.pluginOptions?.i18n?.localized) {\n        return next({ ...action, data });\n      }\n    }\n\n    // action is not the one we want to override\n    return next(action);\n  };\n};\n\nexport { extendCTBInitialDataMiddleware };\n", "/* eslint-disable check-file/filename-naming-convention */\nimport * as qs from 'qs';\nimport { matchPath } from 'react-router-dom';\n\nimport type { RBACMiddleware } from '@strapi/admin/strapi-admin';\n\nconst localeMiddleware: RBACMiddleware = (ctx) => (next) => (permissions) => {\n  const match = matchPath('/content-manager/:collectionType/:model?/:id', ctx.pathname);\n\n  if (!match) {\n    return next(permissions);\n  }\n\n  const search = qs.parse(ctx.search);\n\n  if (typeof search !== 'object') {\n    return next(permissions);\n  }\n\n  if (!('plugins' in search && typeof search.plugins === 'object')) {\n    return next(permissions);\n  }\n\n  if (\n    !(\n      'i18n' in search.plugins &&\n      typeof search.plugins.i18n === 'object' &&\n      !Array.isArray(search.plugins.i18n)\n    )\n  ) {\n    return next(permissions);\n  }\n\n  const { locale } = search.plugins.i18n;\n\n  if (typeof locale !== 'string') {\n    return next(permissions);\n  }\n\n  const revisedPermissions = permissions.filter(\n    (permission) =>\n      !permission.properties?.locales || permission.properties.locales.includes(locale)\n  );\n\n  return next(revisedPermissions);\n};\n\nexport { localeMiddleware };\n", "type TradOptions = Record<string, string>;\n\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\n  if (!pluginId) {\n    throw new TypeError(\"pluginId can't be empty\");\n  }\n  return Object.keys(trad).reduce((acc, current) => {\n    acc[`${pluginId}.${current}`] = trad[current];\n    return acc;\n  }, {} as TradOptions);\n};\n\nexport { prefixPluginTranslations };\n", "import omit from 'lodash/omit';\n\nimport { LOCALIZED_FIELDS, doesPluginOptionsHaveI18nLocalized } from './fields';\n\nimport type { Schema } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * mutateCTBContentTypeSchema\n * -----------------------------------------------------------------------------------------------*/\n\nconst mutateCTBContentTypeSchema = (\n  nextSchema: Schema.ContentType,\n  prevSchema?: {\n    apiID?: string;\n    schema?: Schema.ContentType;\n    uid?: string;\n  }\n) => {\n  // Don't perform mutations components\n  if (!doesPluginOptionsHaveI18nLocalized(nextSchema.pluginOptions)) {\n    return nextSchema;\n  }\n\n  const isNextSchemaLocalized = nextSchema.pluginOptions.i18n.localized;\n  const isPrevSchemaLocalized = doesPluginOptionsHaveI18nLocalized(\n    prevSchema?.schema?.pluginOptions\n  )\n    ? prevSchema?.schema?.pluginOptions.i18n.localized\n    : false;\n\n  // No need to perform modification on the schema, if the i18n feature was not changed\n  // at the ct level\n  if (isNextSchemaLocalized && isPrevSchemaLocalized) {\n    return nextSchema;\n  }\n\n  if (isNextSchemaLocalized) {\n    const attributes = addLocalisationToFields(nextSchema.attributes);\n\n    return { ...nextSchema, attributes };\n  }\n\n  // Remove the i18n object from the pluginOptions\n  if (!isNextSchemaLocalized) {\n    const pluginOptions = omit(nextSchema.pluginOptions, 'i18n');\n    const attributes = disableAttributesLocalisation(nextSchema.attributes);\n\n    return { ...nextSchema, pluginOptions, attributes };\n  }\n\n  return nextSchema;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * addLocalisationToFields\n * -----------------------------------------------------------------------------------------------*/\n\nconst addLocalisationToFields = (attributes: Schema.ContentType['attributes']) =>\n  Object.keys(attributes).reduce<Schema.ContentType['attributes']>((acc, current) => {\n    const currentAttribute = attributes[current];\n\n    if (LOCALIZED_FIELDS.includes(currentAttribute.type)) {\n      const i18n = { localized: true };\n\n      const pluginOptions = currentAttribute.pluginOptions\n        ? { ...currentAttribute.pluginOptions, i18n }\n        : { i18n };\n\n      acc[current] = { ...currentAttribute, pluginOptions };\n\n      return acc;\n    }\n\n    acc[current] = currentAttribute;\n\n    return acc;\n  }, {});\n\n/* -------------------------------------------------------------------------------------------------\n * disableAttributesLocalisation\n * -----------------------------------------------------------------------------------------------*/\n\ntype OmitByPath<T extends object, K extends string[]> = Pick<T, Exclude<keyof T, K[number]>>;\n\nconst disableAttributesLocalisation = (attributes: Schema.ContentType['attributes']) =>\n  Object.keys(attributes).reduce<\n    Record<string, OmitByPath<Schema.ContentType['attributes'][string], ['pluginOptions', 'i18n']>>\n  >((acc, current) => {\n    acc[current] = omit(attributes[current], 'pluginOptions.i18n');\n\n    return acc;\n  }, {});\n\nexport { mutateCTBContentTypeSchema };\n", "import get from 'lodash/get';\nimport * as yup from 'yup';\n\nimport { CheckboxConfirmation } from './components/CheckboxConfirmation';\nimport {\n  BulkLocalePublishAction,\n  BulkLocaleUnpublishAction,\n  DeleteLocaleAction,\n  LocalePickerAction,\n  FillFromAnotherLocaleAction,\n} from './components/CMHeaderActions';\nimport {\n  DeleteModalAdditionalInfo,\n  PublishModalAdditionalInfo,\n  UnpublishModalAdditionalInfo,\n} from './components/CMListViewModalsAdditionalInformation';\nimport { LocalePicker } from './components/LocalePicker';\nimport { PERMISSIONS } from './constants';\nimport { mutateEditViewHook } from './contentManagerHooks/editView';\nimport { addColumnToTableHook } from './contentManagerHooks/listView';\nimport { addLocaleToReleasesHook } from './contentReleasesHooks/releaseDetailsView';\nimport { extendCTBAttributeInitialDataMiddleware } from './middlewares/extendCTBAttributeInitialData';\nimport { extendCTBInitialDataMiddleware } from './middlewares/extendCTBInitialData';\nimport { localeMiddleware } from './middlewares/rbac-middleware';\nimport { pluginId } from './pluginId';\nimport { i18nApi } from './services/api';\nimport { LOCALIZED_FIELDS } from './utils/fields';\nimport { getTranslation } from './utils/getTranslation';\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\nimport { mutateCTBContentTypeSchema } from './utils/schemas';\n\nimport type { DocumentActionComponent } from '@strapi/content-manager/strapi-admin';\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  register(app: any) {\n    app.addMiddlewares([extendCTBAttributeInitialDataMiddleware, extendCTBInitialDataMiddleware]);\n    app.addMiddlewares([() => i18nApi.middleware]);\n    app.addReducers({\n      [i18nApi.reducerPath]: i18nApi.reducer,\n    });\n    app.addRBACMiddleware([localeMiddleware]);\n    app.registerPlugin({\n      id: pluginId,\n      name: pluginId,\n    });\n  },\n  bootstrap(app: any) {\n    // // Hook that adds a column into the CM's LV table\n    app.registerHook('Admin/CM/pages/ListView/inject-column-in-table', addColumnToTableHook);\n    app.registerHook('Admin/CM/pages/EditView/mutate-edit-view-layout', mutateEditViewHook);\n    // Hooks that checks if the locale is present in the release\n    app.registerHook(\n      'ContentReleases/pages/ReleaseDetails/add-locale-in-releases',\n      addLocaleToReleasesHook\n    );\n\n    // Add the settings link\n    app.addSettingsLink('global', {\n      intlLabel: {\n        id: getTranslation('plugin.name'),\n        defaultMessage: 'Internationalization',\n      },\n      id: 'internationalization',\n      to: 'internationalization',\n      Component: () =>\n        import('./pages/SettingsPage').then((mod) => ({ default: mod.ProtectedSettingsPage })),\n      permissions: PERMISSIONS.accessMain,\n    });\n\n    const contentManager = app.getPlugin('content-manager');\n\n    contentManager.apis.addDocumentHeaderAction([LocalePickerAction, FillFromAnotherLocaleAction]);\n    contentManager.apis.addDocumentAction((actions: DocumentActionComponent[]) => {\n      const indexOfDeleteAction = actions.findIndex((action) => action.type === 'delete');\n      actions.splice(indexOfDeleteAction, 0, DeleteLocaleAction);\n      return actions;\n    });\n\n    contentManager.apis.addDocumentAction((actions: DocumentActionComponent[]) => {\n      // When enabled the bulk locale publish action should be the first action\n      // in 'More Document Actions' and therefore the third action in the array\n      actions.splice(2, 0, BulkLocalePublishAction);\n      actions.splice(5, 0, BulkLocaleUnpublishAction);\n      return actions;\n    });\n\n    contentManager.injectComponent('listView', 'actions', {\n      name: 'i18n-locale-filter',\n      Component: LocalePicker,\n    });\n\n    contentManager.injectComponent('listView', 'publishModalAdditionalInfos', {\n      name: 'i18n-publish-bullets-in-modal',\n      Component: PublishModalAdditionalInfo,\n    });\n\n    contentManager.injectComponent('listView', 'unpublishModalAdditionalInfos', {\n      name: 'i18n-unpublish-bullets-in-modal',\n      Component: UnpublishModalAdditionalInfo,\n    });\n\n    contentManager.injectComponent('listView', 'deleteModalAdditionalInfos', {\n      name: 'i18n-delete-bullets-in-modal',\n      Component: DeleteModalAdditionalInfo,\n    });\n\n    const ctbPlugin = app.getPlugin('content-type-builder');\n\n    if (ctbPlugin) {\n      const ctbFormsAPI = ctbPlugin.apis.forms;\n      ctbFormsAPI.addContentTypeSchemaMutation(mutateCTBContentTypeSchema);\n      ctbFormsAPI.components.add({ id: 'checkboxConfirmation', component: CheckboxConfirmation });\n\n      ctbFormsAPI.extendContentType({\n        validator: () => ({\n          i18n: yup.object().shape({\n            localized: yup.bool(),\n          }),\n        }),\n        form: {\n          advanced() {\n            return [\n              {\n                name: 'pluginOptions.i18n.localized',\n                description: {\n                  id: getTranslation('plugin.schema.i18n.localized.description-content-type'),\n                  defaultMessage: 'Allows translating an entry into different languages',\n                },\n                type: 'checkboxConfirmation',\n                intlLabel: {\n                  id: getTranslation('plugin.schema.i18n.localized.label-content-type'),\n                  defaultMessage: 'Localization',\n                },\n              },\n            ];\n          },\n        },\n      });\n\n      ctbFormsAPI.extendFields(LOCALIZED_FIELDS, {\n        form: {\n          advanced({ contentTypeSchema, forTarget, type, step }: any) {\n            if (forTarget !== 'contentType') {\n              return [];\n            }\n\n            const hasI18nEnabled = get(\n              contentTypeSchema,\n              ['schema', 'pluginOptions', 'i18n', 'localized'],\n              false\n            );\n\n            if (!hasI18nEnabled) {\n              return [];\n            }\n\n            if (type === 'component' && step === '1') {\n              return [];\n            }\n\n            return [\n              {\n                name: 'pluginOptions.i18n.localized',\n                description: {\n                  id: getTranslation('plugin.schema.i18n.localized.description-field'),\n                  defaultMessage: 'The field can have different values in each locale',\n                },\n                type: 'checkbox',\n                intlLabel: {\n                  id: getTranslation('plugin.schema.i18n.localized.label-field'),\n                  defaultMessage: 'Enable localization for this field',\n                },\n              },\n            ];\n          },\n        },\n      });\n    }\n  },\n  async registerTrads({ locales }: { locales: string[] }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, pluginId),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n"],
  "mappings": "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",
  "names": ["pluginId", "getTranslation", "id", "TextAlignTypography", "styled", "Typography", "CheckboxConfirmation", "description", "isCreating", "intlLabel", "name", "onChange", "value", "formatMessage", "useIntl", "isOpen", "setIsOpen", "useState", "handleChange", "target", "type", "handleConfirm", "label", "defaultMessage", "values", "hint", "_jsxs", "Dialog", "Root", "open", "onOpenChange", "Field", "_jsx", "Checkbox", "onCheckedChange", "checked", "Hint", "Content", "Header", "Body", "icon", "WarningCircle", "Flex", "direction", "alignItems", "gap", "justifyContent", "fontWeight", "Footer", "Cancel", "Button", "variant", "Action", "onClick", "LOCALIZED_FIELDS", "doesPluginOptionsHaveI18nLocalized", "opts", "i18n", "localized", "capitalize", "str", "charAt", "toUpperCase", "slice", "useI18n", "params", "useParams", "userPermissions", "useAuth", "state", "permissions", "actions", "useMemo", "filter", "permission", "subject", "slug", "reduce", "acc", "actionShorthand", "action", "split", "properties", "locales", "canCreate", "canRead", "canUpdate", "canDelete", "canPublish", "schema", "useDocument", "collectionType", "model", "skip", "pluginOptions", "hasI18n", "i18nApi", "adminApi", "enhanceEndpoints", "addTagTypes", "localesApi", "injectEndpoints", "endpoints", "builder", "createLocale", "mutation", "query", "data", "url", "method", "invalidatesTags", "deleteLocale", "result", "error", "getLocales", "providesTags", "res", "Array", "isArray", "map", "locale", "getDefaultLocales", "updateLocale", "useCreateLocaleMutation", "useDeleteLocaleMutation", "useGetLocalesQuery", "useGetDefaultLocalesQuery", "useUpdateLocaleMutation", "relationsApi", "overrideExisting", "getManyDraftRelationCount", "config", "transformResponse", "response", "useGetManyDraftRelationCountQuery", "cleanData", "components", "cleanedData", "removeFields", "cleanedDataWithoutPasswordAndRelation", "recursiveRemoveFieldTypes", "fields", "Object", "keys", "current", "includes", "attribute", "attributes", "undefined", "componentValue", "index", "_", "rest", "__component", "__temp_key__", "repeatable", "component", "compoData", "isErrorMessageDescriptor", "object", "EntryValidationText", "status", "validationErrors", "getErrorStr", "key", "v", "join", "entries", "k", "validationErrorsMessages", "CrossCircle", "fill", "Tooltip", "maxWidth", "textColor", "ellipsis", "getStatusMessage", "CheckCircle", "text", "ArrowsCounterClockwise", "BoldChunk", "chunks", "BulkLocaleActionModal", "headers", "rows", "localesMetadata", "selectedRows", "useTable", "getFormattedCountMessage", "currentStatusByLocale", "localesWithErrors", "publishedCount", "length", "draftCount", "withErrorsCount", "messageId", "b", "Modal", "Box", "marginTop", "Table", "Head", "HeaderCheckboxCell", "head", "HeaderCell", "statusVariant", "Row", "CheckboxCell", "aria-label", "Cell", "find", "localeEntry", "code", "display", "Status", "paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "size", "tag", "IconButton", "Link", "to", "search", "stringify", "plugins", "Pencil", "statusVariants", "draft", "published", "modified", "LocaleOption", "isDraftAndPublishEnabled", "entryExists", "bold", "width", "LocalePickerAction", "document", "meta", "documentId", "setQuery", "useQueryParams", "currentDesiredLocale", "handleSelect", "useCallback", "React", "useEffect", "doesLocaleExist", "loc", "defaultLocale", "isDefault", "currentLocale", "allCurrentLocales", "getDocumentStatus", "localizations", "displayedLocales", "options", "entryWithLocaleExists", "some", "doc", "currentLocaleDoc", "permissionsToCheck", "disabled", "draftAndPublish", "startIcon", "Plus", "customizeContent", "onSelect", "docStatus", "statuses", "availableStatus", "publishedAt", "FillFromAnotherLocaleAction", "localeSelected", "setLocaleSelected", "setValues", "useForm", "getDocument", "useDocumentActions", "availableLocales", "l", "fillFromLocale", "onClose", "Download", "dialog", "title", "content", "_Fragment", "height", "textAlign", "Label", "SingleSelect", "placeholder", "SingleSelectOption", "flex", "DeleteLocaleAction", "navigate", "useNavigate", "toggleNotification", "useNotification", "delete", "deleteAction", "position", "StyledTrash", "onConfirm", "unableToDelete", "console", "message", "pathname", "replace", "BulkLocaleAction", "buildValidParams", "isOnPublishedTab", "_unstableFormatAPIError", "formatAPIError", "useAPIErrorHandler", "setSelectedRows", "isDraftRelationConfirmationOpen", "setIsDraftRelationConfirmationOpen", "publishMany", "publishManyAction", "unpublishMany", "unpublishManyAction", "validate", "skipToken", "unshift", "allDocuments", "errors", "errs", "validation", "isBulkPublish", "localesForAction", "selectedRow", "isValidLocale", "shouldAddLocale", "push", "enableDraftRelationsCount", "draftRelationsCount", "isLoading", "isDraftRelationsLoading", "isDraftRelationsError", "documentIds", "publish", "unpublish", "handleAction", "onCancel", "hasPermission", "every", "ListPlus", "Cross", "row", "onSelectedRowsChange", "tableSelectedRows", "footer", "loading", "BulkLocalePublishAction", "props", "BulkLocaleUnpublishAction", "Trash", "Emphasis", "DeleteModalAdditionalInfo", "em", "PublishModalAdditionalInfo", "UnpublishModalAdditionalInfo", "LocalePicker", "page", "PERMISSIONS", "accessMain", "create", "update", "read", "mutateEditViewHook", "layout", "componentLayout", "addLabelActionToField", "panel", "field", "isFieldLocalized", "doesFieldHaveI18nPluginOpt", "labelActionProps", "Earth", "labelAction", "LabelAction", "pluginOpts", "Span", "VisuallyHidden", "cloneElement", "focusable", "theme", "colors", "neutral500", "LocaleListCell", "language", "formatter", "useCollator", "sensitivity", "localesForDocument", "createdLocale", "toSorted", "a", "compare", "Popover", "Trigger", "e", "stopPropagation", "minWidth", "marginRight", "CaretDown", "sideOffset", "ul", "padding", "addColumnToTableHook", "displayedHeaders", "searchable", "sortable", "cellFormatter", "_header", "addLocaleToReleasesHook", "hasI18nEnabled", "extendCTBAttributeInitialDataMiddleware", "getState", "next", "enhanceAction", "store", "hasi18nEnabled", "get", "err", "forTarget", "attributeType", "isEditing", "extendCTBInitialDataMiddleware", "modalType", "actionType", "localeMiddleware", "ctx", "match", "matchPath", "parse", "revisedPermissions", "prefixPluginTranslations", "trad", "mutateCTBContentTypeSchema", "nextSchema", "prevSchema", "isNextSchemaLocalized", "isPrevSchemaLocalized", "addLocalisationToFields", "omit", "disableAttributesLocalisation", "currentAttribute", "register", "app", "addMiddlewares", "middleware", "addReducers", "reducerPath", "reducer", "addRBACMiddleware", "registerPlugin", "bootstrap", "registerHook", "addSettingsLink", "Component", "then", "mod", "default", "ProtectedSettingsPage", "contentManager", "getPlugin", "apis", "addDocumentHeaderAction", "addDocumentAction", "indexOfDeleteAction", "findIndex", "splice", "injectComponent", "ctbPlugin", "ctbFormsAPI", "forms", "addContentTypeSchemaMutation", "add", "extendContentType", "validator", "shape", "bool", "form", "advanced", "extendFields", "contentTypeSchema", "step", "registerTrads", "importedTrads", "Promise", "all", "catch", "resolve"]
}

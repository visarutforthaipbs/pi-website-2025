{
  "version": 3,
  "sources": ["../../../@strapi/content-releases/admin/src/components/EntryValidationPopover.tsx", "../../../@strapi/content-releases/admin/src/components/RelativeTime.tsx", "../../../@strapi/content-releases/admin/src/components/ReleaseModal.tsx", "../../../@strapi/content-releases/admin/src/store/hooks.ts", "../../../@strapi/content-releases/admin/src/utils/api.ts", "../../../@strapi/content-releases/admin/src/pages/ReleasesPage.tsx", "../../../@strapi/content-releases/admin/src/pages/ReleaseDetailsPage.tsx", "../../../@strapi/content-releases/admin/src/pages/App.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { FormErrors, FormValues } from '@strapi/admin/strapi-admin';\nimport { unstable_useDocument } from '@strapi/content-manager/strapi-admin';\nimport { Button, LinkButton, Flex, Typography, Popover } from '@strapi/design-system';\nimport { CheckCircle, CrossCircle, ArrowsCounterClockwise, CaretDown } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl, MessageDescriptor } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport type {\n  ReleaseAction,\n  ReleaseActionEntry,\n  Stage,\n} from '../../../shared/contracts/release-actions';\nimport type { Struct } from '@strapi/types';\n\nconst StyledPopoverFlex = styled(Flex)`\n  width: 100%;\n  max-width: 256px;\n\n  & > * {\n    border-bottom: 1px solid ${({ theme }) => theme.colors.neutral150};\n  }\n\n  & > *:last-child {\n    border-bottom: none;\n  }\n`;\n\ninterface EntryValidationPopoverProps {\n  action: ReleaseAction['type'];\n  schema?: Struct.ContentTypeSchema & {\n    hasReviewWorkflow: boolean;\n    stageRequiredToPublish?: Stage;\n  };\n  entry: ReleaseActionEntry;\n  status: ReleaseAction['status'];\n}\n\ninterface ValidationStatusProps {\n  action: ReleaseAction['type'];\n  status: ReleaseAction['status'];\n  hasErrors: boolean | null;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n}\n\nconst EntryStatusTrigger = ({\n  action,\n  status,\n  hasErrors,\n  requiredStage,\n  entryStage,\n}: ValidationStatusProps) => {\n  const { formatMessage } = useIntl();\n\n  if (action === 'publish') {\n    if (hasErrors || (requiredStage && requiredStage.id !== entryStage?.id)) {\n      return (\n        <Popover.Trigger>\n          <Button\n            variant=\"ghost\"\n            startIcon={<CrossCircle fill=\"danger600\" />}\n            endIcon={<CaretDown />}\n          >\n            <Typography textColor=\"danger600\" variant=\"omega\" fontWeight=\"bold\">\n              {formatMessage({\n                id: 'content-releases.pages.ReleaseDetails.entry-validation.not-ready',\n                defaultMessage: 'Not ready to publish',\n              })}\n            </Typography>\n          </Button>\n        </Popover.Trigger>\n      );\n    }\n\n    if (status === 'draft') {\n      return (\n        <Popover.Trigger>\n          <Button\n            variant=\"ghost\"\n            startIcon={<CheckCircle fill=\"success600\" />}\n            endIcon={<CaretDown />}\n          >\n            <Typography textColor=\"success600\" variant=\"omega\" fontWeight=\"bold\">\n              {formatMessage({\n                id: 'content-releases.pages.ReleaseDetails.entry-validation.ready-to-publish',\n                defaultMessage: 'Ready to publish',\n              })}\n            </Typography>\n          </Button>\n        </Popover.Trigger>\n      );\n    }\n\n    if (status === 'modified') {\n      return (\n        <Popover.Trigger>\n          <Button\n            variant=\"ghost\"\n            startIcon={<ArrowsCounterClockwise fill=\"alternative600\" />}\n            endIcon={<CaretDown />}\n          >\n            <Typography variant=\"omega\" fontWeight=\"bold\" textColor=\"alternative600\">\n              {formatMessage({\n                id: 'content-releases.pages.ReleaseDetails.entry-validation.modified',\n                defaultMessage: 'Ready to publish changes',\n              })}\n            </Typography>\n          </Button>\n        </Popover.Trigger>\n      );\n    }\n\n    return (\n      <Popover.Trigger>\n        <Button\n          variant=\"ghost\"\n          startIcon={<CheckCircle fill=\"success600\" />}\n          endIcon={<CaretDown />}\n        >\n          <Typography textColor=\"success600\" variant=\"omega\" fontWeight=\"bold\">\n            {formatMessage({\n              id: 'content-releases.pages.ReleaseDetails.entry-validation.already-published',\n              defaultMessage: 'Already published',\n            })}\n          </Typography>\n        </Button>\n      </Popover.Trigger>\n    );\n  }\n\n  if (status === 'published') {\n    return (\n      <Popover.Trigger>\n        <Button\n          variant=\"ghost\"\n          startIcon={<CheckCircle fill=\"success600\" />}\n          endIcon={<CaretDown />}\n        >\n          <Typography textColor=\"success600\" variant=\"omega\" fontWeight=\"bold\">\n            {formatMessage({\n              id: 'content-releases.pages.ReleaseDetails.entry-validation.ready-to-unpublish',\n              defaultMessage: 'Ready to unpublish',\n            })}\n          </Typography>\n        </Button>\n      </Popover.Trigger>\n    );\n  }\n\n  return (\n    <Popover.Trigger>\n      <Button variant=\"ghost\" startIcon={<CheckCircle fill=\"success600\" />} endIcon={<CaretDown />}>\n        <Typography textColor=\"success600\" variant=\"omega\" fontWeight=\"bold\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.already-unpublished',\n            defaultMessage: 'Already unpublished',\n          })}\n        </Typography>\n      </Button>\n    </Popover.Trigger>\n  );\n};\n\ninterface FieldsValidationProps {\n  hasErrors: boolean;\n  errors: FormErrors<FormValues> | null;\n  kind?: string;\n  contentTypeUid?: string;\n  documentId?: string;\n  locale?: string;\n}\n\nconst FieldsValidation = ({\n  hasErrors,\n  errors,\n  kind,\n  contentTypeUid,\n  documentId,\n  locale,\n}: FieldsValidationProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex direction=\"column\" gap={1} width=\"100%\" padding={5}>\n      <Flex gap={2} width=\"100%\">\n        <Typography fontWeight=\"bold\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.fields',\n            defaultMessage: 'Fields',\n          })}\n        </Typography>\n        {hasErrors ? <CrossCircle fill=\"danger600\" /> : <CheckCircle fill=\"success600\" />}\n      </Flex>\n      <Typography width=\"100%\" textColor=\"neutral600\">\n        {hasErrors\n          ? formatMessage(\n              {\n                id: 'content-releases.pages.ReleaseDetails.entry-validation.fields.error',\n                defaultMessage: '{errors} errors on fields.',\n              },\n              { errors: errors ? Object.keys(errors).length : 0 }\n            )\n          : formatMessage({\n              id: 'content-releases.pages.ReleaseDetails.entry-validation.fields.success',\n              defaultMessage: 'All fields are filled correctly.',\n            })}\n      </Typography>\n      {hasErrors && (\n        <LinkButton\n          tag={Link}\n          to={{\n            pathname: `/content-manager/${kind === 'collectionType' ? 'collection-types' : 'single-types'}/${contentTypeUid}/${documentId}`,\n            search: locale\n              ? stringify({\n                  plugins: {\n                    i18n: {\n                      locale,\n                    },\n                  },\n                })\n              : '',\n          }}\n          variant=\"secondary\"\n          fullWidth\n          state={{ forceValidation: true }}\n        >\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.fields.see-errors',\n            defaultMessage: 'See errors',\n          })}\n        </LinkButton>\n      )}\n    </Flex>\n  );\n};\n\nconst getReviewStageIcon = ({\n  contentTypeHasReviewWorkflow,\n  requiredStage,\n  entryStage,\n}: {\n  contentTypeHasReviewWorkflow: boolean;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n}) => {\n  if (!contentTypeHasReviewWorkflow) {\n    return <CheckCircle fill=\"neutral200\" />;\n  }\n  if (requiredStage && requiredStage.id !== entryStage?.id) {\n    return <CrossCircle fill=\"danger600\" />;\n  }\n  return <CheckCircle fill=\"success600\" />;\n};\n\nconst getReviewStageMessage = ({\n  contentTypeHasReviewWorkflow,\n  requiredStage,\n  entryStage,\n  formatMessage,\n}: {\n  contentTypeHasReviewWorkflow: boolean;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n  formatMessage: (messageDescriptor: MessageDescriptor, values?: Record<string, string>) => string;\n}) => {\n  if (!contentTypeHasReviewWorkflow) {\n    return formatMessage({\n      id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.not-enabled',\n      defaultMessage: 'This entry is not associated to any workflow.',\n    });\n  }\n\n  if (requiredStage && requiredStage.id !== entryStage?.id) {\n    return formatMessage(\n      {\n        id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.not-ready',\n        defaultMessage: 'This entry is not at the required stage for publishing. ({stageName})',\n      },\n      {\n        stageName: requiredStage?.name ?? '',\n      }\n    );\n  }\n\n  if (requiredStage && requiredStage.id === entryStage?.id) {\n    return formatMessage(\n      {\n        id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.ready',\n        defaultMessage: 'This entry is at the required stage for publishing. ({stageName})',\n      },\n      {\n        stageName: requiredStage?.name ?? '',\n      }\n    );\n  }\n\n  return formatMessage({\n    id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.stage-not-required',\n    defaultMessage: 'No required stage for publication',\n  });\n};\n\nconst ReviewStageValidation = ({\n  contentTypeHasReviewWorkflow,\n  requiredStage,\n  entryStage,\n}: {\n  contentTypeHasReviewWorkflow: boolean;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n}) => {\n  const { formatMessage } = useIntl();\n\n  const Icon = getReviewStageIcon({\n    contentTypeHasReviewWorkflow,\n    requiredStage,\n    entryStage,\n  });\n\n  return (\n    <Flex direction=\"column\" gap={1} width=\"100%\" padding={5}>\n      <Flex gap={2} width=\"100%\">\n        <Typography fontWeight=\"bold\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage',\n            defaultMessage: 'Review stage',\n          })}\n        </Typography>\n        {Icon}\n      </Flex>\n      <Typography textColor=\"neutral600\">\n        {getReviewStageMessage({\n          contentTypeHasReviewWorkflow,\n          requiredStage,\n          entryStage,\n          formatMessage,\n        })}\n      </Typography>\n    </Flex>\n  );\n};\n\nexport const EntryValidationPopover = ({\n  schema,\n  entry,\n  status,\n  action,\n}: EntryValidationPopoverProps) => {\n  const { validate, isLoading } = unstable_useDocument(\n    {\n      collectionType: schema?.kind ?? '',\n      model: schema?.uid ?? '',\n    },\n    {\n      // useDocument makes a request to get more data about the entry, but we only want to have the validation function so we skip the request\n      skip: true,\n    }\n  );\n\n  // Validation errors\n  const errors = isLoading ? null : validate(entry);\n  const hasErrors = errors ? Object.keys(errors).length > 0 : false;\n\n  // Entry stage\n  const contentTypeHasReviewWorkflow = schema?.hasReviewWorkflow ?? false;\n  const requiredStage = schema?.stageRequiredToPublish;\n  const entryStage = entry.strapi_stage;\n\n  if (isLoading) {\n    return null;\n  }\n\n  return (\n    <Popover.Root>\n      <EntryStatusTrigger\n        action={action}\n        status={status}\n        hasErrors={hasErrors}\n        requiredStage={requiredStage}\n        entryStage={entryStage}\n      />\n      <Popover.Content>\n        <StyledPopoverFlex direction=\"column\">\n          <FieldsValidation\n            hasErrors={hasErrors}\n            errors={errors}\n            contentTypeUid={schema?.uid}\n            kind={schema?.kind}\n            documentId={entry.documentId}\n            locale={entry.locale}\n          />\n          <ReviewStageValidation\n            contentTypeHasReviewWorkflow={contentTypeHasReviewWorkflow}\n            requiredStage={requiredStage}\n            entryStage={entryStage}\n          />\n        </StyledPopoverFlex>\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n", "import * as React from 'react';\n\nimport { Duration, intervalToDuration, isPast } from 'date-fns';\nimport { useIntl } from 'react-intl';\n\nconst intervals: Array<keyof Duration> = ['years', 'months', 'days', 'hours', 'minutes', 'seconds'];\n\ninterface CustomInterval {\n  unit: keyof Duration;\n  text: string;\n  threshold: number;\n}\n\ninterface RelativeTimeProps extends React.ComponentPropsWithoutRef<'time'> {\n  timestamp: Date;\n  customIntervals?: CustomInterval[];\n}\n\n/**\n * Displays the relative time between a given timestamp and the current time.\n * You can display a custom message for given time intervals by passing an array of custom intervals.\n *\n * @example\n * ```jsx\n * <caption>Display \"last hour\" if the timestamp is less than an hour ago</caption>\n * <RelativeTime\n *  timestamp={new Date('2021-01-01')}\n *  customIntervals={[\n *   { unit: 'hours', threshold: 1, text: 'last hour' },\n *  ]}\n * ```\n */\nconst RelativeTime = React.forwardRef<HTMLTimeElement, RelativeTimeProps>(\n  ({ timestamp, customIntervals = [], ...restProps }, forwardedRef) => {\n    const { formatRelativeTime, formatDate, formatTime } = useIntl();\n\n    /**\n     * TODO: make this auto-update, like a clock.\n     */\n    const interval = intervalToDuration({\n      start: timestamp,\n      end: Date.now(),\n      // see https://github.com/date-fns/date-fns/issues/2891 – No idea why it's all partial it returns it every time.\n    }) as Required<Duration>;\n\n    const unit = intervals.find((intervalUnit) => {\n      return interval[intervalUnit] > 0 && Object.keys(interval).includes(intervalUnit);\n    })!;\n\n    const relativeTime = isPast(timestamp) ? -interval[unit] : interval[unit];\n\n    // Display custom text if interval is less than the threshold\n    const customInterval = customIntervals.find(\n      (custom) => interval[custom.unit] < custom.threshold\n    );\n\n    const displayText = customInterval\n      ? customInterval.text\n      : formatRelativeTime(relativeTime, unit, { numeric: 'auto' });\n\n    return (\n      <time\n        ref={forwardedRef}\n        dateTime={timestamp.toISOString()}\n        role=\"time\"\n        title={`${formatDate(timestamp)} ${formatTime(timestamp)}`}\n        {...restProps}\n      >\n        {displayText}\n      </time>\n    );\n  }\n);\n\nexport { RelativeTime };\nexport type { CustomInterval, RelativeTimeProps };\n", "import * as React from 'react';\n\nimport {\n  Button,\n  Modal,\n  TextInput,\n  Typography,\n  Checkbox,\n  Flex,\n  Box,\n  DatePicker,\n  TimePicker,\n  Combobox,\n  ComboboxOption,\n  Field,\n} from '@strapi/design-system';\nimport { formatISO } from 'date-fns';\nimport { utcToZonedTime, zonedTimeToUtc } from 'date-fns-tz';\nimport { Formik, Form, useFormikContext } from 'formik';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\n\nimport { pluginId } from '../pluginId';\nimport { getTimezones } from '../utils/time';\nimport { RELEASE_SCHEMA } from '../validation/schemas';\n\nexport interface FormValues {\n  name: string;\n  date?: string;\n  time: string;\n  timezone: string | null;\n  isScheduled?: boolean;\n  scheduledAt: Date | null;\n}\n\ninterface ReleaseModalProps {\n  handleClose: () => void;\n  handleSubmit: (values: FormValues) => void;\n  isLoading?: boolean;\n  initialValues: FormValues;\n  open?: boolean;\n}\n\nexport const ReleaseModal = ({\n  handleClose,\n  open,\n  handleSubmit,\n  initialValues,\n  isLoading = false,\n}: ReleaseModalProps) => {\n  const { formatMessage } = useIntl();\n  const { pathname } = useLocation();\n  const isCreatingRelease = pathname === `/plugins/${pluginId}`;\n  // Set default first timezone from the list if no system timezone detected\n  const { timezoneList, systemTimezone = { value: 'UTC+00:00-Africa/Abidjan ' } } = getTimezones(\n    initialValues.scheduledAt ? new Date(initialValues.scheduledAt) : new Date()\n  );\n\n  /**\n   * Generate scheduled time using selected date, time and timezone\n   */\n  const getScheduledTimestamp = (values: FormValues) => {\n    const { date, time, timezone } = values;\n    if (!date || !time || !timezone) return null;\n    const timezoneWithoutOffset = timezone.split('&')[1];\n    return zonedTimeToUtc(`${date} ${time}`, timezoneWithoutOffset);\n  };\n\n  /**\n   * Get timezone with offset to show the selected value in the dropdown\n   */\n  const getTimezoneWithOffset = () => {\n    const currentTimezone = timezoneList.find(\n      (timezone) => timezone.value.split('&')[1] === initialValues.timezone\n    );\n    return currentTimezone?.value || systemTimezone.value;\n  };\n\n  return (\n    <Modal.Root open={open} onOpenChange={handleClose}>\n      <Modal.Content>\n        <Modal.Header>\n          <Modal.Title>\n            {formatMessage(\n              {\n                id: 'content-releases.modal.title',\n                defaultMessage:\n                  '{isCreatingRelease, select, true {New release} other {Edit release}}',\n              },\n              { isCreatingRelease: isCreatingRelease }\n            )}\n          </Modal.Title>\n        </Modal.Header>\n        <Formik\n          onSubmit={(values) => {\n            handleSubmit({\n              ...values,\n              timezone: values.timezone ? values.timezone.split('&')[1] : null,\n              scheduledAt: values.isScheduled ? getScheduledTimestamp(values) : null,\n            });\n          }}\n          initialValues={{\n            ...initialValues,\n            timezone: initialValues.timezone ? getTimezoneWithOffset() : systemTimezone.value,\n          }}\n          validationSchema={RELEASE_SCHEMA}\n          validateOnChange={false}\n        >\n          {({ values, errors, handleChange, setFieldValue }) => {\n            return (\n              <Form>\n                <Modal.Body>\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                    <Field.Root\n                      name=\"name\"\n                      error={\n                        errors.name &&\n                        formatMessage({ id: errors.name, defaultMessage: errors.name })\n                      }\n                      required\n                    >\n                      <Field.Label>\n                        {formatMessage({\n                          id: 'content-releases.modal.form.input.label.release-name',\n                          defaultMessage: 'Name',\n                        })}\n                      </Field.Label>\n                      <TextInput value={values.name} onChange={handleChange} />\n                      <Field.Error />\n                    </Field.Root>\n                    <Box width=\"max-content\">\n                      <Checkbox\n                        name=\"isScheduled\"\n                        checked={values.isScheduled}\n                        onCheckedChange={(checked) => {\n                          setFieldValue('isScheduled', checked);\n                          if (!checked) {\n                            // Clear scheduling info from a release on unchecking schedule release, which reset scheduling info in DB\n                            setFieldValue('date', null);\n                            setFieldValue('time', '');\n                            setFieldValue('timezone', null);\n                          } else {\n                            // On ticking back schedule release date, time and timezone should be restored to the initial state\n                            setFieldValue('date', initialValues.date);\n                            setFieldValue('time', initialValues.time);\n                            setFieldValue(\n                              'timezone',\n                              initialValues.timezone ?? systemTimezone?.value\n                            );\n                          }\n                        }}\n                      >\n                        <Typography\n                          textColor={values.isScheduled ? 'primary600' : 'neutral800'}\n                          fontWeight={values.isScheduled ? 'semiBold' : 'regular'}\n                        >\n                          {formatMessage({\n                            id: 'modal.form.input.label.schedule-release',\n                            defaultMessage: 'Schedule release',\n                          })}\n                        </Typography>\n                      </Checkbox>\n                    </Box>\n                    {values.isScheduled && (\n                      <>\n                        <Flex gap={4} alignItems=\"start\">\n                          <Box width=\"100%\">\n                            <Field.Root\n                              name=\"date\"\n                              error={\n                                errors.date &&\n                                formatMessage({ id: errors.date, defaultMessage: errors.date })\n                              }\n                              required\n                            >\n                              <Field.Label>\n                                {formatMessage({\n                                  id: 'content-releases.modal.form.input.label.date',\n                                  defaultMessage: 'Date',\n                                })}\n                              </Field.Label>\n                              <DatePicker\n                                onChange={(date) => {\n                                  const isoFormatDate = date\n                                    ? formatISO(date, { representation: 'date' })\n                                    : null;\n                                  setFieldValue('date', isoFormatDate);\n                                }}\n                                clearLabel={formatMessage({\n                                  id: 'content-releases.modal.form.input.clearLabel',\n                                  defaultMessage: 'Clear',\n                                })}\n                                onClear={() => {\n                                  setFieldValue('date', null);\n                                }}\n                                value={values.date ? new Date(values.date) : new Date()}\n                                minDate={utcToZonedTime(new Date(), values.timezone.split('&')[1])}\n                              />\n                              <Field.Error />\n                            </Field.Root>\n                          </Box>\n                          <Box width=\"100%\">\n                            <Field.Root\n                              name=\"time\"\n                              error={\n                                errors.time &&\n                                formatMessage({ id: errors.time, defaultMessage: errors.time })\n                              }\n                              required\n                            >\n                              <Field.Label>\n                                {formatMessage({\n                                  id: 'content-releases.modal.form.input.label.time',\n                                  defaultMessage: 'Time',\n                                })}\n                              </Field.Label>\n                              <TimePicker\n                                onChange={(time) => {\n                                  setFieldValue('time', time);\n                                }}\n                                clearLabel={formatMessage({\n                                  id: 'content-releases.modal.form.input.clearLabel',\n                                  defaultMessage: 'Clear',\n                                })}\n                                onClear={() => {\n                                  setFieldValue('time', '');\n                                }}\n                                value={values.time || undefined}\n                              />\n                              <Field.Error />\n                            </Field.Root>\n                          </Box>\n                        </Flex>\n                        <TimezoneComponent timezoneOptions={timezoneList} />\n                      </>\n                    )}\n                  </Flex>\n                </Modal.Body>\n                <Modal.Footer>\n                  <Modal.Close>\n                    <Button variant=\"tertiary\" name=\"cancel\">\n                      {formatMessage({ id: 'cancel', defaultMessage: 'Cancel' })}\n                    </Button>\n                  </Modal.Close>\n                  <Button name=\"submit\" loading={isLoading} type=\"submit\">\n                    {formatMessage(\n                      {\n                        id: 'content-releases.modal.form.button.submit',\n                        defaultMessage: '{isCreatingRelease, select, true {Continue} other {Save}}',\n                      },\n                      { isCreatingRelease: isCreatingRelease }\n                    )}\n                  </Button>\n                </Modal.Footer>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\n/**\n * Generates the list of timezones and user's current timezone(system timezone)\n */\ninterface ITimezoneOption {\n  offset: string;\n  value: string;\n}\n\nconst TimezoneComponent = ({ timezoneOptions }: { timezoneOptions: ITimezoneOption[] }) => {\n  const { values, errors, setFieldValue } = useFormikContext<FormValues>();\n  const { formatMessage } = useIntl();\n  const [timezoneList, setTimezoneList] = React.useState<ITimezoneOption[]>(timezoneOptions);\n\n  React.useEffect(() => {\n    if (values.date) {\n      // Update the timezone offset which varies with DST based on the date selected\n      const { timezoneList } = getTimezones(new Date(values.date));\n      setTimezoneList(timezoneList);\n\n      const updatedTimezone =\n        values.timezone &&\n        timezoneList.find((tz) => tz.value.split('&')[1] === values.timezone!.split('&')[1]);\n      if (updatedTimezone) {\n        setFieldValue('timezone', updatedTimezone!.value);\n      }\n    }\n  }, [setFieldValue, values.date, values.timezone]);\n\n  return (\n    <Field.Root\n      name=\"timezone\"\n      error={\n        errors.timezone && formatMessage({ id: errors.timezone, defaultMessage: errors.timezone })\n      }\n      required\n    >\n      <Field.Label>\n        {formatMessage({\n          id: 'content-releases.modal.form.input.label.timezone',\n          defaultMessage: 'Timezone',\n        })}\n      </Field.Label>\n      <Combobox\n        autocomplete={{ type: 'list', filter: 'contains' }}\n        value={values.timezone || undefined}\n        textValue={values.timezone ? values.timezone.replace(/&/, ' ') : undefined} // textValue is required to show the updated DST timezone\n        onChange={(timezone) => {\n          setFieldValue('timezone', timezone);\n        }}\n        onTextValueChange={(timezone) => {\n          setFieldValue('timezone', timezone);\n        }}\n        onClear={() => {\n          setFieldValue('timezone', '');\n        }}\n      >\n        {timezoneList.map((timezone) => (\n          <ComboboxOption key={timezone.value} value={timezone.value}>\n            {timezone.value.replace(/&/, ' ')}\n          </ComboboxOption>\n        ))}\n      </Combobox>\n      <Field.Error />\n    </Field.Root>\n  );\n};\n", "import { Dispatch } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nimport type { Store } from '@strapi/admin/strapi-admin';\n\ntype RootState = ReturnType<Store['getState']>;\n\nconst useTypedDispatch: () => Dispatch = useDispatch;\nconst useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport { useTypedSelector, useTypedDispatch };\n", "import { SerializedError } from '@reduxjs/toolkit';\nimport { ApiError } from '@strapi/admin/strapi-admin';\n\ntype BaseQueryError = ApiError | SerializedError;\n\nconst isBaseQueryError = (error?: BaseQueryError): error is BaseQueryError => {\n  return typeof error !== 'undefined' && error.name !== undefined;\n};\n\nexport { isBaseQueryError };\nexport type { BaseQueryError };\n", "import * as React from 'react';\n\nimport {\n  Page,\n  Pagination,\n  useTracking,\n  useAPIErrorHandler,\n  useNotification,\n  useQueryParams,\n  useRBAC,\n  isFetchError,\n  Layouts,\n} from '@strapi/admin/strapi-admin';\nimport { useLicenseLimits } from '@strapi/admin/strapi-admin/ee';\nimport {\n  Alert,\n  Badge,\n  Box,\n  Button,\n  Divider,\n  EmptyStateLayout,\n  Flex,\n  Grid,\n  Main,\n  Tabs,\n  Typography,\n  Link,\n} from '@strapi/design-system';\nimport { Plus } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport { format } from 'date-fns';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useLocation, NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { GetReleases, type Release } from '../../../shared/contracts/releases';\nimport { RelativeTime as BaseRelativeTime } from '../components/RelativeTime';\nimport { ReleaseModal, FormValues } from '../components/ReleaseModal';\nimport { PERMISSIONS } from '../constants';\nimport {\n  useGetReleasesQuery,\n  useGetReleaseSettingsQuery,\n  GetReleasesQueryParams,\n  useCreateReleaseMutation,\n} from '../services/release';\n\n/* -------------------------------------------------------------------------------------------------\n * ReleasesGrid\n * -----------------------------------------------------------------------------------------------*/\ninterface ReleasesGridProps {\n  sectionTitle: 'pending' | 'done';\n  releases?: GetReleases.Response['data'];\n  isError?: boolean;\n}\n\nconst LinkCard = styled(Link)`\n  display: block;\n`;\n\nconst RelativeTime = styled(BaseRelativeTime)`\n  display: inline-block;\n  &::first-letter {\n    text-transform: uppercase;\n  }\n`;\n\nconst getBadgeProps = (status: Release['status']) => {\n  let color;\n  switch (status) {\n    case 'ready':\n      color = 'success';\n      break;\n    case 'blocked':\n      color = 'warning';\n      break;\n    case 'failed':\n      color = 'danger';\n      break;\n    case 'done':\n      color = 'primary';\n      break;\n    case 'empty':\n    default:\n      color = 'neutral';\n  }\n\n  return {\n    textColor: `${color}600`,\n    backgroundColor: `${color}100`,\n    borderColor: `${color}200`,\n  };\n};\n\nconst ReleasesGrid = ({ sectionTitle, releases = [], isError = false }: ReleasesGridProps) => {\n  const { formatMessage } = useIntl();\n\n  if (isError) {\n    return <Page.Error />;\n  }\n\n  if (releases?.length === 0) {\n    return (\n      <EmptyStateLayout\n        content={formatMessage(\n          {\n            id: 'content-releases.page.Releases.tab.emptyEntries',\n            defaultMessage: 'No releases',\n          },\n          {\n            target: sectionTitle,\n          }\n        )}\n        icon={<EmptyDocuments width=\"16rem\" />}\n      />\n    );\n  }\n\n  return (\n    <Grid.Root gap={4}>\n      {releases.map(({ id, name, scheduledAt, status }) => (\n        <Grid.Item col={3} s={6} xs={12} key={id} direction=\"column\" alignItems=\"stretch\">\n          <LinkCard tag={NavLink} to={`${id}`} isExternal={false}>\n            <Flex\n              direction=\"column\"\n              justifyContent=\"space-between\"\n              padding={4}\n              hasRadius\n              background=\"neutral0\"\n              shadow=\"tableShadow\"\n              height=\"100%\"\n              width=\"100%\"\n              alignItems=\"start\"\n              gap={4}\n            >\n              <Flex direction=\"column\" alignItems=\"start\" gap={1}>\n                <Typography textColor=\"neutral800\" tag=\"h3\" variant=\"delta\" fontWeight=\"bold\">\n                  {name}\n                </Typography>\n                <Typography variant=\"pi\" textColor=\"neutral600\">\n                  {scheduledAt ? (\n                    <RelativeTime timestamp={new Date(scheduledAt)} />\n                  ) : (\n                    formatMessage({\n                      id: 'content-releases.pages.Releases.not-scheduled',\n                      defaultMessage: 'Not scheduled',\n                    })\n                  )}\n                </Typography>\n              </Flex>\n              <Badge {...getBadgeProps(status)}>{status}</Badge>\n            </Flex>\n          </LinkCard>\n        </Grid.Item>\n      ))}\n    </Grid.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ReleasesPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst StyledAlert = styled(Alert)`\n  button {\n    display: none;\n  }\n  p + div {\n    margin-left: auto;\n  }\n`;\n\nconst INITIAL_FORM_VALUES = {\n  name: '',\n  date: format(new Date(), 'yyyy-MM-dd'),\n  time: '',\n  isScheduled: true,\n  scheduledAt: null,\n  timezone: null,\n} satisfies FormValues;\n\nconst ReleasesPage = () => {\n  const location = useLocation();\n  const [releaseModalShown, setReleaseModalShown] = React.useState(false);\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const navigate = useNavigate();\n  const { formatAPIError } = useAPIErrorHandler();\n  const [{ query }, setQuery] = useQueryParams<GetReleasesQueryParams>();\n  const response = useGetReleasesQuery(query);\n  const { data, isLoading: isLoadingSettings } = useGetReleaseSettingsQuery();\n  const [createRelease, { isLoading: isSubmittingForm }] = useCreateReleaseMutation();\n  const { getFeature } = useLicenseLimits();\n  const { maximumReleases = 3 } = getFeature('cms-content-releases') as {\n    maximumReleases: number;\n  };\n  const { trackUsage } = useTracking();\n  const {\n    allowedActions: { canCreate },\n  } = useRBAC(PERMISSIONS);\n\n  const { isLoading: isLoadingReleases, isSuccess, isError } = response;\n  const activeTab = response?.currentData?.meta?.activeTab || 'pending';\n\n  // Check if we have some errors and show a notification to the user to explain the error\n  React.useEffect(() => {\n    if (location?.state?.errors) {\n      toggleNotification({\n        type: 'danger',\n        title: formatMessage({\n          id: 'content-releases.pages.Releases.notification.error.title',\n          defaultMessage: 'Your request could not be processed.',\n        }),\n        message: formatMessage({\n          id: 'content-releases.pages.Releases.notification.error.message',\n          defaultMessage: 'Please try again or open another release.',\n        }),\n      });\n      navigate('', { replace: true, state: null });\n    }\n  }, [formatMessage, location?.state?.errors, navigate, toggleNotification]);\n\n  const toggleAddReleaseModal = () => {\n    setReleaseModalShown((prev) => !prev);\n  };\n\n  if (isLoadingReleases || isLoadingSettings) {\n    return <Page.Loading />;\n  }\n\n  const totalPendingReleases = (isSuccess && response.currentData?.meta?.pendingReleasesCount) || 0;\n  const hasReachedMaximumPendingReleases = totalPendingReleases >= maximumReleases;\n\n  const handleTabChange = (tabValue: string) => {\n    setQuery({\n      ...query,\n      page: 1,\n      pageSize: response?.currentData?.meta?.pagination?.pageSize || 16,\n      filters: {\n        releasedAt: {\n          $notNull: tabValue !== 'pending',\n        },\n      },\n    });\n  };\n\n  const handleAddRelease = async ({ name, scheduledAt, timezone }: FormValues) => {\n    const response = await createRelease({\n      name,\n      scheduledAt,\n      timezone,\n    });\n    if ('data' in response) {\n      // When the response returns an object with 'data', handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.modal.release-created-notification-success',\n          defaultMessage: 'Release created.',\n        }),\n      });\n\n      trackUsage('didCreateRelease');\n      navigate(response.data.data.id.toString());\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  return (\n    <Main aria-busy={isLoadingReleases || isLoadingSettings}>\n      <Layouts.Header\n        title={formatMessage({\n          id: 'content-releases.pages.Releases.title',\n          defaultMessage: 'Releases',\n        })}\n        subtitle={formatMessage({\n          id: 'content-releases.pages.Releases.header-subtitle',\n          defaultMessage: 'Create and manage content updates',\n        })}\n        primaryAction={\n          canCreate ? (\n            <Button\n              startIcon={<Plus />}\n              onClick={toggleAddReleaseModal}\n              disabled={hasReachedMaximumPendingReleases}\n            >\n              {formatMessage({\n                id: 'content-releases.header.actions.add-release',\n                defaultMessage: 'New release',\n              })}\n            </Button>\n          ) : null\n        }\n      />\n      <Layouts.Content>\n        <>\n          {hasReachedMaximumPendingReleases && (\n            <StyledAlert\n              marginBottom={6}\n              action={\n                <Link href=\"https://strapi.io/pricing-cloud\" isExternal>\n                  {formatMessage({\n                    id: 'content-releases.pages.Releases.max-limit-reached.action',\n                    defaultMessage: 'Explore plans',\n                  })}\n                </Link>\n              }\n              title={formatMessage(\n                {\n                  id: 'content-releases.pages.Releases.max-limit-reached.title',\n                  defaultMessage:\n                    'You have reached the {number} pending {number, plural, one {release} other {releases}} limit.',\n                },\n                { number: maximumReleases }\n              )}\n              onClose={() => {}}\n              closeLabel=\"\"\n            >\n              {formatMessage({\n                id: 'content-releases.pages.Releases.max-limit-reached.message',\n                defaultMessage: 'Upgrade to manage an unlimited number of releases.',\n              })}\n            </StyledAlert>\n          )}\n          <Tabs.Root variant=\"simple\" onValueChange={handleTabChange} value={activeTab}>\n            <Box paddingBottom={8}>\n              <Tabs.List\n                aria-label={formatMessage({\n                  id: 'content-releases.pages.Releases.tab-group.label',\n                  defaultMessage: 'Releases list',\n                })}\n              >\n                <Tabs.Trigger value=\"pending\">\n                  {formatMessage(\n                    {\n                      id: 'content-releases.pages.Releases.tab.pending',\n                      defaultMessage: 'Pending ({count})',\n                    },\n                    {\n                      count: totalPendingReleases,\n                    }\n                  )}\n                </Tabs.Trigger>\n                <Tabs.Trigger value=\"done\">\n                  {formatMessage({\n                    id: 'content-releases.pages.Releases.tab.done',\n                    defaultMessage: 'Done',\n                  })}\n                </Tabs.Trigger>\n              </Tabs.List>\n              <Divider />\n            </Box>\n            {/* Pending releases */}\n            <Tabs.Content value=\"pending\">\n              <ReleasesGrid\n                sectionTitle=\"pending\"\n                releases={response?.currentData?.data}\n                isError={isError}\n              />\n            </Tabs.Content>\n            {/* Done releases */}\n            <Tabs.Content value=\"done\">\n              <ReleasesGrid\n                sectionTitle=\"done\"\n                releases={response?.currentData?.data}\n                isError={isError}\n              />\n            </Tabs.Content>\n          </Tabs.Root>\n          <Pagination.Root\n            {...response?.currentData?.meta?.pagination}\n            defaultPageSize={response?.currentData?.meta?.pagination?.pageSize}\n          >\n            <Pagination.PageSize options={['8', '16', '32', '64']} />\n            <Pagination.Links />\n          </Pagination.Root>\n        </>\n      </Layouts.Content>\n      <ReleaseModal\n        open={releaseModalShown}\n        handleClose={toggleAddReleaseModal}\n        handleSubmit={handleAddRelease}\n        isLoading={isSubmittingForm}\n        initialValues={{\n          ...INITIAL_FORM_VALUES,\n          timezone: data?.data.defaultTimezone ? data.data.defaultTimezone.split('&')[1] : null,\n        }}\n      />\n    </Main>\n  );\n};\n\nexport { ReleasesPage, getBadgeProps };\n", "import * as React from 'react';\n\nimport {\n  Page,\n  Pagination,\n  Table,\n  BackButton,\n  ConfirmDialog,\n  useTracking,\n  useAPIErrorHandler,\n  useNotification,\n  useQueryParams,\n  useRBAC,\n  isFetchError,\n  useStrapiApp,\n  Layouts,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Button,\n  Flex,\n  Main,\n  Tr,\n  Td,\n  Typography,\n  Badge,\n  SingleSelect,\n  SingleSelectOption,\n  EmptyStateLayout,\n  LinkButton,\n  Dialog,\n  SimpleMenu,\n  MenuItem,\n} from '@strapi/design-system';\nimport { More, Pencil, Trash } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport format from 'date-fns/format';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport { useIntl } from 'react-intl';\nimport { useParams, useNavigate, Link as ReactRouterLink, Navigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { EntryValidationPopover } from '../components/EntryValidationPopover';\nimport { RelativeTime } from '../components/RelativeTime';\nimport { ReleaseActionMenu } from '../components/ReleaseActionMenu';\nimport { ReleaseActionOptions } from '../components/ReleaseActionOptions';\nimport { ReleaseModal, FormValues } from '../components/ReleaseModal';\nimport { PERMISSIONS } from '../constants';\nimport {\n  GetReleaseActionsQueryParams,\n  useGetReleaseActionsQuery,\n  useGetReleaseQuery,\n  useGetReleaseSettingsQuery,\n  useUpdateReleaseMutation,\n  useUpdateReleaseActionMutation,\n  usePublishReleaseMutation,\n  useDeleteReleaseMutation,\n  releaseApi,\n} from '../services/release';\nimport { useTypedDispatch } from '../store/hooks';\nimport { isBaseQueryError } from '../utils/api';\nimport { getTimezoneOffset } from '../utils/time';\n\nimport { getBadgeProps } from './ReleasesPage';\n\nimport type {\n  ReleaseAction,\n  ReleaseActionGroupBy,\n} from '../../../shared/contracts/release-actions';\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsLayout\n * -----------------------------------------------------------------------------------------------*/\nconst ReleaseInfoWrapper = styled(Flex)`\n  align-self: stretch;\n  border-bottom-right-radius: ${({ theme }) => theme.borderRadius};\n  border-bottom-left-radius: ${({ theme }) => theme.borderRadius};\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\n`;\n\nconst StyledMenuItem = styled(MenuItem)<{\n  disabled?: boolean;\n  $variant?: 'neutral' | 'danger';\n}>`\n  svg path {\n    fill: ${({ theme, disabled }) => disabled && theme.colors.neutral500};\n  }\n  span {\n    color: ${({ theme, disabled }) => disabled && theme.colors.neutral500};\n  }\n\n  &:hover {\n    background: ${({ theme, $variant = 'neutral' }) => theme.colors[`${$variant}100`]};\n  }\n`;\n\nconst PencilIcon = styled(Pencil)`\n  width: ${({ theme }) => theme.spaces[4]};\n  height: ${({ theme }) => theme.spaces[4]};\n  path {\n    fill: ${({ theme }) => theme.colors.neutral600};\n  }\n`;\n\nconst TrashIcon = styled(Trash)`\n  width: ${({ theme }) => theme.spaces[4]};\n  height: ${({ theme }) => theme.spaces[4]};\n  path {\n    fill: ${({ theme }) => theme.colors.danger600};\n  }\n`;\n\ninterface ReleaseDetailsLayoutProps {\n  toggleEditReleaseModal: () => void;\n  toggleWarningSubmit: () => void;\n  children: React.ReactNode;\n}\n\nconst ReleaseDetailsLayout = ({\n  toggleEditReleaseModal,\n  toggleWarningSubmit,\n  children,\n}: ReleaseDetailsLayoutProps) => {\n  const { formatMessage, formatDate, formatTime } = useIntl();\n  const { releaseId } = useParams<{ releaseId: string }>();\n  const {\n    data,\n    isLoading: isLoadingDetails,\n    error,\n  } = useGetReleaseQuery(\n    { id: releaseId! },\n    {\n      skip: !releaseId,\n    }\n  );\n  const [publishRelease, { isLoading: isPublishing }] = usePublishReleaseMutation();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const { allowedActions } = useRBAC(PERMISSIONS);\n  const { canUpdate, canDelete, canPublish } = allowedActions;\n  const dispatch = useTypedDispatch();\n  const { trackUsage } = useTracking();\n\n  const release = data?.data;\n\n  const handlePublishRelease = (id: string) => async () => {\n    const response = await publishRelease({ id });\n\n    if ('data' in response) {\n      // When the response returns an object with 'data', handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.pages.ReleaseDetails.publish-notification-success',\n          defaultMessage: 'Release was published successfully.',\n        }),\n      });\n\n      const { totalEntries, totalPublishedEntries, totalUnpublishedEntries } = response.data.meta;\n\n      trackUsage('didPublishRelease', {\n        totalEntries,\n        totalPublishedEntries,\n        totalUnpublishedEntries,\n      });\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const handleRefresh = () => {\n    dispatch(\n      releaseApi.util.invalidateTags([\n        { type: 'ReleaseAction', id: 'LIST' },\n        { type: 'Release', id: releaseId },\n      ])\n    );\n  };\n\n  const getCreatedByUser = () => {\n    if (!release?.createdBy) {\n      return null;\n    }\n\n    // Favor the username\n    if (release.createdBy.username) {\n      return release.createdBy.username;\n    }\n\n    // Firstname may not exist if created with SSO\n    if (release.createdBy.firstname) {\n      return `${release.createdBy.firstname} ${release.createdBy.lastname || ''}`.trim();\n    }\n\n    // All users must have at least an email\n    return release.createdBy.email;\n  };\n\n  if (isLoadingDetails) {\n    return <Page.Loading />;\n  }\n\n  if ((isBaseQueryError(error) && 'code' in error) || !release) {\n    return (\n      <Navigate\n        to=\"..\"\n        state={{\n          errors: [\n            {\n              // @ts-expect-error – TODO: fix this weird error flow\n              code: error?.code,\n            },\n          ],\n        }}\n      />\n    );\n  }\n\n  const totalEntries = release.actions.meta.count || 0;\n  const hasCreatedByUser = Boolean(getCreatedByUser());\n\n  const isScheduled = release.scheduledAt && release.timezone;\n  const numberOfEntriesText = formatMessage(\n    {\n      id: 'content-releases.pages.Details.header-subtitle',\n      defaultMessage: '{number, plural, =0 {No entries} one {# entry} other {# entries}}',\n    },\n    { number: totalEntries }\n  );\n  const scheduledText = isScheduled\n    ? formatMessage(\n        {\n          id: 'content-releases.pages.ReleaseDetails.header-subtitle.scheduled',\n          defaultMessage: 'Scheduled for {date} at {time} ({offset})',\n        },\n        {\n          date: formatDate(new Date(release.scheduledAt!), {\n            weekday: 'long',\n            day: 'numeric',\n            month: 'long',\n            year: 'numeric',\n            timeZone: release.timezone!,\n          }),\n          time: formatTime(new Date(release.scheduledAt!), {\n            timeZone: release.timezone!,\n            hourCycle: 'h23',\n          }),\n          offset: getTimezoneOffset(release.timezone!, new Date(release.scheduledAt!)),\n        }\n      )\n    : '';\n\n  return (\n    <Main aria-busy={isLoadingDetails}>\n      <Layouts.Header\n        title={release.name}\n        subtitle={\n          <Flex gap={2} lineHeight={6}>\n            <Typography textColor=\"neutral600\" variant=\"epsilon\">\n              {numberOfEntriesText + (isScheduled ? ` - ${scheduledText}` : '')}\n            </Typography>\n            <Badge {...getBadgeProps(release.status)}>{release.status}</Badge>\n          </Flex>\n        }\n        navigationAction={<BackButton fallback=\"..\" />}\n        primaryAction={\n          !release.releasedAt && (\n            <Flex gap={2}>\n              <SimpleMenuButton\n                label={<More />}\n                variant=\"tertiary\"\n                endIcon={null}\n                paddingLeft=\"7px\"\n                paddingRight=\"7px\"\n                aria-label={formatMessage({\n                  id: 'content-releases.header.actions.open-release-actions',\n                  defaultMessage: 'Release edit and delete menu',\n                })}\n                popoverPlacement=\"bottom-end\"\n              >\n                <StyledMenuItem disabled={!canUpdate} onSelect={toggleEditReleaseModal}>\n                  <Flex alignItems=\"center\" gap={2} hasRadius width=\"100%\">\n                    <PencilIcon />\n                    <Typography ellipsis>\n                      {formatMessage({\n                        id: 'content-releases.header.actions.edit',\n                        defaultMessage: 'Edit',\n                      })}\n                    </Typography>\n                  </Flex>\n                </StyledMenuItem>\n                <StyledMenuItem\n                  disabled={!canDelete}\n                  onSelect={toggleWarningSubmit}\n                  $variant=\"danger\"\n                >\n                  <Flex alignItems=\"center\" gap={2} hasRadius width=\"100%\">\n                    <TrashIcon />\n                    <Typography ellipsis textColor=\"danger600\">\n                      {formatMessage({\n                        id: 'content-releases.header.actions.delete',\n                        defaultMessage: 'Delete',\n                      })}\n                    </Typography>\n                  </Flex>\n                </StyledMenuItem>\n                <ReleaseInfoWrapper\n                  direction=\"column\"\n                  justifyContent=\"center\"\n                  alignItems=\"flex-start\"\n                  gap={1}\n                  padding={4}\n                >\n                  <Typography variant=\"pi\" fontWeight=\"bold\">\n                    {formatMessage({\n                      id: 'content-releases.header.actions.created',\n                      defaultMessage: 'Created',\n                    })}\n                  </Typography>\n                  <Typography variant=\"pi\" color=\"neutral300\">\n                    <RelativeTime timestamp={new Date(release.createdAt)} />\n                    {formatMessage(\n                      {\n                        id: 'content-releases.header.actions.created.description',\n                        defaultMessage:\n                          '{hasCreatedByUser, select, true { by {createdBy}} other { by deleted user}}',\n                      },\n                      { createdBy: getCreatedByUser(), hasCreatedByUser }\n                    )}\n                  </Typography>\n                </ReleaseInfoWrapper>\n              </SimpleMenuButton>\n              <Button size=\"S\" variant=\"tertiary\" onClick={handleRefresh}>\n                {formatMessage({\n                  id: 'content-releases.header.actions.refresh',\n                  defaultMessage: 'Refresh',\n                })}\n              </Button>\n              {canPublish ? (\n                <Button\n                  size=\"S\"\n                  variant=\"default\"\n                  onClick={handlePublishRelease(release.id.toString())}\n                  loading={isPublishing}\n                  disabled={release.actions.meta.count === 0}\n                >\n                  {formatMessage({\n                    id: 'content-releases.header.actions.publish',\n                    defaultMessage: 'Publish',\n                  })}\n                </Button>\n              ) : null}\n            </Flex>\n          )\n        }\n      />\n      {children}\n    </Main>\n  );\n};\n\nconst SimpleMenuButton = styled(SimpleMenu)`\n  & > span {\n    display: flex;\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsBody\n * -----------------------------------------------------------------------------------------------*/\nconst GROUP_BY_OPTIONS = ['contentType', 'locale', 'action'] as const;\nconst GROUP_BY_OPTIONS_NO_LOCALE = ['contentType', 'action'] as const;\nconst getGroupByOptionLabel = (value: (typeof GROUP_BY_OPTIONS)[number]) => {\n  if (value === 'locale') {\n    return {\n      id: 'content-releases.pages.ReleaseDetails.groupBy.option.locales',\n      defaultMessage: 'Locales',\n    };\n  }\n\n  if (value === 'action') {\n    return {\n      id: 'content-releases.pages.ReleaseDetails.groupBy.option.actions',\n      defaultMessage: 'Actions',\n    };\n  }\n\n  return {\n    id: 'content-releases.pages.ReleaseDetails.groupBy.option.content-type',\n    defaultMessage: 'Content-Types',\n  };\n};\n\ninterface ReleaseDetailsBodyProps {\n  releaseId: string;\n}\n\nconst ReleaseDetailsBody = ({ releaseId }: ReleaseDetailsBodyProps) => {\n  const { formatMessage } = useIntl();\n  const [{ query }, setQuery] = useQueryParams<GetReleaseActionsQueryParams>();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const {\n    data: releaseData,\n    isLoading: isReleaseLoading,\n    error: releaseError,\n  } = useGetReleaseQuery({ id: releaseId });\n  const {\n    allowedActions: { canUpdate },\n  } = useRBAC(PERMISSIONS);\n  const runHookWaterfall = useStrapiApp('ReleaseDetailsPage', (state) => state.runHookWaterfall);\n\n  // TODO: Migrated displayedHeader to v5\n  const { displayedHeaders, hasI18nEnabled }: { displayedHeaders: any; hasI18nEnabled: boolean } =\n    runHookWaterfall('ContentReleases/pages/ReleaseDetails/add-locale-in-releases', {\n      displayedHeaders: [\n        {\n          label: {\n            id: 'content-releases.page.ReleaseDetails.table.header.label.name',\n            defaultMessage: 'name',\n          },\n          name: 'name',\n        },\n      ],\n      hasI18nEnabled: false,\n    });\n\n  const release = releaseData?.data;\n  const selectedGroupBy = query?.groupBy || 'contentType';\n\n  const {\n    isLoading,\n    isFetching,\n    isError,\n    data,\n    error: releaseActionsError,\n  } = useGetReleaseActionsQuery({\n    ...query,\n    releaseId,\n  });\n\n  const [updateReleaseAction] = useUpdateReleaseActionMutation();\n\n  const handleChangeType = async (\n    e: React.ChangeEvent<HTMLInputElement>,\n    actionId: ReleaseAction['id'],\n    actionPath: [string, number]\n  ) => {\n    const response = await updateReleaseAction({\n      params: {\n        releaseId,\n        actionId,\n      },\n      body: {\n        type: e.target.value as ReleaseAction['type'],\n      },\n      query, // We are passing the query params to make optimistic updates\n      actionPath, // We are passing the action path to found the position in the cache of the action for optimistic updates\n    });\n\n    if ('error' in response) {\n      if (isFetchError(response.error)) {\n        // When the response returns an object with 'error', handle fetch error\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(response.error),\n        });\n      } else {\n        // Otherwise, the response returns an object with 'error', handle a generic error\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n        });\n      }\n    }\n  };\n\n  if (isLoading || isReleaseLoading) {\n    return <Page.Loading />;\n  }\n\n  const releaseActions = data?.data;\n  const releaseMeta = data?.meta;\n  const contentTypes = releaseMeta?.contentTypes || {};\n  const components = releaseMeta?.components || {};\n\n  if (isBaseQueryError(releaseError) || !release) {\n    const errorsArray = [];\n    if (releaseError && 'code' in releaseError) {\n      errorsArray.push({\n        code: releaseError.code,\n      });\n    }\n    if (releaseActionsError && 'code' in releaseActionsError) {\n      errorsArray.push({\n        code: releaseActionsError.code,\n      });\n    }\n    return (\n      <Navigate\n        to=\"..\"\n        state={{\n          errors: errorsArray,\n        }}\n      />\n    );\n  }\n\n  if (isError || !releaseActions) {\n    return <Page.Error />;\n  }\n\n  if (Object.keys(releaseActions).length === 0) {\n    return (\n      <Layouts.Content>\n        <EmptyStateLayout\n          action={\n            <LinkButton\n              tag={ReactRouterLink}\n              to={{\n                pathname: '/content-manager',\n              }}\n              style={{ textDecoration: 'none' }}\n              variant=\"secondary\"\n            >\n              {formatMessage({\n                id: 'content-releases.page.Details.button.openContentManager',\n                defaultMessage: 'Open the Content Manager',\n              })}\n            </LinkButton>\n          }\n          icon={<EmptyDocuments width=\"16rem\" />}\n          content={formatMessage({\n            id: 'content-releases.pages.Details.tab.emptyEntries',\n            defaultMessage:\n              'This release is empty. Open the Content Manager, select an entry and add it to the release.',\n          })}\n        />\n      </Layouts.Content>\n    );\n  }\n\n  const groupByLabel = formatMessage({\n    id: 'content-releases.pages.ReleaseDetails.groupBy.aria-label',\n    defaultMessage: 'Group by',\n  });\n  const headers = [\n    ...displayedHeaders,\n    {\n      label: {\n        id: 'content-releases.page.ReleaseDetails.table.header.label.content-type',\n        defaultMessage: 'content-type',\n      },\n      name: 'content-type',\n    },\n    {\n      label: {\n        id: 'content-releases.page.ReleaseDetails.table.header.label.action',\n        defaultMessage: 'action',\n      },\n      name: 'action',\n    },\n    ...(!release.releasedAt\n      ? [\n          {\n            label: {\n              id: 'content-releases.page.ReleaseDetails.table.header.label.status',\n              defaultMessage: 'status',\n            },\n            name: 'status',\n          },\n        ]\n      : []),\n  ];\n\n  const options = hasI18nEnabled ? GROUP_BY_OPTIONS : GROUP_BY_OPTIONS_NO_LOCALE;\n\n  return (\n    <Layouts.Content>\n      <Flex gap={8} direction=\"column\" alignItems=\"stretch\">\n        <Flex>\n          <SingleSelect\n            placeholder={groupByLabel}\n            aria-label={groupByLabel}\n            customizeContent={(value) =>\n              formatMessage(\n                {\n                  id: `content-releases.pages.ReleaseDetails.groupBy.label`,\n                  defaultMessage: `Group by {groupBy}`,\n                },\n                {\n                  groupBy: value,\n                }\n              )\n            }\n            value={formatMessage(getGroupByOptionLabel(selectedGroupBy))}\n            onChange={(value) => setQuery({ groupBy: value as ReleaseActionGroupBy })}\n          >\n            {options.map((option) => (\n              <SingleSelectOption key={option} value={option}>\n                {formatMessage(getGroupByOptionLabel(option))}\n              </SingleSelectOption>\n            ))}\n          </SingleSelect>\n        </Flex>\n        {Object.keys(releaseActions).map((key) => (\n          <Flex key={`releases-group-${key}`} gap={4} direction=\"column\" alignItems=\"stretch\">\n            <Flex role=\"separator\" aria-label={key}>\n              <Badge>{key}</Badge>\n            </Flex>\n            <Table.Root\n              rows={releaseActions[key].map((item) => ({\n                ...item,\n                id: Number(item.entry.id),\n              }))}\n              headers={headers}\n              isLoading={isLoading || isFetching}\n            >\n              <Table.Content>\n                <Table.Head>\n                  {headers.map(({ label, name }) => (\n                    <Table.HeaderCell key={name} label={formatMessage(label)} name={name} />\n                  ))}\n                </Table.Head>\n                <Table.Loading />\n                <Table.Body>\n                  {releaseActions[key].map(\n                    ({ id, contentType, locale, type, entry, status }, actionIndex) => (\n                      <Tr key={id}>\n                        <Td width=\"25%\" maxWidth=\"200px\">\n                          <Typography ellipsis>{`${\n                            contentType.mainFieldValue || entry.id\n                          }`}</Typography>\n                        </Td>\n                        {hasI18nEnabled && (\n                          <Td width=\"10%\">\n                            <Typography>{`${locale?.name ? locale.name : '-'}`}</Typography>\n                          </Td>\n                        )}\n\n                        <Td width=\"10%\">\n                          <Typography>{contentType.displayName || ''}</Typography>\n                        </Td>\n                        <Td width=\"20%\">\n                          {release.releasedAt ? (\n                            <Typography>\n                              {formatMessage(\n                                {\n                                  id: 'content-releases.page.ReleaseDetails.table.action-published',\n                                  defaultMessage:\n                                    'This entry was <b>{isPublish, select, true {published} other {unpublished}}</b>.',\n                                },\n                                {\n                                  isPublish: type === 'publish',\n                                  b: (children: React.ReactNode) => (\n                                    <Typography fontWeight=\"bold\">{children}</Typography>\n                                  ),\n                                }\n                              )}\n                            </Typography>\n                          ) : (\n                            <ReleaseActionOptions\n                              selected={type}\n                              handleChange={(e) => handleChangeType(e, id, [key, actionIndex])}\n                              name={`release-action-${id}-type`}\n                              disabled={!canUpdate}\n                            />\n                          )}\n                        </Td>\n                        {!release.releasedAt && (\n                          <>\n                            <Td width=\"20%\" minWidth=\"200px\">\n                              <EntryValidationPopover\n                                action={type}\n                                schema={contentTypes?.[contentType.uid]}\n                                entry={entry}\n                                status={status}\n                              />\n                            </Td>\n                            <Td>\n                              <Flex justifyContent=\"flex-end\">\n                                <ReleaseActionMenu.Root>\n                                  <ReleaseActionMenu.ReleaseActionEntryLinkItem\n                                    contentTypeUid={contentType.uid}\n                                    documentId={entry.documentId}\n                                    locale={locale?.code}\n                                  />\n                                  <ReleaseActionMenu.DeleteReleaseActionItem\n                                    releaseId={release.id}\n                                    actionId={id}\n                                  />\n                                </ReleaseActionMenu.Root>\n                              </Flex>\n                            </Td>\n                          </>\n                        )}\n                      </Tr>\n                    )\n                  )}\n                </Table.Body>\n              </Table.Content>\n            </Table.Root>\n          </Flex>\n        ))}\n        <Pagination.Root\n          {...releaseMeta?.pagination}\n          defaultPageSize={releaseMeta?.pagination?.pageSize}\n        >\n          <Pagination.PageSize />\n          <Pagination.Links />\n        </Pagination.Root>\n      </Flex>\n    </Layouts.Content>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsPage\n * -----------------------------------------------------------------------------------------------*/\nconst ReleaseDetailsPage = () => {\n  const { formatMessage } = useIntl();\n  const { releaseId } = useParams<{ releaseId: string }>();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const navigate = useNavigate();\n  const [releaseModalShown, setReleaseModalShown] = React.useState(false);\n  const [showWarningSubmit, setWarningSubmit] = React.useState(false);\n\n  const {\n    isLoading: isLoadingDetails,\n    data,\n    isSuccess: isSuccessDetails,\n  } = useGetReleaseQuery(\n    { id: releaseId! },\n    {\n      skip: !releaseId,\n    }\n  );\n  const { data: dataTimezone, isLoading: isLoadingTimezone } = useGetReleaseSettingsQuery();\n  const [updateRelease, { isLoading: isSubmittingForm }] = useUpdateReleaseMutation();\n  const [deleteRelease] = useDeleteReleaseMutation();\n\n  const toggleEditReleaseModal = () => {\n    setReleaseModalShown((prev) => !prev);\n  };\n\n  const getTimezoneValue = () => {\n    if (releaseData?.timezone) {\n      return releaseData.timezone;\n    } else {\n      if (dataTimezone?.data.defaultTimezone) {\n        return dataTimezone.data.defaultTimezone;\n      }\n      return null;\n    }\n  };\n\n  const toggleWarningSubmit = () => setWarningSubmit((prevState) => !prevState);\n\n  if (isLoadingDetails || isLoadingTimezone) {\n    return (\n      <ReleaseDetailsLayout\n        toggleEditReleaseModal={toggleEditReleaseModal}\n        toggleWarningSubmit={toggleWarningSubmit}\n      >\n        <Page.Loading />\n      </ReleaseDetailsLayout>\n    );\n  }\n\n  if (!releaseId) {\n    return <Navigate to=\"..\" />;\n  }\n\n  const releaseData = (isSuccessDetails && data?.data) || null;\n\n  const title = releaseData?.name || '';\n  const timezone = getTimezoneValue();\n  const scheduledAt =\n    releaseData?.scheduledAt && timezone ? utcToZonedTime(releaseData.scheduledAt, timezone) : null;\n  // Just get the date and time to display without considering updated timezone time\n  const date = scheduledAt ? format(scheduledAt, 'yyyy-MM-dd') : undefined;\n  const time = scheduledAt ? format(scheduledAt, 'HH:mm') : '';\n\n  const handleEditRelease = async (values: FormValues) => {\n    const response = await updateRelease({\n      id: releaseId,\n      name: values.name,\n      scheduledAt: values.scheduledAt,\n      timezone: values.timezone,\n    });\n\n    if ('data' in response) {\n      // When the response returns an object with 'data', handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.modal.release-updated-notification-success',\n          defaultMessage: 'Release updated.',\n        }),\n      });\n      toggleEditReleaseModal();\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const handleDeleteRelease = async () => {\n    const response = await deleteRelease({\n      id: releaseId,\n    });\n\n    if ('data' in response) {\n      navigate('..');\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  return (\n    <ReleaseDetailsLayout\n      toggleEditReleaseModal={toggleEditReleaseModal}\n      toggleWarningSubmit={toggleWarningSubmit}\n    >\n      <ReleaseDetailsBody releaseId={releaseId} />\n      <ReleaseModal\n        open={releaseModalShown}\n        handleClose={toggleEditReleaseModal}\n        handleSubmit={handleEditRelease}\n        isLoading={isLoadingDetails || isSubmittingForm}\n        initialValues={{\n          name: title || '',\n          scheduledAt,\n          date,\n          time,\n          isScheduled: Boolean(scheduledAt),\n          timezone,\n        }}\n      />\n      <Dialog.Root open={showWarningSubmit} onOpenChange={toggleWarningSubmit}>\n        <ConfirmDialog onConfirm={handleDeleteRelease}>\n          {formatMessage({\n            id: 'content-releases.dialog.confirmation-message',\n            defaultMessage: 'Are you sure you want to delete this release?',\n          })}\n        </ConfirmDialog>\n      </Dialog.Root>\n    </ReleaseDetailsLayout>\n  );\n};\n\nexport { ReleaseDetailsPage };\n", "import { Page } from '@strapi/admin/strapi-admin';\nimport { Route, Routes } from 'react-router-dom';\n\nimport { PERMISSIONS } from '../constants';\n\nimport { ReleaseDetailsPage } from './ReleaseDetailsPage';\nimport { ReleasesPage } from './ReleasesPage';\n\nexport const App = () => {\n  return (\n    <Page.Protect permissions={PERMISSIONS.main}>\n      <Routes>\n        <Route index element={<ReleasesPage />} />\n        <Route path={':releaseId'} element={<ReleaseDetailsPage />} />\n      </Routes>\n    </Page.Protect>\n  );\n};\n"],
  "mappings": "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",
  "names": ["StyledPopoverFlex", "styled", "Flex", "theme", "colors", "neutral150", "EntryStatusTrigger", "action", "status", "hasErrors", "requiredStage", "entryStage", "formatMessage", "useIntl", "id", "_jsx", "Popover", "Trigger", "Button", "variant", "startIcon", "CrossCircle", "fill", "endIcon", "CaretDown", "Typography", "textColor", "fontWeight", "defaultMessage", "CheckCircle", "ArrowsCounterClockwise", "FieldsValidation", "errors", "kind", "contentTypeUid", "documentId", "locale", "_jsxs", "direction", "gap", "width", "padding", "Object", "keys", "length", "LinkButton", "tag", "Link", "to", "pathname", "search", "stringify", "plugins", "i18n", "fullWidth", "state", "forceValidation", "getReviewStageIcon", "contentTypeHasReviewWorkflow", "getReviewStageMessage", "stageName", "name", "ReviewStageValidation", "Icon", "EntryValidationPopover", "schema", "entry", "validate", "isLoading", "unstable_useDocument", "collectionType", "model", "uid", "skip", "hasReviewWorkflow", "stageRequiredToPublish", "strapi_stage", "Root", "Content", "intervals", "RelativeTime", "forwardRef", "timestamp", "customIntervals", "restProps", "forwardedRef", "formatRelativeTime", "formatDate", "formatTime", "interval", "intervalToDuration", "start", "end", "Date", "now", "unit", "find", "intervalUnit", "includes", "relativeTime", "isPast", "customInterval", "custom", "threshold", "displayText", "text", "numeric", "time", "ref", "dateTime", "toISOString", "role", "title", "ReleaseModal", "handleClose", "open", "handleSubmit", "initialValues", "useLocation", "isCreatingRelease", "pluginId", "timezoneList", "systemTimezone", "value", "getTimezones", "scheduledAt", "getScheduledTimestamp", "values", "date", "timezone", "timezoneWithoutOffset", "split", "zonedTimeToUtc", "getTimezoneWithOffset", "currentTimezone", "Modal", "onOpenChange", "Header", "Title", "Formik", "onSubmit", "isScheduled", "validationSchema", "RELEASE_SCHEMA", "validateOnChange", "handleChange", "setFieldValue", "Form", "Body", "alignItems", "Field", "error", "required", "Label", "TextInput", "onChange", "Error", "Box", "Checkbox", "checked", "onCheckedChange", "_Fragment", "DatePicker", "isoFormatDate", "formatISO", "representation", "clearLabel", "onClear", "minDate", "utcToZonedTime", "TimePicker", "undefined", "TimezoneComponent", "timezoneOptions", "Footer", "Close", "loading", "type", "useFormikContext", "setTimezoneList", "useState", "React", "useEffect", "updatedTimezone", "tz", "Combobox", "autocomplete", "filter", "textValue", "replace", "onTextValueChange", "map", "ComboboxOption", "useTypedDispatch", "useDispatch", "isBaseQueryError", "LinkCard", "BaseRelativeTime", "getBadgeProps", "color", "backgroundColor", "borderColor", "ReleasesGrid", "sectionTitle", "releases", "isError", "Page", "EmptyStateLayout", "content", "target", "icon", "EmptyDocuments", "Grid", "Item", "col", "s", "xs", "NavLink", "isExternal", "justifyContent", "hasRadius", "background", "shadow", "height", "Badge", "StyledAlert", "Alert", "INITIAL_FORM_VALUES", "format", "ReleasesPage", "location", "releaseModalShown", "setReleaseModalShown", "toggleNotification", "useNotification", "navigate", "useNavigate", "formatAPIError", "useAPIErrorHandler", "query", "setQuery", "useQueryParams", "response", "useGetReleasesQuery", "data", "isLoadingSettings", "useGetReleaseSettingsQuery", "createRelease", "isSubmittingForm", "useCreateReleaseMutation", "getFeature", "useLicenseLimits", "maximumReleases", "trackUsage", "useTracking", "allowedActions", "canCreate", "useRBAC", "PERMISSIONS", "isLoadingReleases", "isSuccess", "activeTab", "currentData", "meta", "message", "toggleAddReleaseModal", "prev", "Loading", "totalPendingReleases", "pendingReleasesCount", "hasReachedMaximumPendingReleases", "handleTabChange", "tabValue", "page", "pageSize", "pagination", "filters", "releasedAt", "$notNull", "handleAddRelease", "toString", "isFetchError", "Main", "aria-busy", "Layouts", "subtitle", "primaryAction", "Plus", "onClick", "disabled", "marginBottom", "href", "number", "onClose", "closeLabel", "Tabs", "onValueChange", "paddingBottom", "List", "aria-label", "count", "Divider", "Pagination", "defaultPageSize", "PageSize", "options", "Links", "defaultTimezone", "ReleaseInfoWrapper", "borderRadius", "StyledMenuItem", "MenuItem", "neutral500", "$variant", "PencilIcon", "Pencil", "spaces", "neutral600", "TrashIcon", "Trash", "danger600", "ReleaseDetailsLayout", "toggleEditReleaseModal", "toggleWarningSubmit", "children", "releaseId", "useParams", "isLoadingDetails", "useGetReleaseQuery", "publishRelease", "isPublishing", "usePublishReleaseMutation", "canUpdate", "canDelete", "canPublish", "dispatch", "release", "handlePublishRelease", "totalEntries", "totalPublishedEntries", "totalUnpublishedEntries", "handleRefresh", "releaseApi", "util", "invalidateTags", "getCreatedByUser", "createdBy", "username", "firstname", "lastname", "trim", "email", "Navigate", "code", "actions", "hasCreatedByUser", "Boolean", "numberOfEntriesText", "scheduledText", "weekday", "day", "month", "year", "timeZone", "hourCycle", "offset", "getTimezoneOffset", "lineHeight", "navigationAction", "BackButton", "fallback", "SimpleMenuButton", "label", "More", "paddingLeft", "paddingRight", "popoverPlacement", "onSelect", "ellipsis", "createdAt", "size", "SimpleMenu", "GROUP_BY_OPTIONS", "GROUP_BY_OPTIONS_NO_LOCALE", "getGroupByOptionLabel", "ReleaseDetailsBody", "releaseData", "isReleaseLoading", "releaseError", "runHookWaterfall", "useStrapiApp", "displayedHeaders", "hasI18nEnabled", "selectedGroupBy", "groupBy", "isFetching", "releaseActionsError", "useGetReleaseActionsQuery", "updateReleaseAction", "useUpdateReleaseActionMutation", "handleChangeType", "e", "actionId", "actionPath", "params", "body", "releaseActions", "releaseMeta", "contentTypes", "components", "errorsArray", "push", "ReactRouterLink", "style", "textDecoration", "groupByLabel", "headers", "SingleSelect", "placeholder", "customizeContent", "option", "SingleSelectOption", "key", "Table", "rows", "item", "Number", "Head", "HeaderCell", "contentType", "actionIndex", "Tr", "Td", "maxWidth", "mainFieldValue", "displayName", "isPublish", "b", "ReleaseActionOptions", "selected", "minWidth", "ReleaseActionMenu", "ReleaseActionEntryLinkItem", "DeleteReleaseActionItem", "ReleaseDetailsPage", "showWarningSubmit", "setWarningSubmit", "isSuccessDetails", "dataTimezone", "isLoadingTimezone", "updateRelease", "useUpdateReleaseMutation", "deleteRelease", "useDeleteReleaseMutation", "getTimezoneValue", "prevState", "handleEditRelease", "handleDeleteRelease", "Dialog", "ConfirmDialog", "onConfirm", "App", "Protect", "permissions", "main", "Routes", "Route", "index", "element", "path"]
}

{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/pages/Settings/pages/Webhooks/components/Events.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Webhooks/components/EventsTable.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Webhooks/components/HeadersInput.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Webhooks/components/TriggerContainer.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Webhooks/components/WebhookForm.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Webhooks/EditPage.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport {\n  Checkbox,\n  Flex,\n  RawTable as Table,\n  RawTbody as Tbody,\n  RawTd as Td,\n  RawTh as Th,\n  RawThead as Thead,\n  RawTr as Tr,\n  Typography,\n  VisuallyHidden,\n  Field,\n  CheckboxProps,\n} from '@strapi/design-system';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useField } from '../../../../../components/Form';\n\n/* -------------------------------------------------------------------------------------------------\n * EventsRoot\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EventsRootProps {\n  children: React.ReactNode;\n}\n\nconst EventsRoot = ({ children }: EventsRootProps) => {\n  const { formatMessage } = useIntl();\n\n  const label = formatMessage({\n    id: 'Settings.webhooks.form.events',\n    defaultMessage: 'Events',\n  });\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n      <Field.Label aria-hidden>{label}</Field.Label>\n      {/* @ts-expect-error â€“ TODO: add colCount & rowCount */}\n      <StyledTable aria-label={label}>{children}</StyledTable>\n    </Flex>\n  );\n};\n\n// TODO check whether we want to move alternating background colour tables to the design system\nconst StyledTable = styled(Table)`\n  tbody tr:nth-child(odd) {\n    background: ${({ theme }) => theme.colors.neutral100};\n  }\n\n  thead th span {\n    color: ${({ theme }) => theme.colors.neutral500};\n  }\n\n  td,\n  th {\n    padding-block-start: ${({ theme }) => theme.spaces[3]};\n    padding-block-end: ${({ theme }) => theme.spaces[3]};\n    width: 6%;\n    vertical-align: middle;\n  }\n\n  tbody tr td:first-child {\n    /**\n     * Add padding to the start of the first column to avoid the checkbox appearing\n     * too close to the edge of the table\n     */\n    padding-inline-start: ${({ theme }) => theme.spaces[2]};\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * EventsHeaders\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EventsHeadersProps {\n  getHeaders?: typeof getCEHeaders;\n}\n\nconst getCEHeaders = (): MessageDescriptor[] => {\n  const headers = [\n    { id: 'Settings.webhooks.events.create', defaultMessage: 'Create' },\n    { id: 'Settings.webhooks.events.update', defaultMessage: 'Update' },\n    { id: 'app.utils.delete', defaultMessage: 'Delete' },\n    { id: 'app.utils.publish', defaultMessage: 'Publish' },\n    { id: 'app.utils.unpublish', defaultMessage: 'Unpublish' },\n  ];\n\n  return headers;\n};\n\nconst EventsHeaders = ({ getHeaders = getCEHeaders }: EventsHeadersProps) => {\n  const { formatMessage } = useIntl();\n  const headers = getHeaders();\n\n  return (\n    <Thead>\n      <Tr>\n        <Th>\n          <VisuallyHidden>\n            {formatMessage({\n              id: 'Settings.webhooks.event.select',\n              defaultMessage: 'Select event',\n            })}\n          </VisuallyHidden>\n        </Th>\n        {headers.map((header) => {\n          if (['app.utils.publish', 'app.utils.unpublish'].includes(header?.id ?? '')) {\n            return (\n              <Th\n                key={header.id}\n                title={formatMessage({\n                  id: 'Settings.webhooks.event.publish-tooltip',\n                  defaultMessage: 'This event only exists for content with draft & publish enabled',\n                })}\n              >\n                <Typography variant=\"sigma\" textColor=\"neutral600\">\n                  {formatMessage(header)}\n                </Typography>\n              </Th>\n            );\n          }\n\n          return (\n            <Th key={header.id}>\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\n                {formatMessage(header)}\n              </Typography>\n            </Th>\n          );\n        })}\n      </Tr>\n    </Thead>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * EventsBody\n * -----------------------------------------------------------------------------------------------*/\ninterface FormikContextValue {\n  events: string[];\n}\n\ninterface EventsBodyProps {\n  providedEvents?: Record<string, FormikContextValue['events']>;\n}\n\nconst EventsBody = ({ providedEvents }: EventsBodyProps) => {\n  const events = providedEvents || getCEEvents();\n  const { value = [], onChange } = useField<string[]>('events');\n\n  const inputName = 'events';\n  const inputValue = value;\n  const disabledEvents: string[] = [];\n\n  const formattedValue = inputValue.reduce<Record<string, string[]>>((acc, curr) => {\n    const key = curr.split('.')[0];\n\n    if (!acc[key]) {\n      acc[key] = [];\n    }\n    acc[key].push(curr);\n\n    return acc;\n  }, {});\n\n  const handleSelect: EventsRowProps['handleSelect'] = (name, value) => {\n    const set = new Set(inputValue);\n\n    if (value) {\n      set.add(name);\n    } else {\n      set.delete(name);\n    }\n\n    onChange(inputName, Array.from(set));\n  };\n\n  const handleSelectAll: EventsRowProps['handleSelectAll'] = (name, value) => {\n    const set = new Set(inputValue);\n\n    if (value) {\n      events[name].forEach((event) => {\n        if (!disabledEvents.includes(event)) {\n          set.add(event);\n        }\n      });\n    } else {\n      events[name].forEach((event) => set.delete(event));\n    }\n\n    onChange(inputName, Array.from(set));\n  };\n\n  return (\n    <Tbody>\n      {Object.entries(events).map(([event, value]) => {\n        return (\n          <EventsRow\n            disabledEvents={disabledEvents}\n            key={event}\n            name={event}\n            events={value}\n            inputValue={formattedValue[event]}\n            handleSelect={handleSelect}\n            handleSelectAll={handleSelectAll}\n          />\n        );\n      })}\n    </Tbody>\n  );\n};\n\nconst getCEEvents = (): Required<Pick<EventsBodyProps, 'providedEvents'>>['providedEvents'] => {\n  const entryEvents: FormikContextValue['events'] = [\n    'entry.create',\n    'entry.update',\n    'entry.delete',\n    'entry.publish',\n    'entry.unpublish',\n  ];\n\n  return {\n    entry: entryEvents,\n    media: ['media.create', 'media.update', 'media.delete'],\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * EventsRow\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EventsRowProps {\n  disabledEvents?: string[];\n  events?: string[];\n  inputValue?: string[];\n  handleSelect: (name: string, value: boolean) => void;\n  handleSelectAll: (name: string, value: boolean) => void;\n  name: string;\n}\n\nconst EventsRow = ({\n  disabledEvents = [],\n  name,\n  events = [],\n  inputValue = [],\n  handleSelect,\n  handleSelectAll,\n}: EventsRowProps) => {\n  const { formatMessage } = useIntl();\n  const enabledCheckboxes = events.filter((event) => !disabledEvents.includes(event));\n\n  const hasSomeCheckboxSelected = inputValue.length > 0;\n  const areAllCheckboxesSelected = inputValue.length === enabledCheckboxes.length;\n\n  const onChangeAll: CheckboxProps['onCheckedChange'] = () => {\n    const valueToSet = !areAllCheckboxesSelected;\n\n    handleSelectAll(name, valueToSet);\n  };\n\n  const targetColumns = 5;\n\n  return (\n    <Tr>\n      <Td>\n        <Checkbox\n          aria-label={formatMessage({\n            id: 'global.select-all-entries',\n            defaultMessage: 'Select all entries',\n          })}\n          name={name}\n          checked={\n            hasSomeCheckboxSelected && !areAllCheckboxesSelected\n              ? 'indeterminate'\n              : areAllCheckboxesSelected\n          }\n          onCheckedChange={onChangeAll}\n        >\n          {removeHyphensAndTitleCase(name)}\n        </Checkbox>\n      </Td>\n\n      {events.map((event) => {\n        return (\n          <Td key={event} textAlign=\"center\">\n            <Flex width=\"100%\" justifyContent=\"center\">\n              <Checkbox\n                disabled={disabledEvents.includes(event)}\n                aria-label={event}\n                name={event}\n                checked={inputValue.includes(event)}\n                onCheckedChange={(value) => handleSelect(event, !!value)}\n              />\n            </Flex>\n          </Td>\n        );\n      })}\n      {events.length < targetColumns && <Td colSpan={targetColumns - events.length} />}\n    </Tr>\n  );\n};\n\n/**\n * Converts a string to title case and removes hyphens.\n */\nconst removeHyphensAndTitleCase = (str: string): string =>\n  str\n    .replace(/-/g, ' ')\n    .split(' ')\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ');\n\nconst Events = { Root: EventsRoot, Headers: EventsHeaders, Body: EventsBody, Row: EventsRow };\n\nexport { Events };\nexport type { EventsRowProps, EventsHeadersProps, EventsRootProps, EventsBodyProps };\n", "import { Events } from './Events';\n\nconst EventTableCE = () => {\n  return (\n    <Events.Root>\n      <Events.Headers />\n      <Events.Body />\n    </Events.Root>\n  );\n};\n\nexport { EventTableCE };\n", "import * as React from 'react';\n\nimport {\n  Box,\n  Flex,\n  Grid,\n  TextButton,\n  ComboboxOption,\n  Combobox,\n  ComboboxProps,\n  IconButton,\n  Field as DSField,\n} from '@strapi/design-system';\nimport { Minus, Plus } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useField, useForm } from '../../../../../components/Form';\nimport { StringInput } from '../../../../../components/FormInputs/String';\n\nconst AddHeaderButton = styled(TextButton)`\n  cursor: pointer;\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * HeadersInput\n * -----------------------------------------------------------------------------------------------*/\n\ninterface Header {\n  key: HTTPHeaders;\n  value: string;\n}\n\nconst HeadersInput = () => {\n  const { formatMessage } = useIntl();\n\n  const addFieldRow = useForm('HeadersInput', (state) => state.addFieldRow);\n  const removeFieldRow = useForm('HeadersInput', (state) => state.removeFieldRow);\n  const setFieldValue = useForm('HeadersInput', (state) => state.onChange);\n  const { value = [] } = useField<Header[]>('headers');\n\n  const removeRow = (index: number) => {\n    // if we are removing the last row, simply clear it\n    if (value.length === 1) {\n      setFieldValue('headers', [{ key: '', value: '' }]);\n    } else {\n      removeFieldRow('headers', index);\n    }\n  };\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n      <DSField.Label>\n        {formatMessage({\n          id: 'Settings.webhooks.form.headers',\n          defaultMessage: 'Headers',\n        })}\n      </DSField.Label>\n      <Box padding={8} background=\"neutral100\" hasRadius>\n        {value.map((val, index) => {\n          return (\n            <Grid.Root key={`${index}-${JSON.stringify(val.key)}`} gap={4} padding={2}>\n              <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n                <HeaderCombobox\n                  name={`headers.${index}.key`}\n                  aria-label={`row ${index + 1} key`}\n                  label={formatMessage({\n                    id: 'Settings.webhooks.key',\n                    defaultMessage: 'Key',\n                  })}\n                />\n              </Grid.Item>\n              <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n                <Flex alignItems=\"flex-end\" gap={2}>\n                  <Box style={{ flex: 1 }}>\n                    <StringInput\n                      name={`headers.${index}.value`}\n                      aria-label={`row ${index + 1} value`}\n                      label={formatMessage({\n                        id: 'Settings.webhooks.value',\n                        defaultMessage: 'Value',\n                      })}\n                      type=\"string\"\n                    />\n                  </Box>\n                  <IconButton\n                    width=\"4rem\"\n                    height=\"4rem\"\n                    onClick={() => removeRow(index)}\n                    color=\"primary600\"\n                    label={formatMessage(\n                      {\n                        id: 'Settings.webhooks.headers.remove',\n                        defaultMessage: 'Remove header row {number}',\n                      },\n                      { number: index + 1 }\n                    )}\n                    type=\"button\"\n                  >\n                    <Minus width=\"0.8rem\" />\n                  </IconButton>\n                </Flex>\n              </Grid.Item>\n            </Grid.Root>\n          );\n        })}\n        <Box paddingTop={4}>\n          <AddHeaderButton\n            type=\"button\"\n            onClick={() => {\n              addFieldRow('headers', { key: '', value: '' });\n            }}\n            startIcon={<Plus />}\n          >\n            {formatMessage({\n              id: 'Settings.webhooks.create.header',\n              defaultMessage: 'Create new header',\n            })}\n          </AddHeaderButton>\n        </Box>\n      </Box>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderCombobox\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderComboboxProps extends Omit<ComboboxProps, 'children' | 'name'> {\n  name: string;\n  label: string;\n}\n\nconst HeaderCombobox = ({ name, label, ...restProps }: HeaderComboboxProps) => {\n  const [options, setOptions] = React.useState<HTTPHeaders[]>([...HTTP_HEADERS]);\n  const { value: headers } = useField<Header[]>('headers');\n  const field = useField(name);\n\n  React.useEffect(() => {\n    const headerOptions = HTTP_HEADERS.filter(\n      (key) => !headers?.some((header) => header.key !== field.value && header.key === key)\n    );\n\n    setOptions(headerOptions);\n  }, [headers, field.value]);\n\n  const handleChange: ComboboxProps['onChange'] = (value) => {\n    field.onChange(name, value);\n  };\n\n  const handleCreateOption = (value: string) => {\n    setOptions((prev) => [...prev, value as HTTPHeaders]);\n\n    handleChange(value);\n  };\n\n  return (\n    <DSField.Root name={name} error={field.error}>\n      <DSField.Label>{label}</DSField.Label>\n      <Combobox\n        {...restProps}\n        onClear={() => handleChange('')}\n        onChange={handleChange}\n        onCreateOption={handleCreateOption}\n        placeholder=\"\"\n        creatable\n        value={field.value}\n      >\n        {options.map((key) => (\n          <ComboboxOption value={key} key={key}>\n            {key}\n          </ComboboxOption>\n        ))}\n      </Combobox>\n      <DSField.Error />\n    </DSField.Root>\n  );\n};\n\nconst HTTP_HEADERS = [\n  'A-IM',\n  'Accept',\n  'Accept-Charset',\n  'Accept-Encoding',\n  'Accept-Language',\n  'Accept-Datetime',\n  'Access-Control-Request-Method',\n  'Access-Control-Request-Headers',\n  'Authorization',\n  'Cache-Control',\n  'Connection',\n  'Content-Length',\n  'Content-Type',\n  'Cookie',\n  'Date',\n  'Expect',\n  'Forwarded',\n  'From',\n  'Host',\n  'If-Match',\n  'If-Modified-Since',\n  'If-None-Match',\n  'If-Range',\n  'If-Unmodified-Since',\n  'Max-Forwards',\n  'Origin',\n  'Pragma',\n  'Proxy-Authorization',\n  'Range',\n  'Referer',\n  'TE',\n  'User-Agent',\n  'Upgrade',\n  'Via',\n  'Warning',\n] as const;\n\ntype HTTPHeaders = (typeof HTTP_HEADERS)[number];\n\nexport { HeadersInput };\n", "import { Box, Flex, Grid, Typography } from '@strapi/design-system';\nimport { Check, Cross, Loader } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\n/* -------------------------------------------------------------------------------------------------\n * TriggerContainer\n * -----------------------------------------------------------------------------------------------*/\n\ninterface TriggerContainerProps extends Pick<StatusProps, 'isPending'> {\n  onCancel: () => void;\n  response?: {\n    statusCode: number;\n    message?: string;\n  };\n}\n\nconst TriggerContainer = ({ isPending, onCancel, response }: TriggerContainerProps) => {\n  const { statusCode, message } = response ?? {};\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box background=\"neutral0\" padding={5} shadow=\"filterShadow\" hasRadius>\n      <Grid.Root gap={4} style={{ alignItems: 'center' }}>\n        <Grid.Item col={3} direction=\"column\" alignItems=\"stretch\">\n          <Typography>\n            {formatMessage({\n              id: 'Settings.webhooks.trigger.test',\n              defaultMessage: 'Test-trigger',\n            })}\n          </Typography>\n        </Grid.Item>\n        <Grid.Item col={3} direction=\"column\" alignItems=\"stretch\">\n          <Status isPending={isPending} statusCode={statusCode} />\n        </Grid.Item>\n        <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n          {!isPending ? (\n            <Message statusCode={statusCode} message={message} />\n          ) : (\n            <Flex justifyContent=\"flex-end\">\n              <button onClick={onCancel} type=\"button\">\n                <Flex gap={2} alignItems=\"center\">\n                  <Typography textColor=\"neutral400\">\n                    {formatMessage({\n                      id: 'Settings.webhooks.trigger.cancel',\n                      defaultMessage: 'cancel',\n                    })}\n                  </Typography>\n                  <Cross fill=\"neutral400\" height=\"1.2rem\" width=\"1.2rem\" />\n                </Flex>\n              </button>\n            </Flex>\n          )}\n        </Grid.Item>\n      </Grid.Root>\n    </Box>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Status\n * -----------------------------------------------------------------------------------------------*/\n\ninterface StatusProps {\n  isPending: boolean;\n  statusCode?: number;\n}\n\nconst Status = ({ isPending, statusCode }: StatusProps) => {\n  const { formatMessage } = useIntl();\n\n  if (isPending || !statusCode) {\n    return (\n      <Flex gap={2} alignItems=\"center\">\n        <Loader height=\"1.2rem\" width=\"1.2rem\" />\n        <Typography>\n          {formatMessage({ id: 'Settings.webhooks.trigger.pending', defaultMessage: 'pending' })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  if (statusCode >= 200 && statusCode < 300) {\n    return (\n      <Flex gap={2} alignItems=\"center\">\n        <Check fill=\"success700\" height=\"1.2rem\" width=\"1.2rem\" />\n        <Typography>\n          {formatMessage({ id: 'Settings.webhooks.trigger.success', defaultMessage: 'success' })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  if (statusCode >= 300) {\n    return (\n      <Flex gap={2} alignItems=\"center\">\n        <Cross fill=\"danger700\" height=\"1.2rem\" width=\"1.2rem\" />\n        <Typography>\n          {formatMessage({ id: 'Settings.error', defaultMessage: 'error' })} {statusCode}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  return null;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Message\n * -----------------------------------------------------------------------------------------------*/\n\ninterface MessageProps {\n  statusCode?: number;\n  message?: string;\n}\n\nconst Message = ({ statusCode, message }: MessageProps) => {\n  const { formatMessage } = useIntl();\n\n  if (!statusCode) {\n    return null;\n  }\n\n  if (statusCode >= 200 && statusCode < 300) {\n    return (\n      <Flex justifyContent=\"flex-end\">\n        <Typography textColor=\"neutral600\" ellipsis>\n          {formatMessage({\n            id: 'Settings.webhooks.trigger.success.label',\n            defaultMessage: 'Trigger succeeded',\n          })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  if (statusCode >= 300) {\n    return (\n      <Flex justifyContent=\"flex-end\">\n        <Flex maxWidth={`25rem`} justifyContent=\"flex-end\" title={message}>\n          <Typography ellipsis textColor=\"neutral600\">\n            {message}\n          </Typography>\n        </Flex>\n      </Flex>\n    );\n  }\n\n  return null;\n};\n\nexport { TriggerContainer };\n", "import * as React from 'react';\n\nimport { Box, Button, Flex, Grid, TextInput } from '@strapi/design-system';\nimport { Check, Play as Publish } from '@strapi/icons';\nimport { IntlShape, useIntl } from 'react-intl';\nimport * as yup from 'yup';\n\nimport { TriggerWebhook } from '../../../../../../../shared/contracts/webhooks';\nimport { Form, FormHelpers } from '../../../../../components/Form';\nimport { InputRenderer } from '../../../../../components/FormInputs/Renderer';\nimport { Layouts } from '../../../../../components/Layouts/Layout';\nimport { BackButton } from '../../../../../features/BackButton';\nimport { useEnterprise } from '../../../../../hooks/useEnterprise';\n\nimport { EventTableCE } from './EventsTable';\nimport { HeadersInput } from './HeadersInput';\nimport { TriggerContainer } from './TriggerContainer';\n\nimport type { Modules } from '@strapi/types';\n\ninterface WebhookFormValues {\n  name: Modules.WebhookStore.Webhook['name'];\n  url: Modules.WebhookStore.Webhook['url'];\n  headers: Array<{ key: string; value: string }>;\n  events: Modules.WebhookStore.Webhook['events'];\n}\n\ninterface WebhookFormProps {\n  data?: Modules.WebhookStore.Webhook;\n  handleSubmit: (\n    values: WebhookFormValues,\n    helpers: FormHelpers<WebhookFormValues>\n  ) => Promise<void>;\n  isCreating: boolean;\n  isTriggering: boolean;\n  triggerWebhook: () => void;\n  triggerResponse?: TriggerWebhook.Response['data'];\n}\n\nconst WebhookForm = ({\n  handleSubmit,\n  triggerWebhook,\n  isCreating,\n  isTriggering,\n  triggerResponse,\n  data,\n}: WebhookFormProps) => {\n  const { formatMessage } = useIntl();\n  const [showTriggerResponse, setShowTriggerResponse] = React.useState(false);\n  const EventTable = useEnterprise(\n    EventTableCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Webhooks/components/EventsTable'\n        )\n      ).EventsTableEE\n  );\n\n  /**\n   * Map the headers into a form that can be used within the formik form\n   */\n  const mapHeaders = (headers: Modules.WebhookStore.Webhook['headers']) => {\n    if (!Object.keys(headers).length) {\n      return [{ key: '', value: '' }];\n    }\n\n    return Object.entries(headers).map(([key, value]) => ({ key, value }));\n  };\n\n  // block rendering until the EE component is fully loaded\n  if (!EventTable) {\n    return null;\n  }\n\n  return (\n    <Form\n      initialValues={{\n        name: data?.name || '',\n        url: data?.url || '',\n        headers: mapHeaders(data?.headers || {}),\n        events: data?.events || [],\n      }}\n      method={isCreating ? 'POST' : 'PUT'}\n      onSubmit={handleSubmit}\n      validationSchema={makeWebhookValidationSchema({ formatMessage })}\n    >\n      {({ isSubmitting, modified }) => (\n        <>\n          <Layouts.Header\n            primaryAction={\n              <Flex gap={2}>\n                <Button\n                  onClick={() => {\n                    triggerWebhook();\n                    setShowTriggerResponse(true);\n                  }}\n                  variant=\"tertiary\"\n                  startIcon={<Publish />}\n                  disabled={isCreating || isTriggering}\n                >\n                  {formatMessage({\n                    id: 'Settings.webhooks.trigger',\n                    defaultMessage: 'Trigger',\n                  })}\n                </Button>\n                <Button\n                  startIcon={<Check />}\n                  type=\"submit\"\n                  disabled={!modified}\n                  loading={isSubmitting}\n                >\n                  {formatMessage({\n                    id: 'global.save',\n                    defaultMessage: 'Save',\n                  })}\n                </Button>\n              </Flex>\n            }\n            title={\n              isCreating\n                ? formatMessage({\n                    id: 'Settings.webhooks.create',\n                    defaultMessage: 'Create a webhook',\n                  })\n                : data?.name\n            }\n            navigationAction={<BackButton fallback=\"../webhooks\" />}\n          />\n          <Layouts.Content>\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n              {showTriggerResponse && (\n                <TriggerContainer\n                  isPending={isTriggering}\n                  response={triggerResponse}\n                  onCancel={() => setShowTriggerResponse(false)}\n                />\n              )}\n              <Box background=\"neutral0\" padding={8} shadow=\"filterShadow\" hasRadius>\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                  <Grid.Root gap={6}>\n                    {[\n                      {\n                        label: formatMessage({\n                          id: 'global.name',\n                          defaultMessage: 'Name',\n                        }),\n                        name: 'name',\n                        required: true,\n                        size: 6,\n                        type: 'string' as const,\n                      },\n                      {\n                        label: formatMessage({\n                          id: 'Settings.roles.form.input.url',\n                          defaultMessage: 'Url',\n                        }),\n                        name: 'url',\n                        required: true,\n                        size: 12,\n                        type: 'string' as const,\n                      },\n                    ].map(({ size, ...field }) => (\n                      <Grid.Item\n                        key={field.name}\n                        col={size}\n                        direction=\"column\"\n                        alignItems=\"stretch\"\n                      >\n                        <InputRenderer {...field} />\n                      </Grid.Item>\n                    ))}\n                  </Grid.Root>\n                  <HeadersInput />\n                  <EventTable />\n                </Flex>\n              </Box>\n            </Flex>\n          </Layouts.Content>\n        </>\n      )}\n    </Form>\n  );\n};\n\nconst NAME_REGEX = /(^$)|(^[A-Za-z][_0-9A-Za-z ]*$)/;\nconst URL_REGEX = /(^$)|((https?:\\/\\/.*)(d*)\\/?(.*))/;\n\nconst makeWebhookValidationSchema = ({ formatMessage }: Pick<IntlShape, 'formatMessage'>) =>\n  yup.object().shape({\n    name: yup\n      .string()\n      .nullable()\n      .required(\n        formatMessage({\n          id: 'Settings.webhooks.validation.name.required',\n          defaultMessage: 'Name is required',\n        })\n      )\n      .matches(\n        NAME_REGEX,\n        formatMessage({\n          id: 'Settings.webhooks.validation.name.regex',\n          defaultMessage:\n            'The name must start with a letter and only contain letters, numbers, spaces and underscores',\n        })\n      ),\n    url: yup\n      .string()\n      .nullable()\n      .required(\n        formatMessage({\n          id: 'Settings.webhooks.validation.url.required',\n          defaultMessage: 'Url is required',\n        })\n      )\n      .matches(\n        URL_REGEX,\n        formatMessage({\n          id: 'Settings.webhooks.validation.url.regex',\n          defaultMessage: 'The value must be a valid Url',\n        })\n      ),\n    headers: yup.lazy((array) => {\n      const baseSchema = yup.array();\n\n      if (array.length === 1) {\n        const { key, value } = array[0];\n\n        if (!key && !value) {\n          return baseSchema;\n        }\n      }\n\n      return baseSchema.of(\n        yup.object().shape({\n          key: yup\n            .string()\n            .required(\n              formatMessage({\n                id: 'Settings.webhooks.validation.key',\n                defaultMessage: 'Key is required',\n              })\n            )\n            .nullable(),\n          value: yup\n            .string()\n            .required(\n              formatMessage({\n                id: 'Settings.webhooks.validation.value',\n                defaultMessage: 'Value is required',\n              })\n            )\n            .nullable(),\n        })\n      );\n    }),\n    events: yup.array(),\n  });\n\nexport { WebhookForm };\nexport type { WebhookFormValues, WebhookFormProps };\n", "import * as React from 'react';\n\nimport { Main } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useMatch } from 'react-router-dom';\n\nimport { CreateWebhook, TriggerWebhook } from '../../../../../../shared/contracts/webhooks';\nimport { Page } from '../../../../components/PageHelpers';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { selectAdminPermissions } from '../../../../selectors';\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\n\nimport { WebhookForm, WebhookFormProps, WebhookFormValues } from './components/WebhookForm';\nimport { useWebhooks } from './hooks/useWebhooks';\n\nimport type { Modules } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * EditView\n * -----------------------------------------------------------------------------------------------*/\n\nconst cleanData = (\n  data: WebhookFormValues\n): Omit<CreateWebhook.Request['body'], 'id' | 'isEnabled'> => ({\n  ...data,\n  headers: data.headers.reduce<Modules.WebhookStore.Webhook['headers']>((acc, { key, value }) => {\n    if (key !== '') {\n      acc[key] = value;\n    }\n\n    return acc;\n  }, {}),\n});\n\nconst EditPage = () => {\n  const { formatMessage } = useIntl();\n  const match = useMatch('/settings/webhooks/:id');\n  const id = match?.params.id;\n  const isCreating = id === 'create';\n\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n\n  /**\n   * Prevents the notifications from showing up twice because the function identity\n   * coming from the helper plugin is not stable\n   */\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const stableFormatAPIError = React.useCallback(formatAPIError, []);\n  const [isTriggering, setIsTriggering] = React.useState(false);\n  const [triggerResponse, setTriggerResponse] = React.useState<TriggerWebhook.Response['data']>();\n\n  const { isLoading, webhooks, error, createWebhook, updateWebhook, triggerWebhook } = useWebhooks(\n    { id: id! },\n    {\n      skip: isCreating,\n    }\n  );\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: stableFormatAPIError(error),\n      });\n    }\n  }, [error, toggleNotification, stableFormatAPIError]);\n\n  const handleTriggerWebhook = async () => {\n    try {\n      setIsTriggering(true);\n\n      const res = await triggerWebhook(id!);\n\n      if ('error' in res) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(res.error),\n        });\n\n        return;\n      }\n\n      setTriggerResponse(res.data);\n    } catch {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'An error occurred',\n        }),\n      });\n    } finally {\n      setIsTriggering(false);\n    }\n  };\n\n  const handleSubmit: WebhookFormProps['handleSubmit'] = async (data, helpers) => {\n    try {\n      if (isCreating) {\n        const res = await createWebhook(cleanData(data));\n\n        if ('error' in res) {\n          if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n            helpers.setErrors(formatValidationErrors(res.error));\n          } else {\n            toggleNotification({\n              type: 'danger',\n              message: formatAPIError(res.error),\n            });\n          }\n\n          return;\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'Settings.webhooks.created' }),\n        });\n\n        navigate(`../webhooks/${res.data.id}`, { replace: true });\n      } else {\n        const res = await updateWebhook({ id: id!, ...cleanData(data) });\n\n        if ('error' in res) {\n          if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n            helpers.setErrors(formatValidationErrors(res.error));\n          } else {\n            toggleNotification({\n              type: 'danger',\n              message: formatAPIError(res.error),\n            });\n          }\n\n          return;\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'notification.form.success.fields' }),\n        });\n      }\n    } catch {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'An error occurred',\n        }),\n      });\n    }\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  const [webhook] = webhooks ?? [];\n\n  return (\n    <Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Webhooks',\n          }\n        )}\n      </Page.Title>\n      <WebhookForm\n        data={webhook}\n        handleSubmit={handleSubmit}\n        triggerWebhook={handleTriggerWebhook}\n        isCreating={isCreating}\n        isTriggering={isTriggering}\n        triggerResponse={triggerResponse}\n      />\n    </Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedEditView\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedEditPage = () => {\n  const permissions = useTypedSelector(selectAdminPermissions);\n\n  return (\n    <Page.Protect permissions={permissions.settings?.webhooks.update}>\n      <EditPage />\n    </Page.Protect>\n  );\n};\n\nexport { ProtectedEditPage, EditPage };\n"],
  "mappings": "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",
  "names": ["EventsRoot", "children", "formatMessage", "useIntl", "label", "id", "defaultMessage", "_jsxs", "Flex", "direction", "alignItems", "gap", "_jsx", "Field", "Label", "aria-hidden", "StyledTable", "aria-label", "styled", "Table", "theme", "colors", "neutral100", "neutral500", "spaces", "getCEHeaders", "headers", "EventsHeaders", "getHeaders", "Thead", "Tr", "Th", "VisuallyHidden", "map", "header", "includes", "title", "Typography", "variant", "textColor", "EventsBody", "providedEvents", "events", "getCEEvents", "value", "onChange", "useField", "inputName", "inputValue", "disabledEvents", "formattedValue", "reduce", "acc", "curr", "key", "split", "push", "handleSelect", "name", "set", "Set", "add", "delete", "Array", "from", "handleSelectAll", "forEach", "event", "Tbody", "Object", "entries", "EventsRow", "entryEvents", "entry", "media", "enabledCheckboxes", "filter", "hasSomeCheckboxSelected", "length", "areAllCheckboxesSelected", "onChangeAll", "valueToSet", "targetColumns", "Td", "Checkbox", "checked", "onCheckedChange", "removeHyphensAndTitleCase", "textAlign", "width", "justifyContent", "disabled", "colSpan", "str", "replace", "word", "charAt", "toUpperCase", "slice", "toLowerCase", "join", "Events", "Root", "Headers", "Body", "Row", "EventTableCE", "AddHeaderButton", "TextButton", "HeadersInput", "addFieldRow", "useForm", "state", "removeFieldRow", "setFieldValue", "removeRow", "index", "DSField", "Box", "padding", "background", "hasRadius", "val", "Grid", "Item", "col", "HeaderCombobox", "style", "flex", "StringInput", "type", "IconButton", "height", "onClick", "color", "number", "Minus", "JSON", "stringify", "paddingTop", "startIcon", "Plus", "restProps", "options", "setOptions", "useState", "HTTP_HEADERS", "field", "React", "useEffect", "headerOptions", "some", "handleChange", "handleCreateOption", "prev", "error", "Combobox", "onClear", "onCreateOption", "placeholder", "creatable", "ComboboxOption", "Error", "TriggerContainer", "isPending", "onCancel", "response", "statusCode", "message", "shadow", "Status", "Message", "button", "Cross", "fill", "Loader", "Check", "ellipsis", "maxWidth", "WebhookForm", "handleSubmit", "triggerWebhook", "isCreating", "isTriggering", "triggerResponse", "data", "showTriggerResponse", "setShowTriggerResponse", "EventTable", "useEnterprise", "EventsTableEE", "mapHeaders", "keys", "Form", "initialValues", "url", "method", "onSubmit", "validationSchema", "makeWebhookValidationSchema", "isSubmitting", "modified", "_Fragment", "Layouts", "Header", "primaryAction", "Button", "Publish", "loading", "navigationAction", "BackButton", "fallback", "Content", "required", "size", "InputRenderer", "NAME_REGEX", "URL_REGEX", "object", "shape", "string", "nullable", "matches", "lazy", "array", "baseSchema", "of", "cleanData", "EditPage", "match", "useMatch", "params", "navigate", "useNavigate", "toggleNotification", "useNotification", "_unstableFormatAPIError", "formatAPIError", "_unstableFormatValidationErrors", "formatValidationErrors", "useAPIErrorHandler", "stableFormatAPIError", "useCallback", "setIsTriggering", "setTriggerResponse", "isLoading", "webhooks", "createWebhook", "updateWebhook", "useWebhooks", "skip", "handleTriggerWebhook", "res", "helpers", "isBaseQueryError", "setErrors", "Page", "Loading", "webhook", "Main", "Title", "ProtectedEditPage", "permissions", "useTypedSelector", "selectAdminPermissions", "Protect", "settings", "update"]
}

{
  "version": 3,
  "sources": ["../../../@strapi/plugin-users-permissions/admin/src/pages/EmailTemplates/utils/schema.js", "../../../@strapi/plugin-users-permissions/admin/src/pages/EmailTemplates/components/EmailForm.jsx", "../../../@strapi/plugin-users-permissions/admin/src/pages/EmailTemplates/components/EmailTable.jsx", "../../../@strapi/plugin-users-permissions/admin/src/pages/EmailTemplates/index.jsx"],
  "sourcesContent": ["import { translatedErrors } from '@strapi/strapi/admin';\nimport * as yup from 'yup';\n\nconst schema = yup.object().shape({\n  options: yup\n    .object()\n    .shape({\n      from: yup\n        .object()\n        .shape({\n          name: yup.string().required({\n            id: translatedErrors.required.id,\n            defaultMessage: 'This field is required',\n          }),\n          email: yup.string().email(translatedErrors.email).required({\n            id: translatedErrors.required.id,\n            defaultMessage: 'This field is required',\n          }),\n        })\n        .required(),\n      response_email: yup.string().email(translatedErrors.email),\n      object: yup.string().required({\n        id: translatedErrors.required.id,\n        defaultMessage: 'This field is required',\n      }),\n      message: yup.string().required({\n        id: translatedErrors.required.id,\n        defaultMessage: 'This field is required',\n      }),\n    })\n    .required(translatedErrors.required.id),\n});\n\nexport default schema;\n", "import * as React from 'react';\n\nimport { Button, Grid, Modal, Breadcrumbs, Crumb, VisuallyHidden } from '@strapi/design-system';\nimport { Form, InputRenderer } from '@strapi/strapi/admin';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../../utils';\nimport schema from '../utils/schema';\n\nconst EmailForm = ({ template = {}, onToggle, open, onSubmit }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Modal.Root open={open} onOpenChange={onToggle}>\n      <Modal.Content>\n        <Modal.Header>\n          <Breadcrumbs\n            label={`${formatMessage({\n              id: getTrad('PopUpForm.header.edit.email-templates'),\n              defaultMessage: 'Edit email template',\n            })}, ${\n              template.display\n                ? formatMessage({\n                    id: getTrad(template.display),\n                    defaultMessage: template.display,\n                  })\n                : ''\n            }`}\n          >\n            <Crumb>\n              {formatMessage({\n                id: getTrad('PopUpForm.header.edit.email-templates'),\n                defaultMessage: 'Edit email template',\n              })}\n            </Crumb>\n            <Crumb isCurrent>\n              {template.display\n                ? formatMessage({ id: getTrad(template.display), defaultMessage: template.display })\n                : ''}\n            </Crumb>\n          </Breadcrumbs>\n          <VisuallyHidden>\n            <Modal.Title>\n              {`${formatMessage({\n                id: getTrad('PopUpForm.header.edit.email-templates'),\n                defaultMessage: 'Edit email template',\n              })}, ${template.display ? formatMessage({ id: getTrad(template.display), defaultMessage: template.display }) : ''}`}\n            </Modal.Title>\n          </VisuallyHidden>\n        </Modal.Header>\n        <Form onSubmit={onSubmit} initialValues={template} validationSchema={schema}>\n          {({ isSubmitting }) => {\n            return (\n              <>\n                <Modal.Body>\n                  <Grid.Root gap={5}>\n                    {[\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.from.name.label'),\n                          defaultMessage: 'Shipper name',\n                        }),\n                        name: 'options.from.name',\n                        size: 6,\n                        type: 'string',\n                      },\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.from.email.label'),\n                          defaultMessage: 'Shipper email',\n                        }),\n                        name: 'options.from.email',\n                        size: 6,\n                        type: 'string',\n                      },\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.response_email.label'),\n                          defaultMessage: 'Response email',\n                        }),\n                        name: 'options.response_email',\n                        size: 6,\n                        type: 'string',\n                      },\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.object.label'),\n                          defaultMessage: 'Subject',\n                        }),\n                        name: 'options.object',\n                        size: 6,\n                        type: 'string',\n                      },\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.message.label'),\n                          defaultMessage: 'Message',\n                        }),\n                        name: 'options.message',\n                        size: 12,\n                        type: 'text',\n                      },\n                    ].map(({ size, ...field }) => (\n                      <Grid.Item\n                        key={field.name}\n                        col={size}\n                        direction=\"column\"\n                        alignItems=\"stretch\"\n                      >\n                        <InputRenderer {...field} />\n                      </Grid.Item>\n                    ))}\n                  </Grid.Root>\n                </Modal.Body>\n                <Modal.Footer>\n                  <Modal.Close>\n                    <Button variant=\"tertiary\">Cancel</Button>\n                  </Modal.Close>\n                  <Button loading={isSubmitting} type=\"submit\">\n                    Finish\n                  </Button>\n                </Modal.Footer>\n              </>\n            );\n          }}\n        </Form>\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\nEmailForm.defaultProps = {\n  template: {},\n};\n\nEmailForm.propTypes = {\n  template: PropTypes.shape({\n    display: PropTypes.string,\n    icon: PropTypes.string,\n    options: PropTypes.shape({\n      from: PropTypes.shape({\n        name: PropTypes.string,\n        email: PropTypes.string,\n      }),\n      message: PropTypes.string,\n      object: PropTypes.string,\n      response_email: PropTypes.string,\n    }),\n  }),\n  open: PropTypes.bool.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n};\n\nexport default EmailForm;\n", "import * as React from 'react';\n\nimport {\n  IconButton,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  Typography,\n  VisuallyHidden,\n  Box,\n} from '@strapi/design-system';\nimport { Check, Pencil, ArrowClockwise as Refresh } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../../utils';\n\nconst EmailTable = ({ canUpdate, onEditClick }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Table colCount={3} rowCount={3}>\n      <Thead>\n        <Tr>\n          <Th width=\"1%\">\n            <VisuallyHidden>\n              {formatMessage({\n                id: getTrad('Email.template.table.icon.label'),\n                defaultMessage: 'icon',\n              })}\n            </VisuallyHidden>\n          </Th>\n          <Th>\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\n              {formatMessage({\n                id: getTrad('Email.template.table.name.label'),\n                defaultMessage: 'name',\n              })}\n            </Typography>\n          </Th>\n          <Th width=\"1%\">\n            <VisuallyHidden>\n              {formatMessage({\n                id: getTrad('Email.template.table.action.label'),\n                defaultMessage: 'action',\n              })}\n            </VisuallyHidden>\n          </Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        <Tr cursor=\"pointer\" onClick={() => onEditClick('reset_password')}>\n          <Td>\n            <Box width=\"3.2rem\" height=\"3.2rem\" padding=\"0.8rem\">\n              <Refresh\n                aria-label={formatMessage({\n                  id: 'global.reset-password',\n                  defaultMessage: 'Reset password',\n                })}\n              />\n            </Box>\n          </Td>\n          <Td>\n            <Typography>\n              {formatMessage({\n                id: 'global.reset-password',\n                defaultMessage: 'Reset password',\n              })}\n            </Typography>\n          </Td>\n          <Td onClick={(e) => e.stopPropagation()}>\n            <IconButton\n              onClick={() => onEditClick('reset_password')}\n              label={formatMessage({\n                id: getTrad('Email.template.form.edit.label'),\n                defaultMessage: 'Edit a template',\n              })}\n              variant=\"ghost\"\n              disabled={!canUpdate}\n            >\n              <Pencil />\n            </IconButton>\n          </Td>\n        </Tr>\n        <Tr cursor=\"pointer\" onClick={() => onEditClick('email_confirmation')}>\n          <Td>\n            <Box width=\"3.2rem\" height=\"3.2rem\" padding=\"0.8rem\">\n              <Check\n                aria-label={formatMessage({\n                  id: getTrad('Email.template.email_confirmation'),\n                  defaultMessage: 'Email address confirmation',\n                })}\n              />\n            </Box>\n          </Td>\n          <Td>\n            <Typography>\n              {formatMessage({\n                id: getTrad('Email.template.email_confirmation'),\n                defaultMessage: 'Email address confirmation',\n              })}\n            </Typography>\n          </Td>\n          <Td onClick={(e) => e.stopPropagation()}>\n            <IconButton\n              onClick={() => onEditClick('email_confirmation')}\n              label={formatMessage({\n                id: getTrad('Email.template.form.edit.label'),\n                defaultMessage: 'Edit a template',\n              })}\n              variant=\"ghost\"\n              disabled={!canUpdate}\n            >\n              <Pencil />\n            </IconButton>\n          </Td>\n        </Tr>\n      </Tbody>\n    </Table>\n  );\n};\n\nEmailTable.propTypes = {\n  canUpdate: PropTypes.bool.isRequired,\n  onEditClick: PropTypes.func.isRequired,\n};\n\nexport default EmailTable;\n", "import * as React from 'react';\n\nimport { useTracking } from '@strapi/admin/strapi-admin';\nimport { useNotifyAT } from '@strapi/design-system';\nimport {\n  Page,\n  useAPIErrorHandler,\n  useNotification,\n  useFetchClient,\n  useRBAC,\n  Layouts,\n} from '@strapi/strapi/admin';\nimport { useIntl } from 'react-intl';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\n\nimport { PERMISSIONS } from '../../constants';\nimport { getTrad } from '../../utils';\n\nimport EmailForm from './components/EmailForm';\nimport EmailTable from './components/EmailTable';\n\nconst ProtectedEmailTemplatesPage = () => (\n  <Page.Protect permissions={PERMISSIONS.readEmailTemplates}>\n    <EmailTemplatesPage />\n  </Page.Protect>\n);\nconst EmailTemplatesPage = () => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { notifyStatus } = useNotifyAT();\n  const { toggleNotification } = useNotification();\n  const queryClient = useQueryClient();\n  const { get, put } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler();\n\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const [templateToEdit, setTemplateToEdit] = React.useState(null);\n\n  const {\n    isLoading: isLoadingForPermissions,\n    allowedActions: { canUpdate },\n  } = useRBAC({ update: PERMISSIONS.updateEmailTemplates });\n\n  const { isLoading: isLoadingData, data } = useQuery(\n    ['users-permissions', 'email-templates'],\n    async () => {\n      const { data } = await get('/users-permissions/email-templates');\n\n      return data;\n    },\n    {\n      onSuccess() {\n        notifyStatus(\n          formatMessage({\n            id: getTrad('Email.template.data.loaded'),\n            defaultMessage: 'Email templates has been loaded',\n          })\n        );\n      },\n      onError(error) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(error),\n        });\n      },\n    }\n  );\n\n  const isLoading = isLoadingForPermissions || isLoadingData;\n\n  const handleToggle = () => {\n    setIsModalOpen((prev) => !prev);\n  };\n\n  const handleEditClick = (template) => {\n    setTemplateToEdit(template);\n    handleToggle();\n  };\n\n  const submitMutation = useMutation(\n    (body) => put('/users-permissions/email-templates', { 'email-templates': body }),\n    {\n      async onSuccess() {\n        await queryClient.invalidateQueries(['users-permissions', 'email-templates']);\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'notification.success.saved', defaultMessage: 'Saved' }),\n        });\n\n        trackUsage('didEditEmailTemplates');\n\n        handleToggle();\n      },\n      onError(error) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(error),\n        });\n      },\n      refetchActive: true,\n    }\n  );\n\n  const handleSubmit = (body) => {\n    trackUsage('willEditEmailTemplates');\n\n    const editedTemplates = { ...data, [templateToEdit]: body };\n    submitMutation.mutate(editedTemplates);\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Page.Main aria-busy={submitMutation.isLoading}>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: formatMessage({\n              id: getTrad('HeaderNav.link.emailTemplates'),\n              defaultMessage: 'Email templates',\n            }),\n          }\n        )}\n      </Page.Title>\n      <Layouts.Header\n        title={formatMessage({\n          id: getTrad('HeaderNav.link.emailTemplates'),\n          defaultMessage: 'Email templates',\n        })}\n      />\n      <Layouts.Content>\n        <EmailTable onEditClick={handleEditClick} canUpdate={canUpdate} />\n        <EmailForm\n          template={data[templateToEdit]}\n          onToggle={handleToggle}\n          open={isModalOpen}\n          onSubmit={handleSubmit}\n        />\n      </Layouts.Content>\n    </Page.Main>\n  );\n};\n\nexport { ProtectedEmailTemplatesPage, EmailTemplatesPage };\n"],
  "mappings": "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",
  "names": ["schema", "object", "shape", "options", "from", "name", "string", "required", "id", "translatedErrors", "defaultMessage", "email", "response_email", "message", "EmailForm", "template", "onToggle", "open", "onSubmit", "formatMessage", "useIntl", "_jsx", "Modal", "Root", "onOpenChange", "_jsxs", "Content", "Header", "Breadcrumbs", "label", "getTrad", "display", "Crumb", "isCurrent", "VisuallyHidden", "Title", "Form", "initialValues", "validationSchema", "isSubmitting", "_Fragment", "Body", "Grid", "gap", "size", "type", "map", "field", "Item", "col", "direction", "alignItems", "InputRenderer", "Footer", "Close", "Button", "variant", "loading", "defaultProps", "propTypes", "PropTypes", "icon", "bool", "isRequired", "func", "EmailTable", "canUpdate", "onEditClick", "Table", "colCount", "rowCount", "Thead", "Tr", "Th", "width", "Typography", "textColor", "Tbody", "cursor", "onClick", "Td", "Box", "height", "padding", "Refresh", "aria-label", "e", "stopPropagation", "IconButton", "disabled", "Pencil", "Check", "ProtectedEmailTemplatesPage", "Page", "Protect", "permissions", "PERMISSIONS", "readEmailTemplates", "EmailTemplatesPage", "trackUsage", "useTracking", "notifyStatus", "useNotifyAT", "toggleNotification", "useNotification", "queryClient", "useQueryClient", "get", "put", "useFetchClient", "formatAPIError", "useAPIErrorHandler", "isModalOpen", "setIsModalOpen", "useState", "templateToEdit", "setTemplateToEdit", "isLoading", "isLoadingForPermissions", "allowedActions", "useRBAC", "update", "updateEmailTemplates", "isLoadingData", "data", "useQuery", "onSuccess", "onError", "error", "handleToggle", "prev", "handleEditClick", "submitMutation", "useMutation", "body", "invalidateQueries", "refetchActive", "handleSubmit", "editedTemplates", "mutate", "Loading", "Main", "aria-busy", "Layouts", "title"]
}

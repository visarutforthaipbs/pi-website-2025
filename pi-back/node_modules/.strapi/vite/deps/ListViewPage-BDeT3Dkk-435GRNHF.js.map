{
  "version": 3,
  "sources": ["../../../@strapi/content-manager/admin/src/pages/ListView/components/Filters.tsx", "../../../@strapi/content-manager/admin/src/pages/ListView/components/TableCells/CellValue.tsx", "../../../@strapi/content-manager/admin/src/pages/ListView/components/TableCells/Components.tsx", "../../../@strapi/content-manager/admin/src/pages/ListView/components/TableCells/Media.tsx", "../../../@strapi/content-manager/admin/src/pages/ListView/components/TableCells/Relations.tsx", "../../../@strapi/content-manager/admin/src/pages/ListView/components/TableCells/CellContent.tsx", "../../../@strapi/content-manager/admin/src/pages/ListView/components/ViewSettingsMenu.tsx", "../../../@strapi/content-manager/admin/src/pages/ListView/ListViewPage.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport {\n  Filters,\n  useField,\n  useAuth,\n  useTracking,\n  useQueryParams,\n  useAdminUsers,\n} from '@strapi/admin/strapi-admin';\nimport { Combobox, ComboboxOption, useCollator } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { CREATOR_FIELDS } from '../../../constants/attributes';\nimport { useContentTypeSchema } from '../../../hooks/useContentTypeSchema';\nimport { useDebounce } from '../../../hooks/useDebounce';\nimport { Schema } from '../../../hooks/useDocument';\nimport { useGetContentTypeConfigurationQuery } from '../../../services/contentTypes';\nimport { getMainField } from '../../../utils/attributes';\nimport { getDisplayName } from '../../../utils/users';\n\n/**\n * If new attributes are added, this list needs to be updated.\n */\nconst NOT_ALLOWED_FILTERS = [\n  'json',\n  'component',\n  'media',\n  'richtext',\n  'dynamiczone',\n  'password',\n  'blocks',\n];\nconst DEFAULT_ALLOWED_FILTERS = ['createdAt', 'updatedAt'];\nconst USER_FILTER_ATTRIBUTES = [...CREATOR_FIELDS, 'strapi_assignee'];\n\n/* -------------------------------------------------------------------------------------------------\n * Filters\n * -----------------------------------------------------------------------------------------------*/\ninterface FiltersProps {\n  disabled?: boolean;\n  schema: Schema;\n}\n\nconst FiltersImpl = ({ disabled, schema }: FiltersProps) => {\n  const { attributes, uid: model, options } = schema;\n  const { formatMessage, locale } = useIntl();\n  const { trackUsage } = useTracking();\n  const allPermissions = useAuth('FiltersImpl', (state) => state.permissions);\n  const [{ query }] = useQueryParams<Filters.Query>();\n  const { schemas } = useContentTypeSchema();\n\n  const canReadAdminUsers = React.useMemo(\n    () =>\n      allPermissions.filter(\n        (permission) => permission.action === 'admin::users.read' && permission.subject === null\n      ).length > 0,\n    [allPermissions]\n  );\n\n  const selectedUserIds = (query?.filters?.$and ?? []).reduce<string[]>((acc, filter) => {\n    const [key, value] = Object.entries(filter)[0];\n    if (typeof value.id !== 'object') {\n      return acc;\n    }\n\n    const id = value.id.$eq || value.id.$ne;\n\n    if (id && USER_FILTER_ATTRIBUTES.includes(key) && !acc.includes(id)) {\n      acc.push(id);\n    }\n\n    return acc;\n  }, []);\n\n  const { data: userData, isLoading: isLoadingAdminUsers } = useAdminUsers(\n    { filters: { id: { $in: selectedUserIds } } },\n    {\n      // fetch the list of admin users only if the filter contains users and the\n      // current user has permissions to display users\n      skip: selectedUserIds.length === 0 || !canReadAdminUsers,\n    }\n  );\n\n  const { users = [] } = userData ?? {};\n\n  const { metadata } = useGetContentTypeConfigurationQuery(model, {\n    selectFromResult: ({ data }) => ({ metadata: data?.contentType.metadatas ?? {} }),\n  });\n\n  const formatter = useCollator(locale, {\n    sensitivity: 'base',\n  });\n\n  const displayedFilters = React.useMemo(() => {\n    const [{ properties: { fields = [] } = { fields: [] } }] = allPermissions.filter(\n      (permission) =>\n        permission.action === 'plugin::content-manager.explorer.read' &&\n        permission.subject === model\n    );\n\n    const allowedFields = fields.filter((field) => {\n      const attribute = attributes[field] ?? {};\n\n      return attribute.type && !NOT_ALLOWED_FILTERS.includes(attribute.type);\n    });\n\n    return (\n      [\n        'id',\n        ...allowedFields,\n        ...DEFAULT_ALLOWED_FILTERS,\n        ...(canReadAdminUsers ? CREATOR_FIELDS : []),\n      ]\n        .map((name) => {\n          const attribute = attributes[name];\n\n          if (NOT_ALLOWED_FILTERS.includes(attribute.type)) {\n            return null;\n          }\n\n          const { mainField: mainFieldName = '', label } = metadata[name].list;\n\n          let filter: Filters.Filter = {\n            name,\n            label: label ?? '',\n            mainField: getMainField(attribute, mainFieldName, { schemas, components: {} }),\n            // @ts-expect-error â€“ TODO: this is filtered out above in the `allowedFields` call but TS complains, is there a better way to solve this?\n            type: attribute.type,\n          };\n\n          if (\n            attribute.type === 'relation' &&\n            'target' in attribute &&\n            attribute.target === 'admin::user'\n          ) {\n            filter = {\n              ...filter,\n              input: AdminUsersFilter,\n              options: users.map((user) => ({\n                label: getDisplayName(user),\n                value: user.id.toString(),\n              })),\n              operators: [\n                {\n                  label: formatMessage({\n                    id: 'components.FilterOptions.FILTER_TYPES.$eq',\n                    defaultMessage: 'is',\n                  }),\n                  value: '$eq',\n                },\n                {\n                  label: formatMessage({\n                    id: 'components.FilterOptions.FILTER_TYPES.$ne',\n                    defaultMessage: 'is not',\n                  }),\n                  value: '$ne',\n                },\n              ],\n              mainField: {\n                name: 'id',\n                type: 'integer',\n              },\n            };\n          }\n\n          if (attribute.type === 'enumeration') {\n            filter = {\n              ...filter,\n              options: attribute.enum.map((value) => ({\n                label: value,\n                value,\n              })),\n            };\n          }\n\n          return filter;\n        })\n        .filter(Boolean) as Filters.Filter[]\n    ).toSorted((a, b) => formatter.compare(a.label, b.label));\n  }, [\n    allPermissions,\n    canReadAdminUsers,\n    model,\n    attributes,\n    metadata,\n    schemas,\n    users,\n    formatMessage,\n    formatter,\n  ]);\n\n  const onOpenChange = (isOpen: boolean) => {\n    if (isOpen) {\n      trackUsage('willFilterEntries');\n    }\n  };\n\n  const handleFilterChange: Filters.Props['onChange'] = (data) => {\n    const attribute = attributes[data.name];\n\n    if (attribute) {\n      trackUsage('didFilterEntries', {\n        useRelation: attribute.type === 'relation',\n      });\n    }\n  };\n\n  return (\n    <Filters.Root\n      disabled={disabled}\n      options={displayedFilters}\n      onOpenChange={onOpenChange}\n      onChange={handleFilterChange}\n    >\n      <Filters.Trigger />\n      <Filters.Popover />\n      <Filters.List />\n    </Filters.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * AdminUsersFilter\n * -----------------------------------------------------------------------------------------------*/\n\nconst AdminUsersFilter = ({ name }: Filters.ValueInputProps) => {\n  const [pageSize, setPageSize] = React.useState(10);\n  const [search, setSearch] = React.useState('');\n  const { formatMessage } = useIntl();\n\n  const debouncedSearch = useDebounce(search, 300);\n\n  const { data, isLoading } = useAdminUsers({\n    pageSize,\n    _q: debouncedSearch,\n  });\n  const field = useField(name);\n\n  const handleOpenChange = (isOpen?: boolean) => {\n    if (!isOpen) {\n      setPageSize(10);\n    }\n  };\n\n  const { users = [], pagination } = data ?? {};\n  const { pageCount = 1, page = 1 } = pagination ?? {};\n\n  return (\n    <Combobox\n      value={field.value}\n      aria-label={formatMessage({\n        id: 'content-manager.components.Filters.usersSelect.label',\n        defaultMessage: 'Search and select a user to filter',\n      })}\n      onOpenChange={handleOpenChange}\n      onChange={(value) => field.onChange(name, value)}\n      loading={isLoading}\n      onLoadMore={() => setPageSize(pageSize + 10)}\n      hasMoreItems={page < pageCount}\n      onInputChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n        setSearch(e.currentTarget.value);\n      }}\n    >\n      {users.map((user) => {\n        return (\n          <ComboboxOption key={user.id} value={user.id.toString()}>\n            {getDisplayName(user)}\n          </ComboboxOption>\n        );\n      })}\n    </Combobox>\n  );\n};\n\nexport { FiltersImpl as Filters };\nexport type { FiltersProps };\n", "import parseISO from 'date-fns/parseISO';\nimport toString from 'lodash/toString';\nimport { useIntl } from 'react-intl';\n\nimport type { Schema } from '@strapi/types';\n\ninterface CellValueProps {\n  type: Schema.Attribute.Kind | 'custom';\n  value: any;\n}\n\nconst CellValue = ({ type, value }: CellValueProps) => {\n  const { formatDate, formatTime, formatNumber } = useIntl();\n  let formattedValue = value;\n\n  if (type === 'date') {\n    formattedValue = formatDate(parseISO(value), { dateStyle: 'full' });\n  }\n\n  if (type === 'datetime') {\n    formattedValue = formatDate(value, { dateStyle: 'full', timeStyle: 'short' });\n  }\n\n  if (type === 'time') {\n    const [hour, minute, second] = value.split(':');\n    const date = new Date();\n    date.setHours(hour);\n    date.setMinutes(minute);\n    date.setSeconds(second);\n\n    formattedValue = formatTime(date, {\n      timeStyle: 'short',\n    });\n  }\n\n  if (['float', 'decimal'].includes(type)) {\n    formattedValue = formatNumber(value, {\n      // Should be kept in sync with the corresponding value\n      // in the design-system/NumberInput: https://github.com/strapi/design-system/blob/main/packages/strapi-design-system/src/NumberInput/NumberInput.js#L53\n      maximumFractionDigits: 20,\n    });\n  }\n\n  if (['integer', 'biginteger'].includes(type)) {\n    formattedValue = formatNumber(value, { maximumFractionDigits: 0 });\n  }\n\n  return toString(formattedValue);\n};\n\nexport { CellValue };\nexport type { CellValueProps };\n", "import { Badge, Tooltip, Typography, Menu } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { CellContentProps } from './CellContent';\nimport { CellValue } from './CellValue';\n\nimport type { Schema } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * SingleComponent\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SingleComponentProps extends Pick<CellContentProps, 'mainField'> {\n  content: Schema.Attribute.Value<Schema.Attribute.Component<`${string}.${string}`, false>>;\n}\n\nconst SingleComponent = ({ content, mainField }: SingleComponentProps) => {\n  if (!mainField) {\n    return null;\n  }\n\n  return (\n    <Tooltip label={content[mainField.name]}>\n      <Typography maxWidth=\"25rem\" textColor=\"neutral800\" ellipsis>\n        <CellValue type={mainField.type} value={content[mainField.name]} />\n      </Typography>\n    </Tooltip>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * RepeatableComponent\n * -----------------------------------------------------------------------------------------------*/\n\ninterface RepeatableComponentProps extends Pick<CellContentProps, 'mainField'> {\n  content: Schema.Attribute.Value<Schema.Attribute.Component<`${string}.${string}`, true>>;\n}\n\nconst RepeatableComponent = ({ content, mainField }: RepeatableComponentProps) => {\n  const { formatMessage } = useIntl();\n\n  if (!mainField) {\n    return null;\n  }\n\n  return (\n    <Menu.Root>\n      <Menu.Trigger onClick={(e) => e.stopPropagation()}>\n        <Badge>{content.length}</Badge>\n        {formatMessage(\n          {\n            id: 'content-manager.containers.list.items',\n            defaultMessage: '{number, plural, =0 {items} one {item} other {items}}',\n          },\n          { number: content.length }\n        )}\n      </Menu.Trigger>\n      <Menu.Content>\n        {content.map((item) => (\n          <Menu.Item key={item.id} disabled>\n            <Typography maxWidth=\"50rem\" ellipsis>\n              <CellValue type={mainField.type} value={item[mainField.name]} />\n            </Typography>\n          </Menu.Item>\n        ))}\n      </Menu.Content>\n    </Menu.Root>\n  );\n};\n\nexport { SingleComponent, RepeatableComponent };\nexport type { SingleComponentProps, RepeatableComponentProps };\n", "import * as React from 'react';\n\nimport { Avatar, Flex, Tooltip, Typography, TypographyComponent } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\nimport { prefixFileUrlWithBackendUrl } from '../../../../utils/urls';\n\nimport type { Data } from '@strapi/types';\n\ninterface MediaFile {\n  id?: Data.ID;\n  alternativeText?: string;\n  ext: string;\n  formats: {\n    thumbnail?: {\n      url?: string;\n    };\n  };\n  mime: string;\n  name: string;\n  url: string;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Media\n * -----------------------------------------------------------------------------------------------*/\n\ninterface MediaSingleProps extends MediaFile {}\n\nconst getFileExtension = (ext: string) => (ext && ext[0] === '.' ? ext.substring(1) : ext);\n\nconst MediaSingle = ({ url, mime, alternativeText, name, ext, formats }: MediaSingleProps) => {\n  const fileURL = prefixFileUrlWithBackendUrl(url)!;\n\n  if (mime.includes('image')) {\n    const thumbnail = formats?.thumbnail?.url;\n    const mediaURL = prefixFileUrlWithBackendUrl(thumbnail) || fileURL;\n\n    return (\n      <Avatar.Item\n        src={mediaURL}\n        alt={alternativeText || name}\n        fallback={alternativeText || name}\n        preview\n      />\n    );\n  }\n\n  const fileExtension = getFileExtension(ext);\n  const fileName = name.length > 100 ? `${name.substring(0, 100)}...` : name;\n\n  return (\n    <Tooltip description={fileName}>\n      <FileWrapper>{fileExtension}</FileWrapper>\n    </Tooltip>\n  );\n};\n\nconst FileWrapper = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <Flex\n      tag=\"span\"\n      position=\"relative\"\n      borderRadius=\"50%\"\n      width=\"26px\"\n      height=\"26px\"\n      borderColor=\"neutral200\"\n      background=\"neutral150\"\n      paddingLeft=\"1px\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <FileTypography variant=\"sigma\" textColor=\"neutral600\">\n        {children}\n      </FileTypography>\n    </Flex>\n  );\n};\n\nconst FileTypography = styled<TypographyComponent>(Typography)`\n  font-size: 0.9rem;\n  line-height: 0.9rem;\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * MediaMultiple\n * -----------------------------------------------------------------------------------------------*/\n\ninterface MediaMultipleProps {\n  content: MediaFile[];\n}\n\nconst MediaMultiple = ({ content }: MediaMultipleProps) => {\n  return (\n    <Avatar.Group>\n      {content.map((file, index) => {\n        const key = `${file.id}${index}`;\n\n        if (index === 3) {\n          const remainingFiles = `+${content.length - 3}`;\n\n          return <FileWrapper key={key}>{remainingFiles}</FileWrapper>;\n        }\n\n        if (index > 3) {\n          return null;\n        }\n\n        return <MediaSingle key={key} {...file} />;\n      })}\n    </Avatar.Group>\n  );\n};\n\nexport { MediaMultiple, MediaSingle };\nexport type { MediaMultipleProps, MediaSingleProps };\n", "import * as React from 'react';\n\nimport { Typography, Loader, useNotifyAT, Menu } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { useDoc } from '../../../../hooks/useDocument';\nimport { useGetRelationsQuery } from '../../../../services/relations';\nimport { getRelationLabel } from '../../../../utils/relations';\nimport { getTranslation } from '../../../../utils/translations';\n\nimport type { CellContentProps } from './CellContent';\n\n/* -------------------------------------------------------------------------------------------------\n * RelationSingle\n * -----------------------------------------------------------------------------------------------*/\n\ninterface RelationSingleProps extends Pick<CellContentProps, 'mainField' | 'content'> {}\n\nconst RelationSingle = ({ mainField, content }: RelationSingleProps) => {\n  return (\n    <Typography maxWidth=\"50rem\" textColor=\"neutral800\" ellipsis>\n      {getRelationLabel(content, mainField)}\n    </Typography>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * RelationMultiple\n * -----------------------------------------------------------------------------------------------*/\n\ninterface RelationMultipleProps\n  extends Pick<CellContentProps, 'mainField' | 'content' | 'name' | 'rowId'> {}\n\n/**\n * TODO: fix this component â€“ tracking issue https://strapi-inc.atlassian.net/browse/CONTENT-2184\n */\nconst RelationMultiple = ({ mainField, content, rowId, name }: RelationMultipleProps) => {\n  const { model } = useDoc();\n  const { formatMessage } = useIntl();\n  const { notifyStatus } = useNotifyAT();\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const [targetField] = name.split('.');\n\n  const { data, isLoading } = useGetRelationsQuery(\n    {\n      model,\n      id: rowId,\n      targetField,\n    },\n    {\n      skip: !isOpen,\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  const contentCount = Array.isArray(content) ? content.length : content.count;\n\n  React.useEffect(() => {\n    if (data) {\n      notifyStatus(\n        formatMessage({\n          id: getTranslation('DynamicTable.relation-loaded'),\n          defaultMessage: 'Relations have been loaded',\n        })\n      );\n    }\n  }, [data, formatMessage, notifyStatus]);\n\n  return (\n    <Menu.Root onOpenChange={(isOpen) => setIsOpen(isOpen)}>\n      <Menu.Trigger onClick={(e) => e.stopPropagation()}>\n        <Typography style={{ cursor: 'pointer' }} textColor=\"neutral800\" fontWeight=\"regular\">\n          {contentCount > 0\n            ? formatMessage(\n                {\n                  id: 'content-manager.containers.list.items',\n                  defaultMessage: '{number} {number, plural, =0 {items} one {item} other {items}}',\n                },\n                { number: contentCount }\n              )\n            : '-'}\n        </Typography>\n      </Menu.Trigger>\n      <Menu.Content>\n        {isLoading && (\n          <Menu.Item disabled>\n            <Loader small>\n              {formatMessage({\n                id: getTranslation('ListViewTable.relation-loading'),\n                defaultMessage: 'Relations are loading',\n              })}\n            </Loader>\n          </Menu.Item>\n        )}\n        {data?.results && (\n          <>\n            {data.results.map((entry) => (\n              <Menu.Item key={entry.documentId} disabled>\n                <Typography maxWidth=\"50rem\" ellipsis>\n                  {getRelationLabel(entry, mainField)}\n                </Typography>\n              </Menu.Item>\n            ))}\n\n            {data?.pagination && data?.pagination.total > 10 && (\n              <Menu.Item\n                aria-disabled\n                aria-label={formatMessage({\n                  id: getTranslation('ListViewTable.relation-more'),\n                  defaultMessage: 'This relation contains more entities than displayed',\n                })}\n              >\n                <Typography>â€¦</Typography>\n              </Menu.Item>\n            )}\n          </>\n        )}\n      </Menu.Content>\n    </Menu.Root>\n  );\n};\n\nexport { RelationSingle, RelationMultiple };\nexport type { RelationSingleProps, RelationMultipleProps };\n", "import { Tooltip, Typography } from '@strapi/design-system';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { CellValue } from './CellValue';\nimport { SingleComponent, RepeatableComponent } from './Components';\nimport { MediaSingle, MediaMultiple } from './Media';\nimport { RelationMultiple, RelationSingle } from './Relations';\n\nimport type { ListFieldLayout } from '../../../../hooks/useDocumentLayout';\nimport type { Schema, Data } from '@strapi/types';\n\ninterface CellContentProps extends Omit<ListFieldLayout, 'cellFormatter'> {\n  content: Schema.Attribute.Value<Schema.Attribute.AnyAttribute>;\n  rowId: Data.ID;\n}\n\nconst CellContent = ({ content, mainField, attribute, rowId, name }: CellContentProps) => {\n  if (!hasContent(content, mainField, attribute)) {\n    return (\n      <Typography\n        textColor=\"neutral800\"\n        paddingLeft={attribute.type === ('relation' || 'component') ? '1.6rem' : 0}\n        paddingRight={attribute.type === ('relation' || 'component') ? '1.6rem' : 0}\n      >\n        -\n      </Typography>\n    );\n  }\n\n  switch (attribute.type) {\n    case 'media':\n      if (!attribute.multiple) {\n        return <MediaSingle {...content} />;\n      }\n\n      return <MediaMultiple content={content} />;\n\n    case 'relation': {\n      if (isSingleRelation(attribute.relation)) {\n        return <RelationSingle mainField={mainField} content={content} />;\n      }\n\n      return <RelationMultiple rowId={rowId} mainField={mainField} content={content} name={name} />;\n    }\n\n    case 'component':\n      if (attribute.repeatable) {\n        return <RepeatableComponent mainField={mainField} content={content} />;\n      }\n\n      return <SingleComponent mainField={mainField} content={content} />;\n\n    case 'string':\n      return (\n        <Tooltip description={content}>\n          <Typography maxWidth=\"30rem\" ellipsis textColor=\"neutral800\">\n            <CellValue type={attribute.type} value={content} />\n          </Typography>\n        </Tooltip>\n      );\n\n    default:\n      return (\n        <Typography maxWidth=\"30rem\" ellipsis textColor=\"neutral800\">\n          <CellValue type={attribute.type} value={content} />\n        </Typography>\n      );\n  }\n};\n\nconst hasContent = (\n  content: CellContentProps['content'],\n  mainField: CellContentProps['mainField'],\n  attribute: CellContentProps['attribute']\n) => {\n  if (attribute.type === 'component') {\n    // Repeatable fields show the ID as fallback, in case the mainField\n    // doesn't have any content\n    if (attribute.repeatable || !mainField) {\n      return content?.length > 0;\n    }\n\n    const value = content?.[mainField.name];\n\n    // relations, media ... show the id as fallback\n    if (mainField.name === 'id' && ![undefined, null].includes(value)) {\n      return true;\n    }\n\n    return !isEmpty(value);\n  }\n\n  if (attribute.type === 'relation') {\n    if (isSingleRelation(attribute.relation)) {\n      return !isEmpty(content);\n    }\n\n    if (Array.isArray(content)) {\n      return content.length > 0;\n    }\n\n    return content?.count > 0;\n  }\n\n  /*\n      Biginteger fields need to be treated as strings, as `isNumber`\n      doesn't deal with them.\n  */\n  if (['integer', 'decimal', 'float', 'number'].includes(attribute.type)) {\n    return typeof content === 'number';\n  }\n\n  if (attribute.type === 'boolean') {\n    return content !== null;\n  }\n\n  return !isEmpty(content);\n};\n\nconst isSingleRelation = (\n  type: Extract<CellContentProps['attribute'], { type: 'relation' }>['relation']\n) => ['oneToOne', 'manyToOne', 'oneToOneMorph'].includes(type);\n\nexport { CellContent };\nexport type { CellContentProps };\n", "import * as React from 'react';\n\nimport { useTracking, useRBAC, useQueryParams } from '@strapi/admin/strapi-admin';\nimport {\n  Flex,\n  IconButton,\n  Popover,\n  Checkbox,\n  TextButton,\n  Typography,\n  useCollator,\n  LinkButton,\n} from '@strapi/design-system';\nimport { Cog, ListPlus } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { NavLink } from 'react-router-dom';\n\nimport { useDoc } from '../../../hooks/useDocument';\nimport { useDocumentLayout } from '../../../hooks/useDocumentLayout';\nimport { useTypedSelector } from '../../../modules/hooks';\nimport { checkIfAttributeIsDisplayable } from '../../../utils/attributes';\n\ninterface ViewSettingsMenuProps extends FieldPickerProps {}\n\nconst ViewSettingsMenu = (props: ViewSettingsMenuProps) => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.contentManager?.collectionTypesConfigurations ?? []\n  );\n  const [{ query }] = useQueryParams<{ plugins?: Record<string, unknown> }>();\n  const { formatMessage } = useIntl();\n  const {\n    allowedActions: { canConfigureView },\n  } = useRBAC(permissions);\n\n  return (\n    <Popover.Root>\n      <Popover.Trigger>\n        <IconButton\n          label={formatMessage({\n            id: 'components.ViewSettings.tooltip',\n            defaultMessage: 'View Settings',\n          })}\n        >\n          <Cog />\n        </IconButton>\n      </Popover.Trigger>\n      <Popover.Content side=\"bottom\" align=\"end\" sideOffset={4}>\n        <Flex alignItems=\"stretch\" direction=\"column\" padding={3} gap={3}>\n          {canConfigureView ? (\n            <LinkButton\n              size=\"S\"\n              startIcon={<ListPlus />}\n              variant=\"secondary\"\n              tag={NavLink}\n              to={{\n                pathname: 'configurations/list',\n                search: query.plugins\n                  ? stringify({ plugins: query.plugins }, { encode: false })\n                  : '',\n              }}\n            >\n              {formatMessage({\n                id: 'app.links.configure-view',\n                defaultMessage: 'Configure the view',\n              })}\n            </LinkButton>\n          ) : null}\n          <FieldPicker {...props} />\n        </Flex>\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n\ninterface FieldPickerProps {\n  headers?: string[];\n  setHeaders: (headers: string[]) => void;\n  resetHeaders: () => void;\n}\n\nconst FieldPicker = ({ headers = [], resetHeaders, setHeaders }: FieldPickerProps) => {\n  const { trackUsage } = useTracking();\n  const { formatMessage, locale } = useIntl();\n\n  const { schema, model } = useDoc();\n  const { list } = useDocumentLayout(model);\n\n  const formatter = useCollator(locale, {\n    sensitivity: 'base',\n  });\n\n  const attributes = schema?.attributes ?? {};\n\n  const columns = Object.keys(attributes)\n    .filter((name) => checkIfAttributeIsDisplayable(attributes[name]))\n    .map((name) => ({\n      name,\n      label: list.metadatas[name]?.label ?? '',\n    }))\n    .sort((a, b) => formatter.compare(a.label, b.label));\n\n  const handleChange = (name: string) => {\n    trackUsage('didChangeDisplayedFields');\n\n    /**\n     * create an array of the new headers, if the new name exists it should be removed,\n     * otherwise it should be added\n     */\n    const newHeaders = headers.includes(name)\n      ? headers.filter((header) => header !== name)\n      : [...headers, name];\n\n    setHeaders(newHeaders);\n  };\n\n  const handleReset = () => {\n    resetHeaders();\n  };\n\n  return (\n    <Flex\n      tag=\"fieldset\"\n      direction=\"column\"\n      alignItems=\"stretch\"\n      gap={3}\n      borderWidth={0}\n      maxHeight={'240px'}\n      overflow={'scroll'}\n    >\n      <Flex justifyContent=\"space-between\">\n        <Typography tag=\"legend\" variant=\"pi\" fontWeight=\"bold\">\n          {formatMessage({\n            id: 'containers.list.displayedFields',\n            defaultMessage: 'Displayed fields',\n          })}\n        </Typography>\n\n        <TextButton onClick={handleReset}>\n          {formatMessage({\n            id: 'app.components.Button.reset',\n            defaultMessage: 'Reset',\n          })}\n        </TextButton>\n      </Flex>\n\n      <Flex direction=\"column\" alignItems=\"stretch\">\n        {columns.map((header) => {\n          const isActive = headers.includes(header.name);\n\n          return (\n            <Flex\n              wrap=\"wrap\"\n              gap={2}\n              background={isActive ? 'primary100' : 'transparent'}\n              hasRadius\n              padding={2}\n              key={header.name}\n            >\n              <Checkbox\n                onCheckedChange={() => handleChange(header.name)}\n                checked={isActive}\n                name={header.name}\n              >\n                <Typography fontSize={1}>{header.label}</Typography>\n              </Checkbox>\n            </Flex>\n          );\n        })}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport { ViewSettingsMenu };\nexport type { ViewSettingsMenuProps, FieldPickerProps };\n", "import * as React from 'react';\n\nimport {\n  Page,\n  Pagination,\n  SearchInput,\n  Table,\n  BackButton,\n  useNotification,\n  useStrapiApp,\n  useTracking,\n  useAPIErrorHandler,\n  useQueryParams,\n  useRBAC,\n  Layouts,\n  useTable,\n} from '@strapi/admin/strapi-admin';\nimport { Button, Flex, Typography, ButtonProps } from '@strapi/design-system';\nimport { Plus } from '@strapi/icons';\nimport isEqual from 'lodash/isEqual';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, Link as ReactRouterLink, useParams } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { InjectionZone } from '../../components/InjectionZone';\nimport { HOOKS } from '../../constants/hooks';\nimport { PERMISSIONS } from '../../constants/plugin';\nimport { DocumentRBAC, useDocumentRBAC } from '../../features/DocumentRBAC';\nimport { useDoc } from '../../hooks/useDocument';\nimport {\n  ListFieldLayout,\n  convertListLayoutToFieldLayouts,\n  useDocumentLayout,\n} from '../../hooks/useDocumentLayout';\nimport { usePrev } from '../../hooks/usePrev';\nimport { useGetAllDocumentsQuery } from '../../services/documents';\nimport { buildValidParams } from '../../utils/api';\nimport { getTranslation } from '../../utils/translations';\nimport { getDisplayName } from '../../utils/users';\nimport { DocumentStatus } from '../EditView/components/DocumentStatus';\n\nimport { BulkActionsRenderer } from './components/BulkActions/Actions';\nimport { Filters } from './components/Filters';\nimport { TableActions } from './components/TableActions';\nimport { CellContent } from './components/TableCells/CellContent';\nimport { ViewSettingsMenu } from './components/ViewSettingsMenu';\n\nimport type { Modules } from '@strapi/types';\n\nconst { INJECT_COLUMN_IN_TABLE } = HOOKS;\n\n/* -------------------------------------------------------------------------------------------------\n * ListViewPage\n * -----------------------------------------------------------------------------------------------*/\nconst LayoutsHeaderCustom = styled(Layouts.Header)`\n  overflow-wrap: anywhere;\n`;\n\nconst ListViewPage = () => {\n  const { trackUsage } = useTracking();\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler(getTranslation);\n\n  const { collectionType, model, schema } = useDoc();\n  const { list } = useDocumentLayout(model);\n\n  const [displayedHeaders, setDisplayedHeaders] = React.useState<ListFieldLayout[]>([]);\n\n  const listLayout = usePrev(list.layout);\n  React.useEffect(() => {\n    /**\n     * ONLY update the displayedHeaders if the document\n     * layout has actually changed in value.\n     */\n    if (!isEqual(listLayout, list.layout)) {\n      setDisplayedHeaders(list.layout);\n    }\n  }, [list.layout, listLayout]);\n\n  const handleSetHeaders = (headers: string[]) => {\n    setDisplayedHeaders(\n      convertListLayoutToFieldLayouts(headers, schema!.attributes, list.metadatas)\n    );\n  };\n\n  const [{ query }] = useQueryParams<{\n    plugins?: Record<string, unknown>;\n    page?: string;\n    pageSize?: string;\n    sort?: string;\n  }>({\n    page: '1',\n    pageSize: list.settings.pageSize.toString(),\n    sort: list.settings.defaultSortBy\n      ? `${list.settings.defaultSortBy}:${list.settings.defaultSortOrder}`\n      : '',\n  });\n\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  const { data, error, isFetching } = useGetAllDocumentsQuery({\n    model,\n    params,\n  });\n\n  /**\n   * If the API returns an error, display a notification\n   */\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  const { results = [], pagination } = data ?? {};\n\n  React.useEffect(() => {\n    if (pagination && pagination.pageCount > 0 && pagination.page > pagination.pageCount) {\n      navigate(\n        {\n          search: stringify({\n            ...query,\n            page: pagination.pageCount,\n          }),\n        },\n        { replace: true }\n      );\n    }\n  }, [pagination, formatMessage, query, navigate]);\n\n  const { canCreate } = useDocumentRBAC('ListViewPage', ({ canCreate }) => ({\n    canCreate,\n  }));\n\n  const runHookWaterfall = useStrapiApp('ListViewPage', ({ runHookWaterfall }) => runHookWaterfall);\n  /**\n   * Run the waterfall and then inject our additional table headers.\n   */\n  const tableHeaders = React.useMemo(() => {\n    const headers = runHookWaterfall(INJECT_COLUMN_IN_TABLE, {\n      displayedHeaders,\n      layout: list,\n    });\n\n    const formattedHeaders = headers.displayedHeaders.map<ListFieldLayout>((header) => {\n      /**\n       * When the header label is a string, it is an attribute on the current content-type:\n       * Use the attribute name value to compute the translation.\n       * Otherwise, it should be a  translation object coming from a plugin that injects into the table (ie i18n, content-releases, review-workflows):\n       * Use the translation object as is.\n       */\n      const translation =\n        typeof header.label === 'string'\n          ? {\n              id: `content-manager.content-types.${model}.${header.name}`,\n              defaultMessage: header.label,\n            }\n          : header.label;\n\n      return {\n        ...header,\n        label: formatMessage(translation),\n        name: `${header.name}${header.mainField?.name ? `.${header.mainField.name}` : ''}`,\n      };\n    });\n\n    if (schema?.options?.draftAndPublish) {\n      formattedHeaders.push({\n        attribute: {\n          type: 'custom',\n        },\n        name: 'status',\n        label: formatMessage({\n          id: getTranslation(`containers.list.table-headers.status`),\n          defaultMessage: 'status',\n        }),\n        searchable: false,\n        sortable: false,\n      } satisfies ListFieldLayout);\n    }\n\n    return formattedHeaders;\n  }, [\n    displayedHeaders,\n    formatMessage,\n    list,\n    runHookWaterfall,\n    schema?.options?.draftAndPublish,\n    model,\n  ]);\n\n  if (isFetching) {\n    return <Page.Loading />;\n  }\n\n  if (error) {\n    return <Page.Error />;\n  }\n\n  const contentTypeTitle = schema?.info.displayName\n    ? formatMessage({ id: schema.info.displayName, defaultMessage: schema.info.displayName })\n    : formatMessage({\n        id: 'content-manager.containers.untitled',\n        defaultMessage: 'Untitled',\n      });\n\n  const handleRowClick = (id: Modules.Documents.ID) => () => {\n    trackUsage('willEditEntryFromList');\n    navigate({\n      pathname: id.toString(),\n      search: stringify({ plugins: query.plugins }),\n    });\n  };\n\n  return (\n    <Page.Main>\n      <Page.Title>{`${contentTypeTitle}`}</Page.Title>\n      <LayoutsHeaderCustom\n        primaryAction={canCreate ? <CreateButton /> : null}\n        subtitle={formatMessage(\n          {\n            id: getTranslation('pages.ListView.header-subtitle'),\n            defaultMessage:\n              '{number, plural, =0 {# entries} one {# entry} other {# entries}} found',\n          },\n          { number: pagination?.total }\n        )}\n        title={contentTypeTitle}\n        navigationAction={<BackButton />}\n      />\n      <Layouts.Action\n        endActions={\n          <>\n            <InjectionZone area=\"listView.actions\" />\n            <ViewSettingsMenu\n              setHeaders={handleSetHeaders}\n              resetHeaders={() => setDisplayedHeaders(list.layout)}\n              headers={displayedHeaders.map((header) => header.name)}\n            />\n          </>\n        }\n        startActions={\n          <>\n            {list.settings.searchable && (\n              <SearchInput\n                disabled={results.length === 0}\n                label={formatMessage(\n                  { id: 'app.component.search.label', defaultMessage: 'Search for {target}' },\n                  { target: contentTypeTitle }\n                )}\n                placeholder={formatMessage({\n                  id: 'global.search',\n                  defaultMessage: 'Search',\n                })}\n                trackedEvent=\"didSearch\"\n              />\n            )}\n            {list.settings.filterable && schema ? (\n              <Filters disabled={results.length === 0} schema={schema} />\n            ) : null}\n          </>\n        }\n      />\n      <Layouts.Content>\n        <Flex gap={4} direction=\"column\" alignItems=\"stretch\">\n          <Table.Root rows={results} headers={tableHeaders} isLoading={isFetching}>\n            <TableActionsBar />\n            <Table.Content>\n              <Table.Head>\n                <Table.HeaderCheckboxCell />\n                {tableHeaders.map((header: ListFieldLayout) => (\n                  <Table.HeaderCell key={header.name} {...header} />\n                ))}\n              </Table.Head>\n              <Table.Loading />\n              <Table.Empty action={canCreate ? <CreateButton variant=\"secondary\" /> : null} />\n              <Table.Body>\n                {results.map((row) => {\n                  return (\n                    <Table.Row\n                      cursor=\"pointer\"\n                      key={row.id}\n                      onClick={handleRowClick(row.documentId)}\n                    >\n                      <Table.CheckboxCell id={row.id} />\n                      {tableHeaders.map(({ cellFormatter, ...header }) => {\n                        if (header.name === 'status') {\n                          const { status } = row;\n\n                          return (\n                            <Table.Cell key={header.name}>\n                              <DocumentStatus status={status} maxWidth={'min-content'} />\n                            </Table.Cell>\n                          );\n                        }\n                        if (['createdBy', 'updatedBy'].includes(header.name.split('.')[0])) {\n                          // Display the users full name\n                          // Some entries doesn't have a user assigned as creator/updater (ex: entries created through content API)\n                          // In this case, we display a dash\n                          return (\n                            <Table.Cell key={header.name}>\n                              <Typography textColor=\"neutral800\">\n                                {row[header.name.split('.')[0]]\n                                  ? getDisplayName(row[header.name.split('.')[0]])\n                                  : '-'}\n                              </Typography>\n                            </Table.Cell>\n                          );\n                        }\n                        if (typeof cellFormatter === 'function') {\n                          return (\n                            <Table.Cell key={header.name}>\n                              {/* @ts-expect-error â€“ TODO: fix this TS error */}\n                              {cellFormatter(row, header, { collectionType, model })}\n                            </Table.Cell>\n                          );\n                        }\n                        return (\n                          <Table.Cell key={header.name}>\n                            <CellContent\n                              content={row[header.name.split('.')[0]]}\n                              rowId={row.documentId}\n                              {...header}\n                            />\n                          </Table.Cell>\n                        );\n                      })}\n                      {/* we stop propagation here to allow the menu to trigger it's events without triggering the row redirect */}\n                      <ActionsCell onClick={(e) => e.stopPropagation()}>\n                        <TableActions document={row} />\n                      </ActionsCell>\n                    </Table.Row>\n                  );\n                })}\n              </Table.Body>\n            </Table.Content>\n          </Table.Root>\n          <Pagination.Root\n            {...pagination}\n            onPageSizeChange={() => trackUsage('willChangeNumberOfEntriesPerPage')}\n          >\n            <Pagination.PageSize />\n            <Pagination.Links />\n          </Pagination.Root>\n        </Flex>\n      </Layouts.Content>\n    </Page.Main>\n  );\n};\n\nconst ActionsCell = styled(Table.Cell)`\n  display: flex;\n  justify-content: flex-end;\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * TableActionsBar\n * -----------------------------------------------------------------------------------------------*/\n\nconst TableActionsBar = () => {\n  const selectRow = useTable('TableActionsBar', (state) => state.selectRow);\n  const [{ query }] = useQueryParams<{ plugins: { i18n: { locale: string } } }>();\n  const locale = query?.plugins?.i18n?.locale;\n  const prevLocale = usePrev(locale);\n\n  // TODO: find a better way to reset the selected rows when the locale changes across all the app\n  React.useEffect(() => {\n    if (prevLocale !== locale) {\n      selectRow([]);\n    }\n  }, [selectRow, prevLocale, locale]);\n\n  return (\n    <Table.ActionBar>\n      <BulkActionsRenderer />\n    </Table.ActionBar>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * CreateButton\n * -----------------------------------------------------------------------------------------------*/\n\ninterface CreateButtonProps extends Pick<ButtonProps, 'variant'> {}\n\nconst CreateButton = ({ variant }: CreateButtonProps) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const [{ query }] = useQueryParams<{ plugins: object }>();\n\n  return (\n    <Button\n      variant={variant}\n      tag={ReactRouterLink}\n      onClick={() => {\n        trackUsage('willCreateEntry', { status: 'draft' });\n      }}\n      startIcon={<Plus />}\n      style={{ textDecoration: 'none' }}\n      to={{\n        pathname: 'create',\n        search: stringify({ plugins: query.plugins }),\n      }}\n      minWidth=\"max-content\"\n      marginLeft={2}\n    >\n      {formatMessage({\n        id: getTranslation('HeaderLayout.button.label-add-entry'),\n        defaultMessage: 'Create new entry',\n      })}\n    </Button>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedListViewPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedListViewPage = () => {\n  const { slug = '' } = useParams<{\n    slug: string;\n  }>();\n  const {\n    permissions = [],\n    isLoading,\n    error,\n  } = useRBAC(\n    PERMISSIONS.map((action) => ({\n      action,\n      subject: slug,\n    }))\n  );\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  if (error || !slug) {\n    return <Page.Error />;\n  }\n\n  return (\n    <Page.Protect permissions={permissions}>\n      {({ permissions }) => (\n        <DocumentRBAC permissions={permissions}>\n          <ListViewPage />\n        </DocumentRBAC>\n      )}\n    </Page.Protect>\n  );\n};\n\nexport { ListViewPage, ProtectedListViewPage };\n"],
  "mappings": "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",
  "names": ["NOT_ALLOWED_FILTERS", "DEFAULT_ALLOWED_FILTERS", "USER_FILTER_ATTRIBUTES", "CREATOR_FIELDS", "FiltersImpl", "disabled", "schema", "attributes", "uid", "model", "options", "formatMessage", "locale", "useIntl", "trackUsage", "useTracking", "allPermissions", "useAuth", "state", "permissions", "query", "useQueryParams", "schemas", "useContentTypeSchema", "canReadAdminUsers", "useMemo", "filter", "permission", "action", "subject", "length", "selectedUserIds", "filters", "$and", "reduce", "acc", "key", "value", "Object", "entries", "id", "$eq", "$ne", "includes", "push", "data", "userData", "isLoading", "isLoadingAdminUsers", "useAdminUsers", "$in", "skip", "users", "metadata", "useGetContentTypeConfigurationQuery", "selectFromResult", "contentType", "metadatas", "formatter", "useCollator", "sensitivity", "displayedFilters", "properties", "fields", "allowedFields", "field", "attribute", "type", "map", "name", "mainField", "mainFieldName", "label", "list", "getMainField", "components", "target", "input", "AdminUsersFilter", "user", "getDisplayName", "toString", "operators", "defaultMessage", "enum", "Boolean", "toSorted", "a", "b", "compare", "onOpenChange", "isOpen", "handleFilterChange", "useRelation", "_jsxs", "Filters", "Root", "onChange", "_jsx", "Trigger", "Popover", "List", "pageSize", "setPageSize", "useState", "search", "setSearch", "debouncedSearch", "useDebounce", "_q", "useField", "handleOpenChange", "pagination", "pageCount", "page", "Combobox", "aria-label", "loading", "onLoadMore", "hasMoreItems", "onInputChange", "e", "currentTarget", "ComboboxOption", "CellValue", "formatDate", "formatTime", "formatNumber", "formattedValue", "parseISO", "dateStyle", "timeStyle", "hour", "minute", "second", "split", "date", "Date", "setHours", "setMinutes", "setSeconds", "maximumFractionDigits", "SingleComponent", "content", "Tooltip", "Typography", "maxWidth", "textColor", "ellipsis", "RepeatableComponent", "Menu", "onClick", "stopPropagation", "Badge", "number", "Content", "item", "Item", "getFileExtension", "ext", "substring", "MediaSingle", "url", "mime", "alternativeText", "formats", "fileURL", "prefixFileUrlWithBackendUrl", "thumbnail", "mediaURL", "Avatar", "src", "alt", "fallback", "preview", "fileExtension", "fileName", "description", "FileWrapper", "children", "Flex", "tag", "position", "borderRadius", "width", "height", "borderColor", "background", "paddingLeft", "justifyContent", "alignItems", "FileTypography", "variant", "styled", "MediaMultiple", "Group", "file", "index", "remainingFiles", "RelationSingle", "getRelationLabel", "RelationMultiple", "rowId", "useDoc", "notifyStatus", "useNotifyAT", "setIsOpen", "targetField", "useGetRelationsQuery", "refetchOnMountOrArgChange", "contentCount", "Array", "isArray", "count", "React", "useEffect", "getTranslation", "style", "cursor", "fontWeight", "Loader", "small", "results", "_Fragment", "entry", "documentId", "total", "aria-disabled", "CellContent", "hasContent", "paddingRight", "multiple", "isSingleRelation", "relation", "repeatable", "undefined", "isEmpty", "ViewSettingsMenu", "props", "useTypedSelector", "admin_app", "contentManager", "collectionTypesConfigurations", "allowedActions", "canConfigureView", "useRBAC", "IconButton", "Cog", "side", "align", "sideOffset", "direction", "padding", "gap", "LinkButton", "size", "startIcon", "ListPlus", "NavLink", "to", "pathname", "plugins", "stringify", "encode", "FieldPicker", "headers", "resetHeaders", "setHeaders", "useDocumentLayout", "columns", "keys", "checkIfAttributeIsDisplayable", "sort", "handleChange", "newHeaders", "header", "handleReset", "borderWidth", "maxHeight", "overflow", "TextButton", "isActive", "wrap", "hasRadius", "Checkbox", "onCheckedChange", "checked", "fontSize", "INJECT_COLUMN_IN_TABLE", "HOOKS", "LayoutsHeaderCustom", "Layouts", "Header", "ListViewPage", "navigate", "useNavigate", "toggleNotification", "useNotification", "_unstableFormatAPIError", "formatAPIError", "useAPIErrorHandler", "collectionType", "displayedHeaders", "setDisplayedHeaders", "listLayout", "usePrev", "layout", "isEqual", "handleSetHeaders", "convertListLayoutToFieldLayouts", "settings", "defaultSortBy", "defaultSortOrder", "params", "buildValidParams", "error", "isFetching", "useGetAllDocumentsQuery", "message", "replace", "canCreate", "useDocumentRBAC", "runHookWaterfall", "useStrapiApp", "tableHeaders", "formattedHeaders", "translation", "draftAndPublish", "searchable", "sortable", "Page", "Loading", "Error", "contentTypeTitle", "info", "displayName", "handleRowClick", "Main", "Title", "primaryAction", "CreateButton", "subtitle", "title", "navigationAction", "BackButton", "Action", "endActions", "InjectionZone", "area", "startActions", "SearchInput", "placeholder", "trackedEvent", "filterable", "Table", "rows", "TableActionsBar", "Head", "HeaderCheckboxCell", "HeaderCell", "Empty", "Body", "row", "Row", "CheckboxCell", "cellFormatter", "status", "Cell", "DocumentStatus", "ActionsCell", "TableActions", "document", "Pagination", "onPageSizeChange", "PageSize", "Links", "selectRow", "useTable", "i18n", "prevLocale", "ActionBar", "BulkActionsRenderer", "Button", "ReactRouterLink", "Plus", "textDecoration", "minWidth", "marginLeft", "ProtectedListViewPage", "slug", "useParams", "PERMISSIONS", "Protect", "DocumentRBAC"]
}

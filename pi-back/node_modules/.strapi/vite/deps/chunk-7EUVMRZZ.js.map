{
  "version": 3,
  "sources": ["../../../lodash/fp/mapValues.js", "../../../prismjs/prism.js", "../../../@strapi/content-manager/admin/src/constants/plugin.ts", "../../../@strapi/content-manager/admin/src/components/InjectionZone.tsx", "../../../@strapi/content-manager/admin/src/constants/attributes.ts", "../../../@strapi/content-manager/admin/src/constants/collections.ts", "../../../@strapi/content-manager/admin/src/features/DocumentRBAC.tsx", "../../../@strapi/content-manager/admin/src/pages/EditView/utils/data.ts", "../../../@strapi/content-manager/admin/src/pages/EditView/utils/forms.ts", "../../../@strapi/content-manager/admin/src/services/api.ts", "../../../@strapi/content-manager/admin/src/services/documents.ts", "../../../@strapi/content-manager/admin/src/utils/api.ts", "../../../@strapi/content-manager/admin/src/utils/validation.ts", "../../../@strapi/content-manager/admin/src/services/init.ts", "../../../@strapi/content-manager/admin/src/hooks/useContentTypeSchema.ts", "../../../@strapi/content-manager/admin/src/constants/hooks.ts", "../../../@strapi/content-manager/admin/src/services/contentTypes.ts", "../../../@strapi/content-manager/admin/src/utils/attributes.ts", "../../../@strapi/content-manager/admin/src/hooks/useDocumentLayout.ts", "../../../@strapi/content-manager/admin/src/hooks/useDocument.ts", "../../../@strapi/content-manager/admin/src/utils/translations.ts", "../../../@strapi/content-manager/admin/src/hooks/useDocumentActions.ts", "../../../@strapi/content-manager/admin/src/history/routes.tsx", "../../../@strapi/content-manager/admin/src/preview/routes.tsx", "../../../@strapi/content-manager/admin/src/router.tsx", "../../../@strapi/content-manager/admin/src/pages/EditView/components/DocumentActions.tsx", "../../../@strapi/content-manager/admin/src/components/RelativeTime.tsx", "../../../@strapi/content-manager/admin/src/utils/users.ts", "../../../@strapi/content-manager/admin/src/utils/strings.ts", "../../../@strapi/content-manager/admin/src/pages/EditView/components/DocumentStatus.tsx", "../../../@strapi/content-manager/admin/src/pages/EditView/components/Header.tsx", "../../../@strapi/content-manager/admin/src/pages/EditView/components/Panels.tsx", "../../../@strapi/content-manager/admin/src/pages/ListView/components/BulkActions/ConfirmBulkActionDialog.tsx", "../../../@strapi/content-manager/admin/src/pages/ListView/components/BulkActions/PublishAction.tsx", "../../../@strapi/content-manager/admin/src/pages/ListView/components/BulkActions/Actions.tsx", "../../../@strapi/content-manager/admin/src/pages/ListView/components/AutoCloneFailureModal.tsx", "../../../@strapi/content-manager/admin/src/pages/ListView/components/TableActions.tsx", "../../../@strapi/content-manager/admin/src/content-manager.ts", "../../../@strapi/content-manager/admin/src/history/components/HistoryAction.tsx", "../../../@strapi/content-manager/admin/src/history/index.ts", "../../../@strapi/content-manager/admin/src/modules/app.ts", "../../../@strapi/content-manager/admin/src/modules/reducers.ts", "../../../@strapi/content-manager/admin/src/preview/services/preview.ts", "../../../@strapi/content-manager/admin/src/preview/components/PreviewSidePanel.tsx", "../../../@strapi/content-manager/admin/src/preview/index.ts", "../../../@strapi/content-manager/admin/src/index.ts"],
  "sourcesContent": ["var convert = require('./convert'),\n    func = convert('mapValues', require('../mapValues'));\n\nfunc.placeholder = require('./placeholder');\nmodule.exports = func;\n", "\n/* **********************************************\n     Begin prism-core.js\n********************************************** */\n\n/// <reference lib=\"WebWorker\"/>\n\nvar _self = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t\t? self // if in worker\n\t\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\nvar Prism = (function (_self) {\n\n\t// Private helper vars\n\tvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n\tvar uniqueId = 0;\n\n\t// The grammar object for plaintext\n\tvar plainTextGrammar = {};\n\n\n\tvar _ = {\n\t\t/**\n\t\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n\t\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n\t\t * additional languages or plugins yourself.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n\t\t *\n\t\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.manual = true;\n\t\t * // add a new <script> to load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tmanual: _self.Prism && _self.Prism.manual,\n\t\t/**\n\t\t * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\n\t\t * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\n\t\t * own worker, you don't want it to do this.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not add its own listeners to the worker.\n\t\t *\n\t\t * You obviously have to change this value before Prism executes. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.disableWorkerMessageHandler = true;\n\t\t * // Load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n\n\t\t/**\n\t\t * A namespace for utility methods.\n\t\t *\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t\t * change or disappear at any time.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t */\n\t\tutil: {\n\t\t\tencode: function encode(tokens) {\n\t\t\t\tif (tokens instanceof Token) {\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\t\treturn tokens.map(encode);\n\t\t\t\t} else {\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the name of the type of the given value.\n\t\t\t *\n\t\t\t * @param {any} o\n\t\t\t * @returns {string}\n\t\t\t * @example\n\t\t\t * type(null)      === 'Null'\n\t\t\t * type(undefined) === 'Undefined'\n\t\t\t * type(123)       === 'Number'\n\t\t\t * type('foo')     === 'String'\n\t\t\t * type(true)      === 'Boolean'\n\t\t\t * type([1, 2])    === 'Array'\n\t\t\t * type({})        === 'Object'\n\t\t\t * type(String)    === 'Function'\n\t\t\t * type(/abc+/)    === 'RegExp'\n\t\t\t */\n\t\t\ttype: function (o) {\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t\t *\n\t\t\t * @param {Object} obj\n\t\t\t * @returns {number}\n\t\t\t */\n\t\t\tobjId: function (obj) {\n\t\t\t\tif (!obj['__id']) {\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t\t}\n\t\t\t\treturn obj['__id'];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a deep clone of the given object.\n\t\t\t *\n\t\t\t * The main intended use of this function is to clone language definitions.\n\t\t\t *\n\t\t\t * @param {T} o\n\t\t\t * @param {Record<number, any>} [visited]\n\t\t\t * @returns {T}\n\t\t\t * @template T\n\t\t\t */\n\t\t\tclone: function deepClone(o, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar clone; var id;\n\t\t\t\tswitch (_.util.type(o)) {\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t\t *\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tgetLanguage: function (element) {\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar m = lang.exec(element.className);\n\t\t\t\t\tif (m) {\n\t\t\t\t\t\treturn m[1].toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn 'none';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Sets the Prism `language-xxxx` class of the given element.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} language\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tsetLanguage: function (element, language) {\n\t\t\t\t// remove all `language-xxxx` classes\n\t\t\t\t// (this might leave behind a leading space)\n\t\t\t\telement.className = element.className.replace(RegExp(lang, 'gi'), '');\n\n\t\t\t\t// add the new `language-xxxx` class\n\t\t\t\t// (using `classList` will automatically clean up spaces for us)\n\t\t\t\telement.classList.add('language-' + language);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the script element that is currently executing.\n\t\t\t *\n\t\t\t * This does __not__ work for line script element.\n\t\t\t *\n\t\t\t * @returns {HTMLScriptElement | null}\n\t\t\t */\n\t\t\tcurrentScript: function () {\n\t\t\t\tif (typeof document === 'undefined') {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif (document.currentScript && document.currentScript.tagName === 'SCRIPT' && 1 < 2 /* hack to trip TS' flow analysis */) {\n\t\t\t\t\treturn /** @type {any} */ (document.currentScript);\n\t\t\t\t}\n\n\t\t\t\t// IE11 workaround\n\t\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\n\t\t\t\t// this will not work for inline scripts\n\n\t\t\t\ttry {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\n\t\t\t\t\t// A stack will look like this:\n\t\t\t\t\t//\n\t\t\t\t\t// Error\n\t\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n\t\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\n\n\t\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\n\t\t\t\t\tif (src) {\n\t\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\n\t\t\t\t\t\tfor (var i in scripts) {\n\t\t\t\t\t\t\tif (scripts[i].src == src) {\n\t\t\t\t\t\t\t\treturn scripts[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns whether a given class is active for `element`.\n\t\t\t *\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t\t * given class is just the given class with a `no-` prefix.\n\t\t\t *\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t\t *\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t\t * version of it, the class is considered active.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} className\n\t\t\t * @param {boolean} [defaultActivation=false]\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tisActive: function (element, className, defaultActivation) {\n\t\t\t\tvar no = 'no-' + className;\n\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar classList = element.classList;\n\t\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn !!defaultActivation;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tlanguages: {\n\t\t\t/**\n\t\t\t * The grammar for plain, unformatted text.\n\t\t\t */\n\t\t\tplain: plainTextGrammar,\n\t\t\tplaintext: plainTextGrammar,\n\t\t\ttext: plainTextGrammar,\n\t\t\ttxt: plainTextGrammar,\n\n\t\t\t/**\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t\t *\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t\t * will be overwritten at its original position.\n\t\t\t *\n\t\t\t * ## Best practices\n\t\t\t *\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t\t *\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t\t *\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t\t * @param {Grammar} redef The new tokens to append.\n\t\t\t * @returns {Grammar} The new language created.\n\t\t\t * @public\n\t\t\t * @example\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t\t *     // at its original position\n\t\t\t *     'comment': { ... },\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t\t * });\n\t\t\t */\n\t\t\textend: function (id, redef) {\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\t\tfor (var key in redef) {\n\t\t\t\t\tlang[key] = redef[key];\n\t\t\t\t}\n\n\t\t\t\treturn lang;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t\t *\n\t\t\t * ## Usage\n\t\t\t *\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t\t * this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.markup.style = {\n\t\t\t *     // token\n\t\t\t * };\n\t\t\t * ```\n\t\t\t *\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t\t *     'style': {\n\t\t\t *         // token\n\t\t\t *     }\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Special cases\n\t\t\t *\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t\t * will be ignored.\n\t\t\t *\n\t\t\t * This behavior can be used to insert tokens after `before`:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t\t *     'comment': Prism.languages.markup.comment,\n\t\t\t *     // tokens after 'comment'\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Limitations\n\t\t\t *\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t\t *\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t\t *\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * var oldMarkup = Prism.languages.markup;\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t\t *\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t\t * object to be modified.\n\t\t\t * @param {string} before The key to insert before.\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t\t * object to be modified.\n\t\t\t *\n\t\t\t * Defaults to `Prism.languages`.\n\t\t\t * @returns {Grammar} The new grammar object.\n\t\t\t * @public\n\t\t\t */\n\t\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\t\tvar grammar = root[inside];\n\t\t\t\t/** @type {Grammar} */\n\t\t\t\tvar ret = {};\n\n\t\t\t\tfor (var token in grammar) {\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar old = root[inside];\n\t\t\t\troot[inside] = ret;\n\n\t\t\t\t// Update references in other language definitions\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\n\t\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\t\tthis[key] = ret;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn ret;\n\t\t\t},\n\n\t\t\t// Traverse a language definition with Depth First Search\n\t\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar objId = _.util.objId;\n\n\t\t\t\tfor (var i in o) {\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\t\tvar property = o[i];\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\n\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tplugins: {},\n\n\t\t/**\n\t\t * This is the most high-level function in Prism’s API.\n\t\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n\t\t * each one of them.\n\t\t *\n\t\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n\t\t *\n\t\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAll: function (async, callback) {\n\t\t\t_.highlightAllUnder(document, async, callback);\n\t\t},\n\n\t\t/**\n\t\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n\t\t * {@link Prism.highlightElement} on each one of them.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-highlightall`\n\t\t * 2. `before-all-elements-highlight`\n\t\t * 3. All hooks of {@link Prism.highlightElement} for each element.\n\t\t *\n\t\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n\t\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAllUnder: function (container, async, callback) {\n\t\t\tvar env = {\n\t\t\t\tcallback: callback,\n\t\t\t\tcontainer: container,\n\t\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n\t\t\t};\n\n\t\t\t_.hooks.run('before-highlightall', env);\n\n\t\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n\n\t\t\t_.hooks.run('before-all-elements-highlight', env);\n\n\t\t\tfor (var i = 0, element; (element = env.elements[i++]);) {\n\t\t\t\t_.highlightElement(element, async === true, env.callback);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Highlights the code inside a single element.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-sanity-check`\n\t\t * 2. `before-highlight`\n\t\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\n\t\t * 4. `before-insert`\n\t\t * 5. `after-highlight`\n\t\t * 6. `complete`\n\t\t *\n\t\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\n\t\t * the element's language.\n\t\t *\n\t\t * @param {Element} element The element containing the code.\n\t\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n\t\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n\t\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n\t\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n\t\t *\n\t\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n\t\t * asynchronous highlighting to work. You can build your own bundle on the\n\t\t * [Download page](https://prismjs.com/download.html).\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n\t\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightElement: function (element, async, callback) {\n\t\t\t// Find language\n\t\t\tvar language = _.util.getLanguage(element);\n\t\t\tvar grammar = _.languages[language];\n\n\t\t\t// Set language on the element, if not present\n\t\t\t_.util.setLanguage(element, language);\n\n\t\t\t// Set language on the parent, for styling\n\t\t\tvar parent = element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\n\t\t\t\t_.util.setLanguage(parent, language);\n\t\t\t}\n\n\t\t\tvar code = element.textContent;\n\n\t\t\tvar env = {\n\t\t\t\telement: element,\n\t\t\t\tlanguage: language,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tcode: code\n\t\t\t};\n\n\t\t\tfunction insertHighlightedCode(highlightedCode) {\n\t\t\t\tenv.highlightedCode = highlightedCode;\n\n\t\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t}\n\n\t\t\t_.hooks.run('before-sanity-check', env);\n\n\t\t\t// plugins may change/add the parent/element\n\t\t\tparent = env.element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\n\t\t\t\tparent.setAttribute('tabindex', '0');\n\t\t\t}\n\n\t\t\tif (!env.code) {\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_.hooks.run('before-highlight', env);\n\n\t\t\tif (!env.grammar) {\n\t\t\t\tinsertHighlightedCode(_.util.encode(env.code));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (async && _self.Worker) {\n\t\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\t\tworker.onmessage = function (evt) {\n\t\t\t\t\tinsertHighlightedCode(evt.data);\n\t\t\t\t};\n\n\t\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\t\tlanguage: env.language,\n\t\t\t\t\tcode: env.code,\n\t\t\t\t\timmediateClose: true\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-tokenize`\n\t\t * 2. `after-tokenize`\n\t\t * 3. `wrap`: On each {@link Token}.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\n\t\t * @returns {string} The highlighted HTML.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t\t */\n\t\thighlight: function (text, grammar, language) {\n\t\t\tvar env = {\n\t\t\t\tcode: text,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tlanguage: language\n\t\t\t};\n\t\t\t_.hooks.run('before-tokenize', env);\n\t\t\tif (!env.grammar) {\n\t\t\t\tthrow new Error('The language \"' + env.language + '\" has no grammar.');\n\t\t\t}\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t\t_.hooks.run('after-tokenize', env);\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t\t},\n\n\t\t/**\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\n\t\t *\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t\t *\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * let code = `var foo = 0;`;\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t\t * tokens.forEach(token => {\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\n\t\t *     }\n\t\t * });\n\t\t */\n\t\ttokenize: function (text, grammar) {\n\t\t\tvar rest = grammar.rest;\n\t\t\tif (rest) {\n\t\t\t\tfor (var token in rest) {\n\t\t\t\t\tgrammar[token] = rest[token];\n\t\t\t\t}\n\n\t\t\t\tdelete grammar.rest;\n\t\t\t}\n\n\t\t\tvar tokenList = new LinkedList();\n\t\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\t\treturn toArray(tokenList);\n\t\t},\n\n\t\t/**\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thooks: {\n\t\t\tall: {},\n\n\t\t\t/**\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t\t *\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t\t *\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t\t * @public\n\t\t\t */\n\t\t\tadd: function (name, callback) {\n\t\t\t\tvar hooks = _.hooks.all;\n\n\t\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\t\thooks[name].push(callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t\t *\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t\t * @public\n\t\t\t */\n\t\t\trun: function (name, env) {\n\t\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\n\t\t\t\t\tcallback(env);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tToken: Token\n\t};\n\t_self.Prism = _;\n\n\n\t// Typescript note:\n\t// The following can be used to import the Token type in JSDoc:\n\t//\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n\t/**\n\t * Creates a new token.\n\t *\n\t * @param {string} type See {@link Token#type type}\n\t * @param {string | TokenStream} content See {@link Token#content content}\n\t * @param {string|string[]} [alias] The alias(es) of the token.\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n\t * @class\n\t * @global\n\t * @public\n\t */\n\tfunction Token(type, content, alias, matchedStr) {\n\t\t/**\n\t\t * The type of the token.\n\t\t *\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\n\t\t *\n\t\t * @type {string}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.type = type;\n\t\t/**\n\t\t * The strings or tokens contained by this token.\n\t\t *\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t\t *\n\t\t * @type {string | TokenStream}\n\t\t * @public\n\t\t */\n\t\tthis.content = content;\n\t\t/**\n\t\t * The alias(es) of the token.\n\t\t *\n\t\t * @type {string|string[]}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.alias = alias;\n\t\t// Copy of the full string this token was created from\n\t\tthis.length = (matchedStr || '').length | 0;\n\t}\n\n\t/**\n\t * A token stream is an array of strings and {@link Token Token} objects.\n\t *\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n\t * them.\n\t *\n\t * 1. No adjacent strings.\n\t * 2. No empty strings.\n\t *\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\n\t *\n\t * @typedef {Array<string | Token>} TokenStream\n\t * @global\n\t * @public\n\t */\n\n\t/**\n\t * Converts the given token or token stream to an HTML representation.\n\t *\n\t * The following hooks will be run:\n\t * 1. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\n\t * @param {string} language The name of current language.\n\t * @returns {string} The HTML representation of the token or token stream.\n\t * @memberof Token\n\t * @static\n\t */\n\tToken.stringify = function stringify(o, language) {\n\t\tif (typeof o == 'string') {\n\t\t\treturn o;\n\t\t}\n\t\tif (Array.isArray(o)) {\n\t\t\tvar s = '';\n\t\t\to.forEach(function (e) {\n\t\t\t\ts += stringify(e, language);\n\t\t\t});\n\t\t\treturn s;\n\t\t}\n\n\t\tvar env = {\n\t\t\ttype: o.type,\n\t\t\tcontent: stringify(o.content, language),\n\t\t\ttag: 'span',\n\t\t\tclasses: ['token', o.type],\n\t\t\tattributes: {},\n\t\t\tlanguage: language\n\t\t};\n\n\t\tvar aliases = o.alias;\n\t\tif (aliases) {\n\t\t\tif (Array.isArray(aliases)) {\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t\t} else {\n\t\t\t\tenv.classes.push(aliases);\n\t\t\t}\n\t\t}\n\n\t\t_.hooks.run('wrap', env);\n\n\t\tvar attributes = '';\n\t\tfor (var name in env.attributes) {\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t\t}\n\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n\t};\n\n\t/**\n\t * @param {RegExp} pattern\n\t * @param {number} pos\n\t * @param {string} text\n\t * @param {boolean} lookbehind\n\t * @returns {RegExpExecArray | null}\n\t */\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\n\t\tpattern.lastIndex = pos;\n\t\tvar match = pattern.exec(text);\n\t\tif (match && lookbehind && match[1]) {\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\n\t\t\tvar lookbehindLength = match[1].length;\n\t\t\tmatch.index += lookbehindLength;\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {LinkedList<string | Token>} tokenList\n\t * @param {any} grammar\n\t * @param {LinkedListNode<string | Token>} startNode\n\t * @param {number} startPos\n\t * @param {RematchOptions} [rematch]\n\t * @returns {void}\n\t * @private\n\t *\n\t * @typedef RematchOptions\n\t * @property {string} cause\n\t * @property {number} reach\n\t */\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\t\tfor (var token in grammar) {\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar patternObj = patterns[j];\n\t\t\t\tvar inside = patternObj.inside;\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\n\t\t\t\tvar greedy = !!patternObj.greedy;\n\t\t\t\tvar alias = patternObj.alias;\n\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t\t}\n\n\t\t\t\t/** @type {RegExp} */\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t\t) {\n\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\t\t\t\t\tvar match;\n\n\t\t\t\t\tif (greedy) {\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\n\t\t\t\t\t\tif (!match || match.index >= text.length) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index;\n\t\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\t\tpos = p;\n\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\t\tk = k.next\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t\t// replace with the new match\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\n\t\t\t\t\tvar from = match.index;\n\t\t\t\t\tvar matchStr = match[0];\n\t\t\t\t\tvar before = str.slice(0, from);\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\n\n\t\t\t\t\tvar reach = pos + str.length;\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\t\trematch.reach = reach;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\n\n\t\t\t\t\t\t/** @type {RematchOptions} */\n\t\t\t\t\t\tvar nestedRematch = {\n\t\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\t\treach: reach\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef LinkedListNode\n\t * @property {T} value\n\t * @property {LinkedListNode<T> | null} prev The previous node.\n\t * @property {LinkedListNode<T> | null} next The next node.\n\t * @template T\n\t * @private\n\t */\n\n\t/**\n\t * @template T\n\t * @private\n\t */\n\tfunction LinkedList() {\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar head = { value: null, prev: null, next: null };\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar tail = { value: null, prev: head, next: null };\n\t\thead.next = tail;\n\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.head = head;\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.tail = tail;\n\t\tthis.length = 0;\n\t}\n\n\t/**\n\t * Adds a new node with the given value to the list.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {T} value\n\t * @returns {LinkedListNode<T>} The added node.\n\t * @template T\n\t */\n\tfunction addAfter(list, node, value) {\n\t\t// assumes that node != list.tail && values.length >= 0\n\t\tvar next = node.next;\n\n\t\tvar newNode = { value: value, prev: node, next: next };\n\t\tnode.next = newNode;\n\t\tnext.prev = newNode;\n\t\tlist.length++;\n\n\t\treturn newNode;\n\t}\n\t/**\n\t * Removes `count` nodes after the given node. The given node will not be removed.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {number} count\n\t * @template T\n\t */\n\tfunction removeRange(list, node, count) {\n\t\tvar next = node.next;\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\t\tnext = next.next;\n\t\t}\n\t\tnode.next = next;\n\t\tnext.prev = node;\n\t\tlist.length -= i;\n\t}\n\t/**\n\t * @param {LinkedList<T>} list\n\t * @returns {T[]}\n\t * @template T\n\t */\n\tfunction toArray(list) {\n\t\tvar array = [];\n\t\tvar node = list.head.next;\n\t\twhile (node !== list.tail) {\n\t\t\tarray.push(node.value);\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\n\tif (!_self.document) {\n\t\tif (!_self.addEventListener) {\n\t\t\t// in Node.js\n\t\t\treturn _;\n\t\t}\n\n\t\tif (!_.disableWorkerMessageHandler) {\n\t\t\t// In worker\n\t\t\t_self.addEventListener('message', function (evt) {\n\t\t\t\tvar message = JSON.parse(evt.data);\n\t\t\t\tvar lang = message.language;\n\t\t\t\tvar code = message.code;\n\t\t\t\tvar immediateClose = message.immediateClose;\n\n\t\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\n\t\t\t\tif (immediateClose) {\n\t\t\t\t\t_self.close();\n\t\t\t\t}\n\t\t\t}, false);\n\t\t}\n\n\t\treturn _;\n\t}\n\n\t// Get current script and highlight\n\tvar script = _.util.currentScript();\n\n\tif (script) {\n\t\t_.filename = script.src;\n\n\t\tif (script.hasAttribute('data-manual')) {\n\t\t\t_.manual = true;\n\t\t}\n\t}\n\n\tfunction highlightAutomaticallyCallback() {\n\t\tif (!_.manual) {\n\t\t\t_.highlightAll();\n\t\t}\n\t}\n\n\tif (!_.manual) {\n\t\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\n\t\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n\t\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n\t\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\n\t\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n\t\t// See https://github.com/PrismJS/prism/issues/2102\n\t\tvar readyState = document.readyState;\n\t\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n\t\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n\t\t} else {\n\t\t\tif (window.requestAnimationFrame) {\n\t\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\n\t\t\t} else {\n\t\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _;\n\n}(_self));\n\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof global !== 'undefined') {\n\tglobal.Prism = Prism;\n}\n\n// some additional documentation/types\n\n/**\n * The expansion of a simple `RegExp` literal to support additional properties.\n *\n * @typedef GrammarToken\n * @property {RegExp} pattern The regular expression of the token.\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\n * @property {boolean} [greedy=false] Whether the token is greedy.\n * @property {string|string[]} [alias] An optional alias or list of aliases.\n * @property {Grammar} [inside] The nested grammar of this token.\n *\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\n *\n * This can be used to make nested and even recursive language definitions.\n *\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\n * each another.\n * @global\n * @public\n */\n\n/**\n * @typedef Grammar\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\n * @global\n * @public\n */\n\n/**\n * A function which will invoked after an element was successfully highlighted.\n *\n * @callback HighlightCallback\n * @param {Element} element The element successfully highlighted.\n * @returns {void}\n * @global\n * @public\n */\n\n/**\n * @callback HookCallback\n * @param {Object<string, any>} env The environment variables of the hook.\n * @returns {void}\n * @global\n * @public\n */\n\n\n/* **********************************************\n     Begin prism-markup.js\n********************************************** */\n\nPrism.languages.markup = {\n\t'comment': {\n\t\tpattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n\t\tgreedy: true\n\t},\n\t'prolog': {\n\t\tpattern: /<\\?[\\s\\S]+?\\?>/,\n\t\tgreedy: true\n\t},\n\t'doctype': {\n\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl\n\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'internal-subset': {\n\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: null // see below\n\t\t\t},\n\t\t\t'string': {\n\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t'punctuation': /^<!|>$|[[\\]]/,\n\t\t\t'doctype-tag': /^DOCTYPE/i,\n\t\t\t'name': /[^\\s<>'\"]+/\n\t\t}\n\t},\n\t'cdata': {\n\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\tgreedy: true\n\t},\n\t'tag': {\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'special-attr': [],\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^(\\s*)[\"']|[\"']$/,\n\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': [\n\t\t{\n\t\t\tpattern: /&[\\da-z]{1,8};/i,\n\t\t\talias: 'named-entity'\n\t\t},\n\t\t/&#x?[\\da-f]{1,8};/i\n\t]\n};\n\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n\tPrism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function (env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n\t/**\n\t * Adds an inlined language to markup.\n\t *\n\t * An example of an inlined language is CSS with `<style>` tags.\n\t *\n\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addInlined('style', 'css');\n\t */\n\tvalue: function addInlined(tagName, lang) {\n\t\tvar includedCdataInside = {};\n\t\tincludedCdataInside['language-' + lang] = {\n\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n\n\t\tvar inside = {\n\t\t\t'included-cdata': {\n\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\t\t\tinside: includedCdataInside\n\t\t\t}\n\t\t};\n\t\tinside['language-' + lang] = {\n\t\t\tpattern: /[\\s\\S]+/,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\n\t\tvar def = {};\n\t\tdef[tagName] = {\n\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: inside\n\t\t};\n\n\t\tPrism.languages.insertBefore('markup', 'cdata', def);\n\t}\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n\t/**\n\t * Adds an pattern to highlight languages embedded in HTML attributes.\n\t *\n\t * An example of an inlined language is CSS with `style` attributes.\n\t *\n\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addAttribute('style', 'css');\n\t */\n\tvalue: function (attrName, lang) {\n\t\tPrism.languages.markup.tag.inside['special-attr'].push({\n\t\t\tpattern: RegExp(\n\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\n\t\t\t\t'i'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'attr-name': /^[^\\s=]+/,\n\t\t\t\t'attr-value': {\n\t\t\t\t\tpattern: /=[\\s\\S]+/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'value': {\n\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n\t\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\t\talias: [lang, 'language-' + lang],\n\t\t\t\t\t\t\tinside: Prism.languages[lang]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t/\"|'/\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n});\n\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n\n\n/* **********************************************\n     Begin prism-css.js\n********************************************** */\n\n(function (Prism) {\n\n\tvar string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n\n\tPrism.languages.css = {\n\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n\t\t'atrule': {\n\t\t\tpattern: RegExp('@[\\\\w-](?:' + /[^;{\\s\"']|\\s+(?!\\s)/.source + '|' + string.source + ')*?' + /(?:;|(?=\\s*\\{))/.source),\n\t\t\tinside: {\n\t\t\t\t'rule': /^@[\\w-]+/,\n\t\t\t\t'selector-function-argument': {\n\t\t\t\t\tpattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'selector'\n\t\t\t\t},\n\t\t\t\t'keyword': {\n\t\t\t\t\tpattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t\t// See rest below\n\t\t\t}\n\t\t},\n\t\t'url': {\n\t\t\t// https://drafts.csswg.org/css-values-3/#urls\n\t\t\tpattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^url/i,\n\t\t\t\t'punctuation': /^\\(|\\)$/,\n\t\t\t\t'string': {\n\t\t\t\t\tpattern: RegExp('^' + string.source + '$'),\n\t\t\t\t\talias: 'url'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'selector': {\n\t\t\tpattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n\t\t\tlookbehind: true\n\t\t},\n\t\t'string': {\n\t\t\tpattern: string,\n\t\t\tgreedy: true\n\t\t},\n\t\t'property': {\n\t\t\tpattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'important': /!important\\b/i,\n\t\t'function': {\n\t\t\tpattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'punctuation': /[(){};:,]/\n\t};\n\n\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\n\n\tvar markup = Prism.languages.markup;\n\tif (markup) {\n\t\tmarkup.tag.addInlined('style', 'css');\n\t\tmarkup.tag.addAttribute('style', 'css');\n\t}\n\n}(Prism));\n\n\n/* **********************************************\n     Begin prism-clike.js\n********************************************** */\n\nPrism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'punctuation': /[.\\\\]/\n\t\t}\n\t},\n\t'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n\t'boolean': /\\b(?:false|true)\\b/,\n\t'function': /\\b\\w+(?=\\()/,\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n\n\n/* **********************************************\n     Begin prism-javascript.js\n********************************************** */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n\t'class-name': [\n\t\tPrism.languages.clike['class-name'],\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'keyword': [\n\t\t{\n\t\t\tpattern: /((?:^|\\})\\s*)catch\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t],\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n\t'number': {\n\t\tpattern: RegExp(\n\t\t\t/(^|[^\\w$])/.source +\n\t\t\t'(?:' +\n\t\t\t(\n\t\t\t\t// constant\n\t\t\t\t/NaN|Infinity/.source +\n\t\t\t\t'|' +\n\t\t\t\t// binary integer\n\t\t\t\t/0[bB][01]+(?:_[01]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// octal integer\n\t\t\t\t/0[oO][0-7]+(?:_[0-7]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// hexadecimal integer\n\t\t\t\t/0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal bigint\n\t\t\t\t/\\d+(?:_\\d+)*n/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal number (integer or float) but no bigint\n\t\t\t\t/(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source\n\t\t\t) +\n\t\t\t')' +\n\t\t\t/(?![\\w$])/.source\n\t\t),\n\t\tlookbehind: true\n\t},\n\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\n\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\tpattern: RegExp(\n\t\t\t// lookbehind\n\t\t\t// eslint-disable-next-line regexp/no-dupe-characters-character-class\n\t\t\t/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)/.source +\n\t\t\t// Regex pattern:\n\t\t\t// There are 2 regex patterns here. The RegExp set notation proposal added support for nested character\n\t\t\t// classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible\n\t\t\t// with the only syntax, so we have to define 2 different regex patterns.\n\t\t\t/\\//.source +\n\t\t\t'(?:' +\n\t\t\t/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}/.source +\n\t\t\t'|' +\n\t\t\t// `v` flag syntax. This supports 3 levels of nested character classes.\n\t\t\t/(?:\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.)*\\])*\\])*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source +\n\t\t\t')' +\n\t\t\t// lookahead\n\t\t\t/(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/.source\n\t\t),\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'regex-source': {\n\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'language-regex',\n\t\t\t\tinside: Prism.languages.regex\n\t\t\t},\n\t\t\t'regex-delimiter': /^\\/|\\/$/,\n\t\t\t'regex-flags': /^[a-z]+$/,\n\t\t}\n\t},\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\n\t'function-variable': {\n\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n\t\talias: 'function'\n\t},\n\t'parameter': [\n\t\t{\n\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t}\n\t],\n\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\n\nPrism.languages.insertBefore('javascript', 'string', {\n\t'hashbang': {\n\t\tpattern: /^#!.*/,\n\t\tgreedy: true,\n\t\talias: 'comment'\n\t},\n\t'template-string': {\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'template-punctuation': {\n\t\t\t\tpattern: /^`|`$/,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t},\n\t'string-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\talias: 'property'\n\t}\n});\n\nPrism.languages.insertBefore('javascript', 'operator', {\n\t'literal-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\talias: 'property'\n\t},\n});\n\nif (Prism.languages.markup) {\n\tPrism.languages.markup.tag.addInlined('script', 'javascript');\n\n\t// add attribute support for all DOM events.\n\t// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\tPrism.languages.markup.tag.addAttribute(\n\t\t/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,\n\t\t'javascript'\n\t);\n}\n\nPrism.languages.js = Prism.languages.javascript;\n\n\n/* **********************************************\n     Begin prism-file-highlight.js\n********************************************** */\n\n(function () {\n\n\tif (typeof Prism === 'undefined' || typeof document === 'undefined') {\n\t\treturn;\n\t}\n\n\t// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n\tif (!Element.prototype.matches) {\n\t\tElement.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n\t}\n\n\tvar LOADING_MESSAGE = 'Loading…';\n\tvar FAILURE_MESSAGE = function (status, message) {\n\t\treturn '✖ Error ' + status + ' while fetching file: ' + message;\n\t};\n\tvar FAILURE_EMPTY_MESSAGE = '✖ Error: File does not exist or is empty';\n\n\tvar EXTENSIONS = {\n\t\t'js': 'javascript',\n\t\t'py': 'python',\n\t\t'rb': 'ruby',\n\t\t'ps1': 'powershell',\n\t\t'psm1': 'powershell',\n\t\t'sh': 'bash',\n\t\t'bat': 'batch',\n\t\t'h': 'c',\n\t\t'tex': 'latex'\n\t};\n\n\tvar STATUS_ATTR = 'data-src-status';\n\tvar STATUS_LOADING = 'loading';\n\tvar STATUS_LOADED = 'loaded';\n\tvar STATUS_FAILED = 'failed';\n\n\tvar SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '=\"' + STATUS_LOADED + '\"])'\n\t\t+ ':not([' + STATUS_ATTR + '=\"' + STATUS_LOADING + '\"])';\n\n\t/**\n\t * Loads the given file.\n\t *\n\t * @param {string} src The URL or path of the source file to load.\n\t * @param {(result: string) => void} success\n\t * @param {(reason: string) => void} error\n\t */\n\tfunction loadFile(src, success, error) {\n\t\tvar xhr = new XMLHttpRequest();\n\t\txhr.open('GET', src, true);\n\t\txhr.onreadystatechange = function () {\n\t\t\tif (xhr.readyState == 4) {\n\t\t\t\tif (xhr.status < 400 && xhr.responseText) {\n\t\t\t\t\tsuccess(xhr.responseText);\n\t\t\t\t} else {\n\t\t\t\t\tif (xhr.status >= 400) {\n\t\t\t\t\t\terror(FAILURE_MESSAGE(xhr.status, xhr.statusText));\n\t\t\t\t\t} else {\n\t\t\t\t\t\terror(FAILURE_EMPTY_MESSAGE);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\txhr.send(null);\n\t}\n\n\t/**\n\t * Parses the given range.\n\t *\n\t * This returns a range with inclusive ends.\n\t *\n\t * @param {string | null | undefined} range\n\t * @returns {[number, number | undefined] | undefined}\n\t */\n\tfunction parseRange(range) {\n\t\tvar m = /^\\s*(\\d+)\\s*(?:(,)\\s*(?:(\\d+)\\s*)?)?$/.exec(range || '');\n\t\tif (m) {\n\t\t\tvar start = Number(m[1]);\n\t\t\tvar comma = m[2];\n\t\t\tvar end = m[3];\n\n\t\t\tif (!comma) {\n\t\t\t\treturn [start, start];\n\t\t\t}\n\t\t\tif (!end) {\n\t\t\t\treturn [start, undefined];\n\t\t\t}\n\t\t\treturn [start, Number(end)];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tPrism.hooks.add('before-highlightall', function (env) {\n\t\tenv.selector += ', ' + SELECTOR;\n\t});\n\n\tPrism.hooks.add('before-sanity-check', function (env) {\n\t\tvar pre = /** @type {HTMLPreElement} */ (env.element);\n\t\tif (pre.matches(SELECTOR)) {\n\t\t\tenv.code = ''; // fast-path the whole thing and go to complete\n\n\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading\n\n\t\t\t// add code element with loading message\n\t\t\tvar code = pre.appendChild(document.createElement('CODE'));\n\t\t\tcode.textContent = LOADING_MESSAGE;\n\n\t\t\tvar src = pre.getAttribute('data-src');\n\n\t\t\tvar language = env.language;\n\t\t\tif (language === 'none') {\n\t\t\t\t// the language might be 'none' because there is no language set;\n\t\t\t\t// in this case, we want to use the extension as the language\n\t\t\t\tvar extension = (/\\.(\\w+)$/.exec(src) || [, 'none'])[1];\n\t\t\t\tlanguage = EXTENSIONS[extension] || extension;\n\t\t\t}\n\n\t\t\t// set language classes\n\t\t\tPrism.util.setLanguage(code, language);\n\t\t\tPrism.util.setLanguage(pre, language);\n\n\t\t\t// preload the language\n\t\t\tvar autoloader = Prism.plugins.autoloader;\n\t\t\tif (autoloader) {\n\t\t\t\tautoloader.loadLanguages(language);\n\t\t\t}\n\n\t\t\t// load file\n\t\t\tloadFile(\n\t\t\t\tsrc,\n\t\t\t\tfunction (text) {\n\t\t\t\t\t// mark as loaded\n\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADED);\n\n\t\t\t\t\t// handle data-range\n\t\t\t\t\tvar range = parseRange(pre.getAttribute('data-range'));\n\t\t\t\t\tif (range) {\n\t\t\t\t\t\tvar lines = text.split(/\\r\\n?|\\n/g);\n\n\t\t\t\t\t\t// the range is one-based and inclusive on both ends\n\t\t\t\t\t\tvar start = range[0];\n\t\t\t\t\t\tvar end = range[1] == null ? lines.length : range[1];\n\n\t\t\t\t\t\tif (start < 0) { start += lines.length; }\n\t\t\t\t\t\tstart = Math.max(0, Math.min(start - 1, lines.length));\n\t\t\t\t\t\tif (end < 0) { end += lines.length; }\n\t\t\t\t\t\tend = Math.max(0, Math.min(end, lines.length));\n\n\t\t\t\t\t\ttext = lines.slice(start, end).join('\\n');\n\n\t\t\t\t\t\t// add data-start for line numbers\n\t\t\t\t\t\tif (!pre.hasAttribute('data-start')) {\n\t\t\t\t\t\t\tpre.setAttribute('data-start', String(start + 1));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// highlight code\n\t\t\t\t\tcode.textContent = text;\n\t\t\t\t\tPrism.highlightElement(code);\n\t\t\t\t},\n\t\t\t\tfunction (error) {\n\t\t\t\t\t// mark as failed\n\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_FAILED);\n\n\t\t\t\t\tcode.textContent = error;\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t});\n\n\tPrism.plugins.fileHighlight = {\n\t\t/**\n\t\t * Executes the File Highlight plugin for all matching `pre` elements under the given container.\n\t\t *\n\t\t * Note: Elements which are already loaded or currently loading will not be touched by this method.\n\t\t *\n\t\t * @param {ParentNode} [container=document]\n\t\t */\n\t\thighlight: function highlight(container) {\n\t\t\tvar elements = (container || document).querySelectorAll(SELECTOR);\n\n\t\t\tfor (var i = 0, element; (element = elements[i++]);) {\n\t\t\t\tPrism.highlightElement(element);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar logged = false;\n\t/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */\n\tPrism.fileHighlight = function () {\n\t\tif (!logged) {\n\t\t\tconsole.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');\n\t\t\tlogged = true;\n\t\t}\n\t\tPrism.plugins.fileHighlight.highlight.apply(this, arguments);\n\t};\n\n}());\n", "const PLUGIN_ID = 'content-manager';\n\nconst PERMISSIONS = [\n  'plugin::content-manager.explorer.create',\n  'plugin::content-manager.explorer.read',\n  'plugin::content-manager.explorer.update',\n  'plugin::content-manager.explorer.delete',\n  'plugin::content-manager.explorer.publish',\n];\n\nexport { PLUGIN_ID, PERMISSIONS };\n", "import { useStrapiApp, InjectionZoneComponent } from '@strapi/admin/strapi-admin';\n\nimport { PLUGIN_ID } from '../constants/plugin';\n\nconst INJECTION_ZONES = {\n  editView: { informations: [], 'right-links': [] },\n  listView: {\n    actions: [],\n    deleteModalAdditionalInfos: [],\n    publishModalAdditionalInfos: [],\n    unpublishModalAdditionalInfos: [],\n  },\n} satisfies InjectionZones;\n\ninterface InjectionZones {\n  editView: {\n    informations: InjectionZoneComponent[];\n    'right-links': InjectionZoneComponent[];\n  };\n  listView: {\n    actions: InjectionZoneComponent[];\n    deleteModalAdditionalInfos: InjectionZoneComponent[];\n    publishModalAdditionalInfos: InjectionZoneComponent[];\n    unpublishModalAdditionalInfos: InjectionZoneComponent[];\n  };\n}\n\ntype InjectionZoneArea =\n  | 'editView.informations'\n  | 'editView.right-links'\n  | 'listView.actions'\n  | 'listView.unpublishModalAdditionalInfos'\n  | 'listView.deleteModalAdditionalInfos'\n  | 'listView.publishModalAdditionalInfos'\n  | 'listView.deleteModalAdditionalInfos';\n\ntype InjectionZoneModule = InjectionZoneArea extends `${infer Word}.${string}` ? Word : never;\ntype InjectionZoneContainer = InjectionZoneArea extends `${string}.${infer Word}.${string}`\n  ? Word\n  : never;\ntype InjectionZoneBlock = InjectionZoneArea extends `${string}.${string}.${infer Word}`\n  ? Word\n  : never;\n\n/**\n * You can't know what this component props will be because it's generic and used everywhere\n * e.g. content-manager edit view, we just send the slug but we might not in the listView,\n * therefore, people should type it themselves on the components they render.\n */\nconst InjectionZone = ({ area, ...props }: { area: InjectionZoneArea; [key: string]: unknown }) => {\n  const components = useInjectionZone(area);\n\n  return (\n    <>\n      {components.map((component) => (\n        <component.Component key={component.name} {...props} />\n      ))}\n    </>\n  );\n};\n\nexport const useInjectionZone = (area: InjectionZoneArea) => {\n  const getPlugin = useStrapiApp('useInjectionZone', (state) => state.getPlugin);\n  const contentManagerPlugin = getPlugin(PLUGIN_ID);\n  const [page, position] = area.split('.') as [InjectionZoneContainer, InjectionZoneBlock];\n\n  return contentManagerPlugin.getInjectedComponents(page, position);\n};\n\nexport { InjectionZone, INJECTION_ZONES };\n\nexport type {\n  InjectionZoneArea,\n  InjectionZoneComponent,\n  InjectionZones,\n  InjectionZoneModule,\n  InjectionZoneContainer,\n  InjectionZoneBlock,\n};\n", "const ID = 'id';\n\nconst CREATED_BY_ATTRIBUTE_NAME = 'createdBy';\nconst UPDATED_BY_ATTRIBUTE_NAME = 'updatedBy';\n\nconst CREATOR_FIELDS = [CREATED_BY_ATTRIBUTE_NAME, UPDATED_BY_ATTRIBUTE_NAME];\n\nconst PUBLISHED_BY_ATTRIBUTE_NAME = 'publishedBy';\nconst CREATED_AT_ATTRIBUTE_NAME = 'createdAt';\nconst UPDATED_AT_ATTRIBUTE_NAME = 'updatedAt';\nconst PUBLISHED_AT_ATTRIBUTE_NAME = 'publishedAt';\n\nconst DOCUMENT_META_FIELDS = [\n  ID,\n  ...CREATOR_FIELDS,\n  PUBLISHED_BY_ATTRIBUTE_NAME,\n  CREATED_AT_ATTRIBUTE_NAME,\n  UPDATED_AT_ATTRIBUTE_NAME,\n  PUBLISHED_AT_ATTRIBUTE_NAME,\n];\n\n/**\n * List of attribute types that cannot be used as the main field.\n * Not sure the name could be any clearer.\n */\nconst ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD = [\n  'dynamiczone',\n  'json',\n  'text',\n  'relation',\n  'component',\n  'boolean',\n  'media',\n  'password',\n  'richtext',\n  'timestamp',\n  'blocks',\n];\n\nexport {\n  ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD,\n  CREATED_AT_ATTRIBUTE_NAME,\n  UPDATED_AT_ATTRIBUTE_NAME,\n  PUBLISHED_AT_ATTRIBUTE_NAME,\n  CREATED_BY_ATTRIBUTE_NAME,\n  UPDATED_BY_ATTRIBUTE_NAME,\n  PUBLISHED_BY_ATTRIBUTE_NAME,\n  CREATOR_FIELDS,\n  DOCUMENT_META_FIELDS,\n};\n", "const SINGLE_TYPES = 'single-types';\nconst COLLECTION_TYPES = 'collection-types';\n\nexport { SINGLE_TYPES, COLLECTION_TYPES };\n", "import * as React from 'react';\n\nimport {\n  useRBAC,\n  useAuth,\n  type Permission,\n  createContext,\n  Page,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport { useParams } from 'react-router-dom';\n\nimport type { Schema } from '@strapi/types';\n\n/**\n * The boolean values indicate the global actions a user can perform on the document.\n * The `string[]` values tell us specifically which fields the actions can be performed on,\n * for example, if the `canReadFields` array is empty, than no fields can be read by the user.\n * This can happen even if the user can read the document.\n */\ninterface DocumentRBACContextValue {\n  canCreate?: boolean;\n  canCreateFields: string[];\n  canDelete?: boolean;\n  canPublish?: boolean;\n  canRead?: boolean;\n  canReadFields: string[];\n  canUpdate?: boolean;\n  canUpdateFields: string[];\n  canUserAction: (\n    fieldName: string,\n    fieldsUserCanAction: string[],\n    fieldType: Schema.Attribute.Kind\n  ) => boolean;\n  isLoading: boolean;\n}\n\nconst [DocumentRBACProvider, useDocumentRBAC] = createContext<DocumentRBACContextValue>(\n  'DocumentRBAC',\n  {\n    canCreate: false,\n    canCreateFields: [],\n    canDelete: false,\n    canPublish: false,\n    canRead: false,\n    canReadFields: [],\n    canUpdate: false,\n    canUpdateFields: [],\n    canUserAction: () => false,\n    isLoading: false,\n  }\n);\n\ninterface DocumentRBACProps {\n  children: React.ReactNode;\n  permissions: Permission[] | null;\n}\n\n/**\n * @internal This component is not meant to be used outside of the Content Manager plugin.\n * It depends on knowing the slug/model of the content-type using the params of the URL.\n * If you do use the hook outside of the context, we default to `false` for all actions.\n *\n * It then creates an list of `can{Action}` that are passed to the context for consumption\n * within the app to enforce RBAC.\n */\nconst DocumentRBAC = ({ children, permissions }: DocumentRBACProps) => {\n  const { slug } = useParams<{ slug: string }>();\n\n  if (!slug) {\n    throw new Error('Cannot find the slug param in the URL');\n  }\n  const [{ rawQuery }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\n\n  const userPermissions = useAuth('DocumentRBAC', (state) => state.permissions);\n\n  const contentTypePermissions = React.useMemo(() => {\n    const contentTypePermissions = userPermissions.filter(\n      (permission) => permission.subject === slug\n    );\n    return contentTypePermissions.reduce<Record<string, Permission[]>>((acc, permission) => {\n      const [action] = permission.action.split('.').slice(-1);\n      return { ...acc, [action]: [permission] };\n    }, {});\n  }, [slug, userPermissions]);\n\n  const { isLoading, allowedActions } = useRBAC(\n    contentTypePermissions,\n    permissions ?? undefined,\n    // TODO: useRBAC context should be typed and built differently\n    // We are passing raw query as context to the hook so that it can\n    // rely on the locale provided from DocumentRBAC for its permission calculations.\n    rawQuery\n  );\n\n  const canCreateFields =\n    !isLoading && allowedActions.canCreate\n      ? extractAndDedupeFields(contentTypePermissions.create)\n      : [];\n\n  const canReadFields =\n    !isLoading && allowedActions.canRead ? extractAndDedupeFields(contentTypePermissions.read) : [];\n\n  const canUpdateFields =\n    !isLoading && allowedActions.canUpdate\n      ? extractAndDedupeFields(contentTypePermissions.update)\n      : [];\n\n  /**\n   * @description Checks if the user can perform an action on a field based on the field names\n   * provided as the second argument.\n   */\n  const canUserAction: DocumentRBACContextValue['canUserAction'] = React.useCallback(\n    (fieldName, fieldsUserCanAction, fieldType) => {\n      const name = removeNumericalStrings(fieldName.split('.'));\n\n      const componentFieldNames = fieldsUserCanAction\n        // filter out fields that aren't components (components are dot separated)\n        .filter((field) => field.split('.').length > 1);\n\n      if (fieldType === 'component') {\n        // check if the field name is within any of those arrays\n        return componentFieldNames.some((field) => {\n          return field.includes(name.join('.'));\n        });\n      }\n\n      /**\n       * The field is within a component.\n       */\n      if (name.length > 1) {\n        return componentFieldNames.includes(name.join('.'));\n      }\n\n      /**\n       * just a regular field\n       */\n      return fieldsUserCanAction.includes(fieldName);\n    },\n    []\n  );\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <DocumentRBACProvider\n      isLoading={isLoading}\n      canCreateFields={canCreateFields}\n      canReadFields={canReadFields}\n      canUpdateFields={canUpdateFields}\n      canUserAction={canUserAction}\n      {...allowedActions}\n    >\n      {children}\n    </DocumentRBACProvider>\n  );\n};\n\n/**\n * @internal it's really small, but it's used three times in a row and DRY for something this straight forward.\n */\nconst extractAndDedupeFields = (permissions: Permission[] = []) =>\n  permissions\n    .flatMap((permission) => permission.properties?.fields)\n    .filter(\n      (field, index, arr): field is string =>\n        arr.indexOf(field) === index && typeof field === 'string'\n    );\n\n/**\n * @internal removes numerical strings from arrays.\n * @example\n * ```ts\n * const name = 'a.0.b';\n * const res = removeNumericalStrings(name.split('.'));\n * console.log(res); // ['a', 'b']\n * ```\n */\nconst removeNumericalStrings = (arr: string[]) => arr.filter((item) => isNaN(Number(item)));\n\nexport { DocumentRBAC, useDocumentRBAC, DocumentRBACContextValue, DocumentRBACProps };\n", "import { generateNKeysBetween } from 'fractional-indexing';\nimport pipe from 'lodash/fp/pipe';\n\nimport { DOCUMENT_META_FIELDS } from '../../../constants/attributes';\n\nimport type { ComponentsDictionary, Document } from '../../../hooks/useDocument';\nimport type { Schema, UID } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * traverseData\n * -----------------------------------------------------------------------------------------------*/\n\n// Make only attributes required since it's the only one Content History has\ntype PartialSchema = Partial<Schema.Schema> & Pick<Schema.Schema, 'attributes'>;\n\ntype Predicate = <TAttribute extends Schema.Attribute.AnyAttribute>(\n  attribute: TAttribute,\n  value: Schema.Attribute.Value<TAttribute>\n) => boolean;\ntype Transform = <TAttribute extends Schema.Attribute.AnyAttribute>(\n  value: any,\n  attribute: TAttribute\n) => any;\ntype AnyData = Omit<Document, 'id'>;\n\nconst BLOCK_LIST_ATTRIBUTE_KEYS = ['__component', '__temp_key__'];\n\n/**\n * @internal This function is used to traverse the data and transform the values.\n * Given a predicate function, it will transform the value (using the given transform function)\n * if the predicate returns true. If it finds that the attribute is a component or dynamiczone,\n * it will recursively traverse those data structures as well.\n *\n * It is possible to break the ContentManager by using this function incorrectly, for example,\n * if you transform a number into a string but the attribute type is a number, the ContentManager\n * will not be able to save the data and the Form will likely crash because the component it's\n * passing the data too won't succesfully be able to handle the value.\n */\nconst traverseData =\n  (predicate: Predicate, transform: Transform) =>\n  (schema: PartialSchema, components: ComponentsDictionary = {}) =>\n  (data: AnyData = {}) => {\n    const traverse = (datum: AnyData, attributes: Schema.Schema['attributes']) => {\n      return Object.entries(datum).reduce<AnyData>((acc, [key, value]) => {\n        const attribute = attributes[key];\n\n        /**\n         * If the attribute is a block list attribute, we don't want to transform it.\n         * We also don't want to transform null or undefined values.\n         */\n        if (BLOCK_LIST_ATTRIBUTE_KEYS.includes(key) || value === null || value === undefined) {\n          acc[key] = value;\n          return acc;\n        }\n\n        if (attribute.type === 'component') {\n          if (attribute.repeatable) {\n            const componentValue = (\n              predicate(attribute, value) ? transform(value, attribute) : value\n            ) as Schema.Attribute.Value<Schema.Attribute.Component<UID.Component, true>>;\n            acc[key] = componentValue.map((componentData) =>\n              traverse(componentData, components[attribute.component]?.attributes ?? {})\n            );\n          } else {\n            const componentValue = (\n              predicate(attribute, value) ? transform(value, attribute) : value\n            ) as Schema.Attribute.Value<Schema.Attribute.Component<UID.Component, false>>;\n\n            acc[key] = traverse(componentValue, components[attribute.component]?.attributes ?? {});\n          }\n        } else if (attribute.type === 'dynamiczone') {\n          const dynamicZoneValue = (\n            predicate(attribute, value) ? transform(value, attribute) : value\n          ) as Schema.Attribute.Value<Schema.Attribute.DynamicZone>;\n\n          acc[key] = dynamicZoneValue.map((componentData) =>\n            traverse(componentData, components[componentData.__component]?.attributes ?? {})\n          );\n        } else if (predicate(attribute, value)) {\n          acc[key] = transform(value, attribute);\n        } else {\n          acc[key] = value;\n        }\n\n        return acc;\n      }, {});\n    };\n\n    return traverse(data, schema.attributes);\n  };\n\n/* -------------------------------------------------------------------------------------------------\n * removeProhibitedFields\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal Removes all the fields that are not allowed.\n */\nconst removeProhibitedFields = (prohibitedFields: Schema.Attribute.Kind[]) =>\n  traverseData(\n    (attribute) => prohibitedFields.includes(attribute.type),\n    () => ''\n  );\n\n/* -------------------------------------------------------------------------------------------------\n * prepareRelations\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n * @description Sets all relation values to an empty array.\n */\nconst prepareRelations = traverseData(\n  (attribute) => attribute.type === 'relation',\n  () => ({\n    connect: [],\n    disconnect: [],\n  })\n);\n\n/* -------------------------------------------------------------------------------------------------\n * prepareTempKeys\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n * @description Adds a `__temp_key__` to each component and dynamiczone item. This gives us\n * a stable identifier regardless of its ids etc. that we can then use for drag and drop.\n */\nconst prepareTempKeys = traverseData(\n  (attribute) =>\n    (attribute.type === 'component' && attribute.repeatable) || attribute.type === 'dynamiczone',\n  (data) => {\n    if (Array.isArray(data) && data.length > 0) {\n      const keys = generateNKeysBetween(undefined, undefined, data.length);\n\n      return data.map((datum, index) => ({\n        ...datum,\n        __temp_key__: keys[index],\n      }));\n    }\n\n    return data;\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * removeFieldsThatDontExistOnSchema\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n * @description Fields that don't exist in the schema like createdAt etc. are only on the first level (not nested),\n * as such we don't need to traverse the components to remove them.\n */\nconst removeFieldsThatDontExistOnSchema = (schema: PartialSchema) => (data: AnyData) => {\n  const schemaKeys = Object.keys(schema.attributes);\n  const dataKeys = Object.keys(data);\n\n  const keysToRemove = dataKeys.filter((key) => !schemaKeys.includes(key));\n\n  const revisedData = [...keysToRemove, ...DOCUMENT_META_FIELDS].reduce((acc, key) => {\n    delete acc[key];\n\n    return acc;\n  }, structuredClone(data));\n\n  return revisedData;\n};\n\n/**\n * @internal\n * @description We need to remove null fields from the data-structure because it will pass it\n * to the specific inputs breaking them as most would prefer empty strings or `undefined` if\n * they're controlled / uncontrolled.\n */\nconst removeNullValues = (data: AnyData) => {\n  return Object.entries(data).reduce<AnyData>((acc, [key, value]) => {\n    if (value === null) {\n      return acc;\n    }\n\n    acc[key] = value;\n\n    return acc;\n  }, {});\n};\n\n/* -------------------------------------------------------------------------------------------------\n * transformDocuments\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n * @description Takes a document data structure (this could be from the API or a default form structure)\n * and applies consistent data transformations to it. This is also used when we add new components to the\n * form to ensure the data is correctly prepared from their default state e.g. relations are set to an empty array.\n */\nconst transformDocument =\n  (schema: PartialSchema, components: ComponentsDictionary = {}) =>\n  (document: AnyData) => {\n    const transformations = pipe(\n      removeFieldsThatDontExistOnSchema(schema),\n      removeProhibitedFields(['password'])(schema, components),\n      removeNullValues,\n      prepareRelations(schema, components),\n      prepareTempKeys(schema, components)\n    );\n\n    return transformations(document);\n  };\n\nexport {\n  removeProhibitedFields,\n  prepareRelations,\n  prepareTempKeys,\n  removeFieldsThatDontExistOnSchema,\n  transformDocument,\n};\nexport type { AnyData };\n", "import type { ComponentsDictionary, Document } from '../../../hooks/useDocument';\nimport type { Schema } from '@strapi/types';\n\ntype AnyData = Omit<Document, 'id'>;\n\n/* -------------------------------------------------------------------------------------------------\n * createDefaultForm\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal Using the content-type schema & the components dictionary of the content-type,\n * creates a form with pre-filled default values. This is used when creating a new entry.\n */\nconst createDefaultForm = (\n  contentType: Schema.Schema,\n  components: ComponentsDictionary = {}\n): AnyData => {\n  const traverseSchema = (attributes: Schema.Schema['attributes']): AnyData => {\n    return Object.entries(attributes).reduce<AnyData>((acc, [key, attribute]) => {\n      if ('default' in attribute) {\n        acc[key] = attribute.default;\n      } else if (attribute.type === 'component' && attribute.required) {\n        const defaultComponentForm = traverseSchema(components[attribute.component].attributes);\n\n        if (attribute.repeatable) {\n          acc[key] = attribute.min ? [...Array(attribute.min).fill(defaultComponentForm)] : [];\n        } else {\n          acc[key] = defaultComponentForm;\n        }\n      } else if (attribute.type === 'dynamiczone' && attribute.required) {\n        acc[key] = [];\n      }\n\n      return acc;\n    }, {});\n  };\n\n  return traverseSchema(contentType.attributes);\n};\n\nexport { createDefaultForm };\n", "import { adminApi } from '@strapi/admin/strapi-admin';\n\nconst contentManagerApi = adminApi.enhanceEndpoints({\n  addTagTypes: [\n    'ComponentConfiguration',\n    'ContentTypesConfiguration',\n    'ContentTypeSettings',\n    'Document',\n    'InitialData',\n    'HistoryVersion',\n    'Relations',\n    'UidAvailability',\n    'RecentDocumentList',\n  ],\n});\n\nexport { contentManagerApi };\n", "/**\n * Related to fetching the actual content of a collection type or single type.\n */\nimport { stringify } from 'qs';\n\nimport { SINGLE_TYPES } from '../constants/collections';\n\nimport { contentManagerApi } from './api';\n\nimport type {\n  Clone,\n  Create,\n  Delete,\n  Find,\n  FindOne,\n  BulkDelete,\n  BulkPublish,\n  BulkUnpublish,\n  Discard,\n  CountDraftRelations,\n  CountManyEntriesDraftRelations,\n  Publish,\n  Unpublish,\n  Update,\n} from '../../../shared/contracts/collection-types';\n\nconst documentApi = contentManagerApi.injectEndpoints({\n  overrideExisting: true,\n  endpoints: (builder) => ({\n    autoCloneDocument: builder.mutation<Clone.Response, Clone.Params & { query?: string }>({\n      query: ({ model, sourceId, query }) => ({\n        url: `/content-manager/collection-types/${model}/auto-clone/${sourceId}`,\n        method: 'POST',\n        config: {\n          params: query,\n        },\n      }),\n      invalidatesTags: (_result, error, { model }) => {\n        if (error) {\n          return [];\n        }\n\n        return [{ type: 'Document', id: `${model}_LIST` }, 'RecentDocumentList'];\n      },\n    }),\n    cloneDocument: builder.mutation<\n      Clone.Response,\n      Clone.Params & {\n        data: Clone.Request['body'];\n        params?: Clone.Request['query'];\n      }\n    >({\n      query: ({ model, sourceId, data, params }) => ({\n        url: `/content-manager/collection-types/${model}/clone/${sourceId}`,\n        method: 'POST',\n        data,\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (_result, _error, { model }) => [\n        { type: 'Document', id: `${model}_LIST` },\n        { type: 'UidAvailability', id: model },\n        'RecentDocumentList',\n      ],\n    }),\n    /**\n     * Creates a new collection-type document. This should ONLY be used for collection-types.\n     * single-types should always be using `updateDocument` since they always exist.\n     */\n    createDocument: builder.mutation<\n      Create.Response,\n      Create.Params & {\n        data: Create.Request['body'];\n        params?: Create.Request['query'];\n      }\n    >({\n      query: ({ model, data, params }) => ({\n        url: `/content-manager/collection-types/${model}`,\n        method: 'POST',\n        data,\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (result, _error, { model }) => [\n        { type: 'Document', id: `${model}_LIST` },\n        'Relations',\n        { type: 'UidAvailability', id: model },\n        'RecentDocumentList',\n      ],\n      transformResponse: (response: Create.Response, meta, arg): Create.Response => {\n        /**\n         * TODO v6\n         * Adapt plugin:users-permissions.user to return the same response\n         * shape as all other requests. The error is returned as expected.\n         */\n        if (!('data' in response) && arg.model === 'plugin::users-permissions.user') {\n          return {\n            data: response,\n            meta: {\n              availableStatus: [],\n              availableLocales: [],\n            },\n          };\n        }\n\n        return response;\n      },\n    }),\n    deleteDocument: builder.mutation<\n      Delete.Response,\n      Pick<Delete.Params, 'model'> &\n        Pick<Partial<Delete.Params>, 'documentId'> & {\n          collectionType: string;\n          params?: Find.Request['query'];\n        }\n    >({\n      query: ({ collectionType, model, documentId, params }) => ({\n        url: `/content-manager/${collectionType}/${model}${\n          collectionType !== SINGLE_TYPES && documentId ? `/${documentId}` : ''\n        }`,\n        method: 'DELETE',\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (_result, _error, { collectionType, model }) => [\n        { type: 'Document', id: collectionType !== SINGLE_TYPES ? `${model}_LIST` : model },\n        'RecentDocumentList',\n      ],\n    }),\n    deleteManyDocuments: builder.mutation<\n      BulkDelete.Response,\n      BulkDelete.Params & BulkDelete.Request['body'] & { params?: Find.Request['query'] }\n    >({\n      query: ({ model, params, ...body }) => ({\n        url: `/content-manager/collection-types/${model}/actions/bulkDelete`,\n        method: 'POST',\n        data: body,\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (_res, _error, { model }) => [\n        { type: 'Document', id: `${model}_LIST` },\n        'RecentDocumentList',\n      ],\n    }),\n    discardDocument: builder.mutation<\n      Discard.Response,\n      Pick<Discard.Params, 'model'> &\n        Partial<Pick<Discard.Params, 'documentId'>> & {\n          collectionType: string;\n          params?: Find.Request['query'] & {\n            [key: string]: any;\n          };\n        }\n    >({\n      query: ({ collectionType, model, documentId, params }) => ({\n        url: documentId\n          ? `/content-manager/${collectionType}/${model}/${documentId}/actions/discard`\n          : `/content-manager/${collectionType}/${model}/actions/discard`,\n        method: 'POST',\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (_result, _error, { collectionType, model, documentId }) => {\n        return [\n          {\n            type: 'Document',\n            id: collectionType !== SINGLE_TYPES ? `${model}_${documentId}` : model,\n          },\n          { type: 'Document', id: `${model}_LIST` },\n          'Relations',\n          { type: 'UidAvailability', id: model },\n          'RecentDocumentList',\n        ];\n      },\n    }),\n    /**\n     * Gets all documents of a collection type or single type.\n     * By passing different params you can get different results e.g. only published documents or 'es' documents.\n     */\n    getAllDocuments: builder.query<\n      Find.Response,\n      Find.Params & {\n        params?: Find.Request['query'] & {\n          [key: string]: any;\n        };\n      }\n    >({\n      query: ({ model, params }) => ({\n        url: `/content-manager/collection-types/${model}`,\n        method: 'GET',\n        config: {\n          params: stringify(params, { encode: true }),\n        },\n      }),\n      providesTags: (result, _error, arg) => {\n        return [\n          { type: 'Document', id: `ALL_LIST` },\n          { type: 'Document', id: `${arg.model}_LIST` },\n          ...(result?.results.map(({ documentId }) => ({\n            type: 'Document' as const,\n            id: `${arg.model}_${documentId}`,\n          })) ?? []),\n        ];\n      },\n    }),\n    getDraftRelationCount: builder.query<\n      CountDraftRelations.Response,\n      {\n        collectionType: string;\n        model: string;\n        /**\n         * You don't pass the documentId if the document is a single-type\n         */\n        documentId?: string;\n        params?: CountDraftRelations.Request['query'];\n      }\n    >({\n      query: ({ collectionType, model, documentId, params }) => ({\n        url: documentId\n          ? `/content-manager/${collectionType}/${model}/${documentId}/actions/countDraftRelations`\n          : `/content-manager/${collectionType}/${model}/actions/countDraftRelations`,\n        method: 'GET',\n        config: {\n          params,\n        },\n      }),\n    }),\n    getDocument: builder.query<\n      FindOne.Response,\n      Pick<FindOne.Params, 'model'> &\n        Partial<Pick<FindOne.Params, 'documentId'>> & {\n          collectionType: string;\n          params?: FindOne.Request['query'];\n        }\n    >({\n      // @ts-expect-error – TODO: fix ts error where data unknown doesn't work with response via an assertion?\n      queryFn: async (\n        { collectionType, model, documentId, params },\n        _api,\n        _extraOpts,\n        baseQuery\n      ) => {\n        const res = await baseQuery({\n          url: `/content-manager/${collectionType}/${model}${documentId ? `/${documentId}` : ''}`,\n          method: 'GET',\n          config: {\n            params,\n          },\n        });\n\n        /**\n         * To stop the query from locking itself in multiple retries, we intercept the error here and manage correctly.\n         * This is because single-types don't have a list view and fetching them with the route `/single-types/:model`\n         * never returns a list, just a single document but this won't exist if you've not made one before.\n         */\n        if (res.error && res.error.name === 'NotFoundError' && collectionType === SINGLE_TYPES) {\n          return { data: { document: undefined }, error: undefined };\n        }\n\n        return res;\n      },\n      providesTags: (result, _error, { collectionType, model, documentId }) => {\n        return [\n          // we prefer the result's id because we don't fetch single-types with an ID.\n          {\n            type: 'Document',\n            id:\n              collectionType !== SINGLE_TYPES\n                ? `${model}_${result && 'documentId' in result ? result.documentId : documentId}`\n                : model,\n          },\n          // Make it easy to invalidate all individual documents queries for a model\n          {\n            type: 'Document',\n            id: `${model}_ALL_ITEMS`,\n          },\n        ];\n      },\n    }),\n    getManyDraftRelationCount: builder.query<\n      CountManyEntriesDraftRelations.Response['data'],\n      CountManyEntriesDraftRelations.Request['query'] & {\n        model: string;\n      }\n    >({\n      query: ({ model, ...params }) => ({\n        url: `/content-manager/collection-types/${model}/actions/countManyEntriesDraftRelations`,\n        method: 'GET',\n        config: {\n          params,\n        },\n      }),\n      transformResponse: (response: CountManyEntriesDraftRelations.Response) => response.data,\n    }),\n    /**\n     * This endpoint will either create or update documents at the same time as publishing.\n     */\n    publishDocument: builder.mutation<\n      Publish.Response,\n      Pick<Publish.Params, 'model'> &\n        Partial<Pick<Publish.Params, 'documentId'>> & {\n          collectionType: string;\n          data: Publish.Request['body'];\n          params?: Publish.Request['query'];\n        }\n    >({\n      query: ({ collectionType, model, documentId, params, data }) => ({\n        url: documentId\n          ? `/content-manager/${collectionType}/${model}/${documentId}/actions/publish`\n          : `/content-manager/${collectionType}/${model}/actions/publish`,\n        method: 'POST',\n        data,\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (_result, _error, { collectionType, model, documentId }) => {\n        return [\n          {\n            type: 'Document',\n            id: collectionType !== SINGLE_TYPES ? `${model}_${documentId}` : model,\n          },\n          { type: 'Document', id: `${model}_LIST` },\n          'Relations',\n          'RecentDocumentList',\n        ];\n      },\n    }),\n    publishManyDocuments: builder.mutation<\n      BulkPublish.Response,\n      BulkPublish.Params & BulkPublish.Request['body'] & { params?: BulkPublish.Request['query'] }\n    >({\n      query: ({ model, params, ...body }) => ({\n        url: `/content-manager/collection-types/${model}/actions/bulkPublish`,\n        method: 'POST',\n        data: body,\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (_res, _error, { model, documentIds }) =>\n        documentIds.map((id) => ({ type: 'Document', id: `${model}_${id}` })),\n    }),\n    updateDocument: builder.mutation<\n      Update.Response,\n      Pick<Update.Params, 'model'> &\n        Partial<Pick<Update.Params, 'documentId'>> & {\n          collectionType: string;\n          data: Update.Request['body'];\n          params?: Update.Request['query'];\n        }\n    >({\n      query: ({ collectionType, model, documentId, data, params }) => ({\n        url: `/content-manager/${collectionType}/${model}${documentId ? `/${documentId}` : ''}`,\n        method: 'PUT',\n        data,\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (_result, _error, { collectionType, model, documentId }) => {\n        return [\n          {\n            type: 'Document',\n            id: collectionType !== SINGLE_TYPES ? `${model}_${documentId}` : model,\n          },\n          'Relations',\n          { type: 'UidAvailability', id: model },\n          'RecentDocumentList',\n          'RecentDocumentList',\n        ];\n      },\n      async onQueryStarted({ data, ...patch }, { dispatch, queryFulfilled }) {\n        // Optimistically update the cache with the new data\n        const patchResult = dispatch(\n          documentApi.util.updateQueryData('getDocument', patch, (draft) => {\n            Object.assign(draft.data, data);\n          })\n        );\n        try {\n          await queryFulfilled;\n        } catch {\n          // Rollback the optimistic update if there's an error\n          patchResult.undo();\n        }\n      },\n    }),\n    unpublishDocument: builder.mutation<\n      Unpublish.Response,\n      Pick<Unpublish.Params, 'model'> &\n        Partial<Pick<Unpublish.Params, 'documentId'>> & {\n          collectionType: string;\n          params?: Unpublish.Request['query'];\n          data: Unpublish.Request['body'];\n        }\n    >({\n      query: ({ collectionType, model, documentId, params, data }) => ({\n        url: documentId\n          ? `/content-manager/${collectionType}/${model}/${documentId}/actions/unpublish`\n          : `/content-manager/${collectionType}/${model}/actions/unpublish`,\n        method: 'POST',\n        data,\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (_result, _error, { collectionType, model, documentId }) => {\n        return [\n          {\n            type: 'Document',\n            id: collectionType !== SINGLE_TYPES ? `${model}_${documentId}` : model,\n          },\n          'RecentDocumentList',\n        ];\n      },\n    }),\n    unpublishManyDocuments: builder.mutation<\n      BulkUnpublish.Response,\n      Pick<BulkUnpublish.Params, 'model'> &\n        BulkUnpublish.Request['body'] & {\n          params?: BulkUnpublish.Request['query'];\n        }\n    >({\n      query: ({ model, params, ...body }) => ({\n        url: `/content-manager/collection-types/${model}/actions/bulkUnpublish`,\n        method: 'POST',\n        data: body,\n        config: {\n          params,\n        },\n      }),\n      invalidatesTags: (_res, _error, { model, documentIds }) => [\n        ...documentIds.map((id) => ({ type: 'Document' as const, id: `${model}_${id}` })),\n        'RecentDocumentList',\n      ],\n    }),\n  }),\n});\n\nconst {\n  useAutoCloneDocumentMutation,\n  useCloneDocumentMutation,\n  useCreateDocumentMutation,\n  useDeleteDocumentMutation,\n  useDeleteManyDocumentsMutation,\n  useDiscardDocumentMutation,\n  useGetAllDocumentsQuery,\n  useLazyGetDocumentQuery,\n  useGetDocumentQuery,\n  useLazyGetDraftRelationCountQuery,\n  useGetManyDraftRelationCountQuery,\n  usePublishDocumentMutation,\n  usePublishManyDocumentsMutation,\n  useUpdateDocumentMutation,\n  useUnpublishDocumentMutation,\n  useUnpublishManyDocumentsMutation,\n} = documentApi;\n\nexport {\n  useAutoCloneDocumentMutation,\n  useCloneDocumentMutation,\n  useCreateDocumentMutation,\n  useDeleteDocumentMutation,\n  useDeleteManyDocumentsMutation,\n  useDiscardDocumentMutation,\n  useGetAllDocumentsQuery,\n  useLazyGetDocumentQuery,\n  useGetDocumentQuery,\n  useLazyGetDraftRelationCountQuery as useGetDraftRelationCountQuery,\n  useGetManyDraftRelationCountQuery,\n  usePublishDocumentMutation,\n  usePublishManyDocumentsMutation,\n  useUpdateDocumentMutation,\n  useUnpublishDocumentMutation,\n  useUnpublishManyDocumentsMutation,\n};\n", "import { SerializedError } from '@reduxjs/toolkit';\nimport { ApiError, type UnknownApiError } from '@strapi/admin/strapi-admin';\n\ninterface Query {\n  plugins?: Record<string, unknown>;\n  _q?: string;\n  [key: string]: any;\n}\n\n/**\n * This type extracts the plugin options from the query\n * and appends them to the root of the query\n */\ntype TransformedQuery<TQuery extends Query> = Omit<TQuery, 'plugins'> & {\n  [key: string]: string;\n};\n\n/**\n * @description\n * Creates a valid query params object for get requests\n * ie. plugins[18n][locale]=en becomes locale=en\n */\nconst buildValidParams = <TQuery extends Query>(query: TQuery): TransformedQuery<TQuery> => {\n  if (!query) return query;\n\n  // Extract pluginOptions from the query, they shouldn't be part of the URL\n  const { plugins: _, ...validQueryParams } = {\n    ...query,\n    ...Object.values(query?.plugins ?? {}).reduce<Record<string, string>>(\n      (acc, current) => Object.assign(acc, current),\n      {}\n    ),\n  };\n\n  return validQueryParams;\n};\n\ntype BaseQueryError = ApiError | UnknownApiError;\n\nconst isBaseQueryError = (error: BaseQueryError | SerializedError): error is BaseQueryError => {\n  return error.name !== undefined;\n};\n\nexport { isBaseQueryError, buildValidParams };\nexport type { BaseQueryError, UnknownApiError };\n", "import { translatedErrors } from '@strapi/admin/strapi-admin';\nimport pipe from 'lodash/fp/pipe';\nimport * as yup from 'yup';\n\nimport { DOCUMENT_META_FIELDS } from '../constants/attributes';\n\nimport type { ComponentsDictionary, Schema } from '../hooks/useDocument';\nimport type { Schema as SchemaUtils } from '@strapi/types';\nimport type { ObjectShape } from 'yup/lib/object';\n\ntype AnySchema =\n  | yup.StringSchema\n  | yup.NumberSchema\n  | yup.BooleanSchema\n  | yup.DateSchema\n  | yup.ArraySchema<any>\n  | yup.ObjectSchema<any>;\n\n/* -------------------------------------------------------------------------------------------------\n * createYupSchema\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ValidationOptions {\n  status: 'draft' | 'published' | null;\n}\n\nconst arrayValidator = (attribute: Schema['attributes'][string], options: ValidationOptions) => ({\n  message: translatedErrors.required,\n  test(value: unknown) {\n    if (options.status === 'draft') {\n      return true;\n    }\n\n    if (!attribute.required) {\n      return true;\n    }\n\n    if (!value) {\n      return false;\n    }\n\n    if (Array.isArray(value) && value.length === 0) {\n      return false;\n    }\n\n    return true;\n  },\n});\n\n/**\n * TODO: should we create a Map to store these based on the hash of the schema?\n */\nconst createYupSchema = (\n  attributes: Schema['attributes'] = {},\n  components: ComponentsDictionary = {},\n  options: ValidationOptions = { status: null }\n): yup.ObjectSchema<any> => {\n  const createModelSchema = (attributes: Schema['attributes']): yup.ObjectSchema<any> =>\n    yup\n      .object()\n      .shape(\n        Object.entries(attributes).reduce<ObjectShape>((acc, [name, attribute]) => {\n          if (DOCUMENT_META_FIELDS.includes(name)) {\n            return acc;\n          }\n\n          /**\n           * These validations won't apply to every attribute\n           * and that's okay, in that case we just return the\n           * schema as it was passed.\n           */\n          const validations = [\n            addNullableValidation,\n            addRequiredValidation,\n            addMinLengthValidation,\n            addMaxLengthValidation,\n            addMinValidation,\n            addMaxValidation,\n            addRegexValidation,\n          ].map((fn) => fn(attribute, options));\n\n          const transformSchema = pipe(...validations);\n\n          switch (attribute.type) {\n            case 'component': {\n              const { attributes } = components[attribute.component];\n\n              if (attribute.repeatable) {\n                return {\n                  ...acc,\n                  [name]: transformSchema(\n                    yup.array().of(createModelSchema(attributes).nullable(false))\n                  ).test(arrayValidator(attribute, options)),\n                };\n              } else {\n                return {\n                  ...acc,\n                  [name]: transformSchema(createModelSchema(attributes).nullable()),\n                };\n              }\n            }\n            case 'dynamiczone':\n              return {\n                ...acc,\n                [name]: transformSchema(\n                  yup.array().of(\n                    yup.lazy(\n                      (\n                        data: SchemaUtils.Attribute.Value<SchemaUtils.Attribute.DynamicZone>[number]\n                      ) => {\n                        const attributes = components?.[data?.__component]?.attributes;\n\n                        const validation = yup\n                          .object()\n                          .shape({\n                            __component: yup.string().required().oneOf(Object.keys(components)),\n                          })\n                          .nullable(false);\n                        if (!attributes) {\n                          return validation;\n                        }\n\n                        return validation.concat(createModelSchema(attributes));\n                      }\n                    ) as unknown as yup.ObjectSchema<any>\n                  )\n                ).test(arrayValidator(attribute, options)),\n              };\n            case 'relation':\n              return {\n                ...acc,\n                [name]: transformSchema(\n                  yup.lazy((value) => {\n                    if (!value) {\n                      return yup.mixed().nullable(true);\n                    } else if (Array.isArray(value)) {\n                      // If a relation value is an array, we expect\n                      // an array of objects with {id} properties, representing the related entities.\n                      return yup.array().of(\n                        yup.object().shape({\n                          id: yup.number().required(),\n                        })\n                      );\n                    } else if (typeof value === 'object') {\n                      // A realtion value can also be an object. Some API\n                      // repsonses return the number of entities in the relation\n                      // as { count: x }\n                      return yup.object();\n                    } else {\n                      return yup\n                        .mixed()\n                        .test(\n                          'type-error',\n                          'Relation values must be either null, an array of objects with {id} or an object.',\n                          () => false\n                        );\n                    }\n                  })\n                ),\n              };\n            default:\n              return {\n                ...acc,\n                [name]: transformSchema(createAttributeSchema(attribute)),\n              };\n          }\n        }, {})\n      )\n      /**\n       * TODO: investigate why an undefined object fails a check of `nullable`.\n       */\n      .default(null);\n\n  return createModelSchema(attributes);\n};\n\nconst createAttributeSchema = (\n  attribute: Exclude<\n    SchemaUtils.Attribute.AnyAttribute,\n    { type: 'dynamiczone' } | { type: 'component' } | { type: 'relation' }\n  >\n) => {\n  switch (attribute.type) {\n    case 'biginteger':\n      return yup.string().matches(/^-?\\d*$/);\n    case 'boolean':\n      return yup.boolean();\n    case 'blocks':\n      return yup.mixed().test('isBlocks', translatedErrors.json, (value) => {\n        if (!value || Array.isArray(value)) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n    case 'decimal':\n    case 'float':\n    case 'integer':\n      return yup.number();\n    case 'email':\n      return yup.string().email(translatedErrors.email);\n    case 'enumeration':\n      return yup.string().oneOf([...attribute.enum, null]);\n    case 'json':\n      return yup.mixed().test('isJSON', translatedErrors.json, (value) => {\n        /**\n         * We don't want to validate the JSON field if it's empty.\n         */\n        if (!value || (typeof value === 'string' && value.length === 0)) {\n          return true;\n        }\n\n        // If the value was created via content API and wasn't changed, then it's still an object\n        if (typeof value === 'object') {\n          try {\n            JSON.stringify(value);\n            return true;\n          } catch (err) {\n            return false;\n          }\n        }\n\n        try {\n          JSON.parse(value);\n\n          return true;\n        } catch (err) {\n          return false;\n        }\n      });\n    case 'password':\n    case 'richtext':\n    case 'string':\n    case 'text':\n      return yup.string();\n    case 'uid':\n      return yup.string().matches(/^[A-Za-z0-9-_.~]*$/);\n    default:\n      /**\n       * This allows any value.\n       */\n      return yup.mixed();\n  }\n};\n\n// Helper function to return schema.nullable() if it exists, otherwise return schema\nconst nullableSchema = <TSchema extends AnySchema>(schema: TSchema) => {\n  return schema?.nullable\n    ? schema.nullable()\n    : // In some cases '.nullable' will not be available on the schema.\n      // e.g. when the schema has been built using yup.lazy (e.g. for relations).\n      // In these cases we should just return the schema as it is.\n      schema;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Validators\n * -----------------------------------------------------------------------------------------------*/\n/**\n * Our validator functions can be preped with the\n * attribute and then have the schema piped through them.\n */\ntype ValidationFn = (\n  attribute: Schema['attributes'][string],\n  options: ValidationOptions\n) => <TSchema extends AnySchema>(schema: TSchema) => TSchema;\n\nconst addNullableValidation: ValidationFn = () => (schema) => {\n  return nullableSchema(schema);\n};\n\nconst addRequiredValidation: ValidationFn = (attribute, options) => (schema) => {\n  if (options.status === 'draft' || !attribute.required) {\n    return schema;\n  }\n\n  if (attribute.required && 'required' in schema) {\n    return schema.required(translatedErrors.required);\n  }\n\n  return schema;\n};\n\nconst addMinLengthValidation: ValidationFn =\n  (attribute, options) =>\n  <TSchema extends AnySchema>(schema: TSchema): TSchema => {\n    // Skip minLength validation for draft\n    if (options.status === 'draft') {\n      return schema;\n    }\n\n    if (\n      'minLength' in attribute &&\n      attribute.minLength &&\n      Number.isInteger(attribute.minLength) &&\n      'min' in schema\n    ) {\n      return schema.min(attribute.minLength, {\n        ...translatedErrors.minLength,\n        values: {\n          min: attribute.minLength,\n        },\n      }) as TSchema;\n    }\n\n    return schema;\n  };\n\nconst addMaxLengthValidation: ValidationFn =\n  (attribute) =>\n  <TSchema extends AnySchema>(schema: TSchema): TSchema => {\n    if (\n      'maxLength' in attribute &&\n      attribute.maxLength &&\n      Number.isInteger(attribute.maxLength) &&\n      'max' in schema\n    ) {\n      return schema.max(attribute.maxLength, {\n        ...translatedErrors.maxLength,\n        values: {\n          max: attribute.maxLength,\n        },\n      }) as TSchema;\n    }\n\n    return schema;\n  };\n\nconst addMinValidation: ValidationFn =\n  (attribute, options) =>\n  <TSchema extends AnySchema>(schema: TSchema): TSchema => {\n    // do not validate min for draft\n    if (options.status === 'draft') {\n      return schema;\n    }\n\n    if ('min' in attribute && 'min' in schema) {\n      const min = toInteger(attribute.min);\n\n      if (min) {\n        return schema.min(min, {\n          ...translatedErrors.min,\n          values: {\n            min,\n          },\n        }) as TSchema;\n      }\n    }\n\n    return schema;\n  };\n\nconst addMaxValidation: ValidationFn =\n  (attribute) =>\n  <TSchema extends AnySchema>(schema: TSchema): TSchema => {\n    if ('max' in attribute) {\n      const max = toInteger(attribute.max);\n\n      if ('max' in schema && max) {\n        return schema.max(max, {\n          ...translatedErrors.max,\n          values: {\n            max,\n          },\n        }) as TSchema;\n      }\n    }\n\n    return schema;\n  };\n\nconst toInteger = (val?: string | number): number | undefined => {\n  if (typeof val === 'number' || val === undefined) {\n    return val;\n  } else {\n    const num = Number(val);\n    return isNaN(num) ? undefined : num;\n  }\n};\n\nconst addRegexValidation: ValidationFn =\n  (attribute) =>\n  <TSchema extends AnySchema>(schema: TSchema): TSchema => {\n    if ('regex' in attribute && attribute.regex && 'matches' in schema) {\n      return schema.matches(new RegExp(attribute.regex), {\n        message: {\n          id: translatedErrors.regex.id,\n          defaultMessage: 'The value does not match the defined pattern.',\n        },\n\n        excludeEmptyString: !attribute.required,\n      }) as TSchema;\n    }\n\n    return schema;\n  };\n\nexport { createYupSchema };\n", "import { contentManagerApi } from './api';\n\nimport type { GetInitData } from '../../../shared/contracts/init';\n\nconst initApi = contentManagerApi.injectEndpoints({\n  endpoints: (builder) => ({\n    getInitialData: builder.query<GetInitData.Response['data'], void>({\n      query: () => '/content-manager/init',\n      transformResponse: (response: GetInitData.Response) => response.data,\n      providesTags: ['InitialData'],\n    }),\n  }),\n});\n\nconst { useGetInitialDataQuery } = initApi;\n\nexport { useGetInitialDataQuery };\n", "import * as React from 'react';\n\nimport { useNotification, useAPIErrorHandler } from '@strapi/admin/strapi-admin';\n\nimport { useGetInitialDataQuery } from '../services/init';\n\nimport type { Component } from '../../../shared/contracts/components';\nimport type { ContentType } from '../../../shared/contracts/content-types';\nimport type { Schema } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * useContentTypeSchema\n * -----------------------------------------------------------------------------------------------*/\ntype ComponentsDictionary = Record<string, Component>;\n\n/**\n * @internal\n * @description Given a model UID, return the schema and the schemas\n * of the associated components within said model's schema. A wrapper\n * implementation around the `useGetInitialDataQuery` with a unique\n * `selectFromResult` function to memoize the calculation.\n *\n * If no model is provided, the hook will return all the schemas.\n */\nconst useContentTypeSchema = (model?: string) => {\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const { data, error, isLoading, isFetching } = useGetInitialDataQuery(undefined);\n\n  const { components, contentType, contentTypes } = React.useMemo(() => {\n    const contentType = data?.contentTypes.find((ct) => ct.uid === model);\n\n    const componentsByKey = data?.components.reduce<ComponentsDictionary>((acc, component) => {\n      acc[component.uid] = component;\n\n      return acc;\n    }, {});\n\n    const components = extractContentTypeComponents(contentType?.attributes, componentsByKey);\n\n    return {\n      components: Object.keys(components).length === 0 ? undefined : components,\n      contentType,\n      contentTypes: data?.contentTypes ?? [],\n    };\n  }, [model, data]);\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [toggleNotification, error, formatAPIError]);\n\n  return {\n    // This must be memoized to avoid inifiinite re-renders where the empty object is different everytime.\n    components: React.useMemo(() => components ?? {}, [components]),\n    schema: contentType,\n    schemas: contentTypes,\n    isLoading: isLoading || isFetching,\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * extractContentTypeComponents\n * -----------------------------------------------------------------------------------------------*/\n/**\n * @internal\n * @description Extracts the components used in a content type's attributes recursively.\n */\nconst extractContentTypeComponents = (\n  attributes: ContentType['attributes'] = {},\n  allComponents: ComponentsDictionary = {}\n): ComponentsDictionary => {\n  const getComponents = (attributes: Schema.Attribute.AnyAttribute[]) => {\n    return attributes.reduce<string[]>((acc, attribute) => {\n      /**\n       * If the attribute is a component or dynamiczone, we need to recursively\n       * extract the component UIDs from its attributes.\n       */\n      if (attribute.type === 'component') {\n        const componentAttributes = Object.values(\n          allComponents[attribute.component]?.attributes ?? {}\n        );\n\n        acc.push(attribute.component, ...getComponents(componentAttributes));\n      } else if (attribute.type === 'dynamiczone') {\n        acc.push(\n          ...attribute.components,\n          /**\n           * Dynamic zones have an array of components, so we flatMap over them\n           * performing the same search as above.\n           */\n          ...attribute.components.flatMap((componentUid) => {\n            const componentAttributes = Object.values(\n              allComponents[componentUid]?.attributes ?? {}\n            );\n\n            return getComponents(componentAttributes);\n          })\n        );\n      }\n\n      return acc;\n    }, []);\n  };\n\n  const componentUids = getComponents(Object.values(attributes));\n\n  const uniqueComponentUids = [...new Set(componentUids)];\n\n  const componentsByKey = uniqueComponentUids.reduce<ComponentsDictionary>((acc, uid) => {\n    acc[uid] = allComponents[uid];\n\n    return acc;\n  }, {});\n\n  return componentsByKey;\n};\n\nexport { useContentTypeSchema, extractContentTypeComponents };\nexport type { ComponentsDictionary };\n", "export const HOOKS = {\n  /**\n   * Hook that allows to mutate the displayed headers of the list view table\n   * @constant\n   * @type {string}\n   */\n  INJECT_COLUMN_IN_TABLE: 'Admin/CM/pages/ListView/inject-column-in-table',\n\n  /**\n   * Hook that allows to mutate the CM's collection types links pre-set filters\n   * @constant\n   * @type {string}\n   */\n  MUTATE_COLLECTION_TYPES_LINKS: 'Admin/CM/pages/App/mutate-collection-types-links',\n\n  /**\n   * Hook that allows to mutate the CM's edit view layout\n   * @constant\n   * @type {string}\n   */\n  MUTATE_EDIT_VIEW_LAYOUT: 'Admin/CM/pages/EditView/mutate-edit-view-layout',\n\n  /**\n   * Hook that allows to mutate the CM's single types links pre-set filters\n   * @constant\n   * @type {string}\n   */\n  MUTATE_SINGLE_TYPES_LINKS: 'Admin/CM/pages/App/mutate-single-types-links',\n};\n", "import {\n  FindContentTypeConfiguration,\n  UpdateContentTypeConfiguration,\n  FindContentTypesSettings,\n} from '../../../shared/contracts/content-types';\n\nimport { contentManagerApi } from './api';\n\nconst contentTypesApi = contentManagerApi.injectEndpoints({\n  endpoints: (builder) => ({\n    getContentTypeConfiguration: builder.query<\n      FindContentTypeConfiguration.Response['data'],\n      string\n    >({\n      query: (uid) => ({\n        url: `/content-manager/content-types/${uid}/configuration`,\n        method: 'GET',\n      }),\n      transformResponse: (response: FindContentTypeConfiguration.Response) => response.data,\n      providesTags: (_result, _error, uid) => [\n        { type: 'ContentTypesConfiguration', id: uid },\n        { type: 'ContentTypeSettings', id: 'LIST' },\n      ],\n    }),\n    getAllContentTypeSettings: builder.query<FindContentTypesSettings.Response['data'], void>({\n      query: () => '/content-manager/content-types-settings',\n      transformResponse: (response: FindContentTypesSettings.Response) => response.data,\n      providesTags: [{ type: 'ContentTypeSettings', id: 'LIST' }],\n    }),\n    updateContentTypeConfiguration: builder.mutation<\n      UpdateContentTypeConfiguration.Response['data'],\n      UpdateContentTypeConfiguration.Request['body'] & {\n        uid: string;\n      }\n    >({\n      query: ({ uid, ...body }) => ({\n        url: `/content-manager/content-types/${uid}/configuration`,\n        method: 'PUT',\n        data: body,\n      }),\n      transformResponse: (response: UpdateContentTypeConfiguration.Response) => response.data,\n      invalidatesTags: (_result, _error, { uid }) => [\n        { type: 'ContentTypesConfiguration', id: uid },\n        { type: 'ContentTypeSettings', id: 'LIST' },\n        // Is this necessary?\n        { type: 'InitialData' },\n      ],\n    }),\n  }),\n});\n\nconst {\n  useGetContentTypeConfigurationQuery,\n  useGetAllContentTypeSettingsQuery,\n  useUpdateContentTypeConfigurationMutation,\n} = contentTypesApi;\n\nexport {\n  useGetContentTypeConfigurationQuery,\n  useGetAllContentTypeSettingsQuery,\n  useUpdateContentTypeConfigurationMutation,\n};\n", "import type { ComponentsDictionary, Schema } from '../hooks/useDocument';\nimport type { Schema as SchemaUtils } from '@strapi/types';\n\nconst checkIfAttributeIsDisplayable = (attribute: SchemaUtils.Attribute.AnyAttribute) => {\n  const { type } = attribute;\n\n  if (type === 'relation') {\n    return !attribute.relation.toLowerCase().includes('morph');\n  }\n\n  return !['json', 'dynamiczone', 'richtext', 'password', 'blocks'].includes(type) && !!type;\n};\n\ninterface MainField {\n  name: string;\n  type: SchemaUtils.Attribute.Kind | 'custom';\n}\n\n/**\n * @internal\n * @description given an attribute, content-type schemas & component schemas, find the mainField name & type.\n * If the attribute does not need a `mainField` then we return undefined. If we do not find the type\n * of the field, we assume it's a string #sensible-defaults\n */\nconst getMainField = (\n  attribute: SchemaUtils.Attribute.AnyAttribute,\n  mainFieldName: string | undefined,\n  { schemas, components }: { schemas: Schema[]; components: ComponentsDictionary }\n): MainField | undefined => {\n  if (!mainFieldName) {\n    return undefined;\n  }\n\n  const mainFieldType =\n    attribute.type === 'component'\n      ? components[attribute.component].attributes[mainFieldName].type\n      : // @ts-expect-error – `targetModel` does exist on the attribute for a relation.\n        schemas.find((schema) => schema.uid === attribute.targetModel)?.attributes[mainFieldName]\n          .type;\n\n  return {\n    name: mainFieldName,\n    type: mainFieldType ?? 'string',\n  };\n};\n\nexport { checkIfAttributeIsDisplayable, getMainField };\nexport type { MainField };\n", "import * as React from 'react';\n\nimport { SerializedError } from '@reduxjs/toolkit';\nimport {\n  useNotification,\n  useStrapiApp,\n  useAPIErrorHandler,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\n\nimport { HOOKS } from '../constants/hooks';\nimport { useGetContentTypeConfigurationQuery } from '../services/contentTypes';\nimport { BaseQueryError } from '../utils/api';\nimport { getMainField } from '../utils/attributes';\n\nimport { useContentTypeSchema } from './useContentTypeSchema';\nimport {\n  type ComponentsDictionary,\n  type Document,\n  type Schema,\n  useDoc,\n  useDocument,\n} from './useDocument';\n\nimport type { ComponentConfiguration } from '../../../shared/contracts/components';\nimport type {\n  Metadatas,\n  FindContentTypeConfiguration,\n  Settings,\n} from '../../../shared/contracts/content-types';\nimport type { Filters, InputProps, Table } from '@strapi/admin/strapi-admin';\nimport type { Schema as SchemaUtils } from '@strapi/types';\n\ntype LayoutOptions = Schema['options'] & Schema['pluginOptions'] & object;\n\ninterface LayoutSettings extends Settings {\n  displayName?: string;\n  icon?: never;\n}\n\ninterface ListFieldLayout\n  extends Table.Header<Document, ListFieldLayout>,\n    Pick<Filters.Filter, 'mainField'> {\n  attribute: SchemaUtils.Attribute.AnyAttribute | { type: 'custom' };\n}\n\ninterface ListLayout {\n  layout: ListFieldLayout[];\n  components?: never;\n  metadatas: {\n    [K in keyof Metadatas]: Metadatas[K]['list'];\n  };\n  options: LayoutOptions;\n  settings: LayoutSettings;\n}\ninterface EditFieldSharedProps\n  extends Omit<InputProps, 'hint' | 'label' | 'type'>,\n    Pick<Filters.Filter, 'mainField'> {\n  hint?: string;\n  label: string;\n  size: number;\n  unique?: boolean;\n  visible?: boolean;\n}\n\n/**\n * Map over all the types in Attribute Types and use that to create a union of new types where the attribute type\n * is under the property attribute and the type is under the property type.\n */\ntype EditFieldLayout = {\n  [K in SchemaUtils.Attribute.Kind]: EditFieldSharedProps & {\n    attribute: Extract<SchemaUtils.Attribute.AnyAttribute, { type: K }>;\n    type: K;\n  };\n}[SchemaUtils.Attribute.Kind];\n\ninterface EditLayout {\n  layout: Array<Array<EditFieldLayout[]>>;\n  components: {\n    [uid: string]: {\n      layout: Array<EditFieldLayout[]>;\n      settings: ComponentConfiguration['settings'] & {\n        displayName?: string;\n        icon?: string;\n      };\n    };\n  };\n  metadatas: {\n    [K in keyof Metadatas]: Metadatas[K]['edit'];\n  };\n  options: LayoutOptions;\n  settings: LayoutSettings;\n}\n\ntype UseDocumentLayout = (model: string) => {\n  error?: BaseQueryError | SerializedError;\n  isLoading: boolean;\n  /**\n   * This is the layout for the edit view,\n   */\n  edit: EditLayout;\n  list: ListLayout;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * useDocumentLayout\n * -----------------------------------------------------------------------------------------------*/\n\nconst DEFAULT_SETTINGS = {\n  bulkable: false,\n  filterable: false,\n  searchable: false,\n  pagination: false,\n  defaultSortBy: '',\n  defaultSortOrder: 'asc',\n  mainField: 'id',\n  pageSize: 10,\n};\n\n/**\n * @alpha\n * @description This hook is used to get the layouts for either the edit view or list view of a specific content-type\n * including the layouts for the components used in the content-type. It also runs the mutation hook waterfall so the data\n * is consistent wherever it is used. It's a light wrapper around the `useDocument` hook, but provides the `skip` option a document\n * is not fetched, however, it does fetch the schemas & components if they do not already exist in the cache.\n *\n * If the fetch fails, it will display a notification to the user.\n *\n * @example\n * ```tsx\n * const { model } = useParams<{ model: string }>();\n * const { edit: { schema: layout } } = useDocumentLayout(model);\n *\n * return layout.map(panel => panel.map(row => row.map(field => <Field.Root {...field} />)))\n * ```\n *\n */\nconst useDocumentLayout: UseDocumentLayout = (model) => {\n  const { schema, components } = useDocument({ model, collectionType: '' }, { skip: true });\n  const [{ query }] = useQueryParams();\n  const runHookWaterfall = useStrapiApp('useDocumentLayout', (state) => state.runHookWaterfall);\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const { isLoading: isLoadingSchemas, schemas } = useContentTypeSchema();\n\n  const {\n    data,\n    isLoading: isLoadingConfigs,\n    error,\n    isFetching: isFetchingConfigs,\n  } = useGetContentTypeConfigurationQuery(model);\n\n  const isLoading = isLoadingSchemas || isFetchingConfigs || isLoadingConfigs;\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  const editLayout = React.useMemo(\n    () =>\n      data && !isLoading\n        ? formatEditLayout(data, { schemas, schema, components })\n        : ({\n            layout: [],\n            components: {},\n            metadatas: {},\n            options: {},\n            settings: DEFAULT_SETTINGS,\n          } as EditLayout),\n    [data, isLoading, schemas, schema, components]\n  );\n\n  const listLayout = React.useMemo(() => {\n    return data && !isLoading\n      ? formatListLayout(data, { schemas, schema, components })\n      : ({\n          layout: [],\n          metadatas: {},\n          options: {},\n          settings: DEFAULT_SETTINGS,\n        } as ListLayout);\n  }, [data, isLoading, schemas, schema, components]);\n\n  const { layout: edit } = React.useMemo(\n    () =>\n      runHookWaterfall(HOOKS.MUTATE_EDIT_VIEW_LAYOUT, {\n        layout: editLayout,\n        query,\n      }),\n    [editLayout, query, runHookWaterfall]\n  );\n\n  return {\n    error,\n    isLoading,\n    edit,\n    list: listLayout,\n  } satisfies ReturnType<UseDocumentLayout>;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * useDocLayout\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal this hook uses the internal useDoc hook, as such it shouldn't be used outside of the\n * content-manager because it won't work as intended.\n */\nconst useDocLayout = () => {\n  const { model } = useDoc();\n  return useDocumentLayout(model);\n};\n\n/* -------------------------------------------------------------------------------------------------\n * formatEditLayout\n * -----------------------------------------------------------------------------------------------*/\ntype LayoutData = FindContentTypeConfiguration.Response['data'];\n\n/**\n * @internal\n * @description takes the configuration data, the schema & the components used in the schema and formats the edit view\n * versions of the schema & components. This is then used to render the edit view of the content-type.\n */\nconst formatEditLayout = (\n  data: LayoutData,\n  {\n    schemas,\n    schema,\n    components,\n  }: { schemas: Schema[]; schema?: Schema; components: ComponentsDictionary }\n): EditLayout => {\n  let currentPanelIndex = 0;\n  /**\n   * The fields arranged by the panels, new panels are made for dynamic zones only.\n   */\n  const panelledEditAttributes = convertEditLayoutToFieldLayouts(\n    data.contentType.layouts.edit,\n    schema?.attributes,\n    data.contentType.metadatas,\n    { configurations: data.components, schemas: components },\n    schemas\n  ).reduce<Array<EditFieldLayout[][]>>((panels, row) => {\n    if (row.some((field) => field.type === 'dynamiczone')) {\n      panels.push([row]);\n      currentPanelIndex += 2;\n    } else {\n      if (!panels[currentPanelIndex]) {\n        panels.push([row]);\n      } else {\n        panels[currentPanelIndex].push(row);\n      }\n    }\n\n    return panels;\n  }, []);\n\n  const componentEditAttributes = Object.entries(data.components).reduce<EditLayout['components']>(\n    (acc, [uid, configuration]) => {\n      acc[uid] = {\n        layout: convertEditLayoutToFieldLayouts(\n          configuration.layouts.edit,\n          components[uid].attributes,\n          configuration.metadatas,\n          { configurations: data.components, schemas: components }\n        ),\n        settings: {\n          ...configuration.settings,\n          icon: components[uid].info.icon,\n          displayName: components[uid].info.displayName,\n        },\n      };\n      return acc;\n    },\n    {}\n  );\n\n  const editMetadatas = Object.entries(data.contentType.metadatas).reduce<EditLayout['metadatas']>(\n    (acc, [attribute, metadata]) => {\n      return {\n        ...acc,\n        [attribute]: metadata.edit,\n      };\n    },\n    {}\n  );\n\n  return {\n    layout: panelledEditAttributes,\n    components: componentEditAttributes,\n    metadatas: editMetadatas,\n    settings: {\n      ...data.contentType.settings,\n      displayName: schema?.info.displayName,\n    },\n    options: {\n      ...schema?.options,\n      ...schema?.pluginOptions,\n      ...data.contentType.options,\n    },\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * convertEditLayoutToFieldLayouts\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n * @description takes the edit layout from either a content-type or a component\n * and formats it into a generic object that can be used to correctly render\n * the form fields.\n */\nconst convertEditLayoutToFieldLayouts = (\n  rows: LayoutData['contentType']['layouts']['edit'],\n  attributes: Schema['attributes'] = {},\n  metadatas: Metadatas,\n  components?: {\n    configurations: Record<string, ComponentConfiguration>;\n    schemas: ComponentsDictionary;\n  },\n  schemas: Schema[] = []\n) => {\n  return rows.map((row) =>\n    row\n      .map((field) => {\n        const attribute = attributes[field.name];\n\n        if (!attribute) {\n          return null;\n        }\n\n        const { edit: metadata } = metadatas[field.name];\n\n        const settings: Partial<Settings> =\n          attribute.type === 'component' && components\n            ? components.configurations[attribute.component].settings\n            : {};\n\n        return {\n          attribute,\n          disabled: !metadata.editable,\n          hint: metadata.description,\n          label: metadata.label ?? '',\n          name: field.name,\n          // @ts-expect-error – mainField does exist on the metadata for a relation.\n          mainField: getMainField(attribute, metadata.mainField || settings.mainField, {\n            schemas,\n            components: components?.schemas ?? {},\n          }),\n          placeholder: metadata.placeholder ?? '',\n          required: attribute.required ?? false,\n          size: field.size,\n          unique: 'unique' in attribute ? attribute.unique : false,\n          visible: metadata.visible ?? true,\n          type: attribute.type,\n        };\n      })\n      .filter((field) => field !== null)\n  ) as EditFieldLayout[][];\n};\n\n/* -------------------------------------------------------------------------------------------------\n * formatListLayout\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n * @description takes the complete configuration data, the schema & the components used in the schema and\n * formats a list view layout for the content-type. This is much simpler than the edit view layout as there\n * are less options to consider.\n */\nconst formatListLayout = (\n  data: LayoutData,\n  {\n    schemas,\n    schema,\n    components,\n  }: { schemas: Schema[]; schema?: Schema; components: ComponentsDictionary }\n): ListLayout => {\n  const listMetadatas = Object.entries(data.contentType.metadatas).reduce<ListLayout['metadatas']>(\n    (acc, [attribute, metadata]) => {\n      return {\n        ...acc,\n        [attribute]: metadata.list,\n      };\n    },\n    {}\n  );\n  /**\n   * The fields arranged by the panels, new panels are made for dynamic zones only.\n   */\n  const listAttributes = convertListLayoutToFieldLayouts(\n    data.contentType.layouts.list,\n    schema?.attributes,\n    listMetadatas,\n    { configurations: data.components, schemas: components },\n    schemas\n  );\n\n  return {\n    layout: listAttributes,\n    settings: { ...data.contentType.settings, displayName: schema?.info.displayName },\n    metadatas: listMetadatas,\n    options: {\n      ...schema?.options,\n      ...schema?.pluginOptions,\n      ...data.contentType.options,\n    },\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * convertListLayoutToFieldLayouts\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n * @description takes the columns from the list view configuration and formats them into a generic object\n * combinining metadata and attribute data.\n *\n * @note We do use this to reformat the list of strings when updating the displayed headers for the list view.\n */\nconst convertListLayoutToFieldLayouts = (\n  columns: LayoutData['contentType']['layouts']['list'],\n  attributes: Schema['attributes'] = {},\n  metadatas: ListLayout['metadatas'],\n  components?: {\n    configurations: Record<string, ComponentConfiguration>;\n    schemas: ComponentsDictionary;\n  },\n  schemas: Schema[] = []\n) => {\n  return columns\n    .map((name) => {\n      const attribute = attributes[name];\n\n      if (!attribute) {\n        return null;\n      }\n\n      const metadata = metadatas[name];\n\n      const settings: Partial<Settings> =\n        attribute.type === 'component' && components\n          ? components.configurations[attribute.component].settings\n          : {};\n\n      return {\n        attribute,\n        label: metadata.label ?? '',\n        mainField: getMainField(attribute, metadata.mainField || settings.mainField, {\n          schemas,\n          components: components?.schemas ?? {},\n        }),\n        name: name,\n        searchable: metadata.searchable ?? true,\n        sortable: metadata.sortable ?? true,\n      } satisfies ListFieldLayout;\n    })\n    .filter((field) => field !== null) as ListFieldLayout[];\n};\n\nexport {\n  useDocLayout,\n  useDocumentLayout,\n  convertListLayoutToFieldLayouts,\n  convertEditLayoutToFieldLayouts,\n  DEFAULT_SETTINGS,\n};\nexport type { EditLayout, EditFieldLayout, ListLayout, ListFieldLayout, UseDocumentLayout };\n", "/**\n * This hook doesn't use a context provider because we fetch directly from the server,\n * this sounds expensive but actually, it's really not. Because we have redux-toolkit-query\n * being a cache layer so if nothing invalidates the cache, we don't fetch again.\n */\n\nimport * as React from 'react';\n\nimport {\n  useNotification,\n  useAPIErrorHandler,\n  useQueryParams,\n  FormErrors,\n  getYupValidationErrors,\n  useForm,\n} from '@strapi/admin/strapi-admin';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { ValidationError } from 'yup';\n\nimport { SINGLE_TYPES } from '../constants/collections';\nimport { type AnyData, transformDocument } from '../pages/EditView/utils/data';\nimport { createDefaultForm } from '../pages/EditView/utils/forms';\nimport { useGetDocumentQuery } from '../services/documents';\nimport { buildValidParams } from '../utils/api';\nimport { createYupSchema } from '../utils/validation';\n\nimport { useContentTypeSchema, ComponentsDictionary } from './useContentTypeSchema';\nimport { useDocumentLayout } from './useDocumentLayout';\n\nimport type { FindOne } from '../../../shared/contracts/collection-types';\nimport type { ContentType } from '../../../shared/contracts/content-types';\nimport type { Modules } from '@strapi/types';\n\ninterface UseDocumentArgs {\n  collectionType: string;\n  model: string;\n  documentId?: string;\n  params?: object;\n}\n\ntype UseDocumentOpts = Parameters<typeof useGetDocumentQuery>[1];\n\ntype Document = FindOne.Response['data'];\n\ntype Schema = ContentType;\n\ntype UseDocument = (\n  args: UseDocumentArgs,\n  opts?: UseDocumentOpts\n) => {\n  /**\n   * These are the schemas of the components used in the content type, organised\n   * by their uid.\n   */\n  components: ComponentsDictionary;\n  document?: Document;\n  meta?: FindOne.Response['meta'];\n  isLoading: boolean;\n  /**\n   * This is the schema of the content type, it is not the same as the layout.\n   */\n  schema?: Schema;\n  schemas?: Schema[];\n  hasError?: boolean;\n  validate: (document: Document) => null | FormErrors;\n  /**\n   * Get the document's title\n   */\n  getTitle: (mainField: string) => string;\n  /**\n   * Get the initial form values for the document\n   */\n  getInitialFormValues: (isCreatingDocument?: boolean) => AnyData | undefined;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * useDocument\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @alpha\n * @public\n * @description Returns a document based on the model, collection type & id passed as arguments.\n * Also extracts its schema from the redux cache to be used for creating a validation schema.\n * @example\n * ```tsx\n * const { id, model, collectionType } = useParams<{ id: string; model: string; collectionType: string }>();\n *\n * if(!model || !collectionType) return null;\n *\n * const { document, isLoading, validate } = useDocument({ documentId: id, model, collectionType, params: { locale: 'en-GB' } })\n * const { update } = useDocumentActions()\n *\n * const onSubmit = async (document: Document) => {\n *  const errors = validate(document);\n *\n *  if(errors) {\n *      // handle errors\n *  }\n *\n *  await update({ collectionType, model, id }, document)\n * }\n * ```\n *\n * @see {@link https://contributor.strapi.io/docs/core/content-manager/hooks/use-document} for more information\n */\nconst useDocument: UseDocument = (args, opts) => {\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const { formatMessage } = useIntl();\n\n  const {\n    currentData: data,\n    isLoading: isLoadingDocument,\n    isFetching: isFetchingDocument,\n    error,\n  } = useGetDocumentQuery(args, {\n    ...opts,\n    skip: (!args.documentId && args.collectionType !== SINGLE_TYPES) || opts?.skip,\n  });\n  const document = data?.data;\n  const meta = data?.meta;\n\n  const {\n    components,\n    schema,\n    schemas,\n    isLoading: isLoadingSchema,\n  } = useContentTypeSchema(args.model);\n  const isSingleType = schema?.kind === 'singleType';\n\n  const getTitle = (mainField: string) => {\n    // Always use mainField if it's not an id\n    if (mainField !== 'id' && document?.[mainField]) {\n      return document[mainField];\n    }\n\n    // When it's a singleType without a mainField, use the contentType displayName\n    if (isSingleType && schema?.info.displayName) {\n      return schema.info.displayName;\n    }\n\n    // Otherwise, use a fallback\n    return formatMessage({\n      id: 'content-manager.containers.untitled',\n      defaultMessage: 'Untitled',\n    });\n  };\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [toggleNotification, error, formatAPIError, args.collectionType]);\n\n  const validationSchema = React.useMemo(() => {\n    if (!schema) {\n      return null;\n    }\n\n    return createYupSchema(schema.attributes, components);\n  }, [schema, components]);\n\n  const validate = React.useCallback(\n    (document: Modules.Documents.AnyDocument): FormErrors | null => {\n      if (!validationSchema) {\n        throw new Error(\n          'There is no validation schema generated, this is likely due to the schema not being loaded yet.'\n        );\n      }\n\n      try {\n        validationSchema.validateSync(document, { abortEarly: false, strict: true });\n        return null;\n      } catch (error) {\n        if (error instanceof ValidationError) {\n          return getYupValidationErrors(error);\n        }\n\n        throw error;\n      }\n    },\n    [validationSchema]\n  );\n\n  /**\n   * Here we prepare the form for editing, we need to:\n   * - remove prohibited fields from the document (passwords | ADD YOURS WHEN THERES A NEW ONE)\n   * - swap out count objects on relations for empty arrays\n   * - set __temp_key__ on array objects for drag & drop\n   *\n   * We also prepare the form for new documents, so we need to:\n   * - set default values on fields\n   */\n  const getInitialFormValues = React.useCallback(\n    (isCreatingDocument: boolean = false) => {\n      if ((!document && !isCreatingDocument && !isSingleType) || !schema) {\n        return undefined;\n      }\n\n      /**\n       * Check that we have an ID so we know the\n       * document has been created in some way.\n       */\n      const form = document?.id ? document : createDefaultForm(schema, components);\n\n      return transformDocument(schema, components)(form);\n    },\n    [document, isSingleType, schema, components]\n  );\n\n  const isLoading = isLoadingDocument || isFetchingDocument || isLoadingSchema;\n  const hasError = !!error;\n\n  return {\n    components,\n    document,\n    meta,\n    isLoading,\n    hasError,\n    schema,\n    schemas,\n    validate,\n    getTitle,\n    getInitialFormValues,\n  } satisfies ReturnType<UseDocument>;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * useDoc\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal this hook uses the router to extract the model, collection type & id from the url.\n * therefore, it shouldn't be used outside of the content-manager because it won't work as intended.\n */\nconst useDoc = () => {\n  const { id, slug, collectionType, origin } = useParams<{\n    id: string;\n    origin: string;\n    slug: string;\n    collectionType: string;\n  }>();\n  const [{ query }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  if (!collectionType) {\n    throw new Error('Could not find collectionType in url params');\n  }\n\n  if (!slug) {\n    throw new Error('Could not find model in url params');\n  }\n\n  const document = useDocument(\n    { documentId: origin || id, model: slug, collectionType, params },\n    {\n      skip: id === 'create' || (!origin && !id && collectionType !== SINGLE_TYPES),\n    }\n  );\n\n  const returnId = origin || id === 'create' ? undefined : id;\n\n  return {\n    collectionType,\n    model: slug,\n    id: returnId,\n    ...document,\n  };\n};\n\n/**\n * @public\n * @experimental\n * Content manager context hooks for plugin development.\n * Make sure to use this hook inside the content manager.\n */\nconst useContentManagerContext = () => {\n  const {\n    collectionType,\n    model,\n    id,\n    components,\n    isLoading: isLoadingDoc,\n    schema,\n    schemas,\n  } = useDoc();\n\n  const layout = useDocumentLayout(model);\n\n  const form = useForm<unknown>('useContentManagerContext', (state) => state);\n\n  const isSingleType = collectionType === SINGLE_TYPES;\n  const slug = model;\n  const isCreatingEntry = id === 'create';\n\n  const {} = useContentTypeSchema();\n\n  const isLoading = isLoadingDoc || layout.isLoading;\n  const error = layout.error;\n\n  return {\n    error,\n    isLoading,\n\n    // Base metadata\n    model,\n    collectionType,\n    id,\n    slug,\n    isCreatingEntry,\n    isSingleType,\n    hasDraftAndPublish: schema?.options?.draftAndPublish ?? false,\n\n    // All schema infos\n    components,\n    contentType: schema,\n    contentTypes: schemas,\n\n    // Form state\n    form,\n\n    // layout infos\n    layout,\n  };\n};\n\nexport { useDocument, useDoc, useContentManagerContext };\nexport type { UseDocument, UseDocumentArgs, Document, Schema, ComponentsDictionary };\n", "type TradOptions = Record<string, string>;\n\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\n  if (!pluginId) {\n    throw new TypeError(\"pluginId can't be empty\");\n  }\n  return Object.keys(trad).reduce((acc, current) => {\n    acc[`${pluginId}.${current}`] = trad[current];\n    return acc;\n  }, {} as TradOptions);\n};\n\nconst getTranslation = (id: string) => `content-manager.${id}`;\n\nexport { getTranslation, prefixPluginTranslations };\n", "import * as React from 'react';\n\nimport { SerializedError } from '@reduxjs/toolkit';\nimport {\n  useNotification,\n  useTracking,\n  type TrackingEvent,\n  useAPIErrorHandler,\n  useGuidedTour,\n} from '@strapi/admin/strapi-admin';\nimport { useIntl, type MessageDescriptor } from 'react-intl';\nimport { useNavigate } from 'react-router-dom';\n\nimport {\n  useAutoCloneDocumentMutation,\n  useCloneDocumentMutation,\n  useCreateDocumentMutation,\n  useDeleteDocumentMutation,\n  useDeleteManyDocumentsMutation,\n  useDiscardDocumentMutation,\n  useLazyGetDocumentQuery,\n  usePublishDocumentMutation,\n  usePublishManyDocumentsMutation,\n  useUnpublishDocumentMutation,\n  useUnpublishManyDocumentsMutation,\n  useUpdateDocumentMutation,\n} from '../services/documents';\nimport { BaseQueryError } from '../utils/api';\nimport { getTranslation } from '../utils/translations';\n\nimport type { Document } from './useDocument';\nimport type {\n  AutoClone,\n  Clone,\n  Create,\n  Delete,\n  BulkDelete,\n  Discard,\n  FindOne,\n  Publish,\n  BulkPublish,\n  Update,\n  Unpublish,\n  BulkUnpublish,\n} from '../../../shared/contracts/collection-types';\n\nconst DEFAULT_UNEXPECTED_ERROR_MSG = {\n  id: 'notification.error',\n  defaultMessage: 'An error occurred, please try again',\n} satisfies MessageDescriptor;\n\ntype OperationResponse<TResponse extends { data: any; meta?: any; error?: any }> =\n  | Pick<TResponse, 'data'>\n  | Pick<TResponse, 'data' | 'meta'>\n  | { error: BaseQueryError | SerializedError };\n\ntype BulkOperationResponse<TResponse extends { data: any; error?: any }> =\n  | Pick<TResponse, 'data'>\n  | { error: BaseQueryError | SerializedError };\n\ntype UseDocumentActions = () => {\n  /**\n   * @description Attempts to clone a document based on the provided sourceId.\n   * This will return a list of the fields as an error if it's unable to clone.\n   * You most likely want to use the `clone` action instead.\n   */\n  autoClone: (args: {\n    model: string;\n    sourceId: string;\n  }) => Promise<OperationResponse<AutoClone.Response>>;\n  clone: (\n    args: {\n      model: string;\n      documentId: string;\n      params?: object;\n    },\n    document: Omit<Document, 'id'>,\n    trackerProperty?: Extract<\n      TrackingEvent,\n      { name: 'willCreateEntry' | 'didCreateEntry' | 'didNotCreateEntry' }\n    >['properties']\n  ) => Promise<OperationResponse<Clone.Response>>;\n  create: (\n    args: {\n      model: string;\n      params?: object;\n    },\n    document: Omit<Document, 'id'>,\n    trackerProperty?: Extract<\n      TrackingEvent,\n      { name: 'willCreateEntry' | 'didCreateEntry' | 'didNotCreateEntry' }\n    >['properties']\n  ) => Promise<OperationResponse<Create.Response>>;\n  delete: (\n    args: {\n      collectionType: string;\n      model: string;\n      documentId?: string;\n      params?: object;\n    },\n    trackerProperty?: Extract<\n      TrackingEvent,\n      { name: 'willDeleteEntry' | 'didDeleteEntry' | 'didNotDeleteEntry' }\n    >['properties']\n  ) => Promise<OperationResponse<Delete.Response>>;\n  deleteMany: (args: {\n    model: string;\n    documentIds: string[];\n    params?: object;\n  }) => Promise<BulkOperationResponse<BulkDelete.Response>>;\n  discard: (args: {\n    collectionType: string;\n    model: string;\n    documentId?: string;\n    params?: object;\n  }) => Promise<OperationResponse<Discard.Response>>;\n  getDocument: (args: {\n    collectionType: string;\n    model: string;\n    documentId?: string;\n    params?: object;\n  }) => Promise<FindOne.Response | undefined>;\n  publish: (\n    args: {\n      collectionType: string;\n      model: string;\n      documentId?: string;\n      params?: object;\n    },\n    document: Partial<Document>\n  ) => Promise<OperationResponse<Publish.Response>>;\n  publishMany: (args: {\n    model: string;\n    documentIds: string[];\n    params?: object;\n  }) => Promise<BulkOperationResponse<BulkPublish.Response>>;\n  update: (\n    args: {\n      collectionType: string;\n      model: string;\n      documentId?: string;\n      params?: object;\n    },\n    document: Partial<Document>,\n    trackerProperty?: Extract<\n      TrackingEvent,\n      { name: 'willEditEntry' | 'didEditEntry' | 'didNotEditEntry' }\n    >['properties']\n  ) => Promise<OperationResponse<Update.Response>>;\n  unpublish: (\n    args: {\n      collectionType: string;\n      model: string;\n      documentId?: string;\n      params?: object;\n    },\n    discardDraft?: boolean\n  ) => Promise<OperationResponse<Unpublish.Response>>;\n  unpublishMany: (args: {\n    model: string;\n    documentIds: string[];\n    params?: object;\n  }) => Promise<BulkOperationResponse<BulkUnpublish.Response>>;\n};\n\ntype IUseDocumentActs = ReturnType<UseDocumentActions>;\n\n/**\n * @alpha\n * @public\n * @description Contains all the operations that can be performed on a single document.\n * Designed to be able to be used anywhere within a Strapi app. The hooks will handle\n * notifications should the operation fail, however the response is always returned incase\n * the user needs to handle side-effects.\n * @example\n * ```tsx\n * import { Form } from '@strapi/admin/admin';\n *\n * const { id, model, collectionType } = useParams<{ id: string; model: string; collectionType: string }>();\n * const { update } = useDocumentActions();\n *\n * const handleSubmit = async (data) => {\n *  await update({ collectionType, model, documentId: id }, data);\n * }\n *\n * return <Form method=\"PUT\" onSubmit={handleSubmit} />\n * ```\n *\n * @see {@link https://contributor.strapi.io/docs/core/content-manager/hooks/use-document-operations} for more information\n */\nconst useDocumentActions: UseDocumentActions = () => {\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const navigate = useNavigate();\n  const setCurrentStep = useGuidedTour('useDocumentActions', (state) => state.setCurrentStep);\n\n  const [deleteDocument] = useDeleteDocumentMutation();\n  const _delete: IUseDocumentActs['delete'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }, trackerProperty) => {\n      try {\n        trackUsage('willDeleteEntry', trackerProperty);\n\n        const res = await deleteDocument({\n          collectionType,\n          model,\n          documentId,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.delete'),\n            defaultMessage: 'Deleted document',\n          }),\n        });\n\n        trackUsage('didDeleteEntry', trackerProperty);\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotDeleteEntry', { error: err, ...trackerProperty });\n\n        throw err;\n      }\n    },\n    [trackUsage, deleteDocument, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [deleteManyDocuments] = useDeleteManyDocumentsMutation();\n\n  const deleteMany: IUseDocumentActs['deleteMany'] = React.useCallback(\n    async ({ model, documentIds, params }) => {\n      try {\n        trackUsage('willBulkDeleteEntries');\n\n        const res = await deleteManyDocuments({\n          model,\n          documentIds,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          title: formatMessage({\n            id: getTranslation('success.records.delete'),\n            defaultMessage: 'Successfully deleted.',\n          }),\n          message: '',\n        });\n\n        trackUsage('didBulkDeleteEntries');\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotBulkDeleteEntries');\n\n        throw err;\n      }\n    },\n    [trackUsage, deleteManyDocuments, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [discardDocument] = useDiscardDocumentMutation();\n  const discard: IUseDocumentActs['discard'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }) => {\n      try {\n        const res = await discardDocument({\n          collectionType,\n          model,\n          documentId,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: 'content-manager.success.record.discard',\n            defaultMessage: 'Changes discarded',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [discardDocument, formatAPIError, formatMessage, toggleNotification]\n  );\n\n  const [publishDocument] = usePublishDocumentMutation();\n  const publish: IUseDocumentActs['publish'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }, data) => {\n      try {\n        trackUsage('willPublishEntry');\n\n        const res = await publishDocument({\n          collectionType,\n          model,\n          documentId,\n          data,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n          return { error: res.error };\n        }\n\n        trackUsage('didPublishEntry');\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.publish'),\n            defaultMessage: 'Published document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [trackUsage, publishDocument, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [publishManyDocuments] = usePublishManyDocumentsMutation();\n  const publishMany: IUseDocumentActs['publishMany'] = React.useCallback(\n    async ({ model, documentIds, params }) => {\n      try {\n        // TODO Confirm tracking events for bulk publish?\n\n        const res = await publishManyDocuments({\n          model,\n          documentIds,\n          params,\n        });\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.publish'),\n            defaultMessage: 'Published document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n        throw err;\n      }\n    },\n    [\n      // trackUsage,\n      publishManyDocuments,\n      toggleNotification,\n      formatMessage,\n      formatAPIError,\n    ]\n  );\n\n  const [updateDocument] = useUpdateDocumentMutation();\n  const update: IUseDocumentActs['update'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }, data, trackerProperty) => {\n      try {\n        trackUsage('willEditEntry', trackerProperty);\n\n        const res = await updateDocument({\n          collectionType,\n          model,\n          documentId,\n          data,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          trackUsage('didNotEditEntry', { error: res.error, ...trackerProperty });\n\n          return { error: res.error };\n        }\n\n        trackUsage('didEditEntry', trackerProperty);\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.save'),\n            defaultMessage: 'Saved document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        trackUsage('didNotEditEntry', { error: err, ...trackerProperty });\n\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [trackUsage, updateDocument, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [unpublishDocument] = useUnpublishDocumentMutation();\n  const unpublish: IUseDocumentActs['unpublish'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }, discardDraft = false) => {\n      try {\n        trackUsage('willUnpublishEntry');\n\n        const res = await unpublishDocument({\n          collectionType,\n          model,\n          documentId,\n          params,\n          data: {\n            discardDraft,\n          },\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          return { error: res.error };\n        }\n\n        trackUsage('didUnpublishEntry');\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.unpublish'),\n            defaultMessage: 'Unpublished document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [trackUsage, unpublishDocument, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [unpublishManyDocuments] = useUnpublishManyDocumentsMutation();\n  const unpublishMany: IUseDocumentActs['unpublishMany'] = React.useCallback(\n    async ({ model, documentIds, params }) => {\n      try {\n        trackUsage('willBulkUnpublishEntries');\n\n        const res = await unpublishManyDocuments({\n          model,\n          documentIds,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          return { error: res.error };\n        }\n\n        trackUsage('didBulkUnpublishEntries');\n\n        toggleNotification({\n          type: 'success',\n          title: formatMessage({\n            id: getTranslation('success.records.unpublish'),\n            defaultMessage: 'Successfully unpublished.',\n          }),\n          message: '',\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotBulkUnpublishEntries');\n\n        throw err;\n      }\n    },\n    [trackUsage, unpublishManyDocuments, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [createDocument] = useCreateDocumentMutation();\n  const create: IUseDocumentActs['create'] = React.useCallback(\n    async ({ model, params }, data, trackerProperty) => {\n      try {\n        const res = await createDocument({\n          model,\n          data,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          trackUsage('didNotCreateEntry', { error: res.error, ...trackerProperty });\n\n          return { error: res.error };\n        }\n\n        trackUsage('didCreateEntry', trackerProperty);\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.save'),\n            defaultMessage: 'Saved document',\n          }),\n        });\n\n        setCurrentStep('contentManager.success');\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotCreateEntry', { error: err, ...trackerProperty });\n\n        throw err;\n      }\n    },\n    [createDocument, formatAPIError, formatMessage, toggleNotification, trackUsage]\n  );\n\n  const [autoCloneDocument] = useAutoCloneDocumentMutation();\n  const autoClone: IUseDocumentActs['autoClone'] = React.useCallback(\n    async ({ model, sourceId }) => {\n      try {\n        const res = await autoCloneDocument({\n          model,\n          sourceId,\n        });\n\n        if ('error' in res) {\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.clone'),\n            defaultMessage: 'Cloned document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [autoCloneDocument, formatMessage, toggleNotification]\n  );\n\n  const [cloneDocument] = useCloneDocumentMutation();\n  const clone: IUseDocumentActs['clone'] = React.useCallback(\n    async ({ model, documentId, params }, body, trackerProperty) => {\n      try {\n        const { id: _id, ...restBody } = body;\n\n        /**\n         * If we're cloning we want to post directly to this endpoint\n         * so that the relations even if they're not listed in the EditView\n         * are correctly attached to the entry.\n         */\n        const res = await cloneDocument({\n          model,\n          sourceId: documentId,\n          data: restBody,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          trackUsage('didNotCreateEntry', { error: res.error, ...trackerProperty });\n\n          return { error: res.error };\n        }\n\n        trackUsage('didCreateEntry', trackerProperty);\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.clone'),\n            defaultMessage: 'Cloned document',\n          }),\n        });\n\n        // Redirect to normal edit view\n        navigate(`../../${res.data.data.documentId}`, { relative: 'path' });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotCreateEntry', { error: err, ...trackerProperty });\n\n        throw err;\n      }\n    },\n    [cloneDocument, trackUsage, toggleNotification, formatMessage, formatAPIError, navigate]\n  );\n\n  const [getDoc] = useLazyGetDocumentQuery();\n  const getDocument: IUseDocumentActs['getDocument'] = React.useCallback(\n    async (args) => {\n      const { data } = await getDoc(args);\n\n      return data;\n    },\n    [getDoc]\n  );\n\n  return {\n    autoClone,\n    clone,\n    create,\n    delete: _delete,\n    deleteMany,\n    discard,\n    getDocument,\n    publish,\n    publishMany,\n    unpublish,\n    unpublishMany,\n    update,\n  } satisfies IUseDocumentActs;\n};\n\nexport { useDocumentActions };\nexport type { UseDocumentActions, OperationResponse };\n", "/* eslint-disable check-file/filename-naming-convention */\nimport * as React from 'react';\n\nimport { type PathRouteProps } from 'react-router-dom';\n\nconst ProtectedHistoryPage = React.lazy(() =>\n  import('./pages/History').then((mod) => ({ default: mod.ProtectedHistoryPage }))\n);\n\n/**\n * These routes will be merged with the rest of the Content Manager routes\n */\nconst routes: PathRouteProps[] = [\n  {\n    path: ':collectionType/:slug/:id/history',\n    Component: ProtectedHistoryPage,\n  },\n  {\n    path: ':collectionType/:slug/history',\n    Component: ProtectedHistoryPage,\n  },\n];\n\nexport { routes };\n", "/* eslint-disable check-file/filename-naming-convention */\nimport * as React from 'react';\n\nimport type { PathRouteProps } from 'react-router-dom';\n\nconst ProtectedPreviewPage = React.lazy(() =>\n  import('./pages/Preview').then((mod) => ({ default: mod.ProtectedPreviewPage }))\n);\n\nconst routes: PathRouteProps[] = [\n  {\n    path: ':collectionType/:slug/:id/preview',\n    Component: ProtectedPreviewPage,\n  },\n  {\n    path: ':collectionType/:slug/preview',\n    Component: ProtectedPreviewPage,\n  },\n];\n\nexport { routes };\n", "/* eslint-disable check-file/filename-naming-convention */\nimport { lazy } from 'react';\n\nimport { Navigate, PathRouteProps, useParams } from 'react-router-dom';\n\nimport { COLLECTION_TYPES, SINGLE_TYPES } from './constants/collections';\nimport { routes as historyRoutes } from './history/routes';\nimport { routes as previewRoutes } from './preview/routes';\n\nconst ProtectedEditViewPage = lazy(() =>\n  import('./pages/EditView/EditViewPage').then((mod) => ({ default: mod.ProtectedEditViewPage }))\n);\nconst ProtectedListViewPage = lazy(() =>\n  import('./pages/ListView/ListViewPage').then((mod) => ({ default: mod.ProtectedListViewPage }))\n);\nconst ProtectedListConfiguration = lazy(() =>\n  import('./pages/ListConfiguration/ListConfigurationPage').then((mod) => ({\n    default: mod.ProtectedListConfiguration,\n  }))\n);\nconst ProtectedEditConfigurationPage = lazy(() =>\n  import('./pages/EditConfigurationPage').then((mod) => ({\n    default: mod.ProtectedEditConfigurationPage,\n  }))\n);\nconst ProtectedComponentConfigurationPage = lazy(() =>\n  import('./pages/ComponentConfigurationPage').then((mod) => ({\n    default: mod.ProtectedComponentConfigurationPage,\n  }))\n);\nconst NoPermissions = lazy(() =>\n  import('./pages/NoPermissionsPage').then((mod) => ({ default: mod.NoPermissions }))\n);\nconst NoContentType = lazy(() =>\n  import('./pages/NoContentTypePage').then((mod) => ({ default: mod.NoContentType }))\n);\n\nconst CollectionTypePages = () => {\n  const { collectionType } = useParams<{ collectionType: string }>();\n\n  /**\n   * We only support two types of collections.\n   */\n  if (collectionType !== COLLECTION_TYPES && collectionType !== SINGLE_TYPES) {\n    return <Navigate to=\"/404\" />;\n  }\n\n  return collectionType === COLLECTION_TYPES ? (\n    <ProtectedListViewPage />\n  ) : (\n    <ProtectedEditViewPage />\n  );\n};\n\nconst CLONE_RELATIVE_PATH = ':collectionType/:slug/clone/:origin';\nconst CLONE_PATH = `/content-manager/${CLONE_RELATIVE_PATH}`;\nconst LIST_RELATIVE_PATH = ':collectionType/:slug';\nconst LIST_PATH = `/content-manager/collection-types/:slug`;\n\nconst routes: PathRouteProps[] = [\n  {\n    path: LIST_RELATIVE_PATH,\n    element: <CollectionTypePages />,\n  },\n  {\n    path: ':collectionType/:slug/:id',\n    Component: ProtectedEditViewPage,\n  },\n  {\n    path: CLONE_RELATIVE_PATH,\n    Component: ProtectedEditViewPage,\n  },\n  {\n    path: ':collectionType/:slug/configurations/list',\n    Component: ProtectedListConfiguration,\n  },\n  {\n    path: 'components/:slug/configurations/edit',\n    Component: ProtectedComponentConfigurationPage,\n  },\n  {\n    path: ':collectionType/:slug/configurations/edit',\n    Component: ProtectedEditConfigurationPage,\n  },\n  {\n    path: '403',\n    Component: NoPermissions,\n  },\n  {\n    path: 'no-content-types',\n    Component: NoContentType,\n  },\n  ...historyRoutes,\n  ...previewRoutes,\n];\n\nexport { routes, CLONE_PATH, LIST_PATH };\n", "import * as React from 'react';\n\nimport {\n  useForm,\n  useNotification,\n  NotificationConfig,\n  useAPIErrorHandler,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Button,\n  Dialog,\n  Flex,\n  Modal,\n  Radio,\n  Typography,\n  VisuallyHidden,\n  Menu,\n  ButtonProps,\n} from '@strapi/design-system';\nimport { Cross, More, WarningCircle } from '@strapi/icons';\nimport mapValues from 'lodash/fp/mapValues';\nimport { useIntl } from 'react-intl';\nimport { useMatch, useNavigate, useParams } from 'react-router-dom';\nimport { DefaultTheme, styled } from 'styled-components';\n\nimport { PUBLISHED_AT_ATTRIBUTE_NAME } from '../../../constants/attributes';\nimport { SINGLE_TYPES } from '../../../constants/collections';\nimport { useDocumentRBAC } from '../../../features/DocumentRBAC';\nimport { useDoc } from '../../../hooks/useDocument';\nimport { useDocumentActions } from '../../../hooks/useDocumentActions';\nimport { CLONE_PATH, LIST_PATH } from '../../../router';\nimport { useGetDraftRelationCountQuery } from '../../../services/documents';\nimport { isBaseQueryError, buildValidParams } from '../../../utils/api';\nimport { getTranslation } from '../../../utils/translations';\n\nimport type { RelationsFormValue } from './FormInputs/Relations';\nimport type { DocumentActionComponent } from '../../../content-manager';\n\n/* -------------------------------------------------------------------------------------------------\n * Types\n * -----------------------------------------------------------------------------------------------*/\ntype DocumentActionPosition = 'panel' | 'header' | 'table-row';\n\ninterface DocumentActionDescription {\n  label: string;\n  onClick?: (event: React.SyntheticEvent) => Promise<boolean | void> | boolean | void;\n  icon?: React.ReactNode;\n  /**\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * @default 'panel'\n   * @description Where the action should be rendered.\n   */\n  position?: DocumentActionPosition | DocumentActionPosition[];\n  dialog?: DialogOptions | NotificationOptions | ModalOptions;\n  /**\n   * @default 'secondary'\n   */\n  variant?: ButtonProps['variant'];\n}\n\ninterface DialogOptions {\n  type: 'dialog';\n  title: string;\n  content?: React.ReactNode;\n  variant?: ButtonProps['variant'];\n  onConfirm?: () => void | Promise<void>;\n  onCancel?: () => void | Promise<void>;\n}\n\ninterface NotificationOptions {\n  type: 'notification';\n  title: string;\n  link?: {\n    label: string;\n    url: string;\n    target?: string;\n  };\n  content?: string;\n  onClose?: () => void;\n  status?: NotificationConfig['type'];\n  timeout?: number;\n}\n\ninterface ModalOptions {\n  type: 'modal';\n  title: string;\n  content: React.ComponentType<{ onClose: () => void }> | React.ReactNode;\n  footer?: React.ComponentType<{ onClose: () => void }> | React.ReactNode;\n  onClose?: () => void;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActions\n * -----------------------------------------------------------------------------------------------*/\n\ninterface Action extends DocumentActionDescription {\n  id: string;\n}\n\ninterface DocumentActionsProps {\n  actions: Action[];\n}\n\nconst DocumentActions = ({ actions }: DocumentActionsProps) => {\n  const { formatMessage } = useIntl();\n  const [primaryAction, secondaryAction, ...restActions] = actions.filter((action) => {\n    if (action.position === undefined) {\n      return true;\n    }\n\n    const positions = Array.isArray(action.position) ? action.position : [action.position];\n    return positions.includes('panel');\n  });\n\n  if (!primaryAction) {\n    return null;\n  }\n\n  return (\n    <Flex direction=\"column\" gap={2} alignItems=\"stretch\" width=\"100%\">\n      <Flex gap={2}>\n        <DocumentActionButton {...primaryAction} variant={primaryAction.variant || 'default'} />\n        {restActions.length > 0 ? (\n          <DocumentActionsMenu\n            actions={restActions}\n            label={formatMessage({\n              id: 'content-manager.containers.edit.panels.default.more-actions',\n              defaultMessage: 'More document actions',\n            })}\n          />\n        ) : null}\n      </Flex>\n      {secondaryAction ? (\n        <DocumentActionButton\n          {...secondaryAction}\n          variant={secondaryAction.variant || 'secondary'}\n        />\n      ) : null}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionButton\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DocumentActionButtonProps extends Action {}\n\nconst DocumentActionButton = (action: DocumentActionButtonProps) => {\n  const [dialogId, setDialogId] = React.useState<string | null>(null);\n  const { toggleNotification } = useNotification();\n\n  const handleClick = (action: Action) => async (e: React.MouseEvent) => {\n    const { onClick = () => false, dialog, id } = action;\n\n    const muteDialog = await onClick(e);\n\n    if (dialog && !muteDialog) {\n      switch (dialog.type) {\n        case 'notification':\n          toggleNotification({\n            title: dialog.title,\n            message: dialog.content,\n            type: dialog.status,\n            timeout: dialog.timeout,\n            onClose: dialog.onClose,\n          });\n          break;\n        case 'dialog':\n        case 'modal':\n          e.preventDefault();\n          setDialogId(id);\n      }\n    }\n  };\n\n  const handleClose = () => {\n    setDialogId(null);\n  };\n\n  return (\n    <>\n      <Button\n        flex=\"auto\"\n        startIcon={action.icon}\n        disabled={action.disabled}\n        onClick={handleClick(action)}\n        justifyContent=\"center\"\n        variant={action.variant || 'default'}\n        paddingTop=\"7px\"\n        paddingBottom=\"7px\"\n      >\n        {action.label}\n      </Button>\n      {action.dialog?.type === 'dialog' ? (\n        <DocumentActionConfirmDialog\n          {...action.dialog}\n          variant={action.dialog?.variant ?? action.variant}\n          isOpen={dialogId === action.id}\n          onClose={handleClose}\n        />\n      ) : null}\n      {action.dialog?.type === 'modal' ? (\n        <DocumentActionModal\n          {...action.dialog}\n          onModalClose={handleClose}\n          isOpen={dialogId === action.id}\n        />\n      ) : null}\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionMenu\n * -----------------------------------------------------------------------------------------------*/\ninterface DocumentActionsMenuProps {\n  actions: Action[];\n  children?: React.ReactNode;\n  label?: string;\n  variant?: 'ghost' | 'tertiary';\n}\n\nconst MenuItem = styled(Menu.Item)<{ isVariantDanger?: boolean; isDisabled?: boolean }>`\n  &:hover {\n    background: ${({ theme, isVariantDanger, isDisabled }) =>\n      isVariantDanger && !isDisabled ? theme.colors.danger100 : 'neutral'};\n  }\n`;\n\nconst DocumentActionsMenu = ({\n  actions,\n  children,\n  label,\n  variant = 'tertiary',\n}: DocumentActionsMenuProps) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [dialogId, setDialogId] = React.useState<string | null>(null);\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const isDisabled = actions.every((action) => action.disabled) || actions.length === 0;\n\n  const handleClick = (action: Action) => async (e: React.SyntheticEvent) => {\n    const { onClick = () => false, dialog, id } = action;\n\n    const muteDialog = await onClick(e);\n\n    if (dialog && !muteDialog) {\n      switch (dialog.type) {\n        case 'notification':\n          toggleNotification({\n            title: dialog.title,\n            message: dialog.content,\n            type: dialog.status,\n            timeout: dialog.timeout,\n            onClose: dialog.onClose,\n          });\n          break;\n        case 'dialog':\n        case 'modal':\n          setDialogId(id);\n      }\n    }\n  };\n\n  const handleClose = () => {\n    setDialogId(null);\n    setIsOpen(false);\n  };\n\n  return (\n    <Menu.Root open={isOpen} onOpenChange={setIsOpen}>\n      <Menu.Trigger\n        disabled={isDisabled}\n        size=\"S\"\n        endIcon={null}\n        paddingTop=\"4px\"\n        paddingLeft=\"7px\"\n        paddingRight=\"7px\"\n        variant={variant}\n      >\n        <More aria-hidden focusable={false} />\n        <VisuallyHidden tag=\"span\">\n          {label ||\n            formatMessage({\n              id: 'content-manager.containers.edit.panels.default.more-actions',\n              defaultMessage: 'More document actions',\n            })}\n        </VisuallyHidden>\n      </Menu.Trigger>\n      <Menu.Content maxHeight={undefined} popoverPlacement=\"bottom-end\">\n        {actions.map((action) => {\n          return (\n            <MenuItem\n              disabled={action.disabled}\n              /* @ts-expect-error – TODO: this is an error in the DS where it is most likely a synthetic event, not regular. */\n              onSelect={handleClick(action)}\n              display=\"block\"\n              key={action.id}\n              isVariantDanger={action.variant === 'danger'}\n              isDisabled={action.disabled}\n            >\n              <Flex justifyContent=\"space-between\" gap={4}>\n                <Flex\n                  color={!action.disabled ? convertActionVariantToColor(action.variant) : 'inherit'}\n                  gap={2}\n                  tag=\"span\"\n                >\n                  <Flex\n                    tag=\"span\"\n                    color={\n                      !action.disabled ? convertActionVariantToIconColor(action.variant) : 'inherit'\n                    }\n                  >\n                    {action.icon}\n                  </Flex>\n                  {action.label}\n                </Flex>\n              </Flex>\n            </MenuItem>\n          );\n        })}\n        {children}\n      </Menu.Content>\n      {actions.map((action) => {\n        return (\n          <React.Fragment key={action.id}>\n            {action.dialog?.type === 'dialog' ? (\n              <DocumentActionConfirmDialog\n                {...action.dialog}\n                variant={action.variant}\n                isOpen={dialogId === action.id}\n                onClose={handleClose}\n              />\n            ) : null}\n            {action.dialog?.type === 'modal' ? (\n              <DocumentActionModal\n                {...action.dialog}\n                onModalClose={handleClose}\n                isOpen={dialogId === action.id}\n              />\n            ) : null}\n          </React.Fragment>\n        );\n      })}\n    </Menu.Root>\n  );\n};\n\nconst convertActionVariantToColor = (\n  variant: DocumentActionDescription['variant'] = 'secondary'\n): keyof DefaultTheme['colors'] | undefined => {\n  switch (variant) {\n    case 'danger':\n      return 'danger600';\n    case 'secondary':\n      return undefined;\n    case 'success':\n      return 'success600';\n    default:\n      return 'primary600';\n  }\n};\n\nconst convertActionVariantToIconColor = (\n  variant: DocumentActionDescription['variant'] = 'secondary'\n): keyof DefaultTheme['colors'] | undefined => {\n  switch (variant) {\n    case 'danger':\n      return 'danger600';\n    case 'secondary':\n      return 'neutral500';\n    case 'success':\n      return 'success600';\n    default:\n      return 'primary600';\n  }\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionConfirmDialog\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DocumentActionConfirmDialogProps extends DialogOptions, Pick<Action, 'variant'> {\n  onClose: () => void;\n  isOpen: Dialog.Props['open'];\n}\n\nconst DocumentActionConfirmDialog = ({\n  onClose,\n  onCancel,\n  onConfirm,\n  title,\n  content,\n  isOpen,\n  variant = 'secondary',\n}: DocumentActionConfirmDialogProps) => {\n  const { formatMessage } = useIntl();\n\n  const handleClose = async () => {\n    if (onCancel) {\n      await onCancel();\n    }\n\n    onClose();\n  };\n\n  const handleConfirm = async () => {\n    if (onConfirm) {\n      await onConfirm();\n    }\n\n    onClose();\n  };\n\n  return (\n    <Dialog.Root open={isOpen} onOpenChange={handleClose}>\n      <Dialog.Content>\n        <Dialog.Header>{title}</Dialog.Header>\n        <Dialog.Body>{content}</Dialog.Body>\n        <Dialog.Footer>\n          <Dialog.Cancel>\n            <Button variant=\"tertiary\" fullWidth>\n              {formatMessage({\n                id: 'app.components.Button.cancel',\n                defaultMessage: 'Cancel',\n              })}\n            </Button>\n          </Dialog.Cancel>\n          <Button onClick={handleConfirm} variant={variant} fullWidth>\n            {formatMessage({\n              id: 'app.components.Button.confirm',\n              defaultMessage: 'Confirm',\n            })}\n          </Button>\n        </Dialog.Footer>\n      </Dialog.Content>\n    </Dialog.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionModal\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DocumentActionModalProps extends ModalOptions {\n  onModalClose: () => void;\n  isOpen?: boolean;\n}\n\nconst DocumentActionModal = ({\n  isOpen,\n  title,\n  onClose,\n  footer: Footer,\n  content: Content,\n  onModalClose,\n}: DocumentActionModalProps) => {\n  const handleClose = () => {\n    if (onClose) {\n      onClose();\n    }\n\n    onModalClose();\n  };\n\n  return (\n    <Modal.Root open={isOpen} onOpenChange={handleClose}>\n      <Modal.Content>\n        <Modal.Header>\n          <Modal.Title>{title}</Modal.Title>\n        </Modal.Header>\n        {typeof Content === 'function' ? (\n          <Content onClose={handleClose} />\n        ) : (\n          <Modal.Body>{Content}</Modal.Body>\n        )}\n        {typeof Footer === 'function' ? <Footer onClose={handleClose} /> : Footer}\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\nconst transformData = (data: Record<string, any>): any => {\n  if (Array.isArray(data)) {\n    return data.map(transformData);\n  }\n\n  if (typeof data === 'object' && data !== null) {\n    if ('apiData' in data) {\n      return data.apiData;\n    }\n\n    return mapValues(transformData)(data);\n  }\n\n  return data;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionComponents\n * -----------------------------------------------------------------------------------------------*/\n\nconst PublishAction: DocumentActionComponent = ({\n  activeTab,\n  documentId,\n  model,\n  collectionType,\n  meta,\n  document,\n}) => {\n  const { schema } = useDoc();\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatValidationErrors: formatValidationErrors } = useAPIErrorHandler();\n  const isListView = useMatch(LIST_PATH) !== null;\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const { id } = useParams();\n  const { formatMessage } = useIntl();\n  const canPublish = useDocumentRBAC('PublishAction', ({ canPublish }) => canPublish);\n  const { publish } = useDocumentActions();\n  const [\n    countDraftRelations,\n    { isLoading: isLoadingDraftRelations, isError: isErrorDraftRelations },\n  ] = useGetDraftRelationCountQuery();\n  const [localCountOfDraftRelations, setLocalCountOfDraftRelations] = React.useState(0);\n  const [serverCountOfDraftRelations, setServerCountOfDraftRelations] = React.useState(0);\n\n  const [{ query, rawQuery }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  const modified = useForm('PublishAction', ({ modified }) => modified);\n  const setSubmitting = useForm('PublishAction', ({ setSubmitting }) => setSubmitting);\n  const isSubmitting = useForm('PublishAction', ({ isSubmitting }) => isSubmitting);\n  const validate = useForm('PublishAction', (state) => state.validate);\n  const setErrors = useForm('PublishAction', (state) => state.setErrors);\n  const formValues = useForm('PublishAction', ({ values }) => values);\n\n  React.useEffect(() => {\n    if (isErrorDraftRelations) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: getTranslation('error.records.fetch-draft-relatons'),\n          defaultMessage: 'An error occurred while fetching draft relations on this document.',\n        }),\n      });\n    }\n  }, [isErrorDraftRelations, toggleNotification, formatMessage]);\n\n  React.useEffect(() => {\n    const localDraftRelations = new Set();\n\n    /**\n     * Extracts draft relations from the provided data object.\n     * It checks for a connect array of relations.\n     * If a relation has a status of 'draft', its id is added to the localDraftRelations set.\n     */\n    const extractDraftRelations = (data: Omit<RelationsFormValue, 'disconnect'>) => {\n      const relations = data.connect || [];\n      relations.forEach((relation) => {\n        if (relation.status === 'draft') {\n          localDraftRelations.add(relation.id);\n        }\n      });\n    };\n\n    /**\n     * Recursively traverses the provided data object to extract draft relations from arrays within 'connect' keys.\n     * If the data is an object, it looks for 'connect' keys to pass their array values to extractDraftRelations.\n     * It recursively calls itself for any non-null objects it contains.\n     */\n    const traverseAndExtract = (data: { [field: string]: any }) => {\n      Object.entries(data).forEach(([key, value]) => {\n        if (key === 'connect' && Array.isArray(value)) {\n          extractDraftRelations({ connect: value });\n        } else if (typeof value === 'object' && value !== null) {\n          traverseAndExtract(value);\n        }\n      });\n    };\n\n    if (!documentId || modified) {\n      traverseAndExtract(formValues);\n      setLocalCountOfDraftRelations(localDraftRelations.size);\n    }\n  }, [documentId, modified, formValues, setLocalCountOfDraftRelations]);\n\n  React.useEffect(() => {\n    if (!document || !document.documentId || isListView) {\n      return;\n    }\n\n    const fetchDraftRelationsCount = async () => {\n      const { data, error } = await countDraftRelations({\n        collectionType,\n        model,\n        documentId,\n        params,\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      if (data) {\n        setServerCountOfDraftRelations(data.data);\n      }\n    };\n\n    fetchDraftRelationsCount();\n  }, [isListView, document, documentId, countDraftRelations, collectionType, model, params]);\n\n  const isDocumentPublished =\n    (document?.[PUBLISHED_AT_ATTRIBUTE_NAME] ||\n      meta?.availableStatus.some((doc) => doc[PUBLISHED_AT_ATTRIBUTE_NAME] !== null)) &&\n    document?.status !== 'modified';\n\n  if (!schema?.options?.draftAndPublish) {\n    return null;\n  }\n\n  const performPublish = async () => {\n    setSubmitting(true);\n\n    try {\n      const { errors } = await validate(true, {\n        status: 'published',\n      });\n\n      if (errors) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: 'content-manager.validation.error',\n            defaultMessage:\n              'There are validation errors in your document. Please fix them before saving.',\n          }),\n        });\n\n        return;\n      }\n\n      const res = await publish(\n        {\n          collectionType,\n          model,\n          documentId,\n          params,\n        },\n        transformData(formValues)\n      );\n\n      if ('data' in res && collectionType !== SINGLE_TYPES) {\n        /**\n         * TODO: refactor the router so we can just do `../${res.data.documentId}` instead of this.\n         */\n        if (id === 'create') {\n          navigate({\n            pathname: `../${collectionType}/${model}/${res.data.documentId}`,\n            search: rawQuery,\n          });\n        }\n      } else if (\n        'error' in res &&\n        isBaseQueryError(res.error) &&\n        res.error.name === 'ValidationError'\n      ) {\n        setErrors(formatValidationErrors(res.error));\n      }\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const totalDraftRelations = localCountOfDraftRelations + serverCountOfDraftRelations;\n  // TODO skipping this for now as there is a bug with the draft relation count that will be worked on separately\n  // see RFC \"Count draft relations\" in Notion\n  const enableDraftRelationsCount = false;\n  const hasDraftRelations = enableDraftRelationsCount && totalDraftRelations > 0;\n\n  return {\n    /**\n     * Disabled when:\n     *  - currently if you're cloning a document we don't support publish & clone at the same time.\n     *  - the form is submitting\n     *  - the active tab is the published tab\n     *  - the document is already published & not modified\n     *  - the document is being created & not modified\n     *  - the user doesn't have the permission to publish\n     */\n    disabled:\n      isCloning ||\n      isSubmitting ||\n      isLoadingDraftRelations ||\n      activeTab === 'published' ||\n      (!modified && isDocumentPublished) ||\n      (!modified && !document?.documentId) ||\n      !canPublish,\n    label: formatMessage({\n      id: 'app.utils.publish',\n      defaultMessage: 'Publish',\n    }),\n    onClick: async () => {\n      if (hasDraftRelations) {\n        // In this case we need to show the user a confirmation dialog.\n        // Return from the onClick and let the dialog handle the process.\n        return;\n      }\n\n      await performPublish();\n    },\n    dialog: hasDraftRelations\n      ? {\n          type: 'dialog',\n          variant: 'danger',\n          footer: null,\n          title: formatMessage({\n            id: getTranslation(`popUpwarning.warning.bulk-has-draft-relations.title`),\n            defaultMessage: 'Confirmation',\n          }),\n          content: formatMessage(\n            {\n              id: getTranslation(`popUpwarning.warning.bulk-has-draft-relations.message`),\n              defaultMessage:\n                'This entry is related to {count, plural, one {# draft entry} other {# draft entries}}. Publishing it could leave broken links in your app.',\n            },\n            {\n              count: totalDraftRelations,\n            }\n          ),\n          onConfirm: async () => {\n            await performPublish();\n          },\n        }\n      : undefined,\n  };\n};\n\nPublishAction.type = 'publish';\nPublishAction.position = 'panel';\n\nconst UpdateAction: DocumentActionComponent = ({\n  activeTab,\n  documentId,\n  model,\n  collectionType,\n}) => {\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatValidationErrors: formatValidationErrors } = useAPIErrorHandler();\n  const cloneMatch = useMatch(CLONE_PATH);\n  const isCloning = cloneMatch !== null;\n  const { formatMessage } = useIntl();\n  const { create, update, clone } = useDocumentActions();\n  const [{ query, rawQuery }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  const isSubmitting = useForm('UpdateAction', ({ isSubmitting }) => isSubmitting);\n  const modified = useForm('UpdateAction', ({ modified }) => modified);\n  const setSubmitting = useForm('UpdateAction', ({ setSubmitting }) => setSubmitting);\n  const document = useForm('UpdateAction', ({ values }) => values);\n  const validate = useForm('UpdateAction', (state) => state.validate);\n  const setErrors = useForm('UpdateAction', (state) => state.setErrors);\n  const resetForm = useForm('PublishAction', ({ resetForm }) => resetForm);\n\n  const handleUpdate = React.useCallback(async () => {\n    setSubmitting(true);\n\n    try {\n      if (!modified) {\n        return;\n      }\n\n      const { errors } = await validate(true, {\n        status: 'draft',\n      });\n\n      if (errors) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: 'content-manager.validation.error',\n            defaultMessage:\n              'There are validation errors in your document. Please fix them before saving.',\n          }),\n        });\n\n        return;\n      }\n\n      if (isCloning) {\n        const res = await clone(\n          {\n            model,\n            documentId: cloneMatch.params.origin!,\n            params,\n          },\n          transformData(document)\n        );\n\n        if ('data' in res) {\n          navigate(\n            {\n              pathname: `../${res.data.documentId}`,\n              search: rawQuery,\n            },\n            { relative: 'path' }\n          );\n        } else if (\n          'error' in res &&\n          isBaseQueryError(res.error) &&\n          res.error.name === 'ValidationError'\n        ) {\n          setErrors(formatValidationErrors(res.error));\n        }\n      } else if (documentId || collectionType === SINGLE_TYPES) {\n        const res = await update(\n          {\n            collectionType,\n            model,\n            documentId,\n            params,\n          },\n          transformData(document)\n        );\n\n        if ('error' in res && isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n          setErrors(formatValidationErrors(res.error));\n        } else {\n          resetForm();\n        }\n      } else {\n        const res = await create(\n          {\n            model,\n            params,\n          },\n          transformData(document)\n        );\n\n        if ('data' in res && collectionType !== SINGLE_TYPES) {\n          navigate(\n            {\n              pathname: `../${res.data.documentId}`,\n              search: rawQuery,\n            },\n            { replace: true, relative: 'path' }\n          );\n        } else if (\n          'error' in res &&\n          isBaseQueryError(res.error) &&\n          res.error.name === 'ValidationError'\n        ) {\n          setErrors(formatValidationErrors(res.error));\n        }\n      }\n    } finally {\n      setSubmitting(false);\n    }\n  }, [\n    clone,\n    cloneMatch?.params.origin,\n    collectionType,\n    create,\n    document,\n    documentId,\n    formatMessage,\n    formatValidationErrors,\n    isCloning,\n    model,\n    modified,\n    navigate,\n    params,\n    rawQuery,\n    resetForm,\n    setErrors,\n    setSubmitting,\n    toggleNotification,\n    update,\n    validate,\n  ]);\n\n  // Auto-save on CMD+S or CMD+Enter on macOS, and CTRL+S or CTRL+Enter on Windows/Linux\n  React.useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        handleUpdate();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleUpdate]);\n\n  return {\n    /**\n     * Disabled when:\n     * - the form is submitting\n     * - the document is not modified & we're not cloning (you can save a clone entity straight away)\n     * - the active tab is the published tab\n     */\n    disabled: isSubmitting || (!modified && !isCloning) || activeTab === 'published',\n    label: formatMessage({\n      id: 'global.save',\n      defaultMessage: 'Save',\n    }),\n    onClick: handleUpdate,\n  };\n};\n\nUpdateAction.type = 'update';\nUpdateAction.position = 'panel';\n\nconst UNPUBLISH_DRAFT_OPTIONS = {\n  KEEP: 'keep',\n  DISCARD: 'discard',\n};\n\nconst UnpublishAction: DocumentActionComponent = ({\n  activeTab,\n  documentId,\n  model,\n  collectionType,\n  document,\n}) => {\n  const { formatMessage } = useIntl();\n  const { schema } = useDoc();\n  const canPublish = useDocumentRBAC('UnpublishAction', ({ canPublish }) => canPublish);\n  const { unpublish } = useDocumentActions();\n  const [{ query }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n  const { toggleNotification } = useNotification();\n  const [shouldKeepDraft, setShouldKeepDraft] = React.useState(true);\n\n  const isDocumentModified = document?.status === 'modified';\n\n  const handleChange = (value: string) => {\n    setShouldKeepDraft(value === UNPUBLISH_DRAFT_OPTIONS.KEEP);\n  };\n\n  if (!schema?.options?.draftAndPublish) {\n    return null;\n  }\n\n  return {\n    disabled:\n      !canPublish ||\n      activeTab === 'published' ||\n      (document?.status !== 'published' && document?.status !== 'modified'),\n    label: formatMessage({\n      id: 'app.utils.unpublish',\n      defaultMessage: 'Unpublish',\n    }),\n    icon: <Cross />,\n    onClick: async () => {\n      /**\n       * return if there's no id & we're in a collection type, or the status modified\n       * for either collection type because we use a dialog to handle the process in\n       * the latter case.\n       */\n      if ((!documentId && collectionType !== SINGLE_TYPES) || isDocumentModified) {\n        if (!documentId) {\n          // This should never, ever, happen.\n          console.error(\n            \"You're trying to unpublish a document without an id, this is likely a bug with Strapi. Please open an issue.\"\n          );\n\n          toggleNotification({\n            message: formatMessage({\n              id: 'content-manager.actions.unpublish.error',\n              defaultMessage: 'An error occurred while trying to unpublish the document.',\n            }),\n            type: 'danger',\n          });\n        }\n\n        return;\n      }\n\n      await unpublish({\n        collectionType,\n        model,\n        documentId,\n        params,\n      });\n    },\n    dialog: isDocumentModified\n      ? {\n          type: 'dialog',\n          title: formatMessage({\n            id: 'app.components.ConfirmDialog.title',\n            defaultMessage: 'Confirmation',\n          }),\n          content: (\n            <Flex alignItems=\"flex-start\" direction=\"column\" gap={6}>\n              <Flex width=\"100%\" direction=\"column\" gap={2}>\n                <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n                <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\n                  {formatMessage({\n                    id: 'content-manager.actions.unpublish.dialog.body',\n                    defaultMessage: 'Are you sure?',\n                  })}\n                </Typography>\n              </Flex>\n              <Radio.Group\n                defaultValue={UNPUBLISH_DRAFT_OPTIONS.KEEP}\n                name=\"discard-options\"\n                aria-label={formatMessage({\n                  id: 'content-manager.actions.unpublish.dialog.radio-label',\n                  defaultMessage: 'Choose an option to unpublish the document.',\n                })}\n                onValueChange={handleChange}\n              >\n                <Radio.Item checked={shouldKeepDraft} value={UNPUBLISH_DRAFT_OPTIONS.KEEP}>\n                  {formatMessage({\n                    id: 'content-manager.actions.unpublish.dialog.option.keep-draft',\n                    defaultMessage: 'Keep draft',\n                  })}\n                </Radio.Item>\n                <Radio.Item checked={!shouldKeepDraft} value={UNPUBLISH_DRAFT_OPTIONS.DISCARD}>\n                  {formatMessage({\n                    id: 'content-manager.actions.unpublish.dialog.option.replace-draft',\n                    defaultMessage: 'Replace draft',\n                  })}\n                </Radio.Item>\n              </Radio.Group>\n            </Flex>\n          ),\n          onConfirm: async () => {\n            if (!documentId && collectionType !== SINGLE_TYPES) {\n              // This should never, ever, happen.\n              console.error(\n                \"You're trying to unpublish a document without an id, this is likely a bug with Strapi. Please open an issue.\"\n              );\n\n              toggleNotification({\n                message: formatMessage({\n                  id: 'content-manager.actions.unpublish.error',\n                  defaultMessage: 'An error occurred while trying to unpublish the document.',\n                }),\n                type: 'danger',\n              });\n            }\n\n            await unpublish(\n              {\n                collectionType,\n                model,\n                documentId,\n                params,\n              },\n              !shouldKeepDraft\n            );\n          },\n        }\n      : undefined,\n    variant: 'danger',\n    position: ['panel', 'table-row'],\n  };\n};\n\nUnpublishAction.type = 'unpublish';\nUnpublishAction.position = 'panel';\n\nconst DiscardAction: DocumentActionComponent = ({\n  activeTab,\n  documentId,\n  model,\n  collectionType,\n  document,\n}) => {\n  const { formatMessage } = useIntl();\n  const { schema } = useDoc();\n  const canUpdate = useDocumentRBAC('DiscardAction', ({ canUpdate }) => canUpdate);\n  const { discard } = useDocumentActions();\n  const [{ query }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  if (!schema?.options?.draftAndPublish) {\n    return null;\n  }\n\n  return {\n    disabled: !canUpdate || activeTab === 'published' || document?.status !== 'modified',\n    label: formatMessage({\n      id: 'content-manager.actions.discard.label',\n      defaultMessage: 'Discard changes',\n    }),\n    icon: <Cross />,\n    position: ['panel', 'table-row'],\n    variant: 'danger',\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      content: (\n        <Flex direction=\"column\" gap={2}>\n          <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\n            {formatMessage({\n              id: 'content-manager.actions.discard.dialog.body',\n              defaultMessage: 'Are you sure?',\n            })}\n          </Typography>\n        </Flex>\n      ),\n      onConfirm: async () => {\n        await discard({\n          collectionType,\n          model,\n          documentId,\n          params,\n        });\n      },\n    },\n  };\n};\n\nDiscardAction.type = 'discard';\nDiscardAction.position = 'panel';\n\nconst DEFAULT_ACTIONS = [PublishAction, UpdateAction, UnpublishAction, DiscardAction];\n\nexport { DocumentActions, DocumentActionsMenu, DocumentActionButton, DEFAULT_ACTIONS };\nexport type {\n  DocumentActionDescription,\n  DocumentActionPosition,\n  DialogOptions,\n  NotificationOptions,\n  ModalOptions,\n};\n", "import * as React from 'react';\n\nimport { Duration, intervalToDuration, isPast } from 'date-fns';\nimport { useIntl } from 'react-intl';\n\nconst intervals: Array<keyof Duration> = ['years', 'months', 'days', 'hours', 'minutes', 'seconds'];\n\ninterface CustomInterval {\n  unit: keyof Duration;\n  text: string;\n  threshold: number;\n}\n\ninterface RelativeTimeProps extends React.ComponentPropsWithoutRef<'time'> {\n  timestamp: Date;\n  customIntervals?: CustomInterval[];\n}\n\n/**\n * Displays the relative time between a given timestamp and the current time.\n * You can display a custom message for given time intervals by passing an array of custom intervals.\n *\n * @example\n * ```jsx\n * <caption>Display \"last hour\" if the timestamp is less than an hour ago</caption>\n * <RelativeTime\n *  timestamp={new Date('2021-01-01')}\n *  customIntervals={[\n *   { unit: 'hours', threshold: 1, text: 'last hour' },\n *  ]}\n * ```\n */\nconst RelativeTime = React.forwardRef<HTMLTimeElement, RelativeTimeProps>(\n  ({ timestamp, customIntervals = [], ...restProps }, forwardedRef) => {\n    const { formatRelativeTime, formatDate, formatTime } = useIntl();\n\n    /**\n     * TODO: make this auto-update, like a clock.\n     */\n    const interval = intervalToDuration({\n      start: timestamp,\n      end: Date.now(),\n      // see https://github.com/date-fns/date-fns/issues/2891 – No idea why it's all partial it returns it every time.\n    }) as Required<Duration>;\n\n    const unit =\n      intervals.find((intervalUnit) => {\n        return interval[intervalUnit] > 0 && Object.keys(interval).includes(intervalUnit);\n      }) ?? 'seconds';\n\n    const relativeTime = isPast(timestamp) ? -interval[unit] : interval[unit];\n\n    // Display custom text if interval is less than the threshold\n    const customInterval = customIntervals.find(\n      (custom) => interval[custom.unit] < custom.threshold\n    );\n\n    const displayText = customInterval\n      ? customInterval.text\n      : formatRelativeTime(relativeTime, unit, { numeric: 'auto' });\n\n    return (\n      <time\n        ref={forwardedRef}\n        dateTime={timestamp.toISOString()}\n        role=\"time\"\n        title={`${formatDate(timestamp)} ${formatTime(timestamp)}`}\n        {...restProps}\n      >\n        {displayText}\n      </time>\n    );\n  }\n);\n\nexport { RelativeTime };\nexport type { CustomInterval, RelativeTimeProps };\n", "import type { SanitizedAdminUser } from '@strapi/admin/strapi-admin';\n\n/**\n * Retrieves the display name of an admin panel user\n */\nconst getDisplayName = ({\n  firstname,\n  lastname,\n  username,\n  email,\n}: Partial<\n  Pick<SanitizedAdminUser, 'firstname' | 'lastname' | 'username' | 'email'>\n> = {}): string => {\n  if (username) {\n    return username;\n  }\n\n  // firstname is not required if the user is created with a username\n  if (firstname) {\n    return `${firstname} ${lastname ?? ''}`.trim();\n  }\n\n  return email ?? '';\n};\n\nexport { getDisplayName };\n", "const capitalise = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\n\nexport { capitalise };\n", "import { Status, StatusProps, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { capitalise } from '../../../utils/strings';\n\ninterface DocumentStatusProps extends Omit<StatusProps, 'children' | 'variant'> {\n  /**\n   * The status of the document (draft, published, etc.)\n   * @default 'draft'\n   */\n  status?: string;\n}\n\n/**\n * @public\n * @description Displays the status of a document (draft, published, etc.)\n * and automatically calculates the appropriate variant for the status.\n */\nconst DocumentStatus = ({ status = 'draft', size = 'S', ...restProps }: DocumentStatusProps) => {\n  const statusVariant =\n    status === 'draft' ? 'secondary' : status === 'published' ? 'success' : 'alternative';\n\n  const { formatMessage } = useIntl();\n\n  return (\n    <Status {...restProps} size={size} variant={statusVariant}>\n      <Typography tag=\"span\" variant=\"omega\" fontWeight=\"bold\">\n        {formatMessage({\n          id: `content-manager.containers.List.${status}`,\n          defaultMessage: capitalise(status),\n        })}\n      </Typography>\n    </Status>\n  );\n};\n\nexport { DocumentStatus };\nexport type { DocumentStatusProps };\n", "import * as React from 'react';\n\nimport {\n  DescriptionComponentRenderer,\n  useForm,\n  BackButton,\n  useNotification,\n  useStrapiApp,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Flex,\n  SingleSelect,\n  SingleSelectOption,\n  Typography,\n  IconButton,\n  Dialog,\n} from '@strapi/design-system';\nimport { ListPlus, Pencil, Trash, WarningCircle } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useMatch, useNavigate, useParams } from 'react-router-dom';\n\nimport { RelativeTime } from '../../../components/RelativeTime';\nimport {\n  CREATED_AT_ATTRIBUTE_NAME,\n  CREATED_BY_ATTRIBUTE_NAME,\n  PUBLISHED_AT_ATTRIBUTE_NAME,\n  PUBLISHED_BY_ATTRIBUTE_NAME,\n  UPDATED_AT_ATTRIBUTE_NAME,\n  UPDATED_BY_ATTRIBUTE_NAME,\n} from '../../../constants/attributes';\nimport { COLLECTION_TYPES, SINGLE_TYPES } from '../../../constants/collections';\nimport { useDocumentRBAC } from '../../../features/DocumentRBAC';\nimport { useDoc } from '../../../hooks/useDocument';\nimport { useDocumentActions } from '../../../hooks/useDocumentActions';\nimport { CLONE_PATH, LIST_PATH } from '../../../router';\nimport { getDisplayName } from '../../../utils/users';\n\nimport { DocumentActionsMenu } from './DocumentActions';\nimport { DocumentStatus } from './DocumentStatus';\n\nimport type { ContentManagerPlugin, DocumentActionComponent } from '../../../content-manager';\n\n/* -------------------------------------------------------------------------------------------------\n * Header\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderProps {\n  isCreating?: boolean;\n  status?: 'draft' | 'published' | 'modified';\n  title?: string;\n}\n\nconst Header = ({ isCreating, status, title: documentTitle = 'Untitled' }: HeaderProps) => {\n  const { formatMessage } = useIntl();\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const params = useParams<{ collectionType: string; slug: string }>();\n\n  const title = isCreating\n    ? formatMessage({\n        id: 'content-manager.containers.edit.title.new',\n        defaultMessage: 'Create an entry',\n      })\n    : documentTitle;\n\n  return (\n    <Flex direction=\"column\" alignItems=\"flex-start\" paddingTop={6} paddingBottom={4} gap={2}>\n      <BackButton\n        fallback={\n          params.collectionType === SINGLE_TYPES\n            ? undefined\n            : `../${COLLECTION_TYPES}/${params.slug}`\n        }\n      />\n      <Flex width=\"100%\" justifyContent=\"space-between\" gap=\"80px\" alignItems=\"flex-start\">\n        <Typography variant=\"alpha\" tag=\"h1\">\n          {title}\n        </Typography>\n        <HeaderToolbar />\n      </Flex>\n      {status ? (\n        <Box marginTop={1}>\n          <DocumentStatus status={isCloning ? 'draft' : status} />\n        </Box>\n      ) : null}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderToolbar\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DialogOptions {\n  type: 'dialog';\n  title: string;\n  content?: React.ReactNode;\n  footer?: React.ReactNode;\n}\n\ninterface HeaderActionDescription {\n  disabled?: boolean;\n  label: string;\n  icon?: React.ReactNode;\n  type?: 'icon' | 'default';\n  onClick?: (event: React.SyntheticEvent) => Promise<boolean | void> | boolean | void;\n  dialog?: DialogOptions;\n  options?: Array<{\n    disabled?: boolean;\n    label: string;\n    startIcon?: React.ReactNode;\n    textValue?: string;\n    value: string;\n  }>;\n  onSelect?: (value: string) => void;\n  value?: string;\n  customizeContent?: (value: string) => React.ReactNode;\n}\n\n/**\n * @description Contains the document actions that have `position: header`, if there are\n * none we still render the menu because we render the information about the document there.\n */\nconst HeaderToolbar = () => {\n  const { formatMessage } = useIntl();\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const [\n    {\n      query: { status = 'draft' },\n    },\n  ] = useQueryParams<{ status: 'draft' | 'published' }>();\n  const { model, id, document, meta, collectionType } = useDoc();\n  const plugins = useStrapiApp('HeaderToolbar', (state) => state.plugins);\n\n  return (\n    <Flex gap={2}>\n      <DescriptionComponentRenderer\n        props={{\n          activeTab: status,\n          model,\n          documentId: id,\n          document: isCloning ? undefined : document,\n          meta: isCloning ? undefined : meta,\n          collectionType,\n        }}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getHeaderActions()}\n      >\n        {(actions) => {\n          if (actions.length > 0) {\n            return <HeaderActions actions={actions} />;\n          } else {\n            return null;\n          }\n        }}\n      </DescriptionComponentRenderer>\n      <DescriptionComponentRenderer\n        props={{\n          activeTab: status,\n          model,\n          documentId: id,\n          document: isCloning ? undefined : document,\n          meta: isCloning ? undefined : meta,\n          collectionType,\n        }}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getDocumentActions('header')}\n      >\n        {(actions) => {\n          const headerActions = actions.filter((action) => {\n            const positions = Array.isArray(action.position) ? action.position : [action.position];\n            return positions.includes('header');\n          });\n\n          return (\n            <DocumentActionsMenu\n              actions={headerActions}\n              label={formatMessage({\n                id: 'content-manager.containers.edit.header.more-actions',\n                defaultMessage: 'More actions',\n              })}\n            >\n              <Information activeTab={status} />\n            </DocumentActionsMenu>\n          );\n        }}\n      </DescriptionComponentRenderer>\n    </Flex>\n  );\n};\n\ninterface InformationProps {\n  activeTab: 'draft' | 'published';\n}\n\nconst Information = ({ activeTab }: InformationProps) => {\n  const { formatMessage } = useIntl();\n  const { document, meta } = useDoc();\n\n  if (!document || !document.id) {\n    return null;\n  }\n\n  /**\n   * Because in the backend separate entries are made for draft and published\n   * documents, the creator fields are different for each of them. For example,\n   * you could make your draft in January and then publish it for the first time\n   * in Feb. This would make the createdAt value for the published entry in Feb\n   * but really we want to show the document as a whole. The draft entry will also\n   * never have the publishedAt values.\n   *\n   * So, we decipher which document to show the creator for based on the activeTab.\n   */\n\n  const createAndUpdateDocument =\n    activeTab === 'draft'\n      ? document\n      : meta?.availableStatus.find((status) => status.publishedAt === null);\n\n  const publishDocument =\n    activeTab === 'published'\n      ? document\n      : meta?.availableStatus.find((status) => status.publishedAt !== null);\n\n  const creator = createAndUpdateDocument?.[CREATED_BY_ATTRIBUTE_NAME]\n    ? getDisplayName(createAndUpdateDocument[CREATED_BY_ATTRIBUTE_NAME])\n    : null;\n\n  const updator = createAndUpdateDocument?.[UPDATED_BY_ATTRIBUTE_NAME]\n    ? getDisplayName(createAndUpdateDocument[UPDATED_BY_ATTRIBUTE_NAME])\n    : null;\n\n  const information: Array<{ isDisplayed?: boolean; label: string; value: React.ReactNode }> = [\n    {\n      isDisplayed: !!publishDocument?.[PUBLISHED_AT_ATTRIBUTE_NAME],\n      label: formatMessage({\n        id: 'content-manager.containers.edit.information.last-published.label',\n        defaultMessage: 'Published',\n      }),\n      value: formatMessage(\n        {\n          id: 'content-manager.containers.edit.information.last-published.value',\n          defaultMessage: `{time}{isAnonymous, select, true {} other { by {author}}}`,\n        },\n        {\n          time: (\n            <RelativeTime timestamp={new Date(publishDocument?.[PUBLISHED_AT_ATTRIBUTE_NAME])} />\n          ),\n          isAnonymous: !publishDocument?.[PUBLISHED_BY_ATTRIBUTE_NAME],\n          author: publishDocument?.[PUBLISHED_BY_ATTRIBUTE_NAME]\n            ? getDisplayName(publishDocument?.[PUBLISHED_BY_ATTRIBUTE_NAME])\n            : null,\n        }\n      ),\n    },\n    {\n      isDisplayed: !!createAndUpdateDocument?.[UPDATED_AT_ATTRIBUTE_NAME],\n      label: formatMessage({\n        id: 'content-manager.containers.edit.information.last-draft.label',\n        defaultMessage: 'Updated',\n      }),\n      value: formatMessage(\n        {\n          id: 'content-manager.containers.edit.information.last-draft.value',\n          defaultMessage: `{time}{isAnonymous, select, true {} other { by {author}}}`,\n        },\n        {\n          time: (\n            <RelativeTime\n              timestamp={new Date(createAndUpdateDocument?.[UPDATED_AT_ATTRIBUTE_NAME])}\n            />\n          ),\n          isAnonymous: !updator,\n          author: updator,\n        }\n      ),\n    },\n    {\n      isDisplayed: !!createAndUpdateDocument?.[CREATED_AT_ATTRIBUTE_NAME],\n      label: formatMessage({\n        id: 'content-manager.containers.edit.information.document.label',\n        defaultMessage: 'Created',\n      }),\n      value: formatMessage(\n        {\n          id: 'content-manager.containers.edit.information.document.value',\n          defaultMessage: `{time}{isAnonymous, select, true {} other { by {author}}}`,\n        },\n        {\n          time: (\n            <RelativeTime\n              timestamp={new Date(createAndUpdateDocument?.[CREATED_AT_ATTRIBUTE_NAME])}\n            />\n          ),\n          isAnonymous: !creator,\n          author: creator,\n        }\n      ),\n    },\n  ].filter((info) => info.isDisplayed);\n\n  return (\n    <Flex\n      borderWidth=\"1px 0 0 0\"\n      borderStyle=\"solid\"\n      borderColor=\"neutral150\"\n      direction=\"column\"\n      marginTop={2}\n      tag=\"dl\"\n      padding={5}\n      gap={3}\n      alignItems=\"flex-start\"\n      /**\n       * The menu content has a padding of 4px, but we want our divider (the border top applied) to\n       * be flush with the menu content. So we need to adjust the margin & width to account for the padding.\n       */\n      marginLeft=\"-0.4rem\"\n      marginRight=\"-0.4rem\"\n      width=\"calc(100% + 8px)\"\n    >\n      {information.map((info) => (\n        <Flex gap={1} direction=\"column\" alignItems=\"flex-start\" key={info.label}>\n          <Typography tag=\"dt\" variant=\"pi\" fontWeight=\"bold\">\n            {info.label}\n          </Typography>\n          <Typography tag=\"dd\" variant=\"pi\" textColor=\"neutral600\">\n            {info.value}\n          </Typography>\n        </Flex>\n      ))}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderActions\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderActionsProps {\n  actions: Array<HeaderActionDescription & { id: string }>;\n}\n\nconst HeaderActions = ({ actions }: HeaderActionsProps) => {\n  const [dialogId, setDialogId] = React.useState<string | null>(null);\n\n  const handleClick =\n    (action: HeaderActionDescription & { id: string }) => async (e: React.MouseEvent) => {\n      if (!('options' in action)) {\n        const { onClick = () => false, dialog, id } = action;\n\n        const muteDialog = await onClick(e);\n\n        if (dialog && !muteDialog) {\n          e.preventDefault();\n          setDialogId(id);\n        }\n      }\n    };\n\n  const handleClose = () => {\n    setDialogId(null);\n  };\n\n  return (\n    <Flex gap={1}>\n      {actions.map((action) => {\n        if (action.options) {\n          return (\n            <SingleSelect\n              key={action.id}\n              size=\"S\"\n              // @ts-expect-error – the DS will handle numbers, but we're not allowing the API.\n              onChange={action.onSelect}\n              aria-label={action.label}\n              {...action}\n            >\n              {action.options.map(({ label, ...option }) => (\n                <SingleSelectOption key={option.value} {...option}>\n                  {label}\n                </SingleSelectOption>\n              ))}\n            </SingleSelect>\n          );\n        } else {\n          if (action.type === 'icon') {\n            return (\n              <React.Fragment key={action.id}>\n                <IconButton\n                  disabled={action.disabled}\n                  label={action.label}\n                  size=\"S\"\n                  onClick={handleClick(action)}\n                >\n                  {action.icon}\n                </IconButton>\n                {action.dialog ? (\n                  <HeaderActionDialog\n                    {...action.dialog}\n                    isOpen={dialogId === action.id}\n                    onClose={handleClose}\n                  />\n                ) : null}\n              </React.Fragment>\n            );\n          }\n        }\n      })}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderActionDialog\n * -----------------------------------------------------------------------------------------------*/\ninterface HeaderActionDialogProps {\n  onClose: () => void;\n  onCancel?: () => Promise<void>;\n  title: string;\n  content?: React.ReactNode | ((props: { onClose: () => void }) => React.ReactNode);\n  isOpen: boolean;\n}\n\nconst HeaderActionDialog = ({\n  onClose,\n  onCancel,\n  title,\n  content: Content,\n  isOpen,\n}: HeaderActionDialogProps) => {\n  const handleClose = async () => {\n    if (onCancel) {\n      await onCancel();\n    }\n\n    onClose();\n  };\n\n  return (\n    <Dialog.Root open={isOpen} onOpenChange={handleClose}>\n      <Dialog.Content>\n        <Dialog.Header>{title}</Dialog.Header>\n        {typeof Content === 'function' ? <Content onClose={handleClose} /> : Content}\n      </Dialog.Content>\n    </Dialog.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionComponents\n * -----------------------------------------------------------------------------------------------*/\n\nconst ConfigureTheViewAction: DocumentActionComponent = ({ collectionType, model }) => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n\n  return {\n    label: formatMessage({\n      id: 'app.links.configure-view',\n      defaultMessage: 'Configure the view',\n    }),\n    icon: <ListPlus />,\n    onClick: () => {\n      navigate(`../${collectionType}/${model}/configurations/edit`);\n    },\n    position: 'header',\n  };\n};\n\nConfigureTheViewAction.type = 'configure-the-view';\nConfigureTheViewAction.position = 'header';\n\nconst EditTheModelAction: DocumentActionComponent = ({ model }) => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n\n  return {\n    label: formatMessage({\n      id: 'content-manager.link-to-ctb',\n      defaultMessage: 'Edit the model',\n    }),\n    icon: <Pencil />,\n    onClick: () => {\n      navigate(`/plugins/content-type-builder/content-types/${model}`);\n    },\n    position: 'header',\n  };\n};\n\nEditTheModelAction.type = 'edit-the-model';\nEditTheModelAction.position = 'header';\n\nconst DeleteAction: DocumentActionComponent = ({ documentId, model, collectionType, document }) => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n  const listViewPathMatch = useMatch(LIST_PATH);\n  const canDelete = useDocumentRBAC('DeleteAction', (state) => state.canDelete);\n  const { delete: deleteAction } = useDocumentActions();\n  const { toggleNotification } = useNotification();\n  const setSubmitting = useForm('DeleteAction', (state) => state.setSubmitting);\n  const isLocalized = document?.locale != null;\n\n  return {\n    disabled: !canDelete || !document,\n    label: formatMessage(\n      {\n        id: 'content-manager.actions.delete.label',\n        defaultMessage: 'Delete entry{isLocalized, select, true { (all locales)} other {}}',\n      },\n      { isLocalized }\n    ),\n    icon: <Trash />,\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      content: (\n        <Flex direction=\"column\" gap={2}>\n          <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\n            {formatMessage({\n              id: 'content-manager.actions.delete.dialog.body',\n              defaultMessage: 'Are you sure?',\n            })}\n          </Typography>\n        </Flex>\n      ),\n      onConfirm: async () => {\n        /**\n         * If we have a match, we're in the list view\n         * and therefore not in a form and shouldn't be\n         * trying to set the submitting value.\n         */\n        if (!listViewPathMatch) {\n          setSubmitting(true);\n        }\n        try {\n          if (!documentId && collectionType !== SINGLE_TYPES) {\n            console.error(\n              \"You're trying to delete a document without an id, this is likely a bug with Strapi. Please open an issue.\"\n            );\n\n            toggleNotification({\n              message: formatMessage({\n                id: 'content-manager.actions.delete.error',\n                defaultMessage: 'An error occurred while trying to delete the document.',\n              }),\n              type: 'danger',\n            });\n\n            return;\n          }\n\n          const res = await deleteAction({\n            documentId,\n            model,\n            collectionType,\n            params: {\n              locale: '*',\n            },\n          });\n\n          if (!('error' in res)) {\n            navigate({ pathname: `../${collectionType}/${model}` }, { replace: true });\n          }\n        } finally {\n          if (!listViewPathMatch) {\n            setSubmitting(false);\n          }\n        }\n      },\n    },\n    variant: 'danger',\n    position: ['header', 'table-row'],\n  };\n};\n\nDeleteAction.type = 'delete';\nDeleteAction.position = ['header', 'table-row'];\n\nconst DEFAULT_HEADER_ACTIONS = [EditTheModelAction, ConfigureTheViewAction, DeleteAction];\n\nexport { Header, DEFAULT_HEADER_ACTIONS };\nexport type { HeaderProps, HeaderActionDescription };\n", "import * as React from 'react';\n\nimport {\n  useQueryParams,\n  useStrapiApp,\n  DescriptionComponentRenderer,\n} from '@strapi/admin/strapi-admin';\nimport { Flex, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { useMatch } from 'react-router-dom';\n\nimport { InjectionZone } from '../../../components/InjectionZone';\nimport { useDoc } from '../../../hooks/useDocument';\nimport { CLONE_PATH } from '../../../router';\n\nimport { DocumentActions } from './DocumentActions';\n\nimport type {\n  ContentManagerPlugin,\n  DocumentActionProps,\n  PanelComponent,\n  PanelComponentProps,\n} from '../../../content-manager';\n\ninterface PanelDescription {\n  title: string;\n  content: React.ReactNode;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Panels\n * -----------------------------------------------------------------------------------------------*/\n\nconst Panels = () => {\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const [\n    {\n      query: { status },\n    },\n  ] = useQueryParams<{ status: 'draft' | 'published' }>({\n    status: 'draft',\n  });\n  const { model, id, document, meta, collectionType } = useDoc();\n  const plugins = useStrapiApp('Panels', (state) => state.plugins);\n\n  const props = {\n    activeTab: status,\n    model,\n    documentId: id,\n    document: isCloning ? undefined : document,\n    meta: isCloning ? undefined : meta,\n    collectionType,\n  } satisfies PanelComponentProps;\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n      <DescriptionComponentRenderer\n        props={props}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getEditViewSidePanels()}\n      >\n        {(panels) =>\n          panels.map(({ content, id, ...description }) => (\n            <Panel key={id} {...description}>\n              {content}\n            </Panel>\n          ))\n        }\n      </DescriptionComponentRenderer>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Default Action Panels (CE)\n * -----------------------------------------------------------------------------------------------*/\n\nconst ActionsPanel: PanelComponent = () => {\n  const { formatMessage } = useIntl();\n\n  return {\n    title: formatMessage({\n      id: 'content-manager.containers.edit.panels.default.title',\n      defaultMessage: 'Entry',\n    }),\n    content: <ActionsPanelContent />,\n  };\n};\n\nActionsPanel.type = 'actions';\n\nconst ActionsPanelContent = () => {\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const [\n    {\n      query: { status = 'draft' },\n    },\n  ] = useQueryParams<{ status: 'draft' | 'published' }>();\n  const { model, id, document, meta, collectionType } = useDoc();\n  const plugins = useStrapiApp('ActionsPanel', (state) => state.plugins);\n\n  const props = {\n    activeTab: status,\n    model,\n    documentId: id,\n    document: isCloning ? undefined : document,\n    meta: isCloning ? undefined : meta,\n    collectionType,\n  } satisfies DocumentActionProps;\n\n  return (\n    <Flex direction=\"column\" gap={2} width=\"100%\">\n      <DescriptionComponentRenderer\n        props={props}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getDocumentActions('panel')}\n      >\n        {(actions) => <DocumentActions actions={actions} />}\n      </DescriptionComponentRenderer>\n      <InjectionZone area=\"editView.right-links\" slug={model} />\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Panel\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PanelProps extends Pick<PanelDescription, 'title'> {\n  children: React.ReactNode;\n}\n\nconst Panel = React.forwardRef<any, PanelProps>(({ children, title }, ref) => {\n  return (\n    <Flex\n      ref={ref}\n      tag=\"aside\"\n      aria-labelledby=\"additional-information\"\n      background=\"neutral0\"\n      borderColor=\"neutral150\"\n      hasRadius\n      paddingBottom={4}\n      paddingLeft={4}\n      paddingRight={4}\n      paddingTop={4}\n      shadow=\"tableShadow\"\n      gap={3}\n      direction=\"column\"\n      justifyContent=\"stretch\"\n      alignItems=\"flex-start\"\n    >\n      <Typography tag=\"h2\" variant=\"sigma\" textTransform=\"uppercase\" textColor=\"neutral600\">\n        {title}\n      </Typography>\n      {children}\n    </Flex>\n  );\n});\n\nexport { Panels, ActionsPanel };\nexport type { PanelDescription };\n", "import * as React from 'react';\n\nimport {\n  useTable,\n  useNotification,\n  useAPIErrorHandler,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport { Button, Flex, Dialog, Typography } from '@strapi/design-system';\nimport { Check, WarningCircle } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { useDoc } from '../../../../hooks/useDocument';\nimport { useGetManyDraftRelationCountQuery } from '../../../../services/documents';\nimport { getTranslation } from '../../../../utils/translations';\n\nimport { Emphasis } from './Actions';\n\ninterface ConfirmBulkActionDialogProps {\n  endAction: React.ReactNode;\n  onToggleDialog: () => void;\n  isOpen?: boolean;\n  dialogBody: React.ReactNode;\n}\n\nconst ConfirmBulkActionDialog = ({\n  onToggleDialog,\n  isOpen = false,\n  dialogBody,\n  endAction,\n}: ConfirmBulkActionDialogProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Dialog.Root open={isOpen}>\n      <Dialog.Content>\n        <Dialog.Header>\n          {formatMessage({\n            id: 'app.components.ConfirmDialog.title',\n            defaultMessage: 'Confirmation',\n          })}\n        </Dialog.Header>\n        <Dialog.Body>\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n            <Flex justifyContent=\"center\">\n              <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n            </Flex>\n            {dialogBody}\n          </Flex>\n        </Dialog.Body>\n        <Dialog.Footer>\n          <Dialog.Cancel>\n            <Button fullWidth onClick={onToggleDialog} variant=\"tertiary\">\n              {formatMessage({\n                id: 'app.components.Button.cancel',\n                defaultMessage: 'Cancel',\n              })}\n            </Button>\n          </Dialog.Cancel>\n          {endAction}\n        </Dialog.Footer>\n      </Dialog.Content>\n    </Dialog.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * BoldChunk\n * -----------------------------------------------------------------------------------------------*/\n\nconst BoldChunk = (chunks: React.ReactNode) => <Typography fontWeight=\"bold\">{chunks}</Typography>;\n\n/* -------------------------------------------------------------------------------------------------\n * ConfirmDialogPublishAll\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ConfirmDialogPublishAllProps\n  extends Pick<ConfirmBulkActionDialogProps, 'isOpen' | 'onToggleDialog'> {\n  isConfirmButtonLoading?: boolean;\n  onConfirm: () => void;\n}\n\nconst ConfirmDialogPublishAll = ({\n  isOpen,\n  onToggleDialog,\n  isConfirmButtonLoading = false,\n  onConfirm,\n}: ConfirmDialogPublishAllProps) => {\n  const { formatMessage } = useIntl();\n  const selectedEntries = useTable('ConfirmDialogPublishAll', (state) => state.selectedRows);\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler(getTranslation);\n  const { model, schema } = useDoc();\n  const [{ query }] = useQueryParams<{\n    plugins?: {\n      i18n?: {\n        locale?: string;\n      };\n    };\n  }>();\n\n  // TODO skipping this for now as there is a bug with the draft relation count that will be worked on separately\n  // see RFC \"Count draft relations\" in Notion\n  const enableDraftRelationsCount = false;\n\n  const {\n    data: countDraftRelations = 0,\n    isLoading,\n    error,\n  } = useGetManyDraftRelationCountQuery(\n    {\n      model,\n      documentIds: selectedEntries.map((entry) => entry.documentId),\n      locale: query?.plugins?.i18n?.locale,\n    },\n    {\n      skip: !enableDraftRelationsCount || selectedEntries.length === 0,\n    }\n  );\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({ type: 'danger', message: formatAPIError(error) });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  if (error) {\n    return null;\n  }\n\n  return (\n    <ConfirmBulkActionDialog\n      isOpen={isOpen && !isLoading}\n      onToggleDialog={onToggleDialog}\n      dialogBody={\n        <>\n          <Typography id=\"confirm-description\" textAlign=\"center\">\n            {countDraftRelations > 0 &&\n              formatMessage(\n                {\n                  id: getTranslation(`popUpwarning.warning.bulk-has-draft-relations.message`),\n                  defaultMessage:\n                    '<b>{count} {count, plural, one { relation } other { relations } } out of {entities} { entities, plural, one { entry } other { entries } } {count, plural, one { is } other { are } }</b> not published yet and might lead to unexpected behavior. ',\n                },\n                {\n                  b: BoldChunk,\n                  count: countDraftRelations,\n                  entities: selectedEntries.length,\n                }\n              )}\n            {formatMessage({\n              id: getTranslation('popUpWarning.bodyMessage.contentType.publish.all'),\n              defaultMessage: 'Are you sure you want to publish these entries?',\n            })}\n          </Typography>\n          {schema?.pluginOptions &&\n            'i18n' in schema.pluginOptions &&\n            schema?.pluginOptions.i18n && (\n              <Typography textColor=\"danger500\" textAlign=\"center\">\n                {formatMessage(\n                  {\n                    id: getTranslation('Settings.list.actions.publishAdditionalInfos'),\n                    defaultMessage:\n                      'This will publish the active locale versions <em>(from Internationalization)</em>',\n                  },\n                  {\n                    em: Emphasis,\n                  }\n                )}\n              </Typography>\n            )}\n        </>\n      }\n      endAction={\n        <Button\n          onClick={onConfirm}\n          variant=\"secondary\"\n          startIcon={<Check />}\n          loading={isConfirmButtonLoading}\n        >\n          {formatMessage({\n            id: 'app.utils.publish',\n            defaultMessage: 'Publish',\n          })}\n        </Button>\n      }\n    />\n  );\n};\n\nexport { ConfirmDialogPublishAll, ConfirmBulkActionDialog };\nexport type { ConfirmDialogPublishAllProps, ConfirmBulkActionDialogProps };\n", "import * as React from 'react';\n\nimport {\n  FormErrors,\n  getYupValidationErrors,\n  Table,\n  useQueryParams,\n  useTable,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Button,\n  Flex,\n  IconButton,\n  Loader,\n  Modal,\n  Tooltip,\n  Typography,\n  TypographyComponent,\n  RawTable,\n  Tr,\n  Td,\n  Tbody,\n} from '@strapi/design-system';\nimport { ArrowsCounterClockwise, CheckCircle, CrossCircle, Pencil } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\nimport { styled } from 'styled-components';\nimport { ValidationError } from 'yup';\n\nimport { useDocumentRBAC } from '../../../../features/DocumentRBAC';\nimport { useContentTypeSchema } from '../../../../hooks/useContentTypeSchema';\nimport { useDocumentActions } from '../../../../hooks/useDocumentActions';\nimport { useDocLayout } from '../../../../hooks/useDocumentLayout';\nimport { contentManagerApi } from '../../../../services/api';\nimport {\n  useGetAllDocumentsQuery,\n  usePublishManyDocumentsMutation,\n} from '../../../../services/documents';\nimport { buildValidParams } from '../../../../utils/api';\nimport { getTranslation } from '../../../../utils/translations';\nimport { createYupSchema } from '../../../../utils/validation';\nimport { DocumentStatus } from '../../../EditView/components/DocumentStatus';\n\nimport { ConfirmDialogPublishAll, ConfirmDialogPublishAllProps } from './ConfirmBulkActionDialog';\n\nimport type { BulkActionComponent } from '../../../../content-manager';\nimport type { Document } from '../../../../hooks/useDocument';\n\nconst TypographyMaxWidth = styled<TypographyComponent>(Typography)`\n  max-width: 300px;\n`;\n\nconst TableComponent = styled(RawTable)`\n  width: 100%;\n  table-layout: fixed;\n  td:first-child {\n    border-right: 1px solid ${({ theme }) => theme.colors.neutral150};\n  }\n  td:first-of-type {\n    padding: ${({ theme }) => theme.spaces[4]};\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * EntryValidationText\n * -----------------------------------------------------------------------------------------------*/\n\nconst formatErrorMessages = (errors: FormErrors, parentKey: string, formatMessage: any) => {\n  const messages: string[] = [];\n\n  Object.entries(errors).forEach(([key, value]) => {\n    const currentKey = parentKey ? `${parentKey}.${key}` : key;\n\n    if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n      if ('id' in value && 'defaultMessage' in value) {\n        messages.push(\n          formatMessage(\n            {\n              id: `${value.id}.withField`,\n              defaultMessage: value.defaultMessage,\n            },\n            { field: currentKey }\n          )\n        );\n      } else {\n        messages.push(\n          ...formatErrorMessages(\n            // @ts-expect-error TODO: check why value is not compatible with FormErrors\n            value,\n            currentKey,\n            formatMessage\n          )\n        );\n      }\n    } else {\n      messages.push(\n        formatMessage(\n          {\n            id: `${value}.withField`,\n            defaultMessage: value,\n          },\n          { field: currentKey }\n        )\n      );\n    }\n  });\n\n  return messages;\n};\n\ninterface EntryValidationTextProps {\n  validationErrors?: FormErrors;\n  status: string;\n}\n\nconst EntryValidationText = ({ validationErrors, status }: EntryValidationTextProps) => {\n  const { formatMessage } = useIntl();\n\n  if (validationErrors) {\n    const validationErrorsMessages = formatErrorMessages(validationErrors, '', formatMessage).join(\n      ' '\n    );\n\n    return (\n      <Flex gap={2}>\n        <CrossCircle fill=\"danger600\" />\n        <Tooltip description={validationErrorsMessages}>\n          <TypographyMaxWidth textColor=\"danger600\" variant=\"omega\" fontWeight=\"semiBold\" ellipsis>\n            {validationErrorsMessages}\n          </TypographyMaxWidth>\n        </Tooltip>\n      </Flex>\n    );\n  }\n\n  if (status === 'published') {\n    return (\n      <Flex gap={2}>\n        <CheckCircle fill=\"success600\" />\n        <Typography textColor=\"success600\" fontWeight=\"bold\">\n          {formatMessage({\n            id: 'content-manager.bulk-publish.already-published',\n            defaultMessage: 'Already Published',\n          })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  if (status === 'modified') {\n    return (\n      <Flex gap={2}>\n        <ArrowsCounterClockwise fill=\"alternative600\" />\n        <Typography>\n          {formatMessage({\n            id: 'content-manager.bulk-publish.modified',\n            defaultMessage: 'Ready to publish changes',\n          })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  return (\n    <Flex gap={2}>\n      <CheckCircle fill=\"success600\" />\n      <Typography>\n        {formatMessage({\n          id: 'app.utils.ready-to-publish',\n          defaultMessage: 'Ready to publish',\n        })}\n      </Typography>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * SelectedEntriesTableContent\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SelectedEntriesTableContentProps {\n  isPublishing?: boolean;\n  rowsToDisplay?: TableRow[];\n  entriesToPublish?: TableRow['documentId'][];\n  validationErrors: Record<string, EntryValidationTextProps['validationErrors']>;\n}\n\nconst TABLE_HEADERS = [\n  { name: 'id', label: 'id' },\n  { name: 'name', label: 'name' },\n  { name: 'status', label: 'status' },\n  { name: 'publicationStatus', label: 'Publication status' },\n];\n\nconst SelectedEntriesTableContent = ({\n  isPublishing,\n  rowsToDisplay = [],\n  entriesToPublish = [],\n  validationErrors = {},\n}: SelectedEntriesTableContentProps) => {\n  const { pathname } = useLocation();\n  const { formatMessage } = useIntl();\n\n  const {\n    list: {\n      settings: { mainField },\n    },\n  } = useDocLayout();\n\n  const shouldDisplayMainField = mainField != null && mainField !== 'id';\n\n  return (\n    <Table.Content>\n      <Table.Head>\n        <Table.HeaderCheckboxCell />\n        {TABLE_HEADERS.filter((head) => head.name !== 'name' || shouldDisplayMainField).map(\n          (head) => (\n            <Table.HeaderCell key={head.name} {...head} />\n          )\n        )}\n      </Table.Head>\n      <Table.Loading />\n      <Table.Body>\n        {rowsToDisplay.map((row) => (\n          <Table.Row key={row.id}>\n            <Table.CheckboxCell id={row.id} />\n            <Table.Cell>\n              <Typography>{row.id}</Typography>\n            </Table.Cell>\n            {shouldDisplayMainField && (\n              <Table.Cell>\n                <Typography>{row[mainField as keyof TableRow]}</Typography>\n              </Table.Cell>\n            )}\n            <Table.Cell>\n              <DocumentStatus status={row.status} maxWidth={'min-content'} />\n            </Table.Cell>\n            <Table.Cell>\n              {isPublishing && entriesToPublish.includes(row.documentId) ? (\n                <Flex gap={2}>\n                  <Typography>\n                    {formatMessage({\n                      id: 'content-manager.success.record.publishing',\n                      defaultMessage: 'Publishing...',\n                    })}\n                  </Typography>\n                  <Loader small />\n                </Flex>\n              ) : (\n                <EntryValidationText\n                  validationErrors={validationErrors[row.documentId]}\n                  status={row.status}\n                />\n              )}\n            </Table.Cell>\n            <Table.Cell>\n              <Flex>\n                <IconButton\n                  tag={Link}\n                  to={{\n                    pathname: `${pathname}/${row.documentId}`,\n                    search: row.locale && `?plugins[i18n][locale]=${row.locale}`,\n                  }}\n                  state={{ from: pathname }}\n                  label={formatMessage({\n                    id: 'content-manager.bulk-publish.edit',\n                    defaultMessage: 'Edit',\n                  })}\n                  target=\"_blank\"\n                  marginLeft=\"auto\"\n                  variant=\"ghost\"\n                >\n                  <Pencil width={'1.6rem'} height={'1.6rem'} />\n                </IconButton>\n              </Flex>\n            </Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table.Content>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PublicationStatusSummary\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PublicationStatusSummaryProps {\n  count: number;\n  icon: React.ReactNode;\n  message: string;\n}\n\nconst PublicationStatusSummary = ({ count, icon, message }: PublicationStatusSummaryProps) => {\n  return (\n    <Flex justifyContent=\"space-between\" flex={1} gap={3}>\n      <Flex gap={2}>\n        {icon}\n        <Typography>{message}</Typography>\n      </Flex>\n      <Typography fontWeight=\"bold\">{count}</Typography>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PublicationStatusGrid\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PublicationStatusGridProps {\n  entriesReadyToPublishCount: number;\n  entriesModifiedCount: number;\n  entriesPublishedCount: number;\n  entriesWithErrorsCount: number;\n}\n\nconst PublicationStatusGrid = ({\n  entriesReadyToPublishCount,\n  entriesPublishedCount,\n  entriesModifiedCount,\n  entriesWithErrorsCount,\n}: PublicationStatusGridProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box hasRadius borderColor=\"neutral150\">\n      <TableComponent colCount={2} rowCount={2}>\n        <Tbody>\n          <Tr>\n            <Td>\n              <PublicationStatusSummary\n                count={entriesReadyToPublishCount}\n                icon={<CheckCircle fill=\"success600\" />}\n                message={formatMessage({\n                  id: 'app.utils.ready-to-publish',\n                  defaultMessage: 'Ready to publish',\n                })}\n              />\n            </Td>\n            <Td>\n              <PublicationStatusSummary\n                count={entriesPublishedCount}\n                icon={<CheckCircle fill=\"success600\" />}\n                message={formatMessage({\n                  id: 'app.utils.already-published',\n                  defaultMessage: 'Already published',\n                })}\n              />\n            </Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <PublicationStatusSummary\n                count={entriesModifiedCount}\n                icon={<ArrowsCounterClockwise fill=\"alternative600\" />}\n                message={formatMessage({\n                  id: 'content-manager.bulk-publish.modified',\n                  defaultMessage: 'Ready to publish changes',\n                })}\n              />\n            </Td>\n            <Td>\n              <PublicationStatusSummary\n                count={entriesWithErrorsCount}\n                icon={<CrossCircle fill=\"danger600\" />}\n                message={formatMessage({\n                  id: 'content-manager.bulk-publish.waiting-for-action',\n                  defaultMessage: 'Waiting for action',\n                })}\n              />\n            </Td>\n          </Tr>\n        </Tbody>\n      </TableComponent>\n    </Box>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * SelectedEntriesModalContent\n * -----------------------------------------------------------------------------------------------*/\n\ninterface TableRow extends Document {}\n\ninterface SelectedEntriesModalContentProps {\n  listViewSelectedEntries: TableRow[];\n  toggleModal: ConfirmDialogPublishAllProps['onToggleDialog'];\n  setListViewSelectedDocuments: (documents: TableRow[]) => void;\n  model: string;\n}\n\nconst SelectedEntriesModalContent = ({\n  listViewSelectedEntries,\n  toggleModal,\n  setListViewSelectedDocuments,\n  model,\n}: SelectedEntriesModalContentProps) => {\n  const { formatMessage } = useIntl();\n  const { schema, components } = useContentTypeSchema(model);\n  const documentIds = listViewSelectedEntries.map(({ documentId }) => documentId);\n\n  // We want to keep the selected entries order same as the list view\n  const [{ query }] = useQueryParams<{ sort?: string; plugins?: Record<string, any> }>();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  // Fetch the documents based on the selected entries and update the modal table\n  const { data, isLoading, isFetching, refetch } = useGetAllDocumentsQuery(\n    {\n      model,\n      params: {\n        page: '1',\n        pageSize: documentIds.length.toString(),\n        sort: query.sort,\n        filters: {\n          documentId: {\n            $in: documentIds,\n          },\n        },\n        locale: query.plugins?.i18n?.locale,\n      },\n    },\n    {\n      selectFromResult: ({ data, ...restRes }) => ({ data: data?.results ?? [], ...restRes }),\n    }\n  );\n\n  // Validate the entries based on the schema to show errors if any\n  const { rows, validationErrors } = React.useMemo(() => {\n    if (data.length > 0 && schema) {\n      const validate = createYupSchema(\n        schema.attributes,\n        components,\n        // Since this is the \"Publish\" action, the validation\n        // schema must enforce the rules for published entities\n        { status: 'published' }\n      );\n      const validationErrors: Record<TableRow['documentId'], FormErrors> = {};\n      const rows = data.map((entry: Document) => {\n        try {\n          validate.validateSync(entry, { abortEarly: false });\n\n          return entry;\n        } catch (e) {\n          if (e instanceof ValidationError) {\n            validationErrors[entry.documentId] = getYupValidationErrors(e);\n          }\n\n          return entry;\n        }\n      });\n\n      return { rows, validationErrors };\n    }\n\n    return {\n      rows: [],\n      validationErrors: {},\n    };\n  }, [components, data, schema]);\n\n  const [isDialogOpen, setIsDialogOpen] = React.useState(false);\n\n  const { publishMany: bulkPublishAction } = useDocumentActions();\n  const [, { isLoading: isSubmittingForm }] = usePublishManyDocumentsMutation();\n\n  const selectedRows = useTable('publishAction', (state) => state.selectedRows);\n\n  // Filter selected entries from the updated modal table rows\n  const selectedEntries = rows.filter((entry) =>\n    selectedRows.some((selectedEntry) => selectedEntry.documentId === entry.documentId)\n  );\n\n  const entriesToPublish = selectedEntries\n    .filter((entry) => !validationErrors[entry.documentId])\n    .map((entry) => entry.documentId);\n\n  const selectedEntriesWithErrorsCount = selectedEntries.filter(\n    ({ documentId }) => validationErrors[documentId]\n  ).length;\n  const selectedEntriesPublishedCount = selectedEntries.filter(\n    ({ status }) => status === 'published'\n  ).length;\n  const selectedEntriesModifiedCount = selectedEntries.filter(\n    ({ status, documentId }) => status === 'modified' && !validationErrors[documentId]\n  ).length;\n  const selectedEntriesWithNoErrorsCount =\n    selectedEntries.length - selectedEntriesWithErrorsCount - selectedEntriesPublishedCount;\n\n  const toggleDialog = () => setIsDialogOpen((prev) => !prev);\n\n  const handleConfirmBulkPublish = async () => {\n    toggleDialog();\n\n    const res = await bulkPublishAction({ model: model, documentIds: entriesToPublish, params });\n    if (!('error' in res)) {\n      const unpublishedEntries = rows.filter((row) => {\n        return !entriesToPublish.includes(row.documentId);\n      });\n      // Keep selection of the entries in list view that were not published\n      setListViewSelectedDocuments(unpublishedEntries);\n    }\n  };\n\n  return (\n    <>\n      <Modal.Body>\n        <PublicationStatusGrid\n          entriesReadyToPublishCount={\n            selectedEntriesWithNoErrorsCount - selectedEntriesModifiedCount\n          }\n          entriesPublishedCount={selectedEntriesPublishedCount}\n          entriesModifiedCount={selectedEntriesModifiedCount}\n          entriesWithErrorsCount={selectedEntriesWithErrorsCount}\n        />\n        <Box marginTop={7}>\n          <SelectedEntriesTableContent\n            isPublishing={isSubmittingForm}\n            rowsToDisplay={rows}\n            entriesToPublish={entriesToPublish}\n            validationErrors={validationErrors}\n          />\n        </Box>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={toggleModal} variant=\"tertiary\">\n          {formatMessage({\n            id: 'app.components.Button.cancel',\n            defaultMessage: 'Cancel',\n          })}\n        </Button>\n        <Flex gap={2}>\n          <Button onClick={refetch} variant=\"tertiary\" loading={isFetching}>\n            {formatMessage({ id: 'app.utils.refresh', defaultMessage: 'Refresh' })}\n          </Button>\n          <Button\n            onClick={toggleDialog}\n            disabled={\n              selectedEntries.length === 0 ||\n              selectedEntries.length === selectedEntriesWithErrorsCount ||\n              selectedEntriesPublishedCount === selectedEntries.length ||\n              isLoading\n            }\n            loading={isSubmittingForm}\n          >\n            {formatMessage({ id: 'app.utils.publish', defaultMessage: 'Publish' })}\n          </Button>\n        </Flex>\n      </Modal.Footer>\n      <ConfirmDialogPublishAll\n        isOpen={isDialogOpen}\n        onToggleDialog={toggleDialog}\n        isConfirmButtonLoading={isSubmittingForm}\n        onConfirm={handleConfirmBulkPublish}\n      />\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PublishAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst PublishAction: BulkActionComponent = ({ documents, model }) => {\n  const { formatMessage } = useIntl();\n  // Publish button visibility\n  const hasPublishPermission = useDocumentRBAC('unpublishAction', (state) => state.canPublish);\n  const showPublishButton =\n    hasPublishPermission && documents.some(({ status }) => status !== 'published');\n\n  const setListViewSelectedDocuments = useTable('publishAction', (state) => state.selectRow);\n\n  const refetchList = () => {\n    contentManagerApi.util.invalidateTags([{ type: 'Document', id: `${model}_LIST` }]);\n  };\n\n  if (!showPublishButton) return null;\n\n  return {\n    actionType: 'publish',\n    variant: 'tertiary',\n    label: formatMessage({ id: 'app.utils.publish', defaultMessage: 'Publish' }),\n    dialog: {\n      type: 'modal',\n      title: formatMessage({\n        id: getTranslation('containers.ListPage.selectedEntriesModal.title'),\n        defaultMessage: 'Publish entries',\n      }),\n      content: ({ onClose }) => {\n        return (\n          <Table.Root rows={documents} defaultSelectedRows={documents} headers={TABLE_HEADERS}>\n            <SelectedEntriesModalContent\n              listViewSelectedEntries={documents}\n              toggleModal={() => {\n                onClose();\n                refetchList();\n              }}\n              setListViewSelectedDocuments={setListViewSelectedDocuments}\n              model={model}\n            />\n          </Table.Root>\n        );\n      },\n      onClose: () => {\n        refetchList();\n      },\n    },\n  };\n};\n\nexport { PublishAction, SelectedEntriesModalContent };\n", "import * as React from 'react';\n\nimport {\n  useStrapiApp,\n  DescriptionComponentRenderer,\n  useTable,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport { Box, ButtonProps, Flex, Typography } from '@strapi/design-system';\nimport { WarningCircle } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { useDocumentRBAC } from '../../../../features/DocumentRBAC';\nimport { useDoc } from '../../../../hooks/useDocument';\nimport { useDocumentActions } from '../../../../hooks/useDocumentActions';\nimport { buildValidParams } from '../../../../utils/api';\nimport { getTranslation } from '../../../../utils/translations';\nimport {\n  DialogOptions,\n  DocumentActionButton,\n  ModalOptions,\n  NotificationOptions,\n} from '../../../EditView/components/DocumentActions';\n\nimport { PublishAction } from './PublishAction';\n\nimport type { BulkActionComponent, ContentManagerPlugin } from '../../../../content-manager';\n\ninterface BulkActionDescription {\n  dialog?: DialogOptions | NotificationOptions | ModalOptions;\n  disabled?: boolean;\n  icon?: React.ReactNode;\n  label: string;\n  onClick?: (event: React.SyntheticEvent) => void;\n  /**\n   * @default 'default'\n   */\n  type?: 'icon' | 'default';\n  /**\n   * @default 'secondary'\n   */\n  variant?: ButtonProps['variant'];\n}\n\n/* -------------------------------------------------------------------------------------------------\n * BulkActionsRenderer\n * -----------------------------------------------------------------------------------------------*/\n\nconst BulkActionsRenderer = () => {\n  const plugins = useStrapiApp('BulkActionsRenderer', (state) => state.plugins);\n\n  const { model, collectionType } = useDoc();\n  const { selectedRows } = useTable('BulkActionsRenderer', (state) => state);\n\n  return (\n    <Flex gap={2}>\n      <DescriptionComponentRenderer\n        props={{\n          model,\n          collectionType,\n          documents: selectedRows,\n        }}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getBulkActions()}\n      >\n        {(actions) => actions.map((action) => <DocumentActionButton key={action.id} {...action} />)}\n      </DescriptionComponentRenderer>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DefaultBulkActions\n * -----------------------------------------------------------------------------------------------*/\n\nconst DeleteAction: BulkActionComponent = ({ documents, model }) => {\n  const { formatMessage } = useIntl();\n  const { schema: contentType } = useDoc();\n  const selectRow = useTable('DeleteAction', (state) => state.selectRow);\n  const hasI18nEnabled = Boolean(contentType?.pluginOptions?.i18n);\n  const [{ query }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n  const hasDeletePermission = useDocumentRBAC('deleteAction', (state) => state.canDelete);\n  const { deleteMany: bulkDeleteAction } = useDocumentActions();\n  const documentIds = documents.map(({ documentId }) => documentId);\n\n  const handleConfirmBulkDelete = async () => {\n    const res = await bulkDeleteAction({\n      documentIds,\n      model,\n      params,\n    });\n    if (!('error' in res)) {\n      selectRow([]);\n    }\n  };\n\n  if (!hasDeletePermission) return null;\n\n  return {\n    variant: 'danger-light',\n    label: formatMessage({ id: 'global.delete', defaultMessage: 'Delete' }),\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      content: (\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n          <Flex justifyContent=\"center\">\n            <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          </Flex>\n          <Typography id=\"confirm-description\" textAlign=\"center\">\n            {formatMessage({\n              id: 'popUpWarning.bodyMessage.contentType.delete.all',\n              defaultMessage: 'Are you sure you want to delete these entries?',\n            })}\n          </Typography>\n          {hasI18nEnabled && (\n            <Box textAlign=\"center\" padding={3}>\n              <Typography textColor=\"danger500\">\n                {formatMessage(\n                  {\n                    id: getTranslation('Settings.list.actions.deleteAdditionalInfos'),\n                    defaultMessage:\n                      'This will delete the active locale versions <em>(from Internationalization)</em>',\n                  },\n                  {\n                    em: Emphasis,\n                  }\n                )}\n              </Typography>\n            </Box>\n          )}\n        </Flex>\n      ),\n      onConfirm: handleConfirmBulkDelete,\n    },\n  };\n};\n\nDeleteAction.type = 'delete';\n\nconst UnpublishAction: BulkActionComponent = ({ documents, model }) => {\n  const { formatMessage } = useIntl();\n  const { schema } = useDoc();\n  const selectRow = useTable('UnpublishAction', (state) => state.selectRow);\n  const hasPublishPermission = useDocumentRBAC('unpublishAction', (state) => state.canPublish);\n  const hasI18nEnabled = Boolean(schema?.pluginOptions?.i18n);\n  const hasDraftAndPublishEnabled = Boolean(schema?.options?.draftAndPublish);\n  const { unpublishMany: bulkUnpublishAction } = useDocumentActions();\n  const documentIds = documents.map(({ documentId }) => documentId);\n  const [{ query }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  const handleConfirmBulkUnpublish = async () => {\n    const data = await bulkUnpublishAction({ documentIds, model, params });\n    if (!('error' in data)) {\n      selectRow([]);\n    }\n  };\n\n  const showUnpublishButton =\n    hasDraftAndPublishEnabled &&\n    hasPublishPermission &&\n    documents.some((entry) => entry.status === 'published' || entry.status === 'modified');\n\n  if (!showUnpublishButton) return null;\n\n  return {\n    variant: 'tertiary',\n    label: formatMessage({ id: 'app.utils.unpublish', defaultMessage: 'Unpublish' }),\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      content: (\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n          <Flex justifyContent=\"center\">\n            <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          </Flex>\n          <Typography id=\"confirm-description\" textAlign=\"center\">\n            {formatMessage({\n              id: 'popUpWarning.bodyMessage.contentType.unpublish.all',\n              defaultMessage: 'Are you sure you want to unpublish these entries?',\n            })}\n          </Typography>\n          {hasI18nEnabled && (\n            <Box textAlign=\"center\" padding={3}>\n              <Typography textColor=\"danger500\">\n                {formatMessage(\n                  {\n                    id: getTranslation('Settings.list.actions.unpublishAdditionalInfos'),\n                    defaultMessage:\n                      'This will unpublish the active locale versions <em>(from Internationalization)</em>',\n                  },\n                  {\n                    em: Emphasis,\n                  }\n                )}\n              </Typography>\n            </Box>\n          )}\n        </Flex>\n      ),\n      confirmButton: formatMessage({\n        id: 'app.utils.unpublish',\n        defaultMessage: 'Unpublish',\n      }),\n      onConfirm: handleConfirmBulkUnpublish,\n    },\n  };\n};\n\nUnpublishAction.type = 'unpublish';\n\nconst Emphasis = (chunks: React.ReactNode) => (\n  <Typography fontWeight=\"semiBold\" textColor=\"danger500\">\n    {chunks}\n  </Typography>\n);\n\nconst DEFAULT_BULK_ACTIONS: BulkActionComponent[] = [PublishAction, UnpublishAction, DeleteAction];\n\nexport { DEFAULT_BULK_ACTIONS, BulkActionsRenderer, Emphasis };\nexport type { BulkActionDescription };\n", "import { Box, Flex, Typography } from '@strapi/design-system';\nimport { ChevronRight } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { getTranslation } from '../../../utils/translations';\n\nimport type { ProhibitedCloningField } from '../../../../../shared/contracts/collection-types';\n\ntype Reason = ProhibitedCloningField[1];\n\ninterface AutoCloneFailureModalBodyProps {\n  prohibitedFields: ProhibitedCloningField[];\n}\n\nconst AutoCloneFailureModalBody = ({ prohibitedFields }: AutoCloneFailureModalBodyProps) => {\n  const { formatMessage } = useIntl();\n\n  const getDefaultErrorMessage = (reason: Reason) => {\n    switch (reason) {\n      case 'relation':\n        return 'Duplicating the relation could remove it from the original entry.';\n      case 'unique':\n        return 'Identical values in a unique field are not allowed';\n      default:\n        return reason;\n    }\n  };\n\n  return (\n    <>\n      <Typography variant=\"beta\">\n        {formatMessage({\n          id: getTranslation('containers.list.autoCloneModal.title'),\n          defaultMessage: \"This entry can't be duplicated directly.\",\n        })}\n      </Typography>\n      <Box marginTop={2}>\n        <Typography textColor=\"neutral600\">\n          {formatMessage({\n            id: getTranslation('containers.list.autoCloneModal.description'),\n            defaultMessage:\n              \"A new entry will be created with the same content, but you'll have to change the following fields to save it.\",\n          })}\n        </Typography>\n      </Box>\n      <Flex marginTop={6} gap={2} direction=\"column\" alignItems=\"stretch\">\n        {prohibitedFields.map(([fieldPath, reason]) => (\n          <Flex\n            direction=\"column\"\n            gap={2}\n            alignItems=\"flex-start\"\n            borderColor=\"neutral200\"\n            hasRadius\n            padding={6}\n            key={fieldPath.join()}\n          >\n            <Flex direction=\"row\" tag=\"ol\">\n              {fieldPath.map((pathSegment, index) => (\n                <Typography fontWeight=\"semiBold\" tag=\"li\" key={index}>\n                  {pathSegment}\n                  {index !== fieldPath.length - 1 && (\n                    <ChevronRight\n                      fill=\"neutral500\"\n                      height=\"0.8rem\"\n                      width=\"0.8rem\"\n                      style={{ margin: '0 0.8rem' }}\n                    />\n                  )}\n                </Typography>\n              ))}\n            </Flex>\n            <Typography tag=\"p\" textColor=\"neutral600\">\n              {formatMessage({\n                id: getTranslation(`containers.list.autoCloneModal.error.${reason}`),\n                defaultMessage: getDefaultErrorMessage(reason),\n              })}\n            </Typography>\n          </Flex>\n        ))}\n      </Flex>\n    </>\n  );\n};\n\nexport { AutoCloneFailureModalBody };\nexport type { AutoCloneFailureModalBodyProps };\n", "import * as React from 'react';\n\nimport {\n  DescriptionComponentRenderer,\n  useNotification,\n  useStrapiApp,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport { Button, LinkButton, Modal } from '@strapi/design-system';\nimport { Duplicate, Pencil } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { useDocumentRBAC } from '../../../features/DocumentRBAC';\nimport { Document, useDoc } from '../../../hooks/useDocument';\nimport { useDocumentActions } from '../../../hooks/useDocumentActions';\nimport { isBaseQueryError } from '../../../utils/api';\nimport { DocumentActionsMenu } from '../../EditView/components/DocumentActions';\n\nimport { AutoCloneFailureModalBody } from './AutoCloneFailureModal';\n\nimport type { ProhibitedCloningField } from '../../../../../shared/contracts/collection-types';\nimport type {\n  ContentManagerPlugin,\n  DocumentActionComponent,\n  DocumentActionProps,\n} from '../../../content-manager';\n\n/* -------------------------------------------------------------------------------------------------\n * TableActions\n * -----------------------------------------------------------------------------------------------*/\n\ninterface TableActionsProps {\n  document: Document;\n}\n\nconst TableActions = ({ document }: TableActionsProps) => {\n  const { formatMessage } = useIntl();\n  const { model, collectionType } = useDoc();\n  const plugins = useStrapiApp('TableActions', (state) => state.plugins);\n\n  const props: DocumentActionProps = {\n    activeTab: null,\n    model,\n    documentId: document.documentId,\n    collectionType,\n    document,\n  };\n\n  return (\n    <DescriptionComponentRenderer\n      props={props}\n      descriptions={(plugins['content-manager'].apis as ContentManagerPlugin['config']['apis'])\n        .getDocumentActions('table-row')\n        // We explicitly remove the PublishAction from description so we never render it and we don't make unnecessary requests.\n        .filter((action) => action.name !== 'PublishAction')}\n    >\n      {(actions) => {\n        const tableRowActions = actions.filter((action) => {\n          const positions = Array.isArray(action.position) ? action.position : [action.position];\n          return positions.includes('table-row');\n        });\n\n        return (\n          <DocumentActionsMenu\n            actions={tableRowActions}\n            label={formatMessage({\n              id: 'content-manager.containers.list.table.row-actions',\n              defaultMessage: 'Row actions',\n            })}\n            variant=\"ghost\"\n          />\n        );\n      }}\n    </DescriptionComponentRenderer>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * TableActionComponents\n * -----------------------------------------------------------------------------------------------*/\n\nconst EditAction: DocumentActionComponent = ({ documentId }) => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n  const { canRead } = useDocumentRBAC('EditAction', ({ canRead }) => ({ canRead }));\n  const { toggleNotification } = useNotification();\n  const [{ query }] = useQueryParams<{ plugins?: object }>();\n\n  return {\n    disabled: !canRead,\n    icon: <StyledPencil />,\n    label: formatMessage({\n      id: 'content-manager.actions.edit.label',\n      defaultMessage: 'Edit',\n    }),\n    position: 'table-row',\n    onClick: async () => {\n      if (!documentId) {\n        console.error(\n          \"You're trying to edit a document without an id, this is likely a bug with Strapi. Please open an issue.\"\n        );\n\n        toggleNotification({\n          message: formatMessage({\n            id: 'content-manager.actions.edit.error',\n            defaultMessage: 'An error occurred while trying to edit the document.',\n          }),\n          type: 'danger',\n        });\n\n        return;\n      }\n\n      navigate({\n        pathname: documentId,\n        search: stringify({\n          plugins: query.plugins,\n        }),\n      });\n    },\n  };\n};\n\nEditAction.type = 'edit';\nEditAction.position = 'table-row';\n\n/**\n * Because the icon system is completely broken, we have to do\n * this to remove the fill from the cog.\n */\nconst StyledPencil = styled(Pencil)`\n  path {\n    fill: currentColor;\n  }\n`;\n\nconst CloneAction: DocumentActionComponent = ({ model, documentId }) => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n  const { canCreate } = useDocumentRBAC('CloneAction', ({ canCreate }) => ({ canCreate }));\n  const { toggleNotification } = useNotification();\n  const { autoClone } = useDocumentActions();\n  const [prohibitedFields, setProhibitedFields] = React.useState<ProhibitedCloningField[]>([]);\n\n  return {\n    disabled: !canCreate,\n    icon: <StyledDuplicate />,\n    label: formatMessage({\n      id: 'content-manager.actions.clone.label',\n      defaultMessage: 'Duplicate',\n    }),\n    position: 'table-row',\n    onClick: async () => {\n      if (!documentId) {\n        console.error(\n          \"You're trying to clone a document in the table without an id, this is likely a bug with Strapi. Please open an issue.\"\n        );\n\n        toggleNotification({\n          message: formatMessage({\n            id: 'content-manager.actions.clone.error',\n            defaultMessage: 'An error occurred while trying to clone the document.',\n          }),\n          type: 'danger',\n        });\n\n        return;\n      }\n\n      const res = await autoClone({ model, sourceId: documentId });\n\n      if ('data' in res) {\n        navigate(res.data.documentId);\n\n        /**\n         * We return true because we don't need to show a modal anymore.\n         */\n        return true;\n      }\n\n      if (\n        isBaseQueryError(res.error) &&\n        res.error.details &&\n        typeof res.error.details === 'object' &&\n        'prohibitedFields' in res.error.details &&\n        Array.isArray(res.error.details.prohibitedFields)\n      ) {\n        const prohibitedFields = res.error.details.prohibitedFields as ProhibitedCloningField[];\n\n        setProhibitedFields(prohibitedFields);\n      }\n    },\n    dialog: {\n      type: 'modal',\n      title: formatMessage({\n        id: 'content-manager.containers.list.autoCloneModal.header',\n        defaultMessage: 'Duplicate',\n      }),\n      content: <AutoCloneFailureModalBody prohibitedFields={prohibitedFields} />,\n      footer: ({ onClose }) => {\n        return (\n          <Modal.Footer>\n            <Button onClick={onClose} variant=\"tertiary\">\n              {formatMessage({\n                id: 'cancel',\n                defaultMessage: 'Cancel',\n              })}\n            </Button>\n            <LinkButton\n              tag={NavLink}\n              to={{\n                pathname: `clone/${documentId}`,\n              }}\n            >\n              {formatMessage({\n                id: 'content-manager.containers.list.autoCloneModal.create',\n                defaultMessage: 'Create',\n              })}\n            </LinkButton>\n          </Modal.Footer>\n        );\n      },\n    },\n  };\n};\n\nCloneAction.type = 'clone';\nCloneAction.position = 'table-row';\n\n/**\n * Because the icon system is completely broken, we have to do\n * this to remove the fill from the cog.\n */\nconst StyledDuplicate = styled(Duplicate)`\n  path {\n    fill: currentColor;\n  }\n`;\n\nconst DEFAULT_TABLE_ROW_ACTIONS = [EditAction, CloneAction];\n\nexport { TableActions, DEFAULT_TABLE_ROW_ACTIONS };\n", "/* eslint-disable check-file/filename-naming-convention */\nimport { INJECTION_ZONES } from './components/InjectionZone';\nimport { PLUGIN_ID } from './constants/plugin';\nimport {\n  DEFAULT_ACTIONS,\n  type DocumentActionPosition,\n  type DocumentActionDescription,\n} from './pages/EditView/components/DocumentActions';\nimport {\n  DEFAULT_HEADER_ACTIONS,\n  type HeaderActionDescription,\n} from './pages/EditView/components/Header';\nimport { ActionsPanel, type PanelDescription } from './pages/EditView/components/Panels';\nimport {\n  DEFAULT_BULK_ACTIONS,\n  type BulkActionDescription,\n} from './pages/ListView/components/BulkActions/Actions';\nimport { DEFAULT_TABLE_ROW_ACTIONS } from './pages/ListView/components/TableActions';\n\nimport type { Document } from './hooks/useDocument';\nimport type { DocumentMetadata } from '../../shared/contracts/collection-types';\nimport type { DescriptionComponent, PluginConfig } from '@strapi/admin/strapi-admin';\n\n/* -------------------------------------------------------------------------------------------------\n * Configuration Types\n * -----------------------------------------------------------------------------------------------*/\n\ntype DescriptionReducer<Config extends object> = (prev: Config[]) => Config[];\n\ninterface EditViewContext {\n  /**\n   * This will ONLY be null, if the content-type\n   * does not have draft & published enabled.\n   */\n  activeTab: 'draft' | 'published' | null;\n  /**\n   * Will be either 'single-types' | 'collection-types'\n   */\n  collectionType: string;\n  /**\n   * this will be undefined if someone is creating an entry.\n   */\n  document?: Document;\n  /**\n   * this will be undefined if someone is creating an entry.\n   */\n  documentId?: string;\n  /**\n   * this will be undefined if someone is creating an entry.\n   */\n  meta?: DocumentMetadata;\n  /**\n   * The current content-type's model.\n   */\n  model: string;\n}\n\ninterface ListViewContext {\n  /**\n   * Will be either 'single-types' | 'collection-types'\n   */\n  collectionType: string;\n  /**\n   * The current selected documents in the table\n   */\n  documents: Document[];\n  /**\n   * The current content-type's model.\n   */\n  model: string;\n}\n\ninterface PanelComponentProps extends EditViewContext {}\n\ninterface PanelComponent extends DescriptionComponent<PanelComponentProps, PanelDescription> {\n  /**\n   * The defaults are added by Strapi only, if you're providing your own component,\n   * you do not need to provide this.\n   */\n  type?: 'actions' | 'releases';\n}\n\ninterface DocumentActionProps extends EditViewContext {}\n\ninterface DocumentActionComponent\n  extends DescriptionComponent<DocumentActionProps, DocumentActionDescription> {\n  type?:\n    | 'clone'\n    | 'configure-the-view'\n    | 'delete'\n    | 'discard'\n    | 'edit'\n    | 'edit-the-model'\n    | 'history'\n    | 'publish'\n    | 'unpublish'\n    | 'update';\n  position?: DocumentActionDescription['position'];\n}\n\ninterface HeaderActionProps extends EditViewContext {}\n\ninterface HeaderActionComponent\n  extends DescriptionComponent<HeaderActionProps, HeaderActionDescription> {}\n\ninterface BulkActionComponentProps extends ListViewContext {}\n\ninterface BulkActionComponent\n  extends DescriptionComponent<BulkActionComponentProps, BulkActionDescription> {\n  type?: 'delete' | 'publish' | 'unpublish';\n}\n\n/* -------------------------------------------------------------------------------------------------\n * ContentManager plugin\n * -----------------------------------------------------------------------------------------------*/\n\nclass ContentManagerPlugin {\n  /**\n   * The following properties are the stored ones provided by any plugins registering with\n   * the content-manager. The function calls however, need to be called at runtime in the\n   * application, so instead we collate them and run them later with the complete list incl.\n   * ones already registered & the context of the view.\n   */\n  bulkActions: BulkActionComponent[] = [...DEFAULT_BULK_ACTIONS];\n  documentActions: DocumentActionComponent[] = [\n    ...DEFAULT_ACTIONS,\n    ...DEFAULT_TABLE_ROW_ACTIONS,\n    ...DEFAULT_HEADER_ACTIONS,\n  ];\n  editViewSidePanels: PanelComponent[] = [ActionsPanel];\n  headerActions: HeaderActionComponent[] = [];\n\n  constructor() {}\n\n  addEditViewSidePanel(panels: DescriptionReducer<PanelComponent>): void;\n  addEditViewSidePanel(panels: PanelComponent[]): void;\n  addEditViewSidePanel(panels: DescriptionReducer<PanelComponent> | PanelComponent[]) {\n    if (Array.isArray(panels)) {\n      this.editViewSidePanels = [...this.editViewSidePanels, ...panels];\n    } else if (typeof panels === 'function') {\n      this.editViewSidePanels = panels(this.editViewSidePanels);\n    } else {\n      throw new Error(\n        `Expected the \\`panels\\` passed to \\`addEditViewSidePanel\\` to be an array or a function, but received ${getPrintableType(\n          panels\n        )}`\n      );\n    }\n  }\n\n  addDocumentAction(actions: DescriptionReducer<DocumentActionComponent>): void;\n  addDocumentAction(actions: DocumentActionComponent[]): void;\n  addDocumentAction(\n    actions: DescriptionReducer<DocumentActionComponent> | DocumentActionComponent[]\n  ) {\n    if (Array.isArray(actions)) {\n      this.documentActions = [...this.documentActions, ...actions];\n    } else if (typeof actions === 'function') {\n      this.documentActions = actions(this.documentActions);\n    } else {\n      throw new Error(\n        `Expected the \\`actions\\` passed to \\`addDocumentAction\\` to be an array or a function, but received ${getPrintableType(\n          actions\n        )}`\n      );\n    }\n  }\n\n  addDocumentHeaderAction(actions: DescriptionReducer<HeaderActionComponent>): void;\n  addDocumentHeaderAction(actions: HeaderActionComponent[]): void;\n  addDocumentHeaderAction(\n    actions: DescriptionReducer<HeaderActionComponent> | HeaderActionComponent[]\n  ) {\n    if (Array.isArray(actions)) {\n      this.headerActions = [...this.headerActions, ...actions];\n    } else if (typeof actions === 'function') {\n      this.headerActions = actions(this.headerActions);\n    } else {\n      throw new Error(\n        `Expected the \\`actions\\` passed to \\`addDocumentHeaderAction\\` to be an array or a function, but received ${getPrintableType(\n          actions\n        )}`\n      );\n    }\n  }\n\n  addBulkAction(actions: DescriptionReducer<BulkActionComponent>): void;\n  addBulkAction(actions: BulkActionComponent[]): void;\n  addBulkAction(actions: DescriptionReducer<BulkActionComponent> | BulkActionComponent[]) {\n    if (Array.isArray(actions)) {\n      this.bulkActions = [...this.bulkActions, ...actions];\n    } else if (typeof actions === 'function') {\n      this.bulkActions = actions(this.bulkActions);\n    } else {\n      throw new Error(\n        `Expected the \\`actions\\` passed to \\`addBulkAction\\` to be an array or a function, but received ${getPrintableType(\n          actions\n        )}`\n      );\n    }\n  }\n\n  get config() {\n    return {\n      id: PLUGIN_ID,\n      name: 'Content Manager',\n      injectionZones: INJECTION_ZONES,\n      apis: {\n        addBulkAction: this.addBulkAction.bind(this),\n        addDocumentAction: this.addDocumentAction.bind(this),\n        addDocumentHeaderAction: this.addDocumentHeaderAction.bind(this),\n        addEditViewSidePanel: this.addEditViewSidePanel.bind(this),\n        getBulkActions: () => this.bulkActions,\n        getDocumentActions: (position?: DocumentActionPosition) => {\n          /**\n           * When possible, pre-filter the actions by the components static position property.\n           * This avoids rendering the actions in multiple places where they weren't displayed,\n           * which wasn't visible but created issues with useEffect for instance.\n           * The response should still be filtered by the position, as the static property is new\n           * and not mandatory to avoid a breaking change.\n           */\n          if (position) {\n            return this.documentActions.filter(\n              (action) =>\n                action.position == undefined || [action.position].flat().includes(position)\n            );\n          }\n\n          return this.documentActions;\n        },\n        getEditViewSidePanels: () => this.editViewSidePanels,\n        getHeaderActions: () => this.headerActions,\n      },\n    } satisfies PluginConfig;\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * getPrintableType\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n * @description Gets the human-friendly printable type name for the given value, for instance it will yield\n * `array` instead of `object`, as the native `typeof` operator would do.\n */\nconst getPrintableType = (value: unknown): string => {\n  const nativeType = typeof value;\n\n  if (nativeType === 'object') {\n    if (value === null) return 'null';\n    if (Array.isArray(value)) return 'array';\n    if (value instanceof Object && value.constructor.name !== 'Object') {\n      return value.constructor.name;\n    }\n  }\n\n  return nativeType;\n};\n\nexport { ContentManagerPlugin };\nexport type {\n  EditViewContext,\n  ListViewContext,\n  BulkActionComponent,\n  BulkActionComponentProps,\n  BulkActionDescription,\n  DescriptionComponent,\n  DescriptionReducer,\n  PanelComponentProps,\n  PanelComponent,\n  PanelDescription,\n  DocumentActionComponent,\n  DocumentActionDescription,\n  DocumentActionProps,\n  HeaderActionComponent,\n  HeaderActionDescription,\n  HeaderActionProps,\n};\n", "import { useQueryParams, useTracking } from '@strapi/admin/strapi-admin';\nimport { ClockCounterClockwise } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nimport type { DocumentActionComponent } from '../../content-manager';\n\nconst HistoryAction: DocumentActionComponent = ({ model, document }) => {\n  const { formatMessage } = useIntl();\n  const [{ query }] = useQueryParams<{ plugins?: Record<string, unknown> }>();\n  const navigate = useNavigate();\n  const { trackUsage } = useTracking();\n  const { pathname } = useLocation();\n  const pluginsQueryParams = stringify({ plugins: query.plugins }, { encode: false });\n\n  if (!window.strapi.features.isEnabled('cms-content-history')) {\n    return null;\n  }\n\n  const handleOnClick = () => {\n    const destination = { pathname: 'history', search: pluginsQueryParams };\n    trackUsage('willNavigate', {\n      from: pathname,\n      to: `${pathname}/${destination.pathname}`,\n    });\n    navigate(destination);\n  };\n\n  return {\n    icon: <ClockCounterClockwise />,\n    label: formatMessage({\n      id: 'content-manager.history.document-action',\n      defaultMessage: 'Content History',\n    }),\n    onClick: handleOnClick,\n    disabled:\n      /**\n       * The user is creating a new document.\n       * It hasn't been saved yet, so there's no history to go to\n       */\n      !document ||\n      /**\n       * The document has been created but the current dimension has never been saved.\n       * For example, the user is creating a new locale in an existing document,\n       * so there's no history for the document in that locale\n       */\n      !document.id ||\n      /**\n       * History is only available for content types created by the user.\n       * These have the `api::` prefix, as opposed to the ones created by Strapi or plugins,\n       * which start with `admin::` or `plugin::`\n       */\n      !model.startsWith('api::'),\n    position: 'header',\n  };\n};\n\nHistoryAction.type = 'history';\nHistoryAction.position = 'header';\n\nexport { HistoryAction };\n", "/* eslint-disable check-file/no-index */\n\nimport { type ContentManagerPlugin } from '../content-manager';\n\nimport { HistoryAction } from './components/HistoryAction';\n\nimport type { StrapiApp } from '@strapi/admin/strapi-admin';\nimport type { Plugin } from '@strapi/types';\n\nconst historyAdmin: Partial<Plugin.Config.AdminInput> = {\n  bootstrap(app: StrapiApp) {\n    const { addDocumentAction } = app.getPlugin('content-manager').apis as {\n      addDocumentAction: ContentManagerPlugin['addDocumentAction'];\n    };\n\n    /**\n     * Register the document action here using the public API, and not by setting the action in the\n     * Content Manager directly, because this API lets us control the order of the actions array.\n     * We want history to be the last non-delete action in the array.\n     */\n    addDocumentAction((actions) => {\n      const indexOfDeleteAction = actions.findIndex((action) => action.type === 'delete');\n      actions.splice(indexOfDeleteAction, 0, HistoryAction);\n      return actions;\n    });\n  },\n};\n\nexport { historyAdmin };\n", "import { createSlice, type PayloadAction } from '@reduxjs/toolkit';\n\nimport { GetInitData } from '../../../shared/contracts/init';\n\nimport type { ContentManagerLink } from '../hooks/useContentManagerInitData';\n\ninterface AppState {\n  collectionTypeLinks: ContentManagerLink[];\n  components: GetInitData.Response['data']['components'];\n  fieldSizes: GetInitData.Response['data']['fieldSizes'];\n  models: GetInitData.Response['data']['contentTypes'];\n  singleTypeLinks: ContentManagerLink[];\n  isLoading: boolean;\n}\n\nconst initialState: AppState = {\n  collectionTypeLinks: [],\n  components: [],\n  fieldSizes: {},\n  models: [],\n  singleTypeLinks: [],\n  isLoading: true,\n};\n\nconst appSlice = createSlice({\n  name: 'app',\n  initialState,\n  reducers: {\n    setInitialData(\n      state,\n      action: PayloadAction<{\n        authorizedCollectionTypeLinks: AppState['collectionTypeLinks'];\n        authorizedSingleTypeLinks: AppState['singleTypeLinks'];\n        components: AppState['components'];\n        contentTypeSchemas: AppState['models'];\n        fieldSizes: AppState['fieldSizes'];\n      }>\n    ) {\n      const {\n        authorizedCollectionTypeLinks,\n        authorizedSingleTypeLinks,\n        components,\n        contentTypeSchemas,\n        fieldSizes,\n      } = action.payload;\n      state.collectionTypeLinks = authorizedCollectionTypeLinks.filter(\n        ({ isDisplayed }) => isDisplayed\n      );\n      state.singleTypeLinks = authorizedSingleTypeLinks.filter(({ isDisplayed }) => isDisplayed);\n      state.components = components;\n      state.models = contentTypeSchemas;\n      state.fieldSizes = fieldSizes;\n      state.isLoading = false;\n    },\n  },\n});\n\nconst { actions, reducer } = appSlice;\nconst { setInitialData } = actions;\n\nexport { reducer, setInitialData };\nexport type { AppState };\n", "import { combineReducers } from '@reduxjs/toolkit';\n\nimport { reducer as appReducer } from './app';\n\nconst reducer = combineReducers({\n  app: appReducer,\n});\n\ntype State = ReturnType<typeof reducer>;\n\nexport { reducer };\nexport type { State };\n", "import { GetPreviewUrl } from '../../../../shared/contracts/preview';\nimport { contentManagerApi } from '../../services/api';\n\nconst previewApi = contentManagerApi.injectEndpoints({\n  endpoints: (builder) => ({\n    getPreviewUrl: builder.query<GetPreviewUrl.Response, GetPreviewUrl.Request>({\n      query({ query, params }) {\n        return {\n          url: `/content-manager/preview/url/${params.contentType}`,\n          method: 'GET',\n          config: {\n            params: query,\n          },\n        };\n      },\n    }),\n  }),\n});\n\nconst { useGetPreviewUrlQuery } = previewApi;\n\nexport { useGetPreviewUrlQuery };\n", "import * as React from 'react';\n\nimport { useQueryParams, useTracking, useForm } from '@strapi/admin/strapi-admin';\nimport { Box, Button, Tooltip, type TooltipProps } from '@strapi/design-system';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { useGetPreviewUrlQuery } from '../services/preview';\n\nimport type { PanelComponent } from '@strapi/content-manager/strapi-admin';\nimport type { UID } from '@strapi/types';\n\ninterface ConditionalTooltipProps {\n  isShown: boolean;\n  label: TooltipProps['label'];\n  children: React.ReactNode;\n}\n\nconst ConditionalTooltip = ({ isShown, label, children }: ConditionalTooltipProps) => {\n  if (isShown) {\n    return <Tooltip label={label}>{children}</Tooltip>;\n  }\n\n  return children;\n};\n\nconst PreviewSidePanel: PanelComponent = ({ model, documentId, document }) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { pathname } = useLocation();\n  const [{ query }] = useQueryParams();\n  const isModified = useForm('PreviewSidePanel', (state) => state.modified);\n\n  /**\n   * The preview URL isn't used in this component, we just fetch it to know if preview is enabled\n   * for the content type. If it's not, the panel is not displayed. If it is, we display a link to\n   * /preview, and the URL will already be loaded in the RTK query cache.\n   */\n  const { data, error } = useGetPreviewUrlQuery({\n    params: {\n      contentType: model as UID.ContentType,\n    },\n    query: {\n      documentId,\n      locale: document?.locale,\n      status: document?.status,\n    },\n  });\n\n  if (!data?.data?.url || error) {\n    return null;\n  }\n\n  const trackNavigation = () => {\n    // Append /preview to the current URL\n    const destinationPathname = pathname.replace(/\\/$/, '') + '/preview';\n    trackUsage('willNavigate', { from: pathname, to: destinationPathname });\n  };\n\n  return {\n    title: formatMessage({ id: 'content-manager.preview.panel.title', defaultMessage: 'Preview' }),\n    content: (\n      <ConditionalTooltip\n        label={formatMessage({\n          id: 'content-manager.preview.panel.button-disabled-tooltip',\n          defaultMessage: 'Please save to open the preview',\n        })}\n        isShown={isModified}\n      >\n        <Box cursor=\"not-allowed\" width=\"100%\">\n          <Button\n            variant=\"tertiary\"\n            tag={Link}\n            to={{ pathname: 'preview', search: stringify(query, { encode: false }) }}\n            onClick={trackNavigation}\n            width=\"100%\"\n            disabled={isModified}\n            pointerEvents={isModified ? 'none' : undefined}\n            tabIndex={isModified ? -1 : undefined}\n          >\n            {formatMessage({\n              id: 'content-manager.preview.panel.button',\n              defaultMessage: 'Open preview',\n            })}\n          </Button>\n        </Box>\n      </ConditionalTooltip>\n    ),\n  };\n};\n\nexport { PreviewSidePanel };\n", "/* eslint-disable check-file/no-index */\n\nimport { PreviewSidePanel } from './components/PreviewSidePanel';\n\nimport type { ContentManagerPlugin } from '../content-manager';\nimport type { PluginDefinition } from '@strapi/admin/strapi-admin';\n\nconst previewAdmin: Partial<PluginDefinition> = {\n  bootstrap(app) {\n    const contentManagerPluginApis = app.getPlugin('content-manager')\n      .apis as ContentManagerPlugin['config']['apis'];\n\n    contentManagerPluginApis.addEditViewSidePanel([PreviewSidePanel]);\n  },\n};\n\nexport { previewAdmin };\n", "import { Feather } from '@strapi/icons';\n\nimport { PLUGIN_ID } from './constants/plugin';\nimport { ContentManagerPlugin } from './content-manager';\nimport { historyAdmin } from './history';\nimport { reducer } from './modules/reducers';\nimport { previewAdmin } from './preview';\nimport { routes } from './router';\nimport { prefixPluginTranslations } from './utils/translations';\n\n// NOTE: we have to preload it to ensure chunks will have it available as global\nimport 'prismjs';\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  register(app: any) {\n    const cm = new ContentManagerPlugin();\n\n    app.addReducers({\n      [PLUGIN_ID]: reducer,\n    });\n\n    app.addMenuLink({\n      to: PLUGIN_ID,\n      icon: Feather,\n      intlLabel: {\n        id: `content-manager.plugin.name`,\n        defaultMessage: 'Content Manager',\n      },\n      permissions: [],\n      position: 1,\n    });\n\n    app.router.addRoute({\n      path: 'content-manager/*',\n      lazy: async () => {\n        const { Layout } = await import('./layout');\n\n        return {\n          Component: Layout,\n        };\n      },\n      children: routes,\n    });\n\n    app.registerPlugin(cm.config);\n  },\n  bootstrap(app: any) {\n    if (typeof historyAdmin.bootstrap === 'function') {\n      historyAdmin.bootstrap(app);\n    }\n    if (typeof previewAdmin.bootstrap === 'function') {\n      previewAdmin.bootstrap(app);\n    }\n  },\n  async registerTrads({ locales }: { locales: string[] }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, PLUGIN_ID),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n\nexport * from './exports';\n"],
  "mappings": "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",
  "names": ["require_mapValues", "_self", "lang", "stringify", "Prism", "PLUGIN_ID", "PERMISSIONS", "INJECTION_ZONES", "editView", "informations", "listView", "actions", "deleteModalAdditionalInfos", "publishModalAdditionalInfos", "unpublishModalAdditionalInfos", "InjectionZone", "area", "props", "components", "useInjectionZone", "_jsx", "_Fragment", "map", "component", "Component", "name", "getPlugin", "useStrapiApp", "state", "contentManagerPlugin", "page", "position", "split", "getInjectedComponents", "ID", "CREATED_BY_ATTRIBUTE_NAME", "UPDATED_BY_ATTRIBUTE_NAME", "CREATOR_FIELDS", "PUBLISHED_BY_ATTRIBUTE_NAME", "CREATED_AT_ATTRIBUTE_NAME", "UPDATED_AT_ATTRIBUTE_NAME", "PUBLISHED_AT_ATTRIBUTE_NAME", "DOCUMENT_META_FIELDS", "ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD", "SINGLE_TYPES", "COLLECTION_TYPES", "DocumentRBACProvider", "useDocumentRBAC", "createContext", "canCreate", "canCreateFields", "canDelete", "canPublish", "canRead", "canReadFields", "canUpdate", "canUpdateFields", "canUserAction", "isLoading", "DocumentRBAC", "children", "permissions", "slug", "useParams", "Error", "rawQuery", "useQueryParams", "userPermissions", "useAuth", "contentTypePermissions", "useMemo", "filter", "permission", "subject", "reduce", "acc", "action", "slice", "allowedActions", "useRBAC", "undefined", "extractAndDedupeFields", "create", "read", "update", "useCallback", "fieldName", "fieldsUserCanAction", "fieldType", "removeNumericalStrings", "componentFieldNames", "field", "length", "some", "includes", "join", "Page", "Loading", "flatMap", "properties", "fields", "index", "arr", "indexOf", "item", "isNaN", "Number", "BLOCK_LIST_ATTRIBUTE_KEYS", "traverseData", "predicate", "transform", "schema", "data", "traverse", "datum", "attributes", "Object", "entries", "key", "value", "attribute", "type", "repeatable", "componentValue", "componentData", "dynamicZoneValue", "__component", "removeProhibitedFields", "prohibitedFields", "prepareRelations", "connect", "disconnect", "prepareTempKeys", "Array", "isArray", "keys", "generateNKeysBetween", "__temp_key__", "removeFieldsThatDontExistOnSchema", "schemaKeys", "dataKeys", "keysToRemove", "revisedData", "structuredClone", "removeNullValues", "transformDocument", "document", "transformations", "pipe", "createDefaultForm", "contentType", "traverseSchema", "default", "required", "defaultComponentForm", "min", "fill", "contentManagerApi", "adminApi", "enhanceEndpoints", "addTagTypes", "documentApi", "injectEndpoints", "overrideExisting", "endpoints", "builder", "autoCloneDocument", "mutation", "query", "model", "sourceId", "url", "method", "config", "params", "invalidatesTags", "_result", "error", "id", "cloneDocument", "_error", "createDocument", "result", "transformResponse", "response", "meta", "arg", "availableStatus", "availableLocales", "deleteDocument", "collectionType", "documentId", "deleteManyDocuments", "body", "_res", "discardDocument", "getAllDocuments", "stringify", "encode", "providesTags", "results", "getDraftRelationCount", "getDocument", "queryFn", "_api", "_extraOpts", "baseQuery", "res", "getManyDraftRelationCount", "publishDocument", "publishManyDocuments", "documentIds", "updateDocument", "onQueryStarted", "patch", "dispatch", "queryFulfilled", "patchResult", "util", "updateQueryData", "draft", "assign", "undo", "unpublishDocument", "unpublishManyDocuments", "useAutoCloneDocumentMutation", "useCloneDocumentMutation", "useCreateDocumentMutation", "useDeleteDocumentMutation", "useDeleteManyDocumentsMutation", "useDiscardDocumentMutation", "useGetAllDocumentsQuery", "useLazyGetDocumentQuery", "useGetDocumentQuery", "useLazyGetDraftRelationCountQuery", "useGetManyDraftRelationCountQuery", "usePublishDocumentMutation", "usePublishManyDocumentsMutation", "useUpdateDocumentMutation", "useUnpublishDocumentMutation", "useUnpublishManyDocumentsMutation", "buildValidParams", "plugins", "_", "validQueryParams", "values", "current", "isBaseQueryError", "arrayValidator", "options", "message", "translatedErrors", "test", "status", "createYupSchema", "createModelSchema", "object", "shape", "validations", "addNullableValidation", "addRequiredValidation", "addMinLengthValidation", "addMaxLengthValidation", "addMinValidation", "addMaxValidation", "addRegexValidation", "fn", "transformSchema", "array", "of", "nullable", "lazy", "validation", "string", "oneOf", "concat", "mixed", "number", "createAttributeSchema", "matches", "boolean", "json", "email", "enum", "JSON", "err", "parse", "nullableSchema", "minLength", "isInteger", "maxLength", "max", "toInteger", "val", "num", "regex", "RegExp", "defaultMessage", "excludeEmptyString", "initApi", "getInitialData", "useGetInitialDataQuery", "useContentTypeSchema", "toggleNotification", "useNotification", "_unstableFormatAPIError", "formatAPIError", "useAPIErrorHandler", "isFetching", "contentTypes", "find", "ct", "uid", "componentsByKey", "extractContentTypeComponents", "React", "useEffect", "schemas", "allComponents", "getComponents", "componentAttributes", "push", "componentUid", "componentUids", "uniqueComponentUids", "Set", "HOOKS", "INJECT_COLUMN_IN_TABLE", "MUTATE_COLLECTION_TYPES_LINKS", "MUTATE_EDIT_VIEW_LAYOUT", "MUTATE_SINGLE_TYPES_LINKS", "contentTypesApi", "getContentTypeConfiguration", "getAllContentTypeSettings", "updateContentTypeConfiguration", "useGetContentTypeConfigurationQuery", "useGetAllContentTypeSettingsQuery", "useUpdateContentTypeConfigurationMutation", "checkIfAttributeIsDisplayable", "relation", "toLowerCase", "getMainField", "mainFieldName", "mainFieldType", "targetModel", "DEFAULT_SETTINGS", "bulkable", "filterable", "searchable", "pagination", "defaultSortBy", "defaultSortOrder", "mainField", "pageSize", "useDocumentLayout", "useDocument", "skip", "runHookWaterfall", "isLoadingSchemas", "isLoadingConfigs", "isFetchingConfigs", "editLayout", "formatEditLayout", "layout", "metadatas", "settings", "listLayout", "formatListLayout", "edit", "list", "useDocLayout", "useDoc", "currentPanelIndex", "panelledEditAttributes", "convertEditLayoutToFieldLayouts", "layouts", "configurations", "panels", "row", "componentEditAttributes", "configuration", "icon", "info", "displayName", "editMetadatas", "metadata", "pluginOptions", "rows", "disabled", "editable", "hint", "description", "label", "placeholder", "size", "unique", "visible", "listMetadatas", "listAttributes", "convertListLayoutToFieldLayouts", "columns", "sortable", "args", "opts", "formatMessage", "useIntl", "currentData", "isLoadingDocument", "isFetchingDocument", "isLoadingSchema", "isSingleType", "kind", "getTitle", "validationSchema", "validate", "validateSync", "abortEarly", "strict", "ValidationError", "getYupValidationErrors", "getInitialFormValues", "isCreatingDocument", "form", "hasError", "origin", "returnId", "useContentManagerContext", "isLoadingDoc", "useForm", "isCreatingEntry", "hasDraftAndPublish", "draftAndPublish", "prefixPluginTranslations", "trad", "pluginId", "getTranslation", "DEFAULT_UNEXPECTED_ERROR_MSG", "useDocumentActions", "trackUsage", "useTracking", "navigate", "useNavigate", "setCurrentStep", "useGuidedTour", "_delete", "trackerProperty", "deleteMany", "title", "discard", "publish", "publishMany", "unpublish", "discardDraft", "unpublishMany", "autoClone", "clone", "_id", "restBody", "relative", "getDoc", "delete", "ProtectedHistoryPage", "then", "mod", "routes", "path", "ProtectedPreviewPage", "ProtectedEditViewPage", "ProtectedListViewPage", "ProtectedListConfiguration", "ProtectedEditConfigurationPage", "ProtectedComponentConfigurationPage", "NoPermissions", "NoContentType", "CollectionTypePages", "Navigate", "to", "CLONE_RELATIVE_PATH", "CLONE_PATH", "LIST_RELATIVE_PATH", "LIST_PATH", "element", "historyRoutes", "previewRoutes", "DocumentActions", "primaryAction", "secondaryAction", "restActions", "positions", "_jsxs", "Flex", "direction", "gap", "alignItems", "width", "DocumentActionButton", "variant", "DocumentActionsMenu", "dialogId", "setDialogId", "useState", "handleClick", "e", "onClick", "dialog", "muteDialog", "content", "timeout", "onClose", "preventDefault", "handleClose", "Button", "flex", "startIcon", "justifyContent", "paddingTop", "paddingBottom", "DocumentActionConfirmDialog", "isOpen", "DocumentActionModal", "onModalClose", "MenuItem", "styled", "Menu", "Item", "theme", "isVariantDanger", "isDisabled", "colors", "danger100", "setIsOpen", "every", "Root", "open", "onOpenChange", "Trigger", "endIcon", "paddingLeft", "paddingRight", "More", "aria-hidden", "focusable", "VisuallyHidden", "tag", "Content", "maxHeight", "popoverPlacement", "onSelect", "display", "color", "convertActionVariantToColor", "convertActionVariantToIconColor", "Fragment", "onCancel", "onConfirm", "handleConfirm", "Dialog", "Header", "Body", "Footer", "Cancel", "fullWidth", "footer", "Modal", "Title", "transformData", "apiData", "mapValues", "PublishAction", "activeTab", "_unstableFormatValidationErrors", "formatValidationErrors", "isListView", "useMatch", "isCloning", "countDraftRelations", "isLoadingDraftRelations", "isError", "isErrorDraftRelations", "useGetDraftRelationCountQuery", "localCountOfDraftRelations", "setLocalCountOfDraftRelations", "serverCountOfDraftRelations", "setServerCountOfDraftRelations", "modified", "setSubmitting", "isSubmitting", "setErrors", "formValues", "localDraftRelations", "extractDraftRelations", "relations", "forEach", "add", "traverseAndExtract", "fetchDraftRelationsCount", "isDocumentPublished", "doc", "performPublish", "errors", "pathname", "search", "totalDraftRelations", "enableDraftRelationsCount", "hasDraftRelations", "count", "UpdateAction", "cloneMatch", "resetForm", "handleUpdate", "replace", "handleKeyDown", "metaKey", "ctrlKey", "window", "addEventListener", "removeEventListener", "UNPUBLISH_DRAFT_OPTIONS", "KEEP", "DISCARD", "UnpublishAction", "shouldKeepDraft", "setShouldKeepDraft", "isDocumentModified", "handleChange", "Cross", "console", "WarningCircle", "height", "Typography", "textAlign", "Radio", "Group", "defaultValue", "aria-label", "onValueChange", "checked", "DiscardAction", "DEFAULT_ACTIONS", "intervals", "RelativeTime", "forwardRef", "timestamp", "customIntervals", "restProps", "forwardedRef", "formatRelativeTime", "formatDate", "formatTime", "interval", "intervalToDuration", "start", "end", "Date", "now", "unit", "intervalUnit", "relativeTime", "isPast", "customInterval", "custom", "threshold", "displayText", "text", "numeric", "time", "ref", "dateTime", "toISOString", "role", "getDisplayName", "firstname", "lastname", "username", "trim", "capitalise", "str", "charAt", "toUpperCase", "DocumentStatus", "statusVariant", "Status", "fontWeight", "isCreating", "documentTitle", "BackButton", "fallback", "HeaderToolbar", "Box", "marginTop", "DescriptionComponentRenderer", "descriptions", "apis", "getHeaderActions", "HeaderActions", "getDocumentActions", "headerActions", "Information", "createAndUpdateDocument", "publishedAt", "creator", "updator", "information", "isDisplayed", "isAnonymous", "author", "borderWidth", "borderStyle", "borderColor", "padding", "marginLeft", "marginRight", "textColor", "SingleSelect", "onChange", "option", "SingleSelectOption", "IconButton", "HeaderActionDialog", "ConfigureTheViewAction", "ListPlus", "EditTheModelAction", "Pencil", "DeleteAction", "listViewPathMatch", "deleteAction", "isLocalized", "locale", "Trash", "DEFAULT_HEADER_ACTIONS", "Panels", "getEditViewSidePanels", "Panel", "ActionsPanel", "ActionsPanelContent", "aria-labelledby", "background", "hasRadius", "shadow", "textTransform", "ConfirmBulkActionDialog", "onToggleDialog", "dialogBody", "endAction", "BoldChunk", "chunks", "ConfirmDialogPublishAll", "isConfirmButtonLoading", "selectedEntries", "useTable", "selectedRows", "entry", "i18n", "b", "entities", "em", "Emphasis", "Check", "loading", "TypographyMaxWidth", "TableComponent", "RawTable", "neutral150", "spaces", "formatErrorMessages", "parentKey", "messages", "currentKey", "EntryValidationText", "validationErrors", "validationErrorsMessages", "CrossCircle", "Tooltip", "ellipsis", "CheckCircle", "ArrowsCounterClockwise", "TABLE_HEADERS", "SelectedEntriesTableContent", "isPublishing", "rowsToDisplay", "entriesToPublish", "useLocation", "shouldDisplayMainField", "Table", "Head", "HeaderCheckboxCell", "head", "HeaderCell", "Row", "CheckboxCell", "Cell", "maxWidth", "Loader", "small", "Link", "from", "target", "PublicationStatusSummary", "PublicationStatusGrid", "entriesReadyToPublishCount", "entriesPublishedCount", "entriesModifiedCount", "entriesWithErrorsCount", "colCount", "rowCount", "Tbody", "Tr", "Td", "SelectedEntriesModalContent", "listViewSelectedEntries", "toggleModal", "setListViewSelectedDocuments", "refetch", "toString", "sort", "filters", "$in", "selectFromResult", "restRes", "isDialogOpen", "setIsDialogOpen", "bulkPublishAction", "isSubmittingForm", "selectedEntry", "selectedEntriesWithErrorsCount", "selectedEntriesPublishedCount", "selectedEntriesModifiedCount", "selectedEntriesWithNoErrorsCount", "toggleDialog", "prev", "handleConfirmBulkPublish", "unpublishedEntries", "documents", "hasPublishPermission", "showPublishButton", "selectRow", "refetchList", "invalidateTags", "actionType", "defaultSelectedRows", "headers", "BulkActionsRenderer", "getBulkActions", "hasI18nEnabled", "Boolean", "hasDeletePermission", "bulkDeleteAction", "handleConfirmBulkDelete", "hasDraftAndPublishEnabled", "bulkUnpublishAction", "handleConfirmBulkUnpublish", "showUnpublishButton", "confirmButton", "DEFAULT_BULK_ACTIONS", "AutoCloneFailureModalBody", "getDefaultErrorMessage", "reason", "fieldPath", "pathSegment", "ChevronRight", "style", "margin", "TableActions", "tableRowActions", "EditAction", "StyledPencil", "CloneAction", "setProhibitedFields", "StyledDuplicate", "details", "LinkButton", "NavLink", "Duplicate", "DEFAULT_TABLE_ROW_ACTIONS", "ContentManagerPlugin", "addEditViewSidePanel", "editViewSidePanels", "getPrintableType", "addDocumentAction", "documentActions", "addDocumentHeaderAction", "addBulkAction", "bulkActions", "injectionZones", "bind", "flat", "constructor", "nativeType", "HistoryAction", "pluginsQueryParams", "strapi", "features", "isEnabled", "handleOnClick", "destination", "ClockCounterClockwise", "startsWith", "historyAdmin", "bootstrap", "app", "indexOfDeleteAction", "findIndex", "splice", "initialState", "collectionTypeLinks", "fieldSizes", "models", "singleTypeLinks", "appSlice", "createSlice", "reducers", "setInitialData", "authorizedCollectionTypeLinks", "authorizedSingleTypeLinks", "contentTypeSchemas", "payload", "reducer", "combineReducers", "appReducer", "previewApi", "getPreviewUrl", "useGetPreviewUrlQuery", "ConditionalTooltip", "isShown", "PreviewSidePanel", "isModified", "trackNavigation", "destinationPathname", "cursor", "pointerEvents", "tabIndex", "previewAdmin", "contentManagerPluginApis", "register", "cm", "addReducers", "addMenuLink", "Feather", "intlLabel", "router", "addRoute", "Layout", "registerPlugin", "registerTrads", "locales", "importedTrads", "Promise", "all", "catch", "resolve"]
}

import {
  FormLayout,
  require_codemirror,
  require_lib as require_lib2,
  require_markdown_it,
  require_markdown_it_abbr,
  require_markdown_it_container,
  require_markdown_it_deflist,
  require_markdown_it_emoji,
  require_markdown_it_footnote,
  require_markdown_it_ins,
  require_markdown_it_mark,
  require_markdown_it_sub,
  require_markdown_it_sup,
  require_placeholder,
  require_sanitize_html,
  useLazyComponents
} from "./chunk-UZVBTJK2.js";
import {
  DocumentRBAC,
  Header,
  PERMISSIONS,
  Panels,
  SINGLE_TYPES,
  createYupSchema,
  getTranslation,
  require_mapValues,
  require_prism,
  useDoc,
  useDocumentLayout,
  useDocumentRBAC
} from "./chunk-7EUVMRZZ.js";
import {
  Blocker,
  Form2 as Form
} from "./chunk-RWGGLXMY.js";
import {
  Page,
  useNotification,
  useQueryParams,
  useRBAC
} from "./chunk-SNGAK6QT.js";
import {
  Grid,
  Main,
  Tabs,
  require_clone,
  require_lib,
  require_pipe,
  require_toPath,
  useIntl
} from "./chunk-Y2P3SHYJ.js";
import {
  useLocation,
  useParams
} from "./chunk-NZJNG4T4.js";
import {
  require_jsx_runtime
} from "./chunk-GOQBQZHW.js";
import {
  dt
} from "./chunk-GO6TWMX3.js";
import {
  require_react
} from "./chunk-MTZNWPB2.js";
import {
  __toESM
} from "./chunk-GFT2G5UO.js";

// node_modules/@strapi/content-manager/dist/admin/chunks/EditViewPage-CYe7wAXF.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var import_mapValues = __toESM(require_mapValues(), 1);
var import_pipe = __toESM(require_pipe(), 1);
var import_qs = __toESM(require_lib(), 1);
var import_prismjs = __toESM(require_prism(), 1);
import "/Users/visarutsankham/pi-web-2025/pi-back/node_modules/prismjs/themes/prism-solarizedlight.css";
var import_clone = __toESM(require_clone(), 1);
var import_toPath = __toESM(require_toPath(), 1);
var import_codemirror5 = __toESM(require_codemirror(), 1);
var import_sanitize_html = __toESM(require_sanitize_html(), 1);
var import_highlight = __toESM(require_lib2(), 1);
var import_markdown_it = __toESM(require_markdown_it(), 1);
var import_markdown_it_abbr = __toESM(require_markdown_it_abbr(), 1);
var import_markdown_it_container = __toESM(require_markdown_it_container(), 1);
var import_markdown_it_deflist = __toESM(require_markdown_it_deflist(), 1);
var import_markdown_it_emoji = __toESM(require_markdown_it_emoji(), 1);
var import_markdown_it_footnote = __toESM(require_markdown_it_footnote(), 1);
var import_markdown_it_ins = __toESM(require_markdown_it_ins(), 1);
var import_markdown_it_mark = __toESM(require_markdown_it_mark(), 1);
var import_markdown_it_sub = __toESM(require_markdown_it_sub(), 1);
var import_markdown_it_sup = __toESM(require_markdown_it_sup(), 1);
var import_placeholder = __toESM(require_placeholder(), 1);
import "/Users/visarutsankham/pi-web-2025/pi-back/node_modules/highlight.js/styles/solarized-dark.css";
var useOnce = (effect) => React.useEffect(effect, emptyDeps);
var emptyDeps = [];
var EditViewPage = () => {
  var _a, _b;
  const location = useLocation();
  const [{ query: { status } }, setQuery] = useQueryParams({
    status: "draft"
  });
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { document, meta, isLoading: isLoadingDocument, schema, components, collectionType, id, model, hasError, getTitle, getInitialFormValues } = useDoc();
  const hasDraftAndPublished = ((_a = schema == null ? void 0 : schema.options) == null ? void 0 : _a.draftAndPublish) ?? false;
  useOnce(() => {
    if ((location == null ? void 0 : location.state) && "error" in location.state) {
      toggleNotification({
        type: "danger",
        message: location.state.error,
        timeout: 5e3
      });
    }
  });
  const isLoadingActionsRBAC = useDocumentRBAC("EditViewPage", (state) => state.isLoading);
  const isSingleType = collectionType === SINGLE_TYPES;
  const isCreatingDocument = !id && !isSingleType;
  const { isLoading: isLoadingLayout, edit: { layout, settings: { mainField } } } = useDocumentLayout(model);
  const { isLazyLoading } = useLazyComponents([]);
  const isLoading = isLoadingActionsRBAC || isLoadingDocument || isLoadingLayout || isLazyLoading;
  const initialValues = getInitialFormValues(isCreatingDocument);
  if (hasError) {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  if (isLoading && !(document == null ? void 0 : document.documentId)) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  if (!initialValues) {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  const handleTabChange = (status2) => {
    if (status2 === "published" || status2 === "draft") {
      setQuery({
        status: status2
      }, "push", true);
    }
  };
  const validateSync = (values, options) => {
    const yupSchema = createYupSchema(schema == null ? void 0 : schema.attributes, components, {
      status,
      ...options
    });
    return yupSchema.validateSync(values, {
      abortEarly: false
    });
  };
  return (0, import_jsx_runtime.jsxs)(Main, {
    paddingLeft: 10,
    paddingRight: 10,
    children: [
      (0, import_jsx_runtime.jsx)(Page.Title, {
        children: getTitle(mainField)
      }),
      (0, import_jsx_runtime.jsx)(Form, {
        disabled: hasDraftAndPublished && status === "published",
        initialValues,
        method: isCreatingDocument ? "POST" : "PUT",
        validate: (values, options) => {
          const yupSchema = createYupSchema(schema == null ? void 0 : schema.attributes, components, {
            status,
            ...options
          });
          return yupSchema.validate(values, {
            abortEarly: false
          });
        },
        initialErrors: ((_b = location == null ? void 0 : location.state) == null ? void 0 : _b.forceValidation) ? validateSync(initialValues, {}) : {},
        children: ({ resetForm }) => (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
          children: [
            (0, import_jsx_runtime.jsx)(Header, {
              isCreating: isCreatingDocument,
              status: hasDraftAndPublished ? getDocumentStatus(document, meta) : void 0,
              title: getTitle(mainField)
            }),
            (0, import_jsx_runtime.jsxs)(Tabs.Root, {
              variant: "simple",
              value: status,
              onValueChange: handleTabChange,
              children: [
                (0, import_jsx_runtime.jsx)(Tabs.List, {
                  "aria-label": formatMessage({
                    id: getTranslation("containers.edit.tabs.label"),
                    defaultMessage: "Document status"
                  }),
                  children: hasDraftAndPublished ? (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
                    children: [
                      (0, import_jsx_runtime.jsx)(StatusTab, {
                        value: "draft",
                        children: formatMessage({
                          id: getTranslation("containers.edit.tabs.draft"),
                          defaultMessage: "draft"
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(StatusTab, {
                        disabled: !meta || meta.availableStatus.length === 0,
                        value: "published",
                        children: formatMessage({
                          id: getTranslation("containers.edit.tabs.published"),
                          defaultMessage: "published"
                        })
                      })
                    ]
                  }) : null
                }),
                (0, import_jsx_runtime.jsxs)(Grid.Root, {
                  paddingTop: 8,
                  gap: 4,
                  children: [
                    (0, import_jsx_runtime.jsxs)(Grid.Item, {
                      col: 9,
                      s: 12,
                      direction: "column",
                      alignItems: "stretch",
                      children: [
                        (0, import_jsx_runtime.jsx)(Tabs.Content, {
                          value: "draft",
                          children: (0, import_jsx_runtime.jsx)(FormLayout, {
                            layout
                          })
                        }),
                        (0, import_jsx_runtime.jsx)(Tabs.Content, {
                          value: "published",
                          children: (0, import_jsx_runtime.jsx)(FormLayout, {
                            layout
                          })
                        })
                      ]
                    }),
                    (0, import_jsx_runtime.jsx)(Grid.Item, {
                      col: 3,
                      s: 12,
                      direction: "column",
                      alignItems: "stretch",
                      children: (0, import_jsx_runtime.jsx)(Panels, {})
                    })
                  ]
                })
              ]
            }),
            (0, import_jsx_runtime.jsx)(Blocker, {
              // We reset the form to the published version to avoid errors like â€“ https://strapi-inc.atlassian.net/browse/CONTENT-2284
              onProceed: resetForm
            })
          ]
        })
      })
    ]
  });
};
var StatusTab = dt(Tabs.Trigger)`
  text-transform: uppercase;
`;
var getDocumentStatus = (document, meta) => {
  const docStatus = document == null ? void 0 : document.status;
  const statuses = (meta == null ? void 0 : meta.availableStatus) ?? [];
  if (!docStatus) {
    return "draft";
  }
  if (docStatus === "draft" && statuses.find((doc) => doc.publishedAt !== null)) {
    return "published";
  }
  return docStatus;
};
var ProtectedEditViewPage = () => {
  const { slug = "" } = useParams();
  const { permissions = [], isLoading, error } = useRBAC(PERMISSIONS.map((action) => ({
    action,
    subject: slug
  })));
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  if (error || !slug) {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  return (0, import_jsx_runtime.jsx)(Page.Protect, {
    permissions,
    children: ({ permissions: permissions2 }) => (0, import_jsx_runtime.jsx)(DocumentRBAC, {
      permissions: permissions2,
      children: (0, import_jsx_runtime.jsx)(EditViewPage, {})
    })
  });
};

export {
  EditViewPage,
  getDocumentStatus,
  ProtectedEditViewPage
};
//# sourceMappingURL=chunk-JBEBGJMP.js.map

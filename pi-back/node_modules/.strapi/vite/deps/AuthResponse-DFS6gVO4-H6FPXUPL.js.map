{
  "version": 3,
  "sources": ["../../../@strapi/admin/ee/admin/src/utils/cookies.ts", "../../../@strapi/admin/ee/admin/src/pages/AuthResponse.tsx"],
  "sourcesContent": ["export const getCookieValue = (name: string) => {\n  let result = null;\n  const cookieArray = document.cookie.split(';');\n  cookieArray.forEach((cookie) => {\n    const [key, value] = cookie.split('=').map((item) => item.trim());\n    if (key.trim() === name) {\n      result = decodeURIComponent(value);\n    }\n  });\n  return result;\n};\n\nexport const deleteCookie = (name: string) => {\n  // Set the cookie to expire in the past\n  document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n};\n", "import * as React from 'react';\n\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useMatch } from 'react-router-dom';\n\nimport { Page } from '../../../../admin/src/components/PageHelpers';\nimport { useTypedDispatch } from '../../../../admin/src/core/store/hooks';\nimport { login } from '../../../../admin/src/reducer';\nimport { getCookieValue, deleteCookie } from '../utils/cookies';\n\nconst AuthResponse = () => {\n  const match = useMatch('/auth/login/:authResponse');\n  const { formatMessage } = useIntl();\n  const navigate = useNavigate();\n  const dispatch = useTypedDispatch();\n\n  const redirectToOops = React.useCallback(() => {\n    navigate({\n      pathname: '/auth/oops',\n      search: `?info=${encodeURIComponent(\n        formatMessage({\n          id: 'Auth.form.button.login.providers.error',\n          defaultMessage: 'We cannot connect you through the selected provider.',\n        })\n      )}`,\n    });\n  }, [navigate, formatMessage]);\n\n  React.useEffect(() => {\n    if (match?.params.authResponse === 'error') {\n      redirectToOops();\n    }\n\n    if (match?.params.authResponse === 'success') {\n      const jwtToken = getCookieValue('jwtToken');\n\n      if (jwtToken) {\n        dispatch(\n          login({\n            token: jwtToken,\n          })\n        );\n\n        deleteCookie('jwtToken');\n\n        navigate('/auth/login');\n      } else {\n        redirectToOops();\n      }\n    }\n  }, [dispatch, match, redirectToOops, navigate]);\n\n  return <Page.Loading />;\n};\n\nexport { AuthResponse };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,IAAMA,iBAAiB,CAACC,SAAAA;AAC7B,MAAIC,SAAS;AACb,QAAMC,cAAcC,SAASC,OAAOC,MAAM,GAAA;AAC1CH,cAAYI,QAAQ,CAACF,WAAAA;AACnB,UAAM,CAACG,KAAKC,KAAM,IAAGJ,OAAOC,MAAM,GAAA,EAAKI,IAAI,CAACC,SAASA,KAAKC,KAAI,CAAA;AAC9D,QAAIJ,IAAII,KAAI,MAAOX,MAAM;AACvBC,eAASW,mBAAmBJ,KAAAA;IAC9B;EACF,CAAA;AACA,SAAOP;AACT;AAEO,IAAMY,eAAe,CAACb,SAAAA;AAE3BG,WAASC,SAASJ,OAAO;AAC3B;ACLA,IAAMc,eAAe,MAAA;AACnB,QAAMC,QAAQC,SAAS,2BAAA;AACvB,QAAM,EAAEC,cAAa,IAAKC,QAAAA;AAC1B,QAAMC,WAAWC,YAAAA;AACjB,QAAMC,WAAWC,iBAAAA;AAEjB,QAAMC,iBAAuBC,kBAAY,MAAA;AACvCL,aAAS;MACPM,UAAU;MACVC,QAAQ,SAASC,mBACfV,cAAc;QACZW,IAAI;QACJC,gBAAgB;MAClB,CAAA,CAAA,CAAA;IAEJ,CAAA;KACC;IAACV;IAAUF;EAAc,CAAA;AAE5Ba,EAAMC,gBAAU,MAAA;AACd,SAAIhB,+BAAOiB,OAAOC,kBAAiB,SAAS;AAC1CV,qBAAAA;IACF;AAEA,SAAIR,+BAAOiB,OAAOC,kBAAiB,WAAW;AAC5C,YAAMC,WAAWnC,eAAe,UAAA;AAEhC,UAAImC,UAAU;AACZb,iBACEc,MAAM;UACJC,OAAOF;QACT,CAAA,CAAA;AAGFrB,qBAAa,UAAA;AAEbM,iBAAS,aAAA;aACJ;AACLI,uBAAAA;MACF;IACF;KACC;IAACF;IAAUN;IAAOQ;IAAgBJ;EAAS,CAAA;AAE9C,aAAOkB,wBAACC,KAAKC,SAAO,CAAA,CAAA;AACtB;",
  "names": ["getCookieValue", "name", "result", "cookieArray", "document", "cookie", "split", "forEach", "key", "value", "map", "item", "trim", "decodeURIComponent", "deleteCookie", "AuthResponse", "match", "useMatch", "formatMessage", "useIntl", "navigate", "useNavigate", "dispatch", "useTypedDispatch", "redirectToOops", "useCallback", "pathname", "search", "encodeURIComponent", "id", "defaultMessage", "React", "useEffect", "params", "authResponse", "jwtToken", "login", "token", "_jsx", "Page", "Loading"]
}

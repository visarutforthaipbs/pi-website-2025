{
  "version": 3,
  "sources": ["../../../@strapi/upload/admin/src/pages/SettingsPage/init.ts", "../../../@strapi/upload/admin/src/pages/SettingsPage/reducer.ts", "../../../@strapi/upload/admin/src/pages/SettingsPage/SettingsPage.tsx"],
  "sourcesContent": ["import type { InitialState } from './reducer';\n\nexport const init = (initialState: InitialState) => {\n  return initialState;\n};\n", "import { produce } from 'immer';\nimport set from 'lodash/set';\n\nexport type InitialState = {\n  initialData: {\n    responsiveDimensions?: boolean;\n    sizeOptimization?: boolean;\n    autoOrientation?: boolean;\n    videoPreview?: boolean;\n  } | null;\n  modifiedData: {\n    responsiveDimensions?: boolean;\n    sizeOptimization?: boolean;\n    autoOrientation?: boolean;\n    videoPreview?: boolean;\n  } | null;\n};\n\ninterface ActionGetDataSucceeded {\n  type: 'GET_DATA_SUCCEEDED';\n  data: InitialState['initialData'];\n}\n\ninterface ActionOnChange {\n  type: 'ON_CHANGE';\n  keys: keyof NonNullable<InitialState['initialData']>;\n  value: boolean;\n}\n\nexport type Action = ActionGetDataSucceeded | ActionOnChange;\n\nconst initialState: InitialState = {\n  initialData: {\n    responsiveDimensions: true,\n    sizeOptimization: true,\n    autoOrientation: false,\n    videoPreview: false,\n  },\n  modifiedData: {\n    responsiveDimensions: true,\n    sizeOptimization: true,\n    autoOrientation: false,\n    videoPreview: false,\n  },\n};\n\nconst reducer = (state: InitialState, action: Action) =>\n  produce(state, (drafState) => {\n    switch (action.type) {\n      case 'GET_DATA_SUCCEEDED': {\n        drafState.initialData = action.data;\n        drafState.modifiedData = action.data;\n        break;\n      }\n      case 'ON_CHANGE': {\n        set(drafState, ['modifiedData', ...action.keys.split('.')], action.value);\n        break;\n      }\n      default:\n        return state;\n    }\n  });\n\nexport { initialState, reducer };\n", "// TODO: find a better naming convention for the file that was an index file before\nimport * as React from 'react';\n\nimport { Page, useNotification, useFetchClient, Layouts } from '@strapi/admin/strapi-admin';\nimport { Box, Button, Flex, Grid, Toggle, Typography, Field } from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport isEqual from 'lodash/isEqual';\nimport { useIntl } from 'react-intl';\nimport { useMutation, useQuery } from 'react-query';\n\nimport { UpdateSettings } from '../../../../shared/contracts/settings';\nimport { PERMISSIONS } from '../../constants';\nimport { getTrad } from '../../utils';\n\nimport { init } from './init';\nimport { initialState, reducer } from './reducer';\n\nimport type { InitialState } from './reducer';\n\nexport const SettingsPage = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { get, put } = useFetchClient();\n\n  const [{ initialData, modifiedData }, dispatch] = React.useReducer(reducer, initialState, init);\n\n  const { data, isLoading, refetch } = useQuery({\n    queryKey: ['upload', 'settings'],\n    async queryFn() {\n      const {\n        data: { data },\n      } = await get('/upload/settings');\n\n      return data;\n    },\n  });\n\n  React.useEffect(() => {\n    if (data) {\n      dispatch({\n        type: 'GET_DATA_SUCCEEDED',\n        data,\n      });\n    }\n  }, [data]);\n\n  const isSaveButtonDisabled = isEqual(initialData, modifiedData);\n\n  const { mutateAsync, isLoading: isSubmitting } = useMutation<\n    UpdateSettings.Response['data'],\n    UpdateSettings.Response['error'],\n    UpdateSettings.Request['body']\n  >(\n    async (body) => {\n      const { data } = await put('/upload/settings', body);\n\n      return data;\n    },\n    {\n      onSuccess() {\n        refetch();\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'notification.form.success.fields' }),\n        });\n      },\n      onError(err) {\n        console.error(err);\n      },\n    }\n  );\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (isSaveButtonDisabled) {\n      return;\n    }\n\n    await mutateAsync(modifiedData!);\n  };\n\n  const handleChange = ({\n    target: { name, value },\n  }: {\n    target: { name: keyof NonNullable<InitialState['initialData']>; value: boolean };\n  }) => {\n    dispatch({\n      type: 'ON_CHANGE',\n      keys: name,\n      value,\n    });\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Page.Main tabIndex={-1}>\n      <Page.Title>\n        {formatMessage({\n          id: getTrad('page.title'),\n          defaultMessage: 'Settings - Media Libray',\n        })}\n      </Page.Title>\n      <form onSubmit={handleSubmit}>\n        <Layouts.Header\n          title={formatMessage({\n            id: getTrad('settings.header.label'),\n            defaultMessage: 'Media Library',\n          })}\n          primaryAction={\n            <Button\n              disabled={isSaveButtonDisabled}\n              loading={isSubmitting}\n              type=\"submit\"\n              startIcon={<Check />}\n              size=\"S\"\n            >\n              {formatMessage({\n                id: 'global.save',\n                defaultMessage: 'Save',\n              })}\n            </Button>\n          }\n          subtitle={formatMessage({\n            id: getTrad('settings.sub-header.label'),\n            defaultMessage: 'Configure the settings for the Media Library',\n          })}\n        />\n        <Layouts.Content>\n          <Layouts.Root>\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={12}>\n              <Box background=\"neutral0\" padding={6} shadow=\"filterShadow\" hasRadius>\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n                  <Flex>\n                    <Typography variant=\"delta\" tag=\"h2\">\n                      {formatMessage({\n                        id: getTrad('settings.blockTitle'),\n                        defaultMessage: 'Asset management',\n                      })}\n                    </Typography>\n                  </Flex>\n                  <Grid.Root gap={6}>\n                    <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                      <Field.Root\n                        hint={formatMessage({\n                          id: getTrad('settings.form.responsiveDimensions.description'),\n                          defaultMessage:\n                            'Enabling this option will generate multiple formats (small, medium and large) of the uploaded asset.',\n                        })}\n                        name=\"responsiveDimensions\"\n                      >\n                        <Field.Label>\n                          {formatMessage({\n                            id: getTrad('settings.form.responsiveDimensions.label'),\n                            defaultMessage: 'Responsive friendly upload',\n                          })}\n                        </Field.Label>\n                        <Toggle\n                          checked={modifiedData?.responsiveDimensions}\n                          offLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.off-label',\n                            defaultMessage: 'Off',\n                          })}\n                          onLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.on-label',\n                            defaultMessage: 'On',\n                          })}\n                          onChange={(e) => {\n                            handleChange({\n                              target: { name: 'responsiveDimensions', value: e.target.checked },\n                            });\n                          }}\n                        />\n                        <Field.Hint />\n                      </Field.Root>\n                    </Grid.Item>\n                    <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                      <Field.Root\n                        hint={formatMessage({\n                          id: getTrad('settings.form.sizeOptimization.description'),\n                          defaultMessage:\n                            'Enabling this option will reduce the image size and slightly reduce its quality.',\n                        })}\n                        name=\"sizeOptimization\"\n                      >\n                        <Field.Label>\n                          {formatMessage({\n                            id: getTrad('settings.form.sizeOptimization.label'),\n                            defaultMessage: 'Size optimization',\n                          })}\n                        </Field.Label>\n                        <Toggle\n                          checked={modifiedData?.sizeOptimization}\n                          offLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.off-label',\n                            defaultMessage: 'Off',\n                          })}\n                          onLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.on-label',\n                            defaultMessage: 'On',\n                          })}\n                          onChange={(e) => {\n                            handleChange({\n                              target: { name: 'sizeOptimization', value: e.target.checked },\n                            });\n                          }}\n                        />\n                        <Field.Hint />\n                      </Field.Root>\n                    </Grid.Item>\n                    <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                      <Field.Root\n                        hint={formatMessage({\n                          id: getTrad('settings.form.autoOrientation.description'),\n                          defaultMessage:\n                            'Enabling this option will automatically rotate the image according to EXIF orientation tag.',\n                        })}\n                        name=\"autoOrientation\"\n                      >\n                        <Field.Label>\n                          {formatMessage({\n                            id: getTrad('settings.form.autoOrientation.label'),\n                            defaultMessage: 'Auto orientation',\n                          })}\n                        </Field.Label>\n                        <Toggle\n                          checked={modifiedData?.autoOrientation}\n                          offLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.off-label',\n                            defaultMessage: 'Off',\n                          })}\n                          onLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.on-label',\n                            defaultMessage: 'On',\n                          })}\n                          onChange={(e) => {\n                            handleChange({\n                              target: { name: 'autoOrientation', value: e.target.checked },\n                            });\n                          }}\n                        />\n                        <Field.Hint />\n                      </Field.Root>\n                    </Grid.Item>\n                  </Grid.Root>\n                </Flex>\n              </Box>\n            </Flex>\n          </Layouts.Root>\n        </Layouts.Content>\n      </form>\n    </Page.Main>\n  );\n};\n\nexport const ProtectedSettingsPage = () => (\n  <Page.Protect permissions={PERMISSIONS.settings}>\n    <SettingsPage />\n  </Page.Protect>\n);\n"],
  "mappings": "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",
  "names": ["init", "initialState", "initialData", "responsiveDimensions", "sizeOptimization", "autoOrientation", "videoPreview", "modifiedData", "reducer", "state", "action", "produce", "drafState", "type", "data", "set", "keys", "split", "value", "SettingsPage", "formatMessage", "useIntl", "toggleNotification", "useNotification", "get", "put", "useFetchClient", "dispatch", "useReducer", "isLoading", "refetch", "useQuery", "queryKey", "queryFn", "React", "useEffect", "isSaveButtonDisabled", "isEqual", "mutateAsync", "isSubmitting", "useMutation", "body", "onSuccess", "message", "id", "onError", "err", "console", "error", "handleSubmit", "e", "preventDefault", "handleChange", "target", "name", "_jsx", "Page", "Loading", "_jsxs", "Main", "tabIndex", "Title", "getTrad", "defaultMessage", "form", "onSubmit", "Layouts", "Header", "title", "primaryAction", "Button", "disabled", "loading", "startIcon", "Check", "size", "subtitle", "Content", "Root", "Flex", "direction", "alignItems", "gap", "Box", "background", "padding", "shadow", "hasRadius", "Typography", "variant", "tag", "Grid", "Item", "col", "s", "Field", "hint", "Label", "Toggle", "checked", "offLabel", "onLabel", "onChange", "Hint", "ProtectedSettingsPage", "Protect", "permissions", "PERMISSIONS", "settings"]
}

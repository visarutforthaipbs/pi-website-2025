{
  "version": 3,
  "sources": ["../../../@strapi/plugin-users-permissions/admin/src/constants.js", "../../../@strapi/plugin-users-permissions/admin/src/pluginId.js", "../../../@strapi/plugin-users-permissions/admin/src/utils/getTrad.js", "../../../@strapi/plugin-users-permissions/admin/src/utils/prefixPluginTranslations.js", "../../../@strapi/plugin-users-permissions/admin/src/index.js"],
  "sourcesContent": ["export const PERMISSIONS = {\n  // Roles\n  accessRoles: [\n    { action: 'plugin::users-permissions.roles.create', subject: null },\n    { action: 'plugin::users-permissions.roles.read', subject: null },\n  ],\n  createRole: [{ action: 'plugin::users-permissions.roles.create', subject: null }],\n  deleteRole: [{ action: 'plugin::users-permissions.roles.delete', subject: null }],\n  readRoles: [{ action: 'plugin::users-permissions.roles.read', subject: null }],\n  updateRole: [{ action: 'plugin::users-permissions.roles.update', subject: null }],\n\n  // AdvancedSettings\n  readAdvancedSettings: [\n    { action: 'plugin::users-permissions.advanced-settings.read', subject: null },\n  ],\n  updateAdvancedSettings: [\n    { action: 'plugin::users-permissions.advanced-settings.update', subject: null },\n  ],\n\n  // Emails\n  readEmailTemplates: [{ action: 'plugin::users-permissions.email-templates.read', subject: null }],\n  updateEmailTemplates: [\n    { action: 'plugin::users-permissions.email-templates.update', subject: null },\n  ],\n\n  // Providers\n  readProviders: [{ action: 'plugin::users-permissions.providers.read', subject: null }],\n  updateProviders: [{ action: 'plugin::users-permissions.providers.update', subject: null }],\n};\n", "import { name } from '../../package.json';\n\nconst pluginId = name.replace(/^@strapi\\/plugin-/i, '');\n\nexport default pluginId;\n", "import pluginId from '../pluginId';\n\nconst getTrad = (id) => `${pluginId}.${id}`;\n\nexport default getTrad;\n", "const prefixPluginTranslations = (trad, pluginId) => {\n  if (!pluginId) {\n    throw new TypeError(\"pluginId can't be empty\");\n  }\n\n  return Object.keys(trad).reduce((acc, current) => {\n    acc[`${pluginId}.${current}`] = trad[current];\n\n    return acc;\n  }, {});\n};\n\nexport { prefixPluginTranslations };\n", "import { strapi as pkgStrapi } from '../../package.json';\n\nimport { PERMISSIONS } from './constants';\nimport getTrad from './utils/getTrad';\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\n\nconst name = pkgStrapi.name;\n\nexport default {\n  register(app) {\n    // Create the plugin's settings section\n    app.createSettingSection(\n      {\n        id: 'users-permissions',\n        intlLabel: {\n          id: getTrad('Settings.section-label'),\n          defaultMessage: 'Users & Permissions plugin',\n        },\n      },\n      [\n        {\n          intlLabel: {\n            id: 'global.roles',\n            defaultMessage: 'Roles',\n          },\n          id: 'roles',\n          to: `users-permissions/roles`,\n          Component: () => import('./pages/Roles'),\n          permissions: PERMISSIONS.accessRoles,\n        },\n        {\n          intlLabel: {\n            id: getTrad('HeaderNav.link.providers'),\n            defaultMessage: 'Providers',\n          },\n          id: 'providers',\n          to: `users-permissions/providers`,\n          Component: () => import('./pages/Providers'),\n          permissions: PERMISSIONS.readProviders,\n        },\n        {\n          intlLabel: {\n            id: getTrad('HeaderNav.link.emailTemplates'),\n            defaultMessage: 'Email templates',\n          },\n          id: 'email-templates',\n          to: `users-permissions/email-templates`,\n          Component: () =>\n            import('./pages/EmailTemplates').then((mod) => ({\n              default: mod.ProtectedEmailTemplatesPage,\n            })),\n          permissions: PERMISSIONS.readEmailTemplates,\n        },\n        {\n          intlLabel: {\n            id: getTrad('HeaderNav.link.advancedSettings'),\n            defaultMessage: 'Advanced Settings',\n          },\n          id: 'advanced-settings',\n          to: `users-permissions/advanced-settings`,\n          Component: () =>\n            import('./pages/AdvancedSettings').then((mod) => ({\n              default: mod.ProtectedAdvancedSettingsPage,\n            })),\n          permissions: PERMISSIONS.readAdvancedSettings,\n        },\n      ]\n    );\n\n    app.registerPlugin({\n      id: 'users-permissions',\n      name,\n    });\n  },\n  bootstrap() {},\n  async registerTrads({ locales }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, 'users-permissions'),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n"],
  "mappings": "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",
  "names": ["PERMISSIONS", "accessRoles", "action", "subject", "createRole", "deleteRole", "readRoles", "updateRole", "readAdvancedSettings", "updateAdvancedSettings", "readEmailTemplates", "updateEmailTemplates", "readProviders", "updateProviders", "pluginId", "name", "replace", "getTrad", "id", "prefixPluginTranslations", "trad", "Object", "keys", "reduce", "acc", "current", "pkgStrapi", "register", "app", "createSettingSection", "intlLabel", "defaultMessage", "to", "Component", "permissions", "then", "mod", "default", "ProtectedEmailTemplatesPage", "ProtectedAdvancedSettingsPage", "registerPlugin", "bootstrap", "registerTrads", "locales", "importedTrads", "Promise", "all", "map", "locale", "data", "catch", "resolve"]
}

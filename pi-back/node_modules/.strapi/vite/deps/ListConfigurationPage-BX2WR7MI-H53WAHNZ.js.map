{
  "version": 3,
  "sources": ["../../../@strapi/content-manager/admin/src/pages/ListConfiguration/components/Header.tsx", "../../../@strapi/content-manager/admin/src/pages/ListConfiguration/components/Settings.tsx", "../../../@strapi/content-manager/admin/src/pages/ListConfiguration/components/EditFieldForm.tsx", "../../../@strapi/content-manager/admin/src/pages/ListConfiguration/components/DraggableCard.tsx", "../../../@strapi/content-manager/admin/src/pages/ListConfiguration/components/SortDisplayedFields.tsx", "../../../@strapi/content-manager/admin/src/pages/ListConfiguration/ListConfigurationPage.tsx"],
  "sourcesContent": ["import { useForm, BackButton, Layouts } from '@strapi/admin/strapi-admin';\nimport { Button } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\n\nimport { COLLECTION_TYPES } from '../../../constants/collections';\nimport { capitalise } from '../../../utils/strings';\nimport { getTranslation } from '../../../utils/translations';\n\ninterface HeaderProps {\n  collectionType: string;\n  name: string;\n  model: string;\n}\n\nconst Header = ({ name }: HeaderProps) => {\n  const { formatMessage } = useIntl();\n  const params = useParams<{ slug: string }>();\n\n  const modified = useForm('Header', (state) => state.modified);\n  const isSubmitting = useForm('Header', (state) => state.isSubmitting);\n\n  return (\n    <Layouts.Header\n      navigationAction={<BackButton fallback={`../${COLLECTION_TYPES}/${params.slug}`} />}\n      primaryAction={\n        <Button size=\"S\" disabled={!modified} type=\"submit\" loading={isSubmitting}>\n          {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n        </Button>\n      }\n      subtitle={formatMessage({\n        id: getTranslation('components.SettingsViewWrapper.pluginHeader.description.list-settings'),\n        defaultMessage: 'Define the settings of the list view.',\n      })}\n      title={formatMessage(\n        {\n          id: getTranslation('components.SettingsViewWrapper.pluginHeader.title'),\n          defaultMessage: 'Configure the view - {name}',\n        },\n        { name: capitalise(name) }\n      )}\n    />\n  );\n};\n\nexport { Header };\nexport type { HeaderProps };\n", "import * as React from 'react';\n\nimport { useForm, InputRenderer, type InputProps } from '@strapi/admin/strapi-admin';\nimport { Flex, Grid, Typography, useCollator } from '@strapi/design-system';\nimport { type MessageDescriptor, useIntl } from 'react-intl';\n\nimport { useDoc } from '../../../hooks/useDocument';\nimport { type EditFieldLayout } from '../../../hooks/useDocumentLayout';\nimport { getTranslation } from '../../../utils/translations';\nimport { type FormData } from '../ListConfigurationPage';\n\nimport type { DistributiveOmit } from 'react-redux';\n\nexport type InputPropsWithMessageDescriptors = DistributiveOmit<\n  InputProps,\n  'hint' | 'label' | 'placeholder'\n> & {\n  hint?: MessageDescriptor;\n  label: MessageDescriptor;\n  placeholder?: MessageDescriptor;\n};\n\n/**\n * @internal\n * @description Form inputs are always displayed in a grid, so we need\n * to use the size property to determine how many columns the input should\n * take up.\n */\nexport type FormLayoutInputProps = InputPropsWithMessageDescriptors & { size: number };\n\nconst EXCLUDED_SORT_ATTRIBUTE_TYPES = [\n  'media',\n  'richtext',\n  'dynamiczone',\n  'relation',\n  'component',\n  'json',\n  'blocks',\n];\n\ninterface SortOption {\n  value: string;\n  label: string;\n}\n\nconst Settings = () => {\n  const { formatMessage, locale } = useIntl();\n  const formatter = useCollator(locale, {\n    sensitivity: 'base',\n  });\n  const { schema } = useDoc();\n\n  const layout = useForm<FormData['layout']>('Settings', (state) => state.values.layout ?? []);\n  const currentSortBy = useForm<FormData['settings']['defaultSortBy']>(\n    'Settings',\n    (state) => state.values.settings.defaultSortBy\n  );\n  const onChange = useForm('Settings', (state) => state.onChange);\n\n  const sortOptions = React.useMemo(\n    () =>\n      Object.values(layout).reduce<SortOption[]>((acc, field) => {\n        if (schema && !EXCLUDED_SORT_ATTRIBUTE_TYPES.includes(schema.attributes[field.name].type)) {\n          acc.push({\n            value: field.name,\n            label: typeof field.label !== 'string' ? formatMessage(field.label) : field.label,\n          });\n        }\n\n        return acc;\n      }, []),\n    [formatMessage, layout, schema]\n  );\n\n  const sortOptionsSorted = sortOptions.sort((a, b) => formatter.compare(a.label, b.label));\n\n  React.useEffect(() => {\n    if (sortOptionsSorted.findIndex((opt) => opt.value === currentSortBy) === -1) {\n      onChange('settings.defaultSortBy', sortOptionsSorted[0]?.value);\n    }\n  }, [currentSortBy, onChange, sortOptionsSorted]);\n\n  const formLayout = React.useMemo(\n    () =>\n      SETTINGS_FORM_LAYOUT.map((row) =>\n        row.map((field) => {\n          if (field.type === 'enumeration') {\n            return {\n              ...field,\n              hint: field.hint ? formatMessage(field.hint) : undefined,\n              label: formatMessage(field.label),\n              options: field.name === 'settings.defaultSortBy' ? sortOptionsSorted : field.options,\n            };\n          } else {\n            return {\n              ...field,\n              hint: field.hint ? formatMessage(field.hint) : undefined,\n              label: formatMessage(field.label),\n            };\n          }\n        })\n      ) as [top: EditFieldLayout[], bottom: EditFieldLayout[]],\n    [formatMessage, sortOptionsSorted]\n  );\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n      <Typography variant=\"delta\" tag=\"h2\">\n        {formatMessage({\n          id: getTranslation('containers.SettingPage.settings'),\n          defaultMessage: 'Settings',\n        })}\n      </Typography>\n      <Grid.Root key=\"bottom\" gap={4}>\n        {formLayout.map((row) =>\n          row.map(({ size, ...field }) => (\n            <Grid.Item key={field.name} s={12} col={size} direction=\"column\" alignItems=\"stretch\">\n              {/* @ts-expect-error â€“ issue with EnumerationProps conflicting with InputProps */}\n              <InputRenderer {...field} />\n            </Grid.Item>\n          ))\n        )}\n      </Grid.Root>\n    </Flex>\n  );\n};\n\nconst SETTINGS_FORM_LAYOUT: FormLayoutInputProps[][] = [\n  [\n    {\n      label: {\n        id: getTranslation('form.Input.search'),\n        defaultMessage: 'Enable search',\n      },\n      name: 'settings.searchable',\n      size: 4,\n      type: 'boolean' as const,\n    },\n    {\n      label: {\n        id: getTranslation('form.Input.filters'),\n        defaultMessage: 'Enable filters',\n      },\n      name: 'settings.filterable',\n      size: 4,\n      type: 'boolean' as const,\n    },\n    {\n      label: {\n        id: getTranslation('form.Input.bulkActions'),\n        defaultMessage: 'Enable bulk actions',\n      },\n      name: 'settings.bulkable',\n      size: 4,\n      type: 'boolean' as const,\n    },\n  ],\n  [\n    {\n      hint: {\n        id: getTranslation('form.Input.pageEntries.inputDescription'),\n        defaultMessage: 'Note: You can override this value in the Collection Type settings page.',\n      },\n      label: {\n        id: getTranslation('form.Input.pageEntries'),\n        defaultMessage: 'Entries per page',\n      },\n      name: 'settings.pageSize',\n      options: ['10', '20', '50', '100'].map((value) => ({ value, label: value })),\n      size: 6,\n      type: 'enumeration' as const,\n    },\n    {\n      label: {\n        id: getTranslation('form.Input.defaultSort'),\n        defaultMessage: 'Default sort attribute',\n      },\n      name: 'settings.defaultSortBy',\n      options: [],\n      size: 3,\n      type: 'enumeration' as const,\n    },\n    {\n      label: {\n        id: getTranslation('form.Input.sort.order'),\n        defaultMessage: 'Default sort order',\n      },\n      name: 'settings.defaultSortOrder',\n      options: ['ASC', 'DESC'].map((value) => ({ value, label: value })),\n      size: 3,\n      type: 'enumeration' as const,\n    },\n  ],\n];\n\nexport { Settings };\n", "import { Form, useField, InputRenderer, useNotification } from '@strapi/admin/strapi-admin';\nimport { Button, Flex, FlexComponent, Grid, Modal } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\nimport * as yup from 'yup';\n\nimport { FieldTypeIcon } from '../../../components/FieldTypeIcon';\nimport { capitalise } from '../../../utils/strings';\nimport { getTranslation } from '../../../utils/translations';\n\nimport type { ListFieldLayout } from '../../../hooks/useDocumentLayout';\nimport type { FormData } from '../ListConfigurationPage';\n\ninterface EditFieldFormProps extends Pick<ListFieldLayout, 'attribute'> {\n  name: string;\n  onClose: () => void;\n}\n\nconst FIELD_SCHEMA = yup.object().shape({\n  label: yup.string().required(),\n  sortable: yup.boolean(),\n});\n\nconst EditFieldForm = ({ attribute, name, onClose }: EditFieldFormProps) => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n\n  const { value, onChange } = useField<FormData['layout'][number]>(name);\n\n  if (!value) {\n    // This is very unlikely to happen, but it ensures the form is not opened without a value.\n    console.error(\n      \"You've opened a field to edit without it being part of the form, this is likely a bug with Strapi. Please open an issue.\"\n    );\n\n    toggleNotification({\n      message: formatMessage({\n        id: 'content-manager.containers.list-settings.modal-form.error',\n        defaultMessage: 'An error occurred while trying to open the form.',\n      }),\n      type: 'danger',\n    });\n\n    return null;\n  }\n\n  let shouldDisplaySortToggle = !['media', 'relation'].includes(attribute.type);\n\n  if ('relation' in attribute && ['oneWay', 'oneToOne', 'manyToOne'].includes(attribute.relation)) {\n    shouldDisplaySortToggle = true;\n  }\n\n  return (\n    <Modal.Content>\n      <Form\n        method=\"PUT\"\n        initialValues={value}\n        validationSchema={FIELD_SCHEMA}\n        onSubmit={(data) => {\n          onChange(name, data);\n          onClose();\n        }}\n      >\n        <Modal.Header>\n          <HeaderContainer>\n            {/* @ts-expect-error attribute.type === custom does not work here */}\n            <FieldTypeIcon type={attribute.type} />\n            <Modal.Title>\n              {formatMessage(\n                {\n                  id: getTranslation('containers.list-settings.modal-form.label'),\n                  defaultMessage: 'Edit {fieldName}',\n                },\n                { fieldName: capitalise(value.label) }\n              )}\n            </Modal.Title>\n          </HeaderContainer>\n        </Modal.Header>\n        <Modal.Body>\n          <Grid.Root gap={4}>\n            {[\n              {\n                name: 'label',\n                label: formatMessage({\n                  id: getTranslation('form.Input.label'),\n                  defaultMessage: 'Label',\n                }),\n                hint: formatMessage({\n                  id: getTranslation('form.Input.label.inputDescription'),\n                  defaultMessage: \"This value overrides the label displayed in the table's head\",\n                }),\n                size: 6,\n                type: 'string' as const,\n              },\n              {\n                label: formatMessage({\n                  id: getTranslation('form.Input.sort.field'),\n                  defaultMessage: 'Enable sort on this field',\n                }),\n                name: 'sortable',\n                size: 6,\n                type: 'boolean' as const,\n              },\n            ]\n              .filter(\n                (field) =>\n                  field.name !== 'sortable' ||\n                  (field.name === 'sortable' && shouldDisplaySortToggle)\n              )\n              .map(({ size, ...field }) => (\n                <Grid.Item\n                  key={field.name}\n                  s={12}\n                  col={size}\n                  direction=\"column\"\n                  alignItems=\"stretch\"\n                >\n                  <InputRenderer {...field} />\n                </Grid.Item>\n              ))}\n          </Grid.Root>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={onClose} variant=\"tertiary\">\n            {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n          </Button>\n          <Button type=\"submit\">\n            {formatMessage({ id: 'global.finish', defaultMessage: 'Finish' })}\n          </Button>\n        </Modal.Footer>\n      </Form>\n    </Modal.Content>\n  );\n};\n\nconst HeaderContainer = styled<FlexComponent>(Flex)`\n  svg {\n    width: 3.2rem;\n    margin-right: ${({ theme }) => theme.spaces[3]};\n  }\n`;\n\nexport { EditFieldForm };\nexport type { EditFieldFormProps };\n", "import * as React from 'react';\n\nimport {\n  Box,\n  BoxComponent,\n  Flex,\n  FlexComponent,\n  Modal,\n  Typography,\n  useComposedRefs,\n} from '@strapi/design-system';\nimport { Cross, Drag, Pencil } from '@strapi/icons';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { CardDragPreview } from '../../../components/DragPreviews/CardDragPreview';\nimport { ItemTypes } from '../../../constants/dragAndDrop';\nimport { useDragAndDrop } from '../../../hooks/useDragAndDrop';\nimport { getTranslation } from '../../../utils/translations';\n\nimport { EditFieldForm } from './EditFieldForm';\n\nimport type { ListFieldLayout } from '../../../hooks/useDocumentLayout';\n\ntype DraggableCardProps = Omit<ListFieldLayout, 'label'> & {\n  label: string;\n  index: number;\n  isDraggingSibling: boolean;\n  onMoveField: (dragIndex: number, hoverIndex: number) => void;\n  onRemoveField: () => void;\n  setIsDraggingSibling: (isDragging: boolean) => void;\n};\n\nconst DraggableCard = ({\n  attribute,\n  index,\n  isDraggingSibling,\n  label,\n  name,\n  onMoveField,\n  onRemoveField,\n  setIsDraggingSibling,\n}: DraggableCardProps) => {\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const { formatMessage } = useIntl();\n  const [, forceRerenderAfterDnd] = React.useState(false);\n\n  const [{ isDragging }, objectRef, dropRef, dragRef, dragPreviewRef] = useDragAndDrop(true, {\n    type: ItemTypes.FIELD,\n    item: { index, label, name },\n    index,\n    onMoveItem: onMoveField,\n    onEnd: () => setIsDraggingSibling(false),\n  });\n\n  React.useEffect(() => {\n    dragPreviewRef(getEmptyImage(), { captureDraggingState: false });\n  }, [dragPreviewRef]);\n\n  React.useEffect(() => {\n    if (isDragging) {\n      setIsDraggingSibling(true);\n    }\n  }, [isDragging, setIsDraggingSibling]);\n\n  // Effect in order to force a rerender after reordering the components\n  // Since we are removing the Accordion when doing the DnD  we are losing the dragRef, therefore the replaced element cannot be dragged\n  // anymore, this hack forces a rerender in order to apply the dragRef\n  React.useEffect(() => {\n    if (!isDraggingSibling) {\n      forceRerenderAfterDnd((prev) => !prev);\n    }\n  }, [isDraggingSibling]);\n\n  const composedRefs = useComposedRefs<HTMLButtonElement>(\n    dropRef,\n    objectRef as React.RefObject<HTMLButtonElement>\n  );\n\n  return (\n    <FieldWrapper ref={composedRefs}>\n      {isDragging && <CardDragPreview label={label} />}\n      {!isDragging && isDraggingSibling && <CardDragPreview isSibling label={label} />}\n\n      {!isDragging && !isDraggingSibling && (\n        <FieldContainer\n          borderColor=\"neutral150\"\n          background=\"neutral100\"\n          hasRadius\n          justifyContent=\"space-between\"\n          onClick={() => setIsModalOpen(true)}\n        >\n          <Flex gap={3}>\n            <DragButton\n              ref={dragRef}\n              aria-label={formatMessage(\n                {\n                  id: getTranslation('components.DraggableCard.move.field'),\n                  defaultMessage: 'Move {item}',\n                },\n                { item: label }\n              )}\n              onClick={(e) => e.stopPropagation()}\n            >\n              <Drag />\n            </DragButton>\n            <Typography fontWeight=\"bold\">{label}</Typography>\n          </Flex>\n          <Flex paddingLeft={3} onClick={(e) => e.stopPropagation()}>\n            <Modal.Root open={isModalOpen} onOpenChange={setIsModalOpen}>\n              <Modal.Trigger>\n                <ActionButton\n                  onClick={(e) => {\n                    e.stopPropagation();\n                  }}\n                  aria-label={formatMessage(\n                    {\n                      id: getTranslation('components.DraggableCard.edit.field'),\n                      defaultMessage: 'Edit {item}',\n                    },\n                    { item: label }\n                  )}\n                  type=\"button\"\n                >\n                  <Pencil width=\"1.2rem\" height=\"1.2rem\" />\n                </ActionButton>\n              </Modal.Trigger>\n              <EditFieldForm\n                attribute={attribute}\n                name={`layout.${index}`}\n                onClose={() => {\n                  setIsModalOpen(false);\n                }}\n              />\n            </Modal.Root>\n            <ActionButton\n              onClick={onRemoveField}\n              data-testid={`delete-${name}`}\n              aria-label={formatMessage(\n                {\n                  id: getTranslation('components.DraggableCard.delete.field'),\n                  defaultMessage: 'Delete {item}',\n                },\n                { item: label }\n              )}\n              type=\"button\"\n            >\n              <Cross width=\"1.2rem\" height=\"1.2rem\" />\n            </ActionButton>\n          </Flex>\n        </FieldContainer>\n      )}\n    </FieldWrapper>\n  );\n};\n\nconst ActionButton = styled.button`\n  display: flex;\n  align-items: center;\n  height: ${({ theme }) => theme.spaces[7]};\n  color: ${({ theme }) => theme.colors.neutral600};\n\n  &:hover {\n    color: ${({ theme }) => theme.colors.neutral700};\n  }\n\n  &:last-child {\n    padding: 0 ${({ theme }) => theme.spaces[3]};\n  }\n`;\n\nconst DragButton = styled(ActionButton)`\n  padding: 0 ${({ theme }) => theme.spaces[3]};\n  border-right: 1px solid ${({ theme }) => theme.colors.neutral150};\n  cursor: all-scroll;\n`;\n\nconst FieldContainer = styled<FlexComponent>(Flex)`\n  max-height: 3.2rem;\n  cursor: pointer;\n`;\n\nconst FieldWrapper = styled<BoxComponent>(Box)`\n  &:last-child {\n    padding-right: ${({ theme }) => theme.spaces[3]};\n  }\n`;\n\nexport { DraggableCard };\nexport type { DraggableCardProps };\n", "import * as React from 'react';\n\nimport { useForm } from '@strapi/admin/strapi-admin';\nimport { Box, Flex, VisuallyHidden, Typography, Menu } from '@strapi/design-system';\nimport { Plus } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { useDoc } from '../../../hooks/useDocument';\nimport { useGetContentTypeConfigurationQuery } from '../../../services/contentTypes';\nimport { checkIfAttributeIsDisplayable } from '../../../utils/attributes';\nimport { getTranslation } from '../../../utils/translations';\n\nimport { DraggableCard, DraggableCardProps } from './DraggableCard';\n\nimport type { ListLayout } from '../../../hooks/useDocumentLayout';\nimport type { FormData } from '../ListConfigurationPage';\n\ninterface SortDisplayedFieldsProps extends Pick<ListLayout, 'layout'> {}\n\nconst SortDisplayedFields = () => {\n  const { formatMessage } = useIntl();\n  const { model, schema } = useDoc();\n  const [isDraggingSibling, setIsDraggingSibling] = React.useState(false);\n  const [lastAction, setLastAction] = React.useState<string | null>(null);\n  const scrollableContainerRef = React.useRef<HTMLDivElement>(null);\n\n  const values = useForm<FormData['layout']>(\n    'SortDisplayedFields',\n    (state) => state.values.layout ?? []\n  );\n  const addFieldRow = useForm('SortDisplayedFields', (state) => state.addFieldRow);\n  const removeFieldRow = useForm('SortDisplayedFields', (state) => state.removeFieldRow);\n  const moveFieldRow = useForm('SortDisplayedFields', (state) => state.moveFieldRow);\n\n  const { metadata: allMetadata } = useGetContentTypeConfigurationQuery(model, {\n    selectFromResult: ({ data }) => ({ metadata: data?.contentType.metadatas ?? {} }),\n  });\n\n  /**\n   * This is our list of fields that are not displayed in the current layout\n   * so we create their default state to be added to the layout.\n   */\n  const nonDisplayedFields = React.useMemo(() => {\n    if (!schema) {\n      return [];\n    }\n\n    const displayedFieldNames = values.map((field) => field.name);\n\n    return Object.entries(schema.attributes).reduce<Array<FormData['layout'][number]>>(\n      (acc, [name, attribute]) => {\n        if (!displayedFieldNames.includes(name) && checkIfAttributeIsDisplayable(attribute)) {\n          const { list: metadata } = allMetadata[name];\n\n          acc.push({\n            name,\n            label: metadata.label || name,\n            sortable: metadata.sortable,\n          });\n        }\n\n        return acc;\n      },\n      []\n    );\n  }, [allMetadata, values, schema]);\n\n  const handleAddField = (field: FormData['layout'][number]) => {\n    setLastAction('add');\n    addFieldRow('layout', field);\n  };\n\n  const handleRemoveField = (index: number) => {\n    setLastAction('remove');\n    removeFieldRow('layout', index);\n  };\n\n  const handleMoveField: DraggableCardProps['onMoveField'] = (dragIndex, hoverIndex) => {\n    moveFieldRow('layout', dragIndex, hoverIndex);\n  };\n\n  React.useEffect(() => {\n    if (lastAction === 'add' && scrollableContainerRef?.current) {\n      scrollableContainerRef.current.scrollLeft = scrollableContainerRef.current.scrollWidth;\n    }\n  }, [lastAction]);\n\n  return (\n    <Flex alignItems=\"stretch\" direction=\"column\" gap={4}>\n      <Typography variant=\"delta\" tag=\"h2\">\n        {formatMessage({\n          id: getTranslation('containers.SettingPage.view'),\n          defaultMessage: 'View',\n        })}\n      </Typography>\n\n      <Flex padding={4} borderColor=\"neutral300\" borderStyle=\"dashed\" borderWidth=\"1px\" hasRadius>\n        <Box flex=\"1\" overflow=\"auto hidden\" ref={scrollableContainerRef}>\n          <Flex gap={3}>\n            {values.map((field, index) => (\n              <DraggableCard\n                key={field.name}\n                index={index}\n                isDraggingSibling={isDraggingSibling}\n                onMoveField={handleMoveField}\n                onRemoveField={() => handleRemoveField(index)}\n                setIsDraggingSibling={setIsDraggingSibling}\n                {...field}\n                attribute={schema!.attributes[field.name]}\n                label={typeof field.label === 'object' ? formatMessage(field.label) : field.label}\n              />\n            ))}\n          </Flex>\n        </Box>\n\n        <Menu.Root>\n          <Menu.Trigger\n            paddingLeft={2}\n            paddingRight={2}\n            justifyContent=\"center\"\n            endIcon={null}\n            disabled={nonDisplayedFields.length === 0}\n            variant=\"tertiary\"\n          >\n            <VisuallyHidden tag=\"span\">\n              {formatMessage({\n                id: getTranslation('components.FieldSelect.label'),\n                defaultMessage: 'Add a field',\n              })}\n            </VisuallyHidden>\n            <Plus aria-hidden focusable={false} style={{ position: 'relative', top: 2 }} />\n          </Menu.Trigger>\n          <Menu.Content>\n            {nonDisplayedFields.map((field) => (\n              <Menu.Item key={field.name} onSelect={() => handleAddField(field)}>\n                {typeof field.label === 'object' ? formatMessage(field.label) : field.label}\n              </Menu.Item>\n            ))}\n          </Menu.Content>\n        </Menu.Root>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport { SortDisplayedFields };\nexport type { SortDisplayedFieldsProps };\n", "import * as React from 'react';\n\nimport {\n  Form,\n  type FormProps,\n  useNotification,\n  useTracking,\n  useAPIErrorHandler,\n  Page,\n  Layouts,\n} from '@strapi/admin/strapi-admin';\nimport { Divider, Flex, Main } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { Navigate } from 'react-router-dom';\n\nimport { SINGLE_TYPES } from '../../constants/collections';\nimport { useDoc } from '../../hooks/useDocument';\nimport { ListFieldLayout, ListLayout, useDocLayout } from '../../hooks/useDocumentLayout';\nimport { useTypedSelector } from '../../modules/hooks';\nimport { useUpdateContentTypeConfigurationMutation } from '../../services/contentTypes';\nimport { setIn } from '../../utils/objects';\n\nimport { Header } from './components/Header';\nimport { Settings } from './components/Settings';\nimport { SortDisplayedFields } from './components/SortDisplayedFields';\n\nimport type { Metadatas } from '../../../../shared/contracts/content-types';\n\ninterface FormData extends Pick<ListLayout, 'settings'> {\n  layout: Array<Pick<ListFieldLayout, 'sortable' | 'name'> & { label: string }>;\n}\n\nconst ListConfiguration = () => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const { model, collectionType } = useDoc();\n\n  const { isLoading: isLoadingLayout, list, edit } = useDocLayout();\n\n  const [updateContentTypeConfiguration] = useUpdateContentTypeConfigurationMutation();\n  const handleSubmit: FormProps<FormData>['onSubmit'] = async (data) => {\n    try {\n      trackUsage('willSaveContentTypeLayout');\n      const layoutData = data.layout ?? [];\n      /**\n       * We reconstruct the metadatas object by taking the existing edit metadatas\n       * and re-merging that by attribute name with the current list metadatas, whilst overwriting\n       * the data from the form we've built.\n       */\n      const meta = Object.entries(edit.metadatas).reduce<Metadatas>((acc, [name, editMeta]) => {\n        const { mainField: _mainField, ...listMeta } = list.metadatas[name];\n\n        const { label, sortable } = layoutData.find((field) => field.name === name) ?? {};\n\n        acc[name] = {\n          edit: editMeta,\n          list: {\n            ...listMeta,\n            label: label || listMeta.label,\n            sortable: sortable || listMeta.sortable,\n          },\n        };\n\n        return acc;\n      }, {});\n\n      const res = await updateContentTypeConfiguration({\n        layouts: {\n          edit: edit.layout.flatMap((panel) =>\n            panel.map((row) => row.map(({ name, size }) => ({ name, size })))\n          ),\n          list: layoutData.map((field) => field.name),\n        },\n        settings: setIn(data.settings, 'displayName', undefined),\n        metadatas: meta,\n        uid: model,\n      });\n\n      if ('data' in res) {\n        trackUsage('didEditListSettings');\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'notification.success.saved', defaultMessage: 'Saved' }),\n        });\n      } else {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(res.error),\n        });\n      }\n    } catch (err) {\n      console.error(err);\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const initialValues = React.useMemo(() => {\n    return {\n      layout: list.layout.map(({ label, sortable, name }) => ({\n        label: typeof label === 'string' ? label : formatMessage(label),\n        sortable,\n        name,\n      })),\n      settings: list.settings,\n    } satisfies FormData;\n  }, [formatMessage, list.layout, list.settings]);\n\n  if (collectionType === SINGLE_TYPES) {\n    return <Navigate to={`/single-types/${model}`} />;\n  }\n\n  if (isLoadingLayout) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Layouts.Root>\n      <Page.Title>{`Configure ${list.settings.displayName} List View`}</Page.Title>\n      <Main>\n        <Form initialValues={initialValues} onSubmit={handleSubmit} method=\"PUT\">\n          <Header\n            collectionType={collectionType}\n            model={model}\n            name={list.settings.displayName ?? ''}\n          />\n          <Layouts.Content>\n            <Flex\n              alignItems=\"stretch\"\n              background=\"neutral0\"\n              direction=\"column\"\n              gap={6}\n              hasRadius\n              shadow=\"tableShadow\"\n              paddingTop={6}\n              paddingBottom={6}\n              paddingLeft={7}\n              paddingRight={7}\n            >\n              <Settings />\n              <Divider />\n              <SortDisplayedFields />\n            </Flex>\n          </Layouts.Content>\n        </Form>\n      </Main>\n    </Layouts.Root>\n  );\n};\n\nconst ProtectedListConfiguration = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.contentManager?.collectionTypesConfigurations\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <ListConfiguration />\n    </Page.Protect>\n  );\n};\n\nexport { ProtectedListConfiguration, ListConfiguration };\nexport type { FormData };\n"],
  "mappings": "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",
  "names": ["Header", "name", "formatMessage", "useIntl", "params", "useParams", "modified", "useForm", "state", "isSubmitting", "_jsx", "Layouts", "navigationAction", "BackButton", "fallback", "COLLECTION_TYPES", "slug", "primaryAction", "Button", "size", "disabled", "type", "loading", "id", "defaultMessage", "subtitle", "getTranslation", "title", "capitalise", "EXCLUDED_SORT_ATTRIBUTE_TYPES", "Settings", "locale", "formatter", "useCollator", "sensitivity", "schema", "useDoc", "layout", "values", "currentSortBy", "settings", "defaultSortBy", "onChange", "sortOptions", "useMemo", "Object", "reduce", "acc", "field", "includes", "attributes", "push", "value", "label", "sortOptionsSorted", "sort", "a", "b", "compare", "React", "useEffect", "findIndex", "opt", "formLayout", "SETTINGS_FORM_LAYOUT", "map", "row", "hint", "undefined", "options", "_jsxs", "Flex", "direction", "alignItems", "gap", "Typography", "variant", "tag", "Grid", "Root", "Item", "s", "col", "InputRenderer", "FIELD_SCHEMA", "object", "shape", "string", "required", "sortable", "boolean", "EditFieldForm", "attribute", "onClose", "toggleNotification", "useNotification", "useField", "console", "error", "message", "shouldDisplaySortToggle", "relation", "Modal", "Content", "Form", "method", "initialValues", "validationSchema", "onSubmit", "data", "HeaderContainer", "FieldTypeIcon", "Title", "fieldName", "Body", "filter", "Footer", "onClick", "styled", "theme", "spaces", "DraggableCard", "index", "isDraggingSibling", "onMoveField", "onRemoveField", "setIsDraggingSibling", "isModalOpen", "setIsModalOpen", "useState", "forceRerenderAfterDnd", "isDragging", "objectRef", "dropRef", "dragRef", "dragPreviewRef", "useDragAndDrop", "ItemTypes", "FIELD", "item", "onMoveItem", "onEnd", "getEmptyImage", "captureDraggingState", "prev", "composedRefs", "useComposedRefs", "FieldWrapper", "ref", "CardDragPreview", "isSibling", "FieldContainer", "borderColor", "background", "hasRadius", "justifyContent", "DragButton", "aria-label", "e", "stopPropagation", "Drag", "fontWeight", "paddingLeft", "open", "onOpenChange", "Trigger", "ActionButton", "Pencil", "width", "height", "data-testid", "Cross", "button", "colors", "neutral600", "neutral700", "neutral150", "Box", "SortDisplayedFields", "model", "lastAction", "setLastAction", "scrollableContainerRef", "useRef", "addFieldRow", "removeFieldRow", "moveFieldRow", "metadata", "allMetadata", "useGetContentTypeConfigurationQuery", "selectFromResult", "contentType", "metadatas", "nonDisplayedFields", "displayedFieldNames", "entries", "checkIfAttributeIsDisplayable", "list", "handleAddField", "handleRemoveField", "handleMoveField", "dragIndex", "hoverIndex", "current", "scrollLeft", "scrollWidth", "padding", "borderStyle", "borderWidth", "flex", "overflow", "Menu", "paddingRight", "endIcon", "length", "VisuallyHidden", "Plus", "aria-hidden", "focusable", "style", "position", "top", "onSelect", "ListConfiguration", "trackUsage", "useTracking", "_unstableFormatAPIError", "formatAPIError", "useAPIErrorHandler", "collectionType", "isLoading", "isLoadingLayout", "edit", "useDocLayout", "updateContentTypeConfiguration", "useUpdateContentTypeConfigurationMutation", "handleSubmit", "layoutData", "meta", "editMeta", "mainField", "_mainField", "listMeta", "find", "res", "layouts", "flatMap", "panel", "setIn", "uid", "err", "SINGLE_TYPES", "Navigate", "to", "Page", "Loading", "displayName", "Main", "shadow", "paddingTop", "paddingBottom", "Divider", "ProtectedListConfiguration", "permissions", "useTypedSelector", "admin_app", "contentManager", "collectionTypesConfigurations", "Protect"]
}

// node_modules/@strapi/email/dist/admin/chunks/index-f_JAHN1f.mjs
var PERMISSIONS = {
  // This permission regards the main component (App) and is used to tell
  // If the plugin link should be displayed in the menu
  // And also if the plugin is accessible. This use case is found when a user types the url of the
  // plugin directly in the browser
  settings: [
    {
      action: "plugin::email.settings.read",
      subject: null
    }
  ]
};
var prefixPluginTranslations = (trad, pluginId) => {
  return Object.keys(trad).reduce((acc, current) => {
    acc[`${pluginId}.${current}`] = trad[current];
    return acc;
  }, {});
};
function __variableDynamicImportRuntime1__(path) {
  switch (path) {
    case "./translations/ar.json":
      return import("./ar-JWJKrFM--TT5FI73O.js");
    case "./translations/cs.json":
      return import("./cs-BZCMeXgq-USNAY5LG.js");
    case "./translations/de.json":
      return import("./de-CGlAhulB-DX5EFA55.js");
    case "./translations/dk.json":
      return import("./dk-B5IuEReS-T77HZT7N.js");
    case "./translations/en.json":
      return import("./en-Dxg2wKLN-R4RVKUIO.js");
    case "./translations/es.json":
      return import("./es-fdc21M_E-MFD3CLSL.js");
    case "./translations/fr.json":
      return import("./fr-DZjvYp6C-CICVQRIL.js");
    case "./translations/id.json":
      return import("./id-C1eDxX9W-X3MJ7Z75.js");
    case "./translations/it.json":
      return import("./it-DVlJ2EhA-JEHUZOKJ.js");
    case "./translations/ja.json":
      return import("./ja-CVosbw2M-WFWGSKD7.js");
    case "./translations/ko.json":
      return import("./ko-B8SR--vZ-XZLOSVGB.js");
    case "./translations/ms.json":
      return import("./ms-DLngEN2_-PNCRLMX2.js");
    case "./translations/nl.json":
      return import("./nl-B6Q0VF48-KOBZPZTC.js");
    case "./translations/pl.json":
      return import("./pl-Bve39qfV-C7XXNB7B.js");
    case "./translations/pt-BR.json":
      return import("./pt-BR-DPqDE4wA-GRPKYBZY.js");
    case "./translations/pt.json":
      return import("./pt-DLqF-Sb4-DYM7UF6O.js");
    case "./translations/ru.json":
      return import("./ru-rmFYdvwh-2M2GKSYF.js");
    case "./translations/sk.json":
      return import("./sk-DDJmUHcx-VZUWSDCD.js");
    case "./translations/th.json":
      return import("./th-BqTCSpUc-FEFFTPKX.js");
    case "./translations/tr.json":
      return import("./tr-BmrcZCoj-RTE7IUWX.js");
    case "./translations/uk.json":
      return import("./uk-CQim5OiT-HYDSMRI7.js");
    case "./translations/vi.json":
      return import("./vi-CO9gCtmD-ZFYMWFVG.js");
    case "./translations/zh-Hans.json":
      return import("./zh-Hans-ChWc00HT-MPMM5WQ6.js");
    case "./translations/zh.json":
      return import("./zh-CZQ4DV5L-FLPJG4FQ.js");
    default:
      return new Promise(function(resolve, reject) {
        (typeof queueMicrotask === "function" ? queueMicrotask : setTimeout)(
          reject.bind(null, new Error("Unknown variable dynamic import: " + path))
        );
      });
  }
}
var admin = {
  // TODO typing app in strapi/types as every plugin needs it
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  register(app) {
    app.createSettingSection({
      id: "email",
      intlLabel: {
        id: "email.SettingsNav.section-label",
        defaultMessage: "Email Plugin"
      }
    }, [
      {
        intlLabel: {
          id: "email.Settings.email.plugin.title",
          defaultMessage: "Settings"
        },
        id: "settings",
        to: "email",
        Component: () => import("./Settings-DIQi_hxN-YZML3KRH.js").then((mod) => ({
          default: mod.ProtectedSettingsPage
        })),
        permissions: PERMISSIONS.settings
      }
    ]);
    app.registerPlugin({
      id: "email",
      name: "email"
    });
  },
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  bootstrap() {
  },
  async registerTrads({ locales }) {
    const importedTrads = await Promise.all(locales.map((locale) => {
      return __variableDynamicImportRuntime1__(`./translations/${locale}.json`).then(({ default: data }) => {
        return {
          data: prefixPluginTranslations(data, "email"),
          locale
        };
      }).catch(() => {
        return {
          data: {},
          locale
        };
      });
    }));
    return Promise.resolve(importedTrads);
  }
};

export {
  PERMISSIONS,
  admin
};
//# sourceMappingURL=chunk-SS44UKDE.js.map

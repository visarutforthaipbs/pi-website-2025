{
  "version": 3,
  "sources": ["../../../lodash/transform.js", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/hooks/usePermissionsDataManager.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/difference.ts", "../../../@strapi/admin/admin/src/utils/arrays.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/createArrayOfValues.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/permissions.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/forms.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/layouts.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/updateConditionsToFalse.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/updateValues.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/constants.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/removeConditionKeyFromData.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/utils/getCheckboxState.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/CollapseLabel.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/HiddenAction.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/RequiredSign.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/RowLabelWithCheckbox.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/CollapsePropertyMatrix.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/ConditionsButton.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/ConditionsModal.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/ContentTypeCollapses.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/GlobalActions.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/ContentTypes.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/PluginsAndSettings.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/Roles/components/Permissions.tsx"],
  "sourcesContent": ["var arrayEach = require('./_arrayEach'),\n    baseCreate = require('./_baseCreate'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee'),\n    getPrototype = require('./_getPrototype'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isTypedArray = require('./isTypedArray');\n\n/**\n * An alternative to `_.reduce`; this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own\n * enumerable string keyed properties thru `iteratee`, with each invocation\n * potentially mutating the `accumulator` object. If `accumulator` is not\n * provided, a new object with the same `[[Prototype]]` will be used. The\n * iteratee is invoked with four arguments: (accumulator, value, key, object).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 1.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * _.transform([2, 3, 4], function(result, n) {\n *   result.push(n *= n);\n *   return n % 2 == 0;\n * }, []);\n * // => [4, 9]\n *\n * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] }\n */\nfunction transform(object, iteratee, accumulator) {\n  var isArr = isArray(object),\n      isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n  iteratee = baseIteratee(iteratee, 4);\n  if (accumulator == null) {\n    var Ctor = object && object.constructor;\n    if (isArrLike) {\n      accumulator = isArr ? new Ctor : [];\n    }\n    else if (isObject(object)) {\n      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n    }\n    else {\n      accumulator = {};\n    }\n  }\n  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n    return iteratee(accumulator, value, index, object);\n  });\n  return accumulator;\n}\n\nmodule.exports = transform;\n", "import { createContext } from '@radix-ui/react-context';\n\nimport { Condition } from '../../../../../../../shared/contracts/permissions';\n\nimport type {\n  OnChangeCollectionTypeGlobalActionCheckboxAction,\n  OnChangeCollectionTypeRowLeftCheckboxAction,\n  OnChangeConditionsAction,\n  State,\n} from '../components/Permissions';\n\n// Note: I had to guess most of these types based on the name and usage, but I actually don't\n// know if they are correct, because the usage is very generic. Feel free to correct them if\n// they create problems.\nexport interface PermissionsDataManagerContextValue extends Pick<State, 'modifiedData'> {\n  availableConditions: Condition[];\n  onChangeCollectionTypeLeftActionRowCheckbox: (\n    pathToCollectionType: OnChangeCollectionTypeRowLeftCheckboxAction['pathToCollectionType'],\n    propertyName: OnChangeCollectionTypeRowLeftCheckboxAction['propertyName'],\n    rowName: OnChangeCollectionTypeRowLeftCheckboxAction['rowName'],\n    value: OnChangeCollectionTypeRowLeftCheckboxAction['value']\n  ) => void;\n  onChangeConditions: (conditions: OnChangeConditionsAction['conditions']) => void;\n  onChangeSimpleCheckbox: (event: { target: { name: string; value: boolean } }) => void;\n  onChangeParentCheckbox: (event: { target: { name: string; value: boolean } }) => void;\n  onChangeCollectionTypeGlobalActionCheckbox: (\n    collectionTypeKind: OnChangeCollectionTypeGlobalActionCheckboxAction['collectionTypeKind'],\n    actionId: OnChangeCollectionTypeGlobalActionCheckboxAction['actionId'],\n    value: OnChangeCollectionTypeGlobalActionCheckboxAction['value']\n  ) => void;\n}\n\nconst [PermissionsDataManagerProvider, usePermissionsDataManagerContext] =\n  createContext<PermissionsDataManagerContextValue>('PermissionsDataManager');\n\nexport const usePermissionsDataManager = () =>\n  usePermissionsDataManagerContext('usePermissionsDataManager');\n\nexport { PermissionsDataManagerProvider };\n", "import isEqual from 'lodash/isEqual';\nimport isObject from 'lodash/isObject';\nimport transform from 'lodash/transform';\n\ntype ObjectDiff<T> = {\n  [P in keyof T]?: T[P] extends Record<string, unknown> ? ObjectDiff<T[P]> : T[P];\n};\n\nfunction difference<T extends Record<string, unknown>>(object: T, base: T): ObjectDiff<T> {\n  function changes(object: T, base: T): ObjectDiff<T> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return transform(object, (result, value: any, key: keyof ObjectDiff<T>) => {\n      if (!isEqual(value, base[key])) {\n        result[key] =\n          isObject(value) && isObject(base[key]) ? changes(value as T, base[key] as T) : value;\n      }\n      return result;\n    });\n  }\n\n  return changes(object, base);\n}\n\nexport { difference };\n", "/**\n * @internal\n * @description Mutates a value to be a union of flat values, no arrays allowed.\n */\ntype Flat<T> = T extends string ? T : T extends ArrayLike<any> ? never : T;\n\n/**\n * @internal\n */\ninterface RecursiveArray<T> extends Array<T | RecursiveArray<T>> {}\n/**\n * @internal\n */\ninterface ArrayOfRecursiveArraysOrValues<T> extends ArrayLike<T | RecursiveArray<T>> {}\n\n/**\n * @internal\n *\n * @description Flattens an array recursively.\n */\nconst flattenDeep = <T>(\n  array?: ArrayOfRecursiveArraysOrValues<T> | null | undefined\n): Array<Flat<T>> => {\n  if (Array.isArray(array)) {\n    return array.reduce(\n      (acc, value) => {\n        if (Array.isArray(value)) {\n          acc.push(...flattenDeep(value));\n        } else {\n          acc.push(value);\n        }\n\n        return acc;\n      },\n      [] as Array<Flat<T>>\n    );\n  } else {\n    return [];\n  }\n};\n\nexport { flattenDeep };\nexport type { Flat, RecursiveArray, ArrayOfRecursiveArraysOrValues };\n", "import { Flat, flattenDeep } from '../../../../../utils/arrays';\nimport { isObject } from '../../../../../utils/objects';\n\nconst createArrayOfValues = <TData>(obj: unknown): Array<Flat<TData>> => {\n  if (!isObject(obj)) {\n    return [];\n  }\n\n  return flattenDeep(\n    Object.values(obj).map((value) => {\n      if (isObject(value)) {\n        return createArrayOfValues(value);\n      }\n\n      return value;\n    })\n  );\n};\n\nexport { createArrayOfValues };\n", "import { isObject } from '../../../../../utils/objects';\n\nimport { createArrayOfValues } from './createArrayOfValues';\n\nimport type { ConditionForm, Form, PropertyChildForm } from './forms';\nimport type { UpdatePermissions } from '../../../../../../../shared/contracts/roles';\nimport type { Permission } from '../../../../../../../shared/contracts/shared';\nimport type { PermissionsDataManagerContextValue } from '../hooks/usePermissionsDataManager';\n\ntype PermissionApiBody = UpdatePermissions.Request['body']['permissions'];\n\n/**\n * @description Given a users permissions array we find the first one that matches a provided subject & action\n */\nconst findMatchingPermission = (\n  permissions: Permission[],\n  action: string,\n  subject: string | null\n) => permissions.find((perm) => perm.action === action && perm.subject === subject);\n\nconst formatPermissionsForAPI = (\n  modifiedData: PermissionsDataManagerContextValue['modifiedData']\n): PermissionApiBody => {\n  const pluginsPermissions = formatSettingsPermissions(modifiedData.plugins);\n  const settingsPermissions = formatSettingsPermissions(modifiedData.settings);\n  const collectionTypesPermissions = formatContentTypesPermissions(modifiedData.collectionTypes);\n  const singleTypesPermissions = formatContentTypesPermissions(modifiedData.singleTypes);\n\n  return [\n    ...pluginsPermissions,\n    ...settingsPermissions,\n    ...collectionTypesPermissions,\n    ...singleTypesPermissions,\n  ];\n};\n\nconst formatSettingsPermissions = (\n  settingsPermissionsObject:\n    | PermissionsDataManagerContextValue['modifiedData']['plugins']\n    | PermissionsDataManagerContextValue['modifiedData']['settings']\n): PermissionApiBody => {\n  return Object.values(settingsPermissionsObject).reduce<PermissionApiBody>((formAcc, form) => {\n    const currentCategoryPermissions = Object.values(form).reduce<PermissionApiBody>(\n      (childFormAcc, childForm) => {\n        const permissions = Object.entries(childForm).reduce<PermissionApiBody>(\n          (\n            responsesAcc,\n            [\n              actionName,\n              {\n                conditions,\n                properties: { enabled },\n              },\n            ]\n          ) => {\n            if (!enabled) {\n              return responsesAcc;\n            }\n\n            responsesAcc.push({\n              action: actionName,\n              subject: null,\n              conditions: createConditionsArray(conditions),\n              properties: {},\n            });\n\n            return responsesAcc;\n          },\n          []\n        );\n\n        return [...childFormAcc, ...permissions];\n      },\n      []\n    );\n\n    return [...formAcc, ...currentCategoryPermissions];\n  }, []);\n};\n\nconst formatContentTypesPermissions = (contentTypesPermissions: Form): PermissionApiBody => {\n  const permissions = Object.entries(contentTypesPermissions).reduce<PermissionApiBody>(\n    (allPermissions, current) => {\n      const [subject, currentSubjectActions] = current;\n\n      const permissions = Object.entries(currentSubjectActions).reduce<PermissionApiBody>(\n        (acc, current) => {\n          const [actionName, permissions] = current;\n          const shouldCreatePermission = createArrayOfValues(permissions).some((val) => val);\n\n          if (!shouldCreatePermission) {\n            return acc;\n          }\n\n          if (!permissions?.properties?.enabled) {\n            const createdPermissionsArray = Object.entries(permissions.properties).reduce<\n              PermissionApiBody[number]\n            >(\n              (acc, current) => {\n                const [propertyName, propertyValue] = current;\n\n                // @ts-expect-error – `propertyValue` can be boolean or an object, but we don't account for it...\n                acc.properties[propertyName] = createPropertyArray(propertyValue);\n\n                return acc;\n              },\n              {\n                action: actionName,\n                subject,\n                conditions: createConditionsArray(permissions.conditions),\n                properties: {},\n              }\n            );\n\n            return [...acc, createdPermissionsArray];\n          }\n\n          if (!permissions.properties.enabled) {\n            return acc;\n          }\n\n          acc.push({\n            action: actionName,\n            subject,\n            properties: {},\n            conditions: createConditionsArray(permissions.conditions),\n          });\n\n          return acc;\n        },\n        []\n      );\n\n      return [...allPermissions, ...permissions];\n    },\n    []\n  );\n\n  return permissions;\n};\n\nconst createPropertyArray = (propertyValue: PropertyChildForm, prefix = ''): string[] => {\n  return Object.entries(propertyValue).reduce<string[]>((acc, current) => {\n    const [name, value] = current;\n\n    if (isObject(value)) {\n      return [...acc, ...createPropertyArray(value, `${prefix}${name}.`)];\n    }\n\n    if (value && !isObject(value)) {\n      acc.push(`${prefix}${name}`);\n    }\n\n    return acc;\n  }, []);\n};\n\nconst createConditionsArray = (conditions: ConditionForm) =>\n  Object.entries(conditions)\n    .filter(([, conditionValue]) => {\n      return conditionValue;\n    })\n    .map(([conditionName]) => conditionName);\n\nexport { findMatchingPermission, formatPermissionsForAPI };\n", "import isEmpty from 'lodash/isEmpty';\nimport merge from 'lodash/merge';\n\nimport { findMatchingPermission } from './permissions';\n\nimport type { GenericLayout } from './layouts';\nimport type {\n  Condition,\n  SettingPermission,\n  ContentPermission,\n  Subject,\n  SubjectProperty,\n} from '../../../../../../../shared/contracts/permissions';\nimport type { Permission } from '../../../../../../../shared/contracts/shared';\n\ntype ConditionForm = Record<string, boolean>;\n\n/**\n * Creates the default condition form: { [conditionId]: false }\n */\nconst createDefaultConditionsForm = (\n  conditions: Condition[],\n  initialConditions: Permission['conditions'] = []\n): ConditionForm =>\n  conditions.reduce<ConditionForm>((acc, current) => {\n    acc[current.id] = initialConditions.indexOf(current.id) !== -1;\n\n    return acc;\n  }, {});\n\ninterface SubCategoryForm {\n  properties: {\n    enabled: boolean;\n  };\n  conditions: ConditionForm;\n}\n\ntype ChildrenForm = Record<\n  string,\n  SubCategoryForm | (Omit<SubCategoryForm, 'properties'> & PropertyForm)\n>;\n\ntype Form = Record<string, ChildrenForm>;\n\nconst createDefaultForm = <TLayout extends Omit<SettingPermission, 'category'>>(\n  layout: GenericLayout<TLayout>[],\n  conditions: Condition[],\n  initialPermissions: Permission[] = []\n) => {\n  return layout.reduce<Record<string, Form>>((acc, { categoryId, childrenForm }) => {\n    const childrenDefaultForm = childrenForm.reduce<Form>((acc, current) => {\n      acc[current.subCategoryId] = current.actions.reduce<ChildrenForm>((acc, current) => {\n        const foundMatchingPermission = findMatchingPermission(\n          initialPermissions,\n          current.action,\n          null\n        );\n\n        acc[current.action] = {\n          properties: {\n            enabled: foundMatchingPermission !== undefined,\n          },\n          conditions: createDefaultConditionsForm(\n            conditions,\n            foundMatchingPermission?.conditions ?? []\n          ),\n        };\n\n        return acc;\n      }, {});\n\n      return acc;\n    }, {});\n\n    acc[categoryId] = childrenDefaultForm;\n\n    return acc;\n  }, {});\n};\n\ninterface PropertyChildForm extends Record<string, boolean | PropertyChildForm> {}\n\ninterface PropertyForm {\n  properties: PropertyChildForm;\n}\n\n/**\n * Creates the default form for all the properties found in a content type's layout\n */\nconst createDefaultPropertiesForm = (\n  properties: string[],\n  subject: Subject,\n  matchingPermission?: Permission\n): PropertyForm => {\n  const recursivelyCreatePropertyForm = (\n    { children = [] }: SubjectProperty,\n    propertyValues: string[],\n    prefix = ''\n  ): PropertyChildForm => {\n    return children.reduce<PropertyChildForm>((acc, current) => {\n      if (current.children) {\n        return {\n          ...acc,\n          [current.value]: recursivelyCreatePropertyForm(\n            current,\n            propertyValues,\n            `${prefix}${current.value}.`\n          ),\n        };\n      }\n\n      const hasProperty = propertyValues.indexOf(`${prefix}${current.value}`) !== -1;\n\n      acc[current.value] = hasProperty;\n\n      return acc;\n    }, {});\n  };\n\n  return properties.reduce<PropertyForm>(\n    (acc, currentPropertyName) => {\n      const foundProperty = subject.properties.find(({ value }) => value === currentPropertyName);\n\n      if (foundProperty) {\n        const matchingPermissionPropertyValues =\n          matchingPermission?.properties[foundProperty.value] ?? [];\n\n        const propertyForm = recursivelyCreatePropertyForm(\n          foundProperty,\n          matchingPermissionPropertyValues\n        );\n\n        acc.properties[currentPropertyName] = propertyForm;\n      }\n\n      return acc;\n    },\n    { properties: {} }\n  );\n};\n\n/**\n * Creates the default for for a content type\n */\nconst createDefaultCTForm = (\n  { subjects, actions = [] }: ContentPermission,\n  conditions: Condition[],\n  initialPermissions: Permission[] = []\n) => {\n  return actions.reduce<Form>((defaultForm, action) => {\n    type SubjectLayouts = Record<string, Subject>;\n\n    const subjectLayouts = action.subjects.reduce<SubjectLayouts>((acc, current) => {\n      const foundLayout = subjects.find(({ uid }) => uid === current) || null;\n\n      if (foundLayout) {\n        acc[current] = foundLayout;\n      }\n\n      return acc;\n    }, {});\n\n    // This can happen when an action is not related to a content type\n    // for instance the D&P permission is applied only with the cts that\n    // have the D&P features enabled\n    if (isEmpty(subjectLayouts)) {\n      return defaultForm;\n    }\n\n    // The object has the following shape: { [ctUID]: { [actionId]: { [property]: { enabled: false } } } }\n    const contentTypesActions = Object.keys(subjectLayouts).reduce<Form>((acc, currentCTUID) => {\n      const { actionId, applyToProperties } = action;\n      const currentSubjectLayout = subjectLayouts[currentCTUID];\n      const properties = currentSubjectLayout.properties.map(({ value }) => value);\n      const doesNothaveProperty = properties.every(\n        (property) => (applyToProperties || []).indexOf(property) === -1\n      );\n\n      const matchingPermission = findMatchingPermission(initialPermissions, actionId, currentCTUID);\n      const conditionsForm = createDefaultConditionsForm(\n        conditions,\n        matchingPermission?.conditions ?? []\n      );\n\n      if (!acc[currentCTUID]) {\n        acc[currentCTUID] = {};\n      }\n\n      if (isEmpty(applyToProperties) || doesNothaveProperty) {\n        acc[currentCTUID][actionId] = {\n          properties: {\n            enabled: matchingPermission !== undefined,\n          },\n          conditions: conditionsForm,\n        };\n\n        return acc;\n      }\n\n      const propertiesForm = createDefaultPropertiesForm(\n        applyToProperties,\n        subjectLayouts[currentCTUID],\n        matchingPermission\n      );\n\n      acc[currentCTUID][actionId] = { ...propertiesForm, conditions: conditionsForm };\n\n      return acc;\n    }, {});\n\n    return merge(defaultForm, contentTypesActions);\n  }, {});\n};\n\nexport { createDefaultConditionsForm, createDefaultForm, createDefaultCTForm };\nexport type { ConditionForm, Form, PropertyForm, SubCategoryForm, ChildrenForm, PropertyChildForm };\n", "import groupBy from 'lodash/groupBy';\n\nimport { SettingPermission } from '../../../../../../../shared/contracts/permissions';\n\ninterface GenericLayout<TLayout> {\n  category: string;\n  categoryId: string;\n  childrenForm: Array<{\n    subCategoryName: string;\n    subCategoryId: string;\n    actions: TLayout[];\n  }>;\n}\n\nconst formatLayout = <TLayout extends Omit<SettingPermission, 'category'>>(\n  layout: TLayout[],\n  groupByKey: keyof TLayout\n): GenericLayout<TLayout>[] => {\n  return Object.entries(groupBy(layout, groupByKey)).map(([itemName, item]) => ({\n    category: itemName,\n    categoryId: itemName.split(' ').join('-'),\n    childrenForm: Object.entries(groupBy(item, 'subCategory')).map(\n      ([subCategoryName, actions]) => ({\n        subCategoryName,\n        subCategoryId: subCategoryName.split(' ').join('-'),\n        actions,\n      })\n    ),\n  }));\n};\n\nexport { formatLayout };\nexport type { GenericLayout };\n", "import has from 'lodash/has';\nimport omit from 'lodash/omit';\n\nimport { isObject } from '../../../../../utils/objects';\n\nimport { createArrayOfValues } from './createArrayOfValues';\n/**\n * Changes all the conditions leaf when the properties are all falsy\n */\nconst updateConditionsToFalse = (obj: object): object => {\n  return Object.keys(obj).reduce((acc, current) => {\n    // @ts-expect-error – TODO: type better\n    const currentValue = obj[current];\n\n    if (isObject(currentValue) && !has(currentValue, 'conditions')) {\n      return { ...acc, [current]: updateConditionsToFalse(currentValue) };\n    }\n\n    if (isObject(currentValue) && has(currentValue, 'conditions')) {\n      const isActionEnabled = createArrayOfValues(omit(currentValue, 'conditions')).some(\n        (val) => val\n      );\n\n      if (!isActionEnabled) {\n        // @ts-expect-error – TODO: type better\n        const updatedConditions = Object.keys(currentValue.conditions).reduce((acc1, current) => {\n          // @ts-expect-error – TODO: type better\n          acc1[current] = false;\n\n          return acc1;\n        }, {});\n\n        return { ...acc, [current]: { ...currentValue, conditions: updatedConditions } };\n      }\n    }\n\n    // @ts-expect-error – TODO: type better\n    acc[current] = currentValue;\n\n    return acc;\n  }, {});\n};\n\nexport { updateConditionsToFalse };\n", "import { isObject } from '../../../../../utils/objects';\n\n/**\n * Sets all the none object values of an object to the given one\n * It preserves the shape of the object, it only modifies the leafs\n * of an object.\n * This utility is very helpful when dealing with parent<>children checkboxes\n */\nconst updateValues = (obj: object, valueToSet: boolean, isFieldUpdate = false): object => {\n  return Object.keys(obj).reduce((acc, current) => {\n    const currentValue = obj[current as keyof object];\n\n    if (current === 'conditions' && !isFieldUpdate) {\n      // @ts-expect-error – TODO: type better\n      acc[current] = currentValue;\n\n      return acc;\n    }\n\n    if (isObject(currentValue)) {\n      return { ...acc, [current]: updateValues(currentValue, valueToSet, current === 'fields') };\n    }\n\n    // @ts-expect-error – TODO: type better\n    acc[current] = valueToSet;\n\n    return acc;\n  }, {});\n};\n\nexport { updateValues };\n", "export const cellWidth = `12rem`;\nexport const firstRowWidth = `20rem`;\nexport const rowHeight = `5.3rem`;\n", "type DataWithoutCondition<TData extends { conditions?: unknown }> = Omit<TData, 'conditions'>;\n\nconst removeConditionKeyFromData = <TData extends { conditions?: unknown }>(\n  obj?: TData\n): DataWithoutCondition<TData> | null => {\n  if (!obj) {\n    return null;\n  }\n\n  return Object.entries(obj).reduce((acc, [key, value]) => {\n    if (key !== 'conditions') {\n      // @ts-expect-error – TODO: fix this type error correctly.\n      acc[key] = value;\n    }\n\n    return acc;\n  }, {} as DataWithoutCondition<TData>);\n};\n\nexport { removeConditionKeyFromData };\nexport type { DataWithoutCondition };\n", "import { createArrayOfValues } from './createArrayOfValues';\nimport { removeConditionKeyFromData } from './removeConditionKeyFromData';\n\ninterface RecursiveRecordOfBooleans extends Record<string, boolean | RecursiveRecordOfBooleans> {}\n\nconst getCheckboxState = (dataObj: RecursiveRecordOfBooleans) => {\n  const dataWithoutCondition = removeConditionKeyFromData(dataObj);\n\n  const arrayOfValues = createArrayOfValues(dataWithoutCondition);\n\n  if (!arrayOfValues.length) {\n    return { hasAllActionsSelected: false, hasSomeActionsSelected: false };\n  }\n\n  const hasAllActionsSelected = arrayOfValues.every((val) => val);\n  const hasSomeActionsSelected = arrayOfValues.some((val) => val) && !hasAllActionsSelected;\n\n  return { hasAllActionsSelected, hasSomeActionsSelected };\n};\n\nexport { getCheckboxState };\nexport type { RecursiveRecordOfBooleans };\n", "import { Flex, FlexComponent } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\nconst CollapseLabel = styled<FlexComponent>(Flex)<{ $isCollapsable: boolean }>`\n  padding-right: ${({ theme }) => theme.spaces[2]};\n  overflow: hidden;\n  flex: 1;\n  ${({ $isCollapsable }) => $isCollapsable && 'cursor: pointer;'}\n`;\n\nexport { CollapseLabel };\n", "import { styled } from 'styled-components';\n\nimport { cellWidth } from '../utils/constants';\n\nconst HiddenAction = styled.div`\n  width: ${cellWidth};\n`;\n\nexport { HiddenAction };\n", "import { Box } from '@strapi/design-system';\n\nconst RequiredSign = () => (\n  <Box color=\"danger700\" paddingLeft={1}>\n    *\n  </Box>\n);\n\nexport { RequiredSign };\n", "import * as React from 'react';\n\nimport { Checkbox, Box, Flex, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { PermissionsDataManagerContextValue } from '../hooks/usePermissionsDataManager';\nimport { firstRowWidth } from '../utils/constants';\n\nimport { CollapseLabel } from './CollapseLabel';\n\ninterface RowLabelWithCheckboxProps {\n  children: React.ReactNode;\n  checkboxName?: string;\n  isActive?: boolean;\n  isCollapsable?: boolean;\n  isFormDisabled?: boolean;\n  label: string;\n  onChange: PermissionsDataManagerContextValue['onChangeParentCheckbox'];\n  onClick: () => void;\n  someChecked?: boolean;\n  value: boolean;\n}\n\nconst RowLabelWithCheckbox = ({\n  checkboxName = '',\n  children,\n  isActive = false,\n  isCollapsable = false,\n  isFormDisabled = false,\n  label,\n  onChange,\n  onClick,\n  someChecked = false,\n  value,\n}: RowLabelWithCheckboxProps) => {\n  const { formatMessage } = useIntl();\n\n  const collapseLabelProps = {\n    title: label,\n    alignItems: 'center',\n    $isCollapsable: isCollapsable,\n  };\n\n  if (isCollapsable) {\n    Object.assign(collapseLabelProps, {\n      onClick,\n      'aria-expanded': isActive,\n      onKeyDown({ key }: React.KeyboardEvent<HTMLDivElement>) {\n        if (key === 'Enter' || key === ' ') {\n          onClick();\n        }\n      },\n      tabIndex: 0,\n      role: 'button',\n    });\n  }\n\n  return (\n    <Flex alignItems=\"center\" paddingLeft={6} width={firstRowWidth} shrink={0}>\n      <Box paddingRight={2}>\n        <Checkbox\n          name={checkboxName}\n          aria-label={formatMessage(\n            {\n              id: `Settings.permissions.select-all-by-permission`,\n              defaultMessage: 'Select all {label} permissions',\n            },\n            { label }\n          )}\n          disabled={isFormDisabled}\n          // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n          onCheckedChange={(value) =>\n            onChange({\n              target: {\n                name: checkboxName,\n                value: !!value,\n              },\n            })\n          }\n          checked={someChecked ? 'indeterminate' : value}\n        />\n      </Box>\n      <CollapseLabel {...collapseLabelProps}>\n        <Typography ellipsis>{label}</Typography>\n        {children}\n      </CollapseLabel>\n    </Flex>\n  );\n};\n\nexport { RowLabelWithCheckbox };\nexport type { RowLabelWithCheckboxProps };\n", "import * as React from 'react';\n\nimport {\n  Checkbox,\n  Box,\n  BoxComponent,\n  Flex,\n  FlexComponent,\n  Typography,\n  TypographyComponent,\n} from '@strapi/design-system';\nimport { CaretDown } from '@strapi/icons';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\nimport { styled, DefaultTheme, css } from 'styled-components';\n\nimport { Action, SubjectProperty } from '../../../../../../../shared/contracts/permissions';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\nimport { cellWidth, firstRowWidth, rowHeight } from '../utils/constants';\nimport { getCheckboxState } from '../utils/getCheckboxState';\n\nimport { CollapseLabel } from './CollapseLabel';\nimport { HiddenAction } from './HiddenAction';\nimport { RequiredSign } from './RequiredSign';\nimport { RowLabelWithCheckbox, RowLabelWithCheckboxProps } from './RowLabelWithCheckbox';\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsePropertyMatrix\n * -----------------------------------------------------------------------------------------------*/\n\ninterface CollapsePropertyMatrixProps\n  extends Pick<\n    ActionRowProps,\n    'childrenForm' | 'isFormDisabled' | 'label' | 'pathToData' | 'propertyName'\n  > {\n  availableActions?: Array<Action & { isDisplayed: boolean }>;\n}\n\ninterface PropertyAction {\n  label: string;\n  actionId: string;\n  isActionRelatedToCurrentProperty: boolean;\n}\n\nconst CollapsePropertyMatrix = ({\n  availableActions = [],\n  childrenForm = [],\n  isFormDisabled,\n  label,\n  pathToData,\n  propertyName,\n}: CollapsePropertyMatrixProps) => {\n  const propertyActions = React.useMemo(\n    () =>\n      availableActions.map((action) => {\n        const isActionRelatedToCurrentProperty =\n          Array.isArray(action.applyToProperties) &&\n          action.applyToProperties.indexOf(propertyName) !== -1 &&\n          action.isDisplayed;\n\n        return { label: action.label, actionId: action.actionId, isActionRelatedToCurrentProperty };\n      }) satisfies PropertyAction[],\n    [availableActions, propertyName]\n  );\n\n  return (\n    <Flex display=\"inline-flex\" direction=\"column\" alignItems=\"stretch\" minWidth={0}>\n      <Header label={label} headers={propertyActions} />\n      <Box>\n        {childrenForm.map(({ children: childrenForm, label, value, required }, i) => (\n          <ActionRow\n            childrenForm={childrenForm}\n            key={value}\n            label={label}\n            isFormDisabled={isFormDisabled}\n            name={value}\n            required={required}\n            propertyActions={propertyActions}\n            pathToData={pathToData}\n            propertyName={propertyName}\n            isOdd={i % 2 === 0}\n          />\n        ))}\n      </Box>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ActionRow\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ActionRowProps\n  extends Pick<\n    SubActionRowProps,\n    'childrenForm' | 'isFormDisabled' | 'propertyActions' | 'propertyName'\n  > {\n  label: string;\n  name: string;\n  required?: boolean;\n  pathToData: string;\n  isOdd?: boolean;\n}\n\nconst ActionRow = ({\n  childrenForm = [],\n  label,\n  isFormDisabled = false,\n  name,\n  required = false,\n  pathToData,\n  propertyActions,\n  propertyName,\n  isOdd = false,\n}: ActionRowProps) => {\n  const { formatMessage } = useIntl();\n  const [rowToOpen, setRowToOpen] = React.useState<string | null>(null);\n  const {\n    modifiedData,\n    onChangeCollectionTypeLeftActionRowCheckbox,\n    onChangeParentCheckbox,\n    onChangeSimpleCheckbox,\n  } = usePermissionsDataManager();\n\n  const isActive = rowToOpen === name;\n\n  const recursiveChildren = React.useMemo(() => {\n    if (!Array.isArray(childrenForm)) {\n      return [];\n    }\n\n    return childrenForm;\n  }, [childrenForm]);\n\n  const isCollapsable = recursiveChildren.length > 0;\n\n  const handleClick = React.useCallback(() => {\n    if (isCollapsable) {\n      setRowToOpen((prev) => {\n        if (prev === name) {\n          return null;\n        }\n\n        return name;\n      });\n    }\n  }, [isCollapsable, name]);\n\n  const handleChangeLeftRowCheckbox: RowLabelWithCheckboxProps['onChange'] = ({\n    target: { value },\n  }) => {\n    onChangeCollectionTypeLeftActionRowCheckbox(pathToData, propertyName, name, value);\n  };\n\n  const { hasAllActionsSelected, hasSomeActionsSelected } = React.useMemo(() => {\n    return getRowLabelCheckboxState(propertyActions, modifiedData, pathToData, propertyName, name);\n  }, [propertyActions, modifiedData, pathToData, propertyName, name]);\n\n  return (\n    <>\n      <Wrapper\n        alignItems=\"center\"\n        $isCollapsable={isCollapsable}\n        $isActive={isActive}\n        background={isOdd ? 'neutral100' : 'neutral0'}\n      >\n        <Flex>\n          <RowLabelWithCheckbox\n            onChange={handleChangeLeftRowCheckbox}\n            onClick={handleClick}\n            isCollapsable={isCollapsable}\n            isFormDisabled={isFormDisabled}\n            label={label}\n            someChecked={hasSomeActionsSelected}\n            value={hasAllActionsSelected}\n            isActive={isActive}\n          >\n            {required && <RequiredSign />}\n            <CarretIcon $isActive={isActive} />\n          </RowLabelWithCheckbox>\n          <Flex>\n            {propertyActions.map(({ label, isActionRelatedToCurrentProperty, actionId }) => {\n              if (!isActionRelatedToCurrentProperty) {\n                return <HiddenAction key={label} />;\n              }\n\n              const checkboxName = [\n                ...pathToData.split('..'),\n                actionId,\n                'properties',\n                propertyName,\n                name,\n              ];\n\n              if (!isCollapsable) {\n                const checkboxValue = get(modifiedData, checkboxName, false);\n\n                return (\n                  <Flex\n                    key={actionId}\n                    width={cellWidth}\n                    position=\"relative\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                  >\n                    <Checkbox\n                      disabled={isFormDisabled}\n                      name={checkboxName.join('..')}\n                      aria-label={formatMessage(\n                        {\n                          id: `Settings.permissions.select-by-permission`,\n                          defaultMessage: 'Select {label} permission',\n                        },\n                        { label: `${name} ${label}` }\n                      )}\n                      onCheckedChange={(value) => {\n                        onChangeSimpleCheckbox({\n                          target: {\n                            name: checkboxName.join('..'),\n                            value: !!value,\n                          },\n                        });\n                      }}\n                      checked={checkboxValue}\n                    />\n                  </Flex>\n                );\n              }\n\n              const data = get(modifiedData, checkboxName, {});\n\n              const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(data);\n\n              return (\n                <Flex\n                  key={label}\n                  width={cellWidth}\n                  position=\"relative\"\n                  justifyContent=\"center\"\n                  alignItems=\"center\"\n                >\n                  <Checkbox\n                    disabled={isFormDisabled}\n                    name={checkboxName.join('..')}\n                    onCheckedChange={(value) => {\n                      onChangeParentCheckbox({\n                        target: {\n                          name: checkboxName.join('..'),\n                          value: !!value,\n                        },\n                      });\n                    }}\n                    aria-label={formatMessage(\n                      {\n                        id: `Settings.permissions.select-by-permission`,\n                        defaultMessage: 'Select {label} permission',\n                      },\n                      { label: `${name} ${label}` }\n                    )}\n                    checked={hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected}\n                  />\n                </Flex>\n              );\n            })}\n          </Flex>\n        </Flex>\n      </Wrapper>\n      {isActive && (\n        <SubActionRow\n          childrenForm={recursiveChildren}\n          isFormDisabled={isFormDisabled}\n          parentName={name}\n          pathToDataFromActionRow={pathToData}\n          propertyName={propertyName}\n          propertyActions={propertyActions}\n          recursiveLevel={0}\n        />\n      )}\n    </>\n  );\n};\n\n/**\n *\n * Returns the state of the left checkbox of a ActionRow main checkbox\n */\nconst getRowLabelCheckboxState = (\n  propertyActions: PropertyAction[],\n  modifiedData: PermissionsDataManagerContextValue['modifiedData'],\n  pathToContentType: string,\n  propertyToCheck: string,\n  targetKey: string\n) => {\n  const actionIds = propertyActions.reduce<string[]>((acc, current) => {\n    if (current.isActionRelatedToCurrentProperty) {\n      acc.push(current.actionId);\n    }\n\n    return acc;\n  }, []);\n\n  const data = actionIds.reduce<Record<string, boolean>>((acc, current) => {\n    const mainData = get(\n      modifiedData,\n      [...pathToContentType.split('..'), current, 'properties', propertyToCheck, targetKey],\n      false\n    );\n\n    acc[current] = mainData;\n\n    return acc;\n  }, {});\n\n  return getCheckboxState(data);\n};\n\nconst Wrapper = styled<FlexComponent>(Flex)<{ $isCollapsable?: boolean; $isActive?: boolean }>`\n  height: ${rowHeight};\n  flex: 1;\n\n  &:hover {\n    ${({ $isCollapsable, theme }) => $isCollapsable && activeStyle(theme)}\n  }\n\n  ${({ $isCollapsable }) =>\n    $isCollapsable &&\n    `\n      ${CarretIcon} {\n        display: flex;\n      }\n  `}\n  ${({ $isActive, theme }) => $isActive && activeStyle(theme)};\n`;\n\nconst CarretIcon = styled(CaretDown)<{ $isActive: boolean }>`\n  display: none;\n\n  svg {\n    width: 1.4rem;\n  }\n\n  path {\n    fill: ${({ theme }) => theme.colors.neutral200};\n  }\n\n  transform: rotate(${({ $isActive }) => ($isActive ? '180' : '0')}deg);\n  margin-left: ${({ theme }) => theme.spaces[2]};\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * SubActionRow\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SubActionRowProps {\n  childrenForm: SubjectProperty['children'];\n  isFormDisabled?: boolean;\n  parentName: string;\n  pathToDataFromActionRow: string;\n  propertyActions: PropertyAction[];\n  propertyName: string;\n  recursiveLevel: number;\n}\n\nconst SubActionRow = ({\n  childrenForm = [],\n  isFormDisabled,\n  recursiveLevel,\n  pathToDataFromActionRow,\n  propertyActions,\n  parentName,\n  propertyName,\n}: SubActionRowProps) => {\n  const { formatMessage } = useIntl();\n  const { modifiedData, onChangeParentCheckbox, onChangeSimpleCheckbox } =\n    usePermissionsDataManager();\n  const [rowToOpen, setRowToOpen] = React.useState<string | null>(null);\n\n  const handleClickToggleSubLevel = (name: string) => {\n    setRowToOpen((prev) => {\n      if (prev === name) {\n        return null;\n      }\n\n      return name;\n    });\n  };\n\n  const displayedRecursiveChildren = React.useMemo(() => {\n    if (!rowToOpen) {\n      return null;\n    }\n\n    return childrenForm.find(({ value }) => value === rowToOpen);\n  }, [rowToOpen, childrenForm]);\n\n  return (\n    <Box paddingLeft={`3.2rem`}>\n      <TopTimeline />\n      {childrenForm.map(({ label, value, required, children: subChildrenForm }, index) => {\n        const isVisible = index + 1 < childrenForm.length;\n        const isArrayType = Array.isArray(subChildrenForm);\n        const isActive = rowToOpen === value;\n\n        return (\n          <LeftBorderTimeline key={value} $isVisible={isVisible}>\n            <Flex height={rowHeight}>\n              <StyledBox>\n                <Svg\n                  width=\"20\"\n                  height=\"23\"\n                  viewBox=\"0 0 20 23\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  $color=\"primary200\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    d=\"M7.02477 14.7513C8.65865 17.0594 11.6046 18.6059 17.5596 18.8856C18.6836 18.9384 19.5976 19.8435 19.5976 20.9688V20.9688C19.5976 22.0941 18.6841 23.0125 17.5599 22.9643C10.9409 22.6805 6.454 20.9387 3.75496 17.1258C0.937988 13.1464 0.486328 7.39309 0.486328 0.593262H4.50974C4.50974 7.54693 5.06394 11.9813 7.02477 14.7513Z\"\n                    fill=\"#D9D8FF\"\n                  />\n                </Svg>\n              </StyledBox>\n              <Flex style={{ flex: 1 }}>\n                <RowStyle $level={recursiveLevel} $isActive={isActive} $isCollapsable={isArrayType}>\n                  <CollapseLabel\n                    alignItems=\"center\"\n                    $isCollapsable={isArrayType}\n                    {...(isArrayType && {\n                      onClick: () => handleClickToggleSubLevel(value),\n                      'aria-expanded': isActive,\n                      onKeyDown: ({ key }: React.KeyboardEvent<HTMLDivElement>) =>\n                        (key === 'Enter' || key === ' ') && handleClickToggleSubLevel(value),\n                      tabIndex: 0,\n                      role: 'button',\n                    })}\n                    title={label}\n                  >\n                    <RowLabel ellipsis>{label}</RowLabel>\n                    {required && <RequiredSign />}\n                    <CarretIcon $isActive={isActive} />\n                  </CollapseLabel>\n                </RowStyle>\n                <Flex style={{ flex: 1 }}>\n                  {propertyActions.map(\n                    ({ actionId, label: propertyLabel, isActionRelatedToCurrentProperty }) => {\n                      if (!isActionRelatedToCurrentProperty) {\n                        return <HiddenAction key={actionId} />;\n                      }\n                      /*\n                       * Usually we use a 'dot' in order to know the key path of an object for which we want to change the value.\n                       * Since an action and a subject are both separated by '.' or '::' we chose to use the '..' separators\n                       */\n                      const checkboxName = [\n                        ...pathToDataFromActionRow.split('..'),\n                        actionId,\n                        'properties',\n                        propertyName,\n                        ...parentName.split('..'),\n                        value,\n                      ];\n\n                      const checkboxValue = get(modifiedData, checkboxName, false);\n\n                      if (!subChildrenForm) {\n                        return (\n                          <Flex\n                            key={propertyLabel}\n                            position=\"relative\"\n                            width={cellWidth}\n                            justifyContent=\"center\"\n                            alignItems=\"center\"\n                          >\n                            <Checkbox\n                              disabled={isFormDisabled}\n                              name={checkboxName.join('..')}\n                              aria-label={formatMessage(\n                                {\n                                  id: `Settings.permissions.select-by-permission`,\n                                  defaultMessage: 'Select {label} permission',\n                                },\n                                { label: `${parentName} ${label} ${propertyLabel}` }\n                              )}\n                              onCheckedChange={(value) => {\n                                onChangeSimpleCheckbox({\n                                  target: {\n                                    name: checkboxName.join('..'),\n                                    value: !!value,\n                                  },\n                                });\n                              }}\n                              checked={checkboxValue}\n                            />\n                          </Flex>\n                        );\n                      }\n\n                      const { hasAllActionsSelected, hasSomeActionsSelected } =\n                        getCheckboxState(checkboxValue);\n\n                      return (\n                        <Flex\n                          key={propertyLabel}\n                          position=\"relative\"\n                          width={cellWidth}\n                          justifyContent=\"center\"\n                          alignItems=\"center\"\n                        >\n                          <Checkbox\n                            key={propertyLabel}\n                            disabled={isFormDisabled}\n                            name={checkboxName.join('..')}\n                            aria-label={formatMessage(\n                              {\n                                id: `Settings.permissions.select-by-permission`,\n                                defaultMessage: 'Select {label} permission',\n                              },\n                              { label: `${parentName} ${label} ${propertyLabel}` }\n                            )}\n                            // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                            onCheckedChange={(value) => {\n                              onChangeParentCheckbox({\n                                target: {\n                                  name: checkboxName.join('..'),\n                                  value: !!value,\n                                },\n                              });\n                            }}\n                            checked={\n                              hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected\n                            }\n                          />\n                        </Flex>\n                      );\n                    }\n                  )}\n                </Flex>\n              </Flex>\n            </Flex>\n            {displayedRecursiveChildren && isActive && (\n              <Box paddingBottom={2}>\n                <SubActionRow\n                  isFormDisabled={isFormDisabled}\n                  parentName={`${parentName}..${value}`}\n                  pathToDataFromActionRow={pathToDataFromActionRow}\n                  propertyActions={propertyActions}\n                  propertyName={propertyName}\n                  recursiveLevel={recursiveLevel + 1}\n                  childrenForm={displayedRecursiveChildren.children}\n                />\n              </Box>\n            )}\n          </LeftBorderTimeline>\n        );\n      })}\n    </Box>\n  );\n};\n\nconst LeftBorderTimeline = styled<BoxComponent>(Box)<{ $isVisible?: boolean }>`\n  border-left: ${({ $isVisible, theme }) =>\n    $isVisible ? `4px solid ${theme.colors.primary200}` : '4px solid transparent'};\n`;\n\nconst RowStyle = styled<FlexComponent>(Flex)<{\n  $level: number;\n  $isCollapsable?: boolean;\n  $isActive?: boolean;\n}>`\n  padding-left: ${({ theme }) => theme.spaces[4]};\n  width: ${({ $level }) => 145 - $level * 36}px;\n\n  &:hover {\n    ${({ $isCollapsable, theme }) => $isCollapsable && activeStyle(theme)}\n  }\n\n  ${({ $isCollapsable }) =>\n    $isCollapsable &&\n    `\n      ${CarretIcon} {\n        display: flex;\n      }\n  `}\n  ${({ $isActive, theme }) => $isActive && activeStyle(theme)};\n`;\n\nconst RowLabel = styled<TypographyComponent>(Typography)``;\n\nconst TopTimeline = styled.div`\n  padding-top: ${({ theme }) => theme.spaces[2]};\n  margin-top: ${({ theme }) => theme.spaces[2]};\n  width: 0.4rem;\n  background-color: ${({ theme }) => theme.colors.primary200};\n  border-top-left-radius: 2px;\n  border-top-right-radius: 2px;\n`;\n\nconst StyledBox = styled<BoxComponent>(Box)`\n  transform: translate(-4px, -12px);\n\n  &:before {\n    content: '';\n    width: 0.4rem;\n    height: 1.2rem;\n    background: ${({ theme }) => theme.colors.primary200};\n    display: block;\n  }\n`;\n\nconst Svg = styled.svg<{ $color: keyof DefaultTheme['colors'] }>`\n  position: relative;\n  flex-shrink: 0;\n  transform: translate(-0.5px, -1px);\n\n  * {\n    fill: ${({ theme, $color }) => theme.colors[$color]};\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * Header\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderProps {\n  headers?: PropertyAction[];\n  label: string;\n}\n\nconst Header = ({ headers = [], label }: HeaderProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex>\n      <Flex width={firstRowWidth} height={rowHeight} shrink={0} alignItems=\"center\" paddingLeft={6}>\n        <Typography variant=\"sigma\" textColor=\"neutral500\">\n          {formatMessage(\n            {\n              id: 'Settings.roles.form.permission.property-label',\n              defaultMessage: '{label} permissions',\n            },\n            { label }\n          )}\n        </Typography>\n      </Flex>\n      {headers.map((header) => {\n        if (!header.isActionRelatedToCurrentProperty) {\n          return <Flex width={cellWidth} shrink={0} key={header.label} />;\n        }\n\n        return (\n          <Flex width={cellWidth} shrink={0} justifyContent=\"center\" key={header.label}>\n            <Typography variant=\"sigma\" textColor=\"neutral500\">\n              {formatMessage({\n                id: `Settings.roles.form.permissions.${header.label.toLowerCase()}`,\n                defaultMessage: header.label,\n              })}\n            </Typography>\n          </Flex>\n        );\n      })}\n    </Flex>\n  );\n};\n\nconst activeStyle = (theme: DefaultTheme) => css`\n  color: ${theme.colors.primary600};\n  font-weight: ${theme.fontWeights.bold};\n\n  ${CarretIcon} {\n    path {\n      fill: ${theme.colors.primary600};\n    }\n  }\n`;\n\nexport { CollapsePropertyMatrix };\n", "import * as React from 'react';\n\nimport { Box, BoxComponent, Button, ButtonProps } from '@strapi/design-system';\nimport { Cog } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\ninterface ConditionsButtonProps extends Pick<ButtonProps, 'className' | 'onClick' | 'variant'> {\n  hasConditions?: boolean;\n}\n\nconst ConditionsButtonImpl = React.forwardRef<HTMLButtonElement, ConditionsButtonProps>(\n  ({ onClick, className, hasConditions = false, variant = 'tertiary' }, ref) => {\n    const { formatMessage } = useIntl();\n\n    return (\n      <ButtonContainer $hasConditions={hasConditions} className={className}>\n        <Button variant={variant} startIcon={<Cog />} onClick={onClick} ref={ref} type=\"button\">\n          {formatMessage({\n            id: 'global.settings',\n            defaultMessage: 'Settings',\n          })}\n        </Button>\n      </ButtonContainer>\n    );\n  }\n);\n\nconst ButtonContainer = styled<BoxComponent>(Box)<{ $hasConditions?: boolean }>`\n  ${({ $hasConditions, theme }) =>\n    $hasConditions &&\n    `\n    &:before {\n      content: '';\n      position: absolute;\n      top: -3px;\n      left: -10px;\n      width: 6px;\n      height: 6px;\n      border-radius: 2rem;\n      background: ${theme.colors.primary600};\n    }\n  `}\n`;\n\n/**\n * We reference the component directly in other styled-components\n * and as such we need it to have a className already assigned.\n * Therefore we wrapped the implementation in a styled function.\n */\nconst ConditionsButton = styled(ConditionsButtonImpl)``;\n\nexport { ConditionsButton };\nexport type { ConditionsButtonProps };\n", "import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  Flex,\n  Modal,\n  MultiSelectNested,\n  MultiSelectNestedProps,\n  Typography,\n  Breadcrumbs,\n  Crumb,\n} from '@strapi/design-system';\nimport { produce } from 'immer';\nimport get from 'lodash/get';\nimport groupBy from 'lodash/groupBy';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\n\nimport { capitalise } from '../../../../../utils/strings';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\n\nimport type { HiddenCheckboxAction, VisibleCheckboxAction } from './ContentTypeCollapses';\nimport type { ConditionForm } from '../utils/forms';\n\n/* -------------------------------------------------------------------------------------------------\n * ConditionsModal\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ConditionAction extends Pick<ActionRowProps, 'label'> {\n  actionId: string;\n  isDisplayed: boolean;\n  hasSomeActionsSelected?: boolean;\n  hasAllActionsSelected?: boolean;\n  pathToConditionsObject: string[];\n}\n\ninterface ConditionsModalProps extends Pick<ActionRowProps, 'isFormDisabled'> {\n  actions?: Array<ConditionAction | HiddenCheckboxAction | VisibleCheckboxAction>;\n  headerBreadCrumbs?: string[];\n  onClose?: () => void;\n}\n\nconst ConditionsModal = ({\n  actions = [],\n  headerBreadCrumbs = [],\n  isFormDisabled,\n  onClose,\n}: ConditionsModalProps) => {\n  const { formatMessage } = useIntl();\n  const { availableConditions, modifiedData, onChangeConditions } = usePermissionsDataManager();\n\n  const arrayOfOptionsGroupedByCategory = React.useMemo(() => {\n    return Object.entries(groupBy(availableConditions, 'category'));\n  }, [availableConditions]);\n\n  const actionsToDisplay = actions.filter<VisibleCheckboxAction | ConditionAction>(\n    // @ts-expect-error – TODO: fix this type issue\n    ({ isDisplayed, hasSomeActionsSelected, hasAllActionsSelected }) =>\n      isDisplayed && Boolean(hasSomeActionsSelected || hasAllActionsSelected)\n  );\n\n  const [state, setState] = React.useState(\n    createDefaultConditionsForm(actionsToDisplay, modifiedData, arrayOfOptionsGroupedByCategory)\n  );\n\n  const handleChange = (name: string, values: ConditionForm) => {\n    setState(\n      produce((draft) => {\n        if (!draft[name]) {\n          draft[name] = {};\n        }\n\n        if (!draft[name].default) {\n          draft[name].default = {};\n        }\n\n        draft[name].default = values;\n      })\n    );\n  };\n\n  const handleSubmit = () => {\n    const conditionsWithoutCategory = Object.entries(state).reduce<Record<string, ConditionForm>>(\n      (acc, current) => {\n        const [key, value] = current;\n\n        const merged = Object.values(value).reduce((acc1, current1) => {\n          return { ...acc1, ...current1 };\n        }, {});\n\n        acc[key] = merged;\n\n        return acc;\n      },\n      {}\n    );\n\n    onChangeConditions(conditionsWithoutCategory);\n    onClose && onClose();\n  };\n\n  const onCloseModal = () => {\n    setState(\n      createDefaultConditionsForm(actionsToDisplay, modifiedData, arrayOfOptionsGroupedByCategory)\n    );\n\n    onClose && onClose();\n  };\n\n  return (\n    <Modal.Content>\n      <Modal.Header>\n        <Breadcrumbs id=\"condition-modal-breadcrumbs\" label={headerBreadCrumbs.join(', ')}>\n          {headerBreadCrumbs.map((label, index, arr) => (\n            <Crumb isCurrent={index === arr.length - 1} key={label}>\n              {upperFirst(\n                formatMessage({\n                  id: label,\n                  defaultMessage: label,\n                })\n              )}\n            </Crumb>\n          ))}\n        </Breadcrumbs>\n      </Modal.Header>\n      <Modal.Body>\n        {actionsToDisplay.length === 0 && (\n          <Typography>\n            {formatMessage({\n              id: 'Settings.permissions.conditions.no-actions',\n              defaultMessage:\n                'You first need to select actions (create, read, update, ...) before defining conditions on them.',\n            })}\n          </Typography>\n        )}\n        <ul>\n          {actionsToDisplay.map(({ actionId, label, pathToConditionsObject }, index) => {\n            const name = pathToConditionsObject.join('..');\n\n            return (\n              <ActionRow\n                key={actionId}\n                arrayOfOptionsGroupedByCategory={arrayOfOptionsGroupedByCategory}\n                label={label}\n                isFormDisabled={isFormDisabled}\n                isGrey={index % 2 === 0}\n                name={name}\n                onChange={handleChange}\n                value={get(state, name, {})}\n              />\n            );\n          })}\n        </ul>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"tertiary\" onClick={() => onCloseModal()}>\n          {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n        </Button>\n        <Button onClick={handleSubmit}>\n          {formatMessage({\n            id: 'Settings.permissions.conditions.apply',\n            defaultMessage: 'Apply',\n          })}\n        </Button>\n      </Modal.Footer>\n    </Modal.Content>\n  );\n};\n\nconst createDefaultConditionsForm = (\n  actionsToDisplay: Array<ConditionAction | VisibleCheckboxAction>,\n  modifiedData: PermissionsDataManagerContextValue['modifiedData'],\n  arrayOfOptionsGroupedByCategory: ActionRowProps['arrayOfOptionsGroupedByCategory']\n) => {\n  return actionsToDisplay.reduce<Record<string, Record<string, ConditionForm>>>((acc, current) => {\n    const valueFromModifiedData: ConditionForm = get(\n      modifiedData,\n      [...current.pathToConditionsObject, 'conditions'],\n      {}\n    );\n\n    const categoryDefaultForm = arrayOfOptionsGroupedByCategory.reduce<\n      Record<string, ConditionForm>\n    >((acc, current) => {\n      const [categoryName, relatedConditions] = current;\n\n      const conditionsForm = relatedConditions.reduce<ConditionForm>((acc, current) => {\n        acc[current.id] = get(valueFromModifiedData, current.id, false);\n\n        return acc;\n      }, {});\n\n      acc[categoryName] = conditionsForm;\n\n      return acc;\n    }, {});\n\n    acc[current.pathToConditionsObject.join('..')] = categoryDefaultForm;\n\n    return acc;\n  }, {});\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ActionRow\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ActionRowProps {\n  arrayOfOptionsGroupedByCategory: Array<\n    [string, PermissionsDataManagerContextValue['availableConditions']]\n  >;\n  isFormDisabled?: boolean;\n  isGrey?: boolean;\n  label: string;\n  name: string;\n  onChange?: (name: string, values: Record<string, boolean>) => void;\n  value: Record<string, ConditionForm>;\n}\n\nconst ActionRow = ({\n  arrayOfOptionsGroupedByCategory,\n  isFormDisabled = false,\n  isGrey = false,\n  label,\n  name,\n  onChange,\n  value,\n}: ActionRowProps) => {\n  const { formatMessage } = useIntl();\n\n  const handleChange: MultiSelectNestedProps['onChange'] = (val) => {\n    if (onChange) {\n      onChange(name, getNewStateFromChangedValues(arrayOfOptionsGroupedByCategory, val));\n    }\n  };\n\n  return (\n    <Flex\n      tag=\"li\"\n      background={isGrey ? 'neutral100' : 'neutral0'}\n      paddingBottom={3}\n      paddingTop={3}\n      justifyContent={'space-evenly'}\n    >\n      <Flex style={{ width: 180 }}>\n        <Typography variant=\"sigma\" textColor=\"neutral600\">\n          {formatMessage({\n            id: 'Settings.permissions.conditions.can',\n            defaultMessage: 'Can',\n          })}\n          &nbsp;\n        </Typography>\n        <Typography variant=\"sigma\" title={label} textColor=\"primary600\" ellipsis>\n          {formatMessage({\n            id: `Settings.roles.form.permissions.${label.toLowerCase()}`,\n            defaultMessage: label,\n          })}\n        </Typography>\n        <Typography variant=\"sigma\" textColor=\"neutral600\">\n          &nbsp;\n          {formatMessage({\n            id: 'Settings.permissions.conditions.when',\n            defaultMessage: 'When',\n          })}\n        </Typography>\n      </Flex>\n      <Box style={{ maxWidth: 430, width: '100%' }}>\n        <MultiSelectNested\n          id={name}\n          customizeContent={(values = []) => `${values.length} currently selected`}\n          onChange={handleChange}\n          value={getSelectedValues(value)}\n          options={getNestedOptions(arrayOfOptionsGroupedByCategory)}\n          disabled={isFormDisabled}\n        />\n      </Box>\n    </Flex>\n  );\n};\n\nconst getSelectedValues = (rawValue: Record<string, ConditionForm>): string[] =>\n  Object.values(rawValue)\n    .map((x) =>\n      Object.entries(x)\n        .filter(([, value]) => value)\n        .map(([key]) => key)\n    )\n    .flat();\n\nconst getNestedOptions = (options: ActionRowProps['arrayOfOptionsGroupedByCategory']) =>\n  options.reduce<MultiSelectNestedProps['options']>((acc, [label, children]) => {\n    acc.push({\n      label: capitalise(label),\n      children: children.map((child) => ({\n        label: child.displayName,\n        value: child.id,\n      })),\n    });\n\n    return acc;\n  }, []);\n\nconst getNewStateFromChangedValues = (\n  options: ActionRowProps['arrayOfOptionsGroupedByCategory'],\n  changedValues: string[]\n) =>\n  options\n    .map(([, values]) => values)\n    .flat()\n    .reduce<Record<string, boolean>>(\n      (acc, curr) => ({ [curr.id]: changedValues.includes(curr.id), ...acc }),\n      {}\n    );\n\nexport { ConditionsModal };\nexport type { ConditionsModalProps };\n", "import * as React from 'react';\n\nimport { Checkbox, Box, BoxComponent, Flex, FlexComponent, Modal } from '@strapi/design-system';\nimport { ChevronDown, ChevronUp } from '@strapi/icons';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport omit from 'lodash/omit';\nimport { useIntl } from 'react-intl';\nimport { styled, DefaultTheme } from 'styled-components';\n\nimport { Action, Subject } from '../../../../../../../shared/contracts/permissions';\nimport { capitalise } from '../../../../../utils/strings';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\nimport { cellWidth, rowHeight } from '../utils/constants';\nimport { createArrayOfValues } from '../utils/createArrayOfValues';\nimport { ConditionForm } from '../utils/forms';\nimport { getCheckboxState } from '../utils/getCheckboxState';\n\nimport { CollapsePropertyMatrix } from './CollapsePropertyMatrix';\nimport { ConditionsButton } from './ConditionsButton';\nimport { ConditionsModal } from './ConditionsModal';\nimport { HiddenAction } from './HiddenAction';\nimport { RowLabelWithCheckbox, RowLabelWithCheckboxProps } from './RowLabelWithCheckbox';\n\n/* -------------------------------------------------------------------------------------------------\n * ContentTypeCollapses\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ContentTypeCollapsesProps extends Pick<CollapseProps, 'pathToData'> {\n  actions?: Action[];\n  isFormDisabled?: boolean;\n  subjects?: Subject[];\n}\n\nconst ContentTypeCollapses = ({\n  actions = [],\n  isFormDisabled,\n  pathToData,\n  subjects = [],\n}: ContentTypeCollapsesProps) => {\n  const [collapseToOpen, setCollapseToOpen] = React.useState<string | null>(null);\n\n  const handleClickToggleCollapse = (collapseName: string) => () => {\n    const nextCollapseToOpen = collapseToOpen === collapseName ? null : collapseName;\n\n    setCollapseToOpen(nextCollapseToOpen);\n  };\n\n  return (\n    <>\n      {subjects.map(({ uid, label, properties }, index) => {\n        const isActive = collapseToOpen === uid;\n        const availableActions = actions.map((action) => ({\n          ...action,\n          isDisplayed: Array.isArray(action.subjects) && action.subjects.indexOf(uid) !== -1,\n        }));\n        return (\n          <Flex\n            key={uid}\n            direction=\"column\"\n            display=\"inline-flex\"\n            alignItems=\"stretch\"\n            minWidth=\"100%\"\n            borderColor={isActive ? 'primary600' : undefined}\n          >\n            <Collapse\n              availableActions={availableActions}\n              isActive={isActive}\n              isGrey={index % 2 === 0}\n              isFormDisabled={isFormDisabled}\n              label={label}\n              onClickToggle={handleClickToggleCollapse(uid)}\n              pathToData={[pathToData, uid].join('..')}\n            />\n            {isActive &&\n              properties.map(({ label: propertyLabel, value, children: childrenForm }) => {\n                return (\n                  <CollapsePropertyMatrix\n                    availableActions={availableActions}\n                    childrenForm={childrenForm}\n                    isFormDisabled={isFormDisabled}\n                    label={propertyLabel}\n                    pathToData={[pathToData, uid].join('..')}\n                    propertyName={value}\n                    key={value}\n                  />\n                );\n              })}\n          </Flex>\n        );\n      })}\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Collapse\n * -----------------------------------------------------------------------------------------------*/\n\ninterface CollapseProps\n  extends Pick<RowLabelWithCheckboxProps, 'isActive' | 'isFormDisabled' | 'label'> {\n  availableActions?: Array<Action & { isDisplayed: boolean }>;\n  isGrey?: boolean;\n  onClickToggle: RowLabelWithCheckboxProps['onClick'];\n  pathToData: string;\n}\n\nconst Collapse = ({\n  availableActions = [],\n  isActive = false,\n  isGrey = false,\n  isFormDisabled = false,\n  label,\n  onClickToggle,\n  pathToData,\n}: CollapseProps) => {\n  const { formatMessage } = useIntl();\n  const { modifiedData, onChangeParentCheckbox, onChangeSimpleCheckbox } =\n    usePermissionsDataManager();\n  const [isConditionModalOpen, setIsConditionModalOpen] = React.useState(false);\n\n  // This corresponds to the data related to the CT left checkbox\n  // modifiedData: { collectionTypes: { [ctuid]: {create: {properties: { fields: {f1: true} }, update: {}, ... } } } }\n  const mainData = get(modifiedData, pathToData.split('..'), {});\n  // The utils we are using: getCheckboxState, retrieves all the boolean leafs of an object in order\n  // to return the state of checkbox. Since the conditions are not related to the property we need to remove the key from the object.\n  const dataWithoutCondition = React.useMemo(() => {\n    return Object.keys(mainData).reduce<Record<string, ConditionForm>>((acc, current) => {\n      acc[current] = omit(mainData[current], 'conditions');\n\n      return acc;\n    }, {});\n  }, [mainData]);\n\n  const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(dataWithoutCondition);\n\n  // Here we create an array of <checkbox>, since the state of each one of them is used in\n  // order to know if whether or not we need to display the associated action in\n  // the <ConditionsModal />\n  const checkboxesActions = React.useMemo(() => {\n    return generateCheckboxesActions(availableActions, modifiedData, pathToData);\n  }, [availableActions, modifiedData, pathToData]);\n\n  // @ts-expect-error – hasConditions does not exist on all versions of checkboxesActions.\n  const doesConditionButtonHasConditions = checkboxesActions.some((action) => action.hasConditions);\n\n  return (\n    <BoxWrapper $isActive={isActive}>\n      <Wrapper\n        height={rowHeight}\n        flex={1}\n        alignItems=\"center\"\n        background={isGrey ? 'neutral100' : 'neutral0'}\n      >\n        <RowLabelWithCheckbox\n          isCollapsable\n          isFormDisabled={isFormDisabled}\n          label={capitalise(label)}\n          checkboxName={pathToData}\n          onChange={onChangeParentCheckbox}\n          onClick={onClickToggle}\n          someChecked={hasSomeActionsSelected}\n          value={hasAllActionsSelected}\n          isActive={isActive}\n        >\n          <Chevron paddingLeft={2}>{isActive ? <ChevronUp /> : <ChevronDown />}</Chevron>\n        </RowLabelWithCheckbox>\n\n        <Flex style={{ flex: 1 }}>\n          {checkboxesActions.map(\n            ({ actionId, hasSomeActionsSelected, isDisplayed, ...restAction }) => {\n              if (!isDisplayed) {\n                return <HiddenAction key={actionId} />;\n              }\n\n              const {\n                hasConditions,\n                hasAllActionsSelected,\n                isParentCheckbox,\n                checkboxName,\n                label: permissionLabel,\n              } = restAction as VisibleCheckboxAction;\n\n              if (isParentCheckbox) {\n                return (\n                  <Cell key={actionId} justifyContent=\"center\" alignItems=\"center\">\n                    {hasConditions && (\n                      <Box\n                        tag=\"span\"\n                        position=\"absolute\"\n                        top=\"-6px\"\n                        left=\"37px\"\n                        width=\"6px\"\n                        height=\"6px\"\n                        borderRadius=\"20px\"\n                        background=\"primary600\"\n                      />\n                    )}\n                    <Checkbox\n                      disabled={isFormDisabled}\n                      name={checkboxName}\n                      aria-label={formatMessage(\n                        {\n                          id: `Settings.permissions.select-by-permission`,\n                          defaultMessage: 'Select {label} permission',\n                        },\n                        { label: `${permissionLabel} ${label}` }\n                      )}\n                      // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                      onCheckedChange={(value) => {\n                        onChangeParentCheckbox({\n                          target: {\n                            name: checkboxName,\n                            value: !!value,\n                          },\n                        });\n                      }}\n                      checked={hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected}\n                    />\n                  </Cell>\n                );\n              }\n\n              return (\n                <Cell key={actionId} justifyContent=\"center\" alignItems=\"center\">\n                  {hasConditions && (\n                    <Box\n                      tag=\"span\"\n                      position=\"absolute\"\n                      top=\"-6px\"\n                      left=\"37px\"\n                      width=\"6px\"\n                      height=\"6px\"\n                      borderRadius=\"20px\"\n                      background=\"primary600\"\n                    />\n                  )}\n                  <Checkbox\n                    disabled={isFormDisabled}\n                    name={checkboxName}\n                    // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                    onCheckedChange={(value) => {\n                      onChangeSimpleCheckbox({\n                        target: {\n                          name: checkboxName,\n                          value: !!value,\n                        },\n                      });\n                    }}\n                    checked={hasConditions ? 'indeterminate' : hasAllActionsSelected}\n                  />\n                </Cell>\n              );\n            }\n          )}\n        </Flex>\n      </Wrapper>\n      <Box bottom=\"10px\" right=\"9px\" position=\"absolute\">\n        <Modal.Root\n          open={isConditionModalOpen}\n          onOpenChange={() => {\n            setIsConditionModalOpen((prev) => !prev);\n          }}\n        >\n          <Modal.Trigger>\n            <ConditionsButton hasConditions={doesConditionButtonHasConditions} />\n          </Modal.Trigger>\n          <ConditionsModal\n            headerBreadCrumbs={[label, 'Settings.permissions.conditions.conditions']}\n            actions={checkboxesActions}\n            isFormDisabled={isFormDisabled}\n            onClose={() => {\n              setIsConditionModalOpen(false);\n            }}\n          />\n        </Modal.Root>\n      </Box>\n    </BoxWrapper>\n  );\n};\n\ninterface VisibleCheckboxAction {\n  actionId: string;\n  hasAllActionsSelected: boolean;\n  hasSomeActionsSelected: boolean;\n  isDisplayed: true;\n  isParentCheckbox: boolean;\n  checkboxName: string;\n  label: string;\n  hasConditions: boolean;\n  pathToConditionsObject: string[];\n}\n\ninterface HiddenCheckboxAction {\n  actionId: string;\n  isDisplayed: false;\n  hasAllActionsSelected?: never;\n  hasSomeActionsSelected: boolean;\n}\n\nconst generateCheckboxesActions = (\n  availableActions: Array<Action & { isDisplayed: boolean }>,\n  modifiedData: PermissionsDataManagerContextValue['modifiedData'],\n  pathToData: string\n): Array<VisibleCheckboxAction | HiddenCheckboxAction> => {\n  return availableActions.map(({ actionId, isDisplayed, applyToProperties, label }) => {\n    if (!isDisplayed) {\n      return { actionId, hasSomeActionsSelected: false, isDisplayed };\n    }\n\n    const baseCheckboxNameArray = [...pathToData.split('..'), actionId];\n    const checkboxNameArray = isEmpty(applyToProperties)\n      ? [...baseCheckboxNameArray, 'properties', 'enabled']\n      : baseCheckboxNameArray;\n    const conditionsValue = get(modifiedData, [...baseCheckboxNameArray, 'conditions'], null);\n\n    const baseCheckboxAction = {\n      actionId,\n      checkboxName: checkboxNameArray.join('..'),\n      hasConditions: createArrayOfValues(conditionsValue).some((val) => val),\n      isDisplayed,\n      label,\n      pathToConditionsObject: baseCheckboxNameArray,\n    };\n\n    if (isEmpty(applyToProperties)) {\n      const value = get(modifiedData, checkboxNameArray, false);\n\n      // Since applyToProperties is empty it is not a parent checkbox, therefore hasAllActionsSelected is\n      // equal to hasSomeActionsSelected\n      return {\n        ...baseCheckboxAction,\n        hasAllActionsSelected: value,\n        hasSomeActionsSelected: value,\n        isParentCheckbox: false,\n      };\n    }\n\n    const mainData = get(modifiedData, checkboxNameArray, null);\n\n    const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(mainData);\n\n    return {\n      ...baseCheckboxAction,\n      hasAllActionsSelected,\n      hasSomeActionsSelected,\n      isParentCheckbox: true,\n    };\n  });\n};\n\nconst activeRowStyle = (theme: DefaultTheme, isActive?: boolean): string => `\n  ${Wrapper} {\n    background-color: ${theme.colors.primary100};\n    color: ${theme.colors.primary600};\n    border-radius: ${isActive ? '2px 2px 0 0' : '2px'};\n    font-weight: ${theme.fontWeights.bold};\n  }\n\n  ${Chevron} {\n    display: flex;\n  }\n  ${ConditionsButton} {\n    display: block;\n  }\n\n  &:focus-within {\n    ${() => activeRowStyle(theme, isActive)}\n  }\n`;\n\nconst Wrapper = styled<FlexComponent>(Flex)`\n  border: 1px solid transparent;\n`;\n\nconst BoxWrapper = styled.div<{ $isActive: boolean }>`\n  display: inline-flex;\n  min-width: 100%;\n  position: relative;\n\n  ${ConditionsButton} {\n    display: none;\n  }\n\n  ${({ $isActive, theme }) => $isActive && activeRowStyle(theme, $isActive)}\n\n  &:hover {\n    ${({ theme, $isActive }) => activeRowStyle(theme, $isActive)}\n  }\n`;\n\nconst Cell = styled<FlexComponent>(Flex)`\n  width: ${cellWidth};\n  position: relative;\n`;\n\nconst Chevron = styled<BoxComponent>(Box)`\n  display: none;\n\n  svg {\n    width: 1.4rem;\n  }\n\n  path {\n    fill: ${({ theme }) => theme.colors.primary600};\n  }\n`;\n\nexport { ContentTypeCollapses };\nexport type { ContentTypeCollapsesProps, HiddenCheckboxAction, VisibleCheckboxAction };\n", "import * as React from 'react';\n\nimport { Checkbox, Box, Flex, Typography } from '@strapi/design-system';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\n\nimport { Action } from '../../../../../../../shared/contracts/permissions';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\nimport { cellWidth, firstRowWidth } from '../utils/constants';\nimport { RecursiveRecordOfBooleans, getCheckboxState } from '../utils/getCheckboxState';\nimport { removeConditionKeyFromData } from '../utils/removeConditionKeyFromData';\n\ninterface GlobalActionsProps {\n  actions: Action[];\n  isFormDisabled?: boolean;\n  kind: Extract<keyof PermissionsDataManagerContextValue['modifiedData'], `${string}Types`>;\n}\n\nconst GlobalActions = ({ actions = [], isFormDisabled, kind }: GlobalActionsProps) => {\n  const { formatMessage } = useIntl();\n  const { modifiedData, onChangeCollectionTypeGlobalActionCheckbox } = usePermissionsDataManager();\n\n  const displayedActions = actions.filter(({ subjects }) => subjects && subjects.length);\n\n  const checkboxesState = React.useMemo(() => {\n    const actionsIds = displayedActions.map(({ actionId }) => actionId);\n\n    const data = modifiedData[kind];\n\n    const relatedActionsData = actionsIds.reduce<Record<string, RecursiveRecordOfBooleans>>(\n      (acc, actionId) => {\n        Object.keys(data).forEach((ctUid) => {\n          const actionIdData = get(data, [ctUid, actionId]);\n\n          const actionIdState = { [ctUid]: removeConditionKeyFromData(actionIdData)! };\n\n          if (!acc[actionId]) {\n            acc[actionId] = actionIdState;\n          } else {\n            acc[actionId] = { ...acc[actionId], ...actionIdState };\n          }\n        });\n\n        return acc;\n      },\n      {}\n    );\n\n    const checkboxesState = Object.keys(relatedActionsData).reduce<\n      Record<\n        string,\n        {\n          hasAllActionsSelected: boolean;\n          hasSomeActionsSelected: boolean;\n        }\n      >\n    >((acc, current) => {\n      acc[current] = getCheckboxState(relatedActionsData[current]);\n\n      return acc;\n    }, {});\n\n    return checkboxesState;\n  }, [modifiedData, displayedActions, kind]);\n\n  return (\n    <Box paddingBottom={4} paddingTop={6} style={{ paddingLeft: firstRowWidth }}>\n      <Flex gap={0}>\n        {displayedActions.map(({ label, actionId }) => {\n          return (\n            <Flex\n              shrink={0}\n              width={cellWidth}\n              direction=\"column\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              key={actionId}\n              gap={3}\n            >\n              <Typography variant=\"sigma\" textColor=\"neutral500\">\n                {formatMessage({\n                  id: `Settings.roles.form.permissions.${label.toLowerCase()}`,\n                  defaultMessage: label,\n                })}\n              </Typography>\n              <Checkbox\n                disabled={isFormDisabled}\n                onCheckedChange={(value) => {\n                  onChangeCollectionTypeGlobalActionCheckbox(kind, actionId, !!value);\n                }}\n                name={actionId}\n                aria-label={formatMessage(\n                  {\n                    id: `Settings.permissions.select-all-by-permission`,\n                    defaultMessage: 'Select all {label} permissions',\n                  },\n                  {\n                    label: formatMessage({\n                      id: `Settings.roles.form.permissions.${label.toLowerCase()}`,\n                      defaultMessage: label,\n                    }),\n                  }\n                )}\n                checked={\n                  get(checkboxesState, [actionId, 'hasSomeActionsSelected'], false)\n                    ? 'indeterminate'\n                    : get(checkboxesState, [actionId, 'hasAllActionsSelected'], false)\n                }\n              />\n            </Flex>\n          );\n        })}\n      </Flex>\n    </Box>\n  );\n};\n\nexport { GlobalActions };\nexport type { GlobalActionsProps };\n", "import { Box } from '@strapi/design-system';\n\nimport { ContentPermission } from '../../../../../../../shared/contracts/permissions';\n\nimport { ContentTypeCollapses } from './ContentTypeCollapses';\nimport { GlobalActions, GlobalActionsProps } from './GlobalActions';\n\ninterface ContentTypesProps extends Pick<GlobalActionsProps, 'kind'> {\n  isFormDisabled?: boolean;\n  layout: ContentPermission;\n}\n\nconst ContentTypes = ({\n  isFormDisabled,\n  kind,\n  layout: { actions, subjects },\n}: ContentTypesProps) => {\n  const sortedSubjects = [...subjects].sort((a, b) => a.label.localeCompare(b.label));\n\n  return (\n    <Box background=\"neutral0\">\n      <GlobalActions actions={actions} kind={kind} isFormDisabled={isFormDisabled} />\n      <ContentTypeCollapses\n        actions={actions}\n        isFormDisabled={isFormDisabled}\n        pathToData={kind}\n        subjects={sortedSubjects}\n      />\n    </Box>\n  );\n};\n\nexport { ContentTypes };\n", "import * as React from 'react';\n\nimport {\n  Accordion,\n  Box,\n  BoxComponent,\n  Checkbox,\n  Flex,\n  Grid,\n  Modal,\n  Typography,\n} from '@strapi/design-system';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport {\n  SettingPermission,\n  PluginPermission,\n} from '../../../../../../../shared/contracts/permissions';\nimport { capitalise } from '../../../../../utils/strings';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\nimport { createArrayOfValues } from '../utils/createArrayOfValues';\nimport { ChildrenForm, ConditionForm } from '../utils/forms';\nimport { RecursiveRecordOfBooleans, getCheckboxState } from '../utils/getCheckboxState';\nimport { removeConditionKeyFromData } from '../utils/removeConditionKeyFromData';\n\nimport { ConditionsButton } from './ConditionsButton';\nimport { ConditionsModal } from './ConditionsModal';\n\nimport type { GenericLayout } from '../utils/layouts';\n\n/* -------------------------------------------------------------------------------------------------\n * PluginsAndSettingsPermissions\n * -----------------------------------------------------------------------------------------------*/\n\ntype Layout = GenericLayout<SettingPermission | PluginPermission>[];\n\ninterface PluginsAndSettingsPermissionsProps extends Pick<RowProps, 'kind' | 'isFormDisabled'> {\n  layout: Layout;\n}\n\nconst PluginsAndSettingsPermissions = ({\n  layout,\n  ...restProps\n}: PluginsAndSettingsPermissionsProps) => {\n  return (\n    <Box padding={6} background=\"neutral0\">\n      <Accordion.Root size=\"M\">\n        {layout.map(({ category, categoryId, childrenForm }, index) => {\n          return (\n            <Row\n              key={category}\n              childrenForm={childrenForm}\n              variant={index % 2 === 1 ? 'primary' : 'secondary'}\n              name={category}\n              pathToData={[restProps.kind, categoryId]}\n              {...restProps}\n            />\n          );\n        })}\n      </Accordion.Root>\n    </Box>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Row\n * -----------------------------------------------------------------------------------------------*/\n\ninterface RowProps\n  extends Pick<Layout[number], 'childrenForm'>,\n    Pick<Accordion.HeaderProps, 'variant'> {\n  kind: Exclude<keyof PermissionsDataManagerContextValue['modifiedData'], `${string}Types`>;\n  name: string;\n  isFormDisabled?: boolean;\n  pathToData: string[];\n}\n\nconst Row = ({\n  childrenForm,\n  kind,\n  name,\n  isFormDisabled = false,\n  variant,\n  pathToData,\n}: RowProps) => {\n  const { formatMessage } = useIntl();\n\n  const categoryName = name.split('::').pop() ?? '';\n\n  return (\n    <Accordion.Item value={name}>\n      <Accordion.Header variant={variant}>\n        <Accordion.Trigger\n          caretPosition=\"right\"\n          description={`${formatMessage(\n            { id: 'Settings.permissions.category', defaultMessage: categoryName },\n            { category: categoryName }\n          )} ${kind === 'plugins' ? 'plugin' : kind}`}\n        >\n          {capitalise(categoryName)}\n        </Accordion.Trigger>\n      </Accordion.Header>\n      <Accordion.Content>\n        <Box padding={6}>\n          {childrenForm.map(({ actions, subCategoryName, subCategoryId }) => (\n            <SubCategory\n              key={subCategoryName}\n              actions={actions}\n              categoryName={categoryName}\n              isFormDisabled={isFormDisabled}\n              subCategoryName={subCategoryName}\n              pathToData={[...pathToData, subCategoryId]}\n            />\n          ))}\n        </Box>\n      </Accordion.Content>\n    </Accordion.Item>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * SubCategory\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SubCategoryProps {\n  actions?: Array<SettingPermission | PluginPermission>;\n  categoryName: string;\n  isFormDisabled?: boolean;\n  subCategoryName: string;\n  pathToData: string[];\n}\n\nconst SubCategory = ({\n  actions = [],\n  categoryName,\n  isFormDisabled,\n  subCategoryName,\n  pathToData,\n}: SubCategoryProps) => {\n  const { modifiedData, onChangeParentCheckbox, onChangeSimpleCheckbox } =\n    usePermissionsDataManager();\n  const [isConditionModalOpen, setIsConditionModalOpen] = React.useState(false);\n  const { formatMessage } = useIntl();\n\n  const mainData = get(modifiedData, pathToData, {});\n\n  const dataWithoutCondition = React.useMemo(() => {\n    return Object.keys(mainData).reduce<RecursiveRecordOfBooleans>((acc, current) => {\n      acc[current] = removeConditionKeyFromData(mainData[current])!;\n\n      return acc;\n    }, {});\n  }, [mainData]);\n\n  const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(dataWithoutCondition);\n\n  // We need to format the actions so it matches the shape of the ConditionsModal actions props\n  const formattedActions = React.useMemo(() => {\n    return actions.map((action) => {\n      const checkboxName = [...pathToData, action.action, 'properties', 'enabled'];\n      const checkboxValue = get(modifiedData, checkboxName, false);\n      const conditionValue = get(modifiedData, [...pathToData, action.action, 'conditions'], {});\n      const hasConditions = createArrayOfValues(conditionValue).some((val) => val);\n\n      return {\n        ...action,\n        isDisplayed: checkboxValue,\n        checkboxName: checkboxName.join('..'),\n        hasSomeActionsSelected: checkboxValue,\n        value: checkboxValue,\n        hasConditions,\n        label: action.displayName,\n        actionId: action.action,\n        pathToConditionsObject: [...pathToData, action.action],\n      };\n    });\n  }, [actions, modifiedData, pathToData]);\n\n  const datum: ChildrenForm = get(modifiedData, [...pathToData], {});\n\n  const doesButtonHasCondition = createArrayOfValues(\n    Object.entries(datum).reduce<Record<string, ConditionForm>>((acc, current) => {\n      const [catName, { conditions }] = current;\n\n      acc[catName] = conditions;\n\n      return acc;\n    }, {})\n  ).some((val) => val);\n\n  return (\n    <>\n      <Box>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Box paddingRight={4}>\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\n              {subCategoryName}\n            </Typography>\n          </Box>\n          <Border flex={1} />\n          <Box paddingLeft={4}>\n            <Checkbox\n              name={pathToData.join('..')}\n              disabled={isFormDisabled}\n              // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n              onCheckedChange={(value) => {\n                onChangeParentCheckbox({\n                  target: {\n                    name: pathToData.join('..'),\n                    value: !!value,\n                  },\n                });\n              }}\n              checked={hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected}\n            >\n              {formatMessage({ id: 'app.utils.select-all', defaultMessage: 'Select all' })}\n            </Checkbox>\n          </Box>\n        </Flex>\n        <Flex paddingTop={6} paddingBottom={6}>\n          <Grid.Root gap={2} style={{ flex: 1 }}>\n            {formattedActions.map(({ checkboxName, value, action, displayName, hasConditions }) => {\n              return (\n                <Grid.Item col={3} key={action} direction=\"column\" alignItems=\"start\">\n                  <CheckboxWrapper $disabled={isFormDisabled} $hasConditions={hasConditions}>\n                    <Checkbox\n                      name={checkboxName}\n                      disabled={isFormDisabled}\n                      // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                      onCheckedChange={(value) => {\n                        onChangeSimpleCheckbox({\n                          target: {\n                            name: checkboxName,\n                            value: !!value,\n                          },\n                        });\n                      }}\n                      checked={value}\n                    >\n                      {displayName}\n                    </Checkbox>\n                  </CheckboxWrapper>\n                </Grid.Item>\n              );\n            })}\n          </Grid.Root>\n          <Modal.Root\n            open={isConditionModalOpen}\n            onOpenChange={() => {\n              setIsConditionModalOpen((prev) => !prev);\n            }}\n          >\n            <Modal.Trigger>\n              <ConditionsButton hasConditions={doesButtonHasCondition} />\n            </Modal.Trigger>\n            <ConditionsModal\n              headerBreadCrumbs={[categoryName, subCategoryName]}\n              actions={formattedActions}\n              isFormDisabled={isFormDisabled}\n              onClose={() => {\n                setIsConditionModalOpen(false);\n              }}\n            />\n          </Modal.Root>\n        </Flex>\n      </Box>\n    </>\n  );\n};\n\nconst Border = styled<BoxComponent>(Box)`\n  align-self: center;\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\n`;\n\nconst CheckboxWrapper = styled.div<{ $hasConditions?: boolean; $disabled?: boolean }>`\n  position: relative;\n  word-break: keep-all;\n  ${({ $hasConditions, $disabled, theme }) =>\n    $hasConditions &&\n    `\n    &:before {\n      content: '';\n      position: absolute;\n      top: -0.4rem;\n      left: -0.8rem;\n      width: 0.6rem;\n      height: 0.6rem;\n      border-radius: 2rem;\n      background: ${$disabled ? theme.colors.neutral100 : theme.colors.primary600};\n    }\n  `}\n`;\n\nexport { PluginsAndSettingsPermissions };\n", "import * as React from 'react';\n\nimport { Tabs } from '@strapi/design-system';\nimport { produce } from 'immer';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isEmpty from 'lodash/isEmpty';\nimport set from 'lodash/set';\nimport { useIntl } from 'react-intl';\n\nimport * as PermissonContracts from '../../../../../../../shared/contracts/permissions';\nimport { Permission } from '../../../../../../../shared/contracts/shared';\nimport { isObject } from '../../../../../utils/objects';\nimport {\n  PermissionsDataManagerContextValue,\n  PermissionsDataManagerProvider,\n} from '../hooks/usePermissionsDataManager';\nimport { difference } from '../utils/difference';\nimport { ConditionForm, Form, createDefaultCTForm, createDefaultForm } from '../utils/forms';\nimport { GenericLayout, formatLayout } from '../utils/layouts';\nimport { formatPermissionsForAPI } from '../utils/permissions';\nimport { updateConditionsToFalse } from '../utils/updateConditionsToFalse';\nimport { updateValues } from '../utils/updateValues';\n\nimport { ContentTypes } from './ContentTypes';\nimport { PluginsAndSettingsPermissions } from './PluginsAndSettings';\n\nconst TAB_LABELS = [\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.collectionTypes',\n    defaultMessage: 'Collection Types',\n    id: 'collectionTypes',\n  },\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.singleTypes',\n    id: 'singleTypes',\n    defaultMessage: 'Single Types',\n  },\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.plugins',\n    defaultMessage: 'Plugins',\n    id: 'plugins',\n  },\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.settings',\n    defaultMessage: 'Settings',\n    id: 'settings',\n  },\n] as const;\n\n/* -------------------------------------------------------------------------------------------------\n * Permissions\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface PermissionsAPI {\n  getPermissions: () => {\n    didUpdateConditions: boolean;\n    permissionsToSend: Omit<Permission, 'id' | 'createdAt' | 'updatedAt' | 'actionParameters'>[];\n  };\n  resetForm: () => void;\n  setFormAfterSubmit: () => void;\n}\n\ninterface PermissionsProps {\n  isFormDisabled?: boolean;\n  permissions?: Permission[];\n  layout: PermissonContracts.GetAll.Response['data'];\n}\n\nconst Permissions = React.forwardRef<PermissionsAPI, PermissionsProps>(\n  ({ layout, isFormDisabled, permissions = [] }, api) => {\n    const [{ initialData, layouts, modifiedData }, dispatch] = React.useReducer(\n      reducer,\n      initialState,\n      () => init(layout, permissions)\n    );\n    const { formatMessage } = useIntl();\n\n    React.useImperativeHandle(api, () => {\n      return {\n        getPermissions() {\n          const collectionTypesDiff = difference(\n            initialData.collectionTypes,\n            modifiedData.collectionTypes\n          );\n          const singleTypesDiff = difference(initialData.singleTypes, modifiedData.singleTypes);\n\n          const contentTypesDiff = { ...collectionTypesDiff, ...singleTypesDiff };\n\n          let didUpdateConditions;\n\n          if (isEmpty(contentTypesDiff)) {\n            didUpdateConditions = false;\n          } else {\n            didUpdateConditions = Object.values(contentTypesDiff).some((permission = {}) => {\n              return Object.values(permission).some((permissionValue) =>\n                has(permissionValue, 'conditions')\n              );\n            });\n          }\n\n          return { permissionsToSend: formatPermissionsForAPI(modifiedData), didUpdateConditions };\n        },\n        resetForm() {\n          dispatch({ type: 'RESET_FORM' });\n        },\n        setFormAfterSubmit() {\n          dispatch({ type: 'SET_FORM_AFTER_SUBMIT' });\n        },\n      } satisfies PermissionsAPI;\n    });\n\n    const handleChangeCollectionTypeLeftActionRowCheckbox = (\n      pathToCollectionType: OnChangeCollectionTypeRowLeftCheckboxAction['pathToCollectionType'],\n      propertyName: OnChangeCollectionTypeRowLeftCheckboxAction['propertyName'],\n      rowName: OnChangeCollectionTypeRowLeftCheckboxAction['rowName'],\n      value: OnChangeCollectionTypeRowLeftCheckboxAction['value']\n    ) => {\n      dispatch({\n        type: 'ON_CHANGE_COLLECTION_TYPE_ROW_LEFT_CHECKBOX',\n        pathToCollectionType,\n        propertyName,\n        rowName,\n        value,\n      });\n    };\n\n    const handleChangeCollectionTypeGlobalActionCheckbox = (\n      collectionTypeKind: OnChangeCollectionTypeGlobalActionCheckboxAction['collectionTypeKind'],\n      actionId: OnChangeCollectionTypeGlobalActionCheckboxAction['actionId'],\n      value: OnChangeCollectionTypeGlobalActionCheckboxAction['value']\n    ) => {\n      dispatch({\n        type: 'ON_CHANGE_COLLECTION_TYPE_GLOBAL_ACTION_CHECKBOX',\n        collectionTypeKind,\n        actionId,\n        value,\n      });\n    };\n\n    const handleChangeConditions = (conditions: OnChangeConditionsAction['conditions']) => {\n      dispatch({ type: 'ON_CHANGE_CONDITIONS', conditions });\n    };\n\n    const handleChangeSimpleCheckbox: PermissionsDataManagerContextValue['onChangeSimpleCheckbox'] =\n      React.useCallback(({ target: { name, value } }) => {\n        dispatch({\n          type: 'ON_CHANGE_SIMPLE_CHECKBOX',\n          keys: name,\n          value,\n        });\n      }, []);\n\n    const handleChangeParentCheckbox: PermissionsDataManagerContextValue['onChangeParentCheckbox'] =\n      React.useCallback(({ target: { name, value } }) => {\n        dispatch({\n          type: 'ON_CHANGE_TOGGLE_PARENT_CHECKBOX',\n          keys: name,\n          value,\n        });\n      }, []);\n\n    return (\n      <PermissionsDataManagerProvider\n        availableConditions={layout.conditions}\n        modifiedData={modifiedData}\n        onChangeConditions={handleChangeConditions}\n        onChangeSimpleCheckbox={handleChangeSimpleCheckbox}\n        onChangeParentCheckbox={handleChangeParentCheckbox}\n        onChangeCollectionTypeLeftActionRowCheckbox={\n          handleChangeCollectionTypeLeftActionRowCheckbox\n        }\n        onChangeCollectionTypeGlobalActionCheckbox={handleChangeCollectionTypeGlobalActionCheckbox}\n      >\n        <Tabs.Root defaultValue={TAB_LABELS[0].id}>\n          <Tabs.List\n            aria-label={formatMessage({\n              id: 'Settings.permissions.users.tabs.label',\n              defaultMessage: 'Tabs Permissions',\n            })}\n          >\n            {TAB_LABELS.map((tabLabel) => (\n              <Tabs.Trigger key={tabLabel.id} value={tabLabel.id}>\n                {formatMessage({ id: tabLabel.labelId, defaultMessage: tabLabel.defaultMessage })}\n              </Tabs.Trigger>\n            ))}\n          </Tabs.List>\n          <Tabs.Content value={TAB_LABELS[0].id}>\n            <ContentTypes\n              layout={layouts.collectionTypes}\n              kind=\"collectionTypes\"\n              isFormDisabled={isFormDisabled}\n            />\n          </Tabs.Content>\n          <Tabs.Content value={TAB_LABELS[1].id}>\n            <ContentTypes\n              layout={layouts.singleTypes}\n              kind=\"singleTypes\"\n              isFormDisabled={isFormDisabled}\n            />\n          </Tabs.Content>\n          <Tabs.Content value={TAB_LABELS[2].id}>\n            <PluginsAndSettingsPermissions\n              layout={layouts.plugins}\n              kind=\"plugins\"\n              isFormDisabled={isFormDisabled}\n            />\n          </Tabs.Content>\n          <Tabs.Content value={TAB_LABELS[3].id}>\n            <PluginsAndSettingsPermissions\n              layout={layouts.settings}\n              kind=\"settings\"\n              isFormDisabled={isFormDisabled}\n            />\n          </Tabs.Content>\n        </Tabs.Root>\n      </PermissionsDataManagerProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * reducer\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PermissionForms {\n  collectionTypes: Form;\n  plugins: Record<string, Form>;\n  settings: Record<string, Form>;\n  singleTypes: Form;\n}\n\ninterface State {\n  initialData: PermissionForms;\n  modifiedData: PermissionForms;\n  layouts: {\n    collectionTypes: PermissonContracts.ContentPermission;\n    singleTypes: PermissonContracts.ContentPermission;\n    plugins: GenericLayout<PermissonContracts.PluginPermission>[];\n    settings: GenericLayout<PermissonContracts.SettingPermission>[];\n  };\n}\n\nconst initialState = {\n  initialData: {},\n  modifiedData: {},\n  layouts: {},\n};\n\ninterface OnChangeCollectionTypeGlobalActionCheckboxAction {\n  type: 'ON_CHANGE_COLLECTION_TYPE_GLOBAL_ACTION_CHECKBOX';\n  collectionTypeKind: keyof PermissionForms;\n  actionId: string;\n  value: boolean;\n}\n\ninterface OnChangeCollectionTypeRowLeftCheckboxAction {\n  type: 'ON_CHANGE_COLLECTION_TYPE_ROW_LEFT_CHECKBOX';\n  pathToCollectionType: string;\n  propertyName: string;\n  rowName: string;\n  value: boolean;\n}\n\ninterface OnChangeConditionsAction {\n  type: 'ON_CHANGE_CONDITIONS';\n  conditions: Record<string, ConditionForm>;\n}\n\ninterface OnChangeSimpleCheckboxAction {\n  type: 'ON_CHANGE_SIMPLE_CHECKBOX';\n  keys: string;\n  value: boolean;\n}\n\ninterface OnChangeToggleParentCheckbox {\n  type: 'ON_CHANGE_TOGGLE_PARENT_CHECKBOX';\n  keys: string;\n  value: boolean;\n}\n\ninterface ResetFormAction {\n  type: 'RESET_FORM';\n}\n\ninterface SetFormAfterSubmitAction {\n  type: 'SET_FORM_AFTER_SUBMIT';\n}\n\ntype Action =\n  | OnChangeCollectionTypeGlobalActionCheckboxAction\n  | OnChangeCollectionTypeRowLeftCheckboxAction\n  | OnChangeConditionsAction\n  | OnChangeSimpleCheckboxAction\n  | OnChangeToggleParentCheckbox\n  | ResetFormAction\n  | SetFormAfterSubmitAction;\n\n/* eslint-disable consistent-return */\nconst reducer = (state: State, action: Action) =>\n  produce(state, (draftState) => {\n    switch (action.type) {\n      // This action is called when a checkbox in the <GlobalActions />\n      // changes\n      case 'ON_CHANGE_COLLECTION_TYPE_GLOBAL_ACTION_CHECKBOX': {\n        const { collectionTypeKind, actionId, value } = action;\n        const pathToData = ['modifiedData', collectionTypeKind];\n\n        Object.keys(get(state, pathToData)).forEach((collectionType) => {\n          const collectionTypeActionData = get(\n            state,\n            [...pathToData, collectionType, actionId],\n            undefined\n          );\n\n          if (collectionTypeActionData) {\n            let updatedValues = updateValues(collectionTypeActionData, value);\n\n            // We need to remove the applied conditions\n            // @ts-expect-error – TODO: type better\n            if (!value && updatedValues.conditions) {\n              // @ts-expect-error – TODO: type better\n              const updatedConditions = updateValues(updatedValues.conditions, false);\n\n              updatedValues = { ...updatedValues, conditions: updatedConditions };\n            }\n\n            set(draftState, [...pathToData, collectionType, actionId], updatedValues);\n          }\n        });\n\n        break;\n      }\n      case 'ON_CHANGE_COLLECTION_TYPE_ROW_LEFT_CHECKBOX': {\n        const { pathToCollectionType, propertyName, rowName, value } = action;\n        let nextModifiedDataState = cloneDeep(state.modifiedData);\n        const pathToModifiedDataCollectionType = pathToCollectionType.split('..');\n\n        const objToUpdate = get(nextModifiedDataState, pathToModifiedDataCollectionType, {});\n\n        Object.keys(objToUpdate).forEach((actionId) => {\n          // When a ct has multiple properties (ex: locales, field)\n          // We need to make sure that we add any new property to the modifiedData\n          // object.\n          if (has(objToUpdate[actionId], `properties.${propertyName}`)) {\n            const objValue = get(objToUpdate, [actionId, 'properties', propertyName, rowName]);\n            const pathToDataToSet = [\n              ...pathToModifiedDataCollectionType,\n              actionId,\n              'properties',\n              propertyName,\n              rowName,\n            ];\n\n            if (!isObject(objValue)) {\n              set(nextModifiedDataState, pathToDataToSet, value);\n            } else {\n              const updatedValue = updateValues(objValue, value);\n\n              set(nextModifiedDataState, pathToDataToSet, updatedValue);\n            }\n          }\n        });\n\n        // When we uncheck a row, we need to check if we also need to disable the conditions\n        if (!value) {\n          // @ts-expect-error – TODO: type better\n          nextModifiedDataState = updateConditionsToFalse(nextModifiedDataState);\n        }\n\n        set(draftState, 'modifiedData', nextModifiedDataState);\n\n        break;\n      }\n      case 'ON_CHANGE_CONDITIONS': {\n        Object.entries(action.conditions).forEach((array) => {\n          const [stringPathToData, conditionsToUpdate] = array;\n\n          set(\n            draftState,\n            ['modifiedData', ...stringPathToData.split('..'), 'conditions'],\n            conditionsToUpdate\n          );\n        });\n\n        break;\n      }\n      case 'ON_CHANGE_SIMPLE_CHECKBOX': {\n        let nextModifiedDataState = cloneDeep(state.modifiedData);\n\n        set(nextModifiedDataState, [...action.keys.split('..')], action.value);\n\n        // When we uncheck a single checkbox we need to remove the conditions from the parent\n        if (!action.value) {\n          // @ts-expect-error – TODO: type better\n          nextModifiedDataState = updateConditionsToFalse(nextModifiedDataState);\n        }\n\n        set(draftState, 'modifiedData', nextModifiedDataState);\n\n        break;\n      }\n      /*\n       * Here the idea is to retrieve a specific value of the modifiedObject\n       * then update all the boolean values of the retrieved one\n       * and update the drafState.\n       *\n       * For instance in order to enable create action for all the fields and locales\n       * of the restaurant content type we need to :\n       * 1. Retrieve the modifiedData.collectionTypes.restaurant.create object\n       * 2. Toggle all the end boolean values to the desired one\n       * 3. Update the draftState\n       *\n       * Since the case works well in order to update what we called \"parent\" checkbox. We can\n       * reuse the action when we need to toggle change all the values that depends on this one.\n       * A parent checkbox is a checkbox which value is not a boolean but depends on its children ones, therefore,\n       * a parent checkbox does not have a represented value in the draftState, they are just helpers.\n       *\n       * Given the following data:\n       *\n       * const data = {\n       *  restaurant: {\n       *   create: {\n       *     fields: { name: true },\n       *     locales: { en: false }\n       *   }\n       *  }\n       * }\n       *\n       * The value of the create checkbox for the restaurant will be ƒalse since not all its children have\n       * truthy values and in order to set its value to true when need to have all the values of its children set to true.\n       *\n       * Similarly, we can reuse the logic for the components attributes\n       *\n       */\n      case 'ON_CHANGE_TOGGLE_PARENT_CHECKBOX': {\n        const { keys, value } = action;\n        const pathToValue = [...keys.split('..')];\n        let nextModifiedDataState = cloneDeep(state.modifiedData);\n        const oldValues = get(nextModifiedDataState, pathToValue, {});\n\n        const updatedValues = updateValues(oldValues, value);\n        set(nextModifiedDataState, pathToValue, updatedValues);\n\n        // When we uncheck a parent checkbox we need to remove the associated conditions\n        if (!value) {\n          // @ts-expect-error – TODO: type better\n          nextModifiedDataState = updateConditionsToFalse(nextModifiedDataState);\n        }\n\n        set(draftState, ['modifiedData'], nextModifiedDataState);\n\n        break;\n      }\n      case 'RESET_FORM': {\n        draftState.modifiedData = state.initialData;\n        break;\n      }\n      case 'SET_FORM_AFTER_SUBMIT': {\n        draftState.initialData = state.modifiedData;\n        break;\n      }\n      default:\n        return draftState;\n    }\n  });\n\n/* -------------------------------------------------------------------------------------------------\n * init (reducer)\n * -----------------------------------------------------------------------------------------------*/\n\nconst init = (\n  layout: PermissionsProps['layout'],\n  permissions: PermissionsProps['permissions']\n): State => {\n  const {\n    conditions,\n    sections: { collectionTypes, singleTypes, plugins, settings },\n  } = layout;\n\n  const layouts = {\n    collectionTypes,\n    singleTypes,\n    plugins: formatLayout(plugins, 'plugin'),\n    settings: formatLayout(settings, 'category'),\n  };\n\n  const defaultForm = {\n    collectionTypes: createDefaultCTForm(collectionTypes, conditions, permissions),\n    singleTypes: createDefaultCTForm(singleTypes, conditions, permissions),\n    plugins: createDefaultForm(layouts.plugins, conditions, permissions),\n    settings: createDefaultForm(layouts.settings, conditions, permissions),\n  };\n\n  return {\n    initialData: defaultForm,\n    modifiedData: defaultForm,\n    layouts,\n  };\n};\n\nexport { Permissions };\nexport type {\n  State,\n  OnChangeCollectionTypeRowLeftCheckboxAction,\n  OnChangeConditionsAction,\n  OnChangeCollectionTypeGlobalActionCheckboxAction,\n};\n"],
  "mappings": "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",
  "names": ["isObject", "transform", "object", "PermissionsDataManagerProvider", "usePermissionsDataManagerContext", "createContext", "usePermissionsDataManager", "difference", "object", "base", "changes", "transform", "result", "value", "key", "isEqual", "isObject", "flattenDeep", "array", "Array", "isArray", "reduce", "acc", "push", "createArrayOfValues", "obj", "Object", "values", "map", "findMatchingPermission", "permissions", "action", "subject", "find", "perm", "formatPermissionsForAPI", "modifiedData", "pluginsPermissions", "formatSettingsPermissions", "plugins", "settingsPermissions", "settings", "collectionTypesPermissions", "formatContentTypesPermissions", "collectionTypes", "singleTypesPermissions", "singleTypes", "settingsPermissionsObject", "formAcc", "form", "currentCategoryPermissions", "childFormAcc", "childForm", "entries", "responsesAcc", "actionName", "conditions", "properties", "enabled", "createConditionsArray", "contentTypesPermissions", "allPermissions", "current", "currentSubjectActions", "shouldCreatePermission", "some", "val", "createdPermissionsArray", "propertyName", "propertyValue", "createPropertyArray", "prefix", "name", "filter", "conditionValue", "conditionName", "createDefaultConditionsForm", "initialConditions", "id", "indexOf", "createDefaultForm", "layout", "initialPermissions", "categoryId", "childrenForm", "childrenDefaultForm", "subCategoryId", "actions", "foundMatchingPermission", "undefined", "createDefaultPropertiesForm", "matchingPermission", "recursivelyCreatePropertyForm", "children", "propertyValues", "hasProperty", "currentPropertyName", "foundProperty", "matchingPermissionPropertyValues", "propertyForm", "createDefaultCTForm", "subjects", "defaultForm", "subjectLayouts", "foundLayout", "uid", "isEmpty", "contentTypesActions", "keys", "currentCTUID", "actionId", "applyToProperties", "currentSubjectLayout", "doesNothaveProperty", "every", "property", "conditionsForm", "propertiesForm", "merge", "formatLayout", "groupByKey", "groupBy", "itemName", "item", "category", "split", "join", "subCategoryName", "updateConditionsToFalse", "currentValue", "has", "isActionEnabled", "omit", "updatedConditions", "acc1", "updateValues", "valueToSet", "isFieldUpdate", "cellWidth", "firstRowWidth", "rowHeight", "removeConditionKeyFromData", "getCheckboxState", "dataObj", "dataWithoutCondition", "arrayOfValues", "length", "hasAllActionsSelected", "hasSomeActionsSelected", "CollapseLabel", "styled", "Flex", "theme", "spaces", "$isCollapsable", "HiddenAction", "div", "RequiredSign", "_jsx", "Box", "color", "paddingLeft", "RowLabelWithCheckbox", "checkboxName", "isActive", "isCollapsable", "isFormDisabled", "label", "onChange", "onClick", "someChecked", "formatMessage", "useIntl", "collapseLabelProps", "title", "alignItems", "assign", "onKeyDown", "tabIndex", "role", "_jsxs", "width", "shrink", "paddingRight", "Checkbox", "aria-label", "defaultMessage", "disabled", "onCheckedChange", "target", "checked", "Typography", "ellipsis", "CollapsePropertyMatrix", "availableActions", "pathToData", "propertyActions", "useMemo", "isActionRelatedToCurrentProperty", "isDisplayed", "display", "direction", "minWidth", "Header", "headers", "required", "i", "ActionRow", "isOdd", "rowToOpen", "setRowToOpen", "useState", "onChangeCollectionTypeLeftActionRowCheckbox", "onChangeParentCheckbox", "onChangeSimpleCheckbox", "recursiveChildren", "handleClick", "useCallback", "prev", "handleChangeLeftRowCheckbox", "getRowLabelCheckboxState", "_Fragment", "Wrapper", "$isActive", "background", "CarretIcon", "checkboxValue", "get", "position", "justifyContent", "data", "SubActionRow", "parentName", "pathToDataFromActionRow", "recursiveLevel", "pathToContentType", "propertyToCheck", "targetKey", "actionIds", "mainData", "activeStyle", "CaretDown", "colors", "neutral200", "handleClickToggleSubLevel", "displayedRecursiveChildren", "TopTimeline", "subChildrenForm", "index", "isVisible", "isArrayType", "LeftBorderTimeline", "$isVisible", "height", "StyledBox", "Svg", "viewBox", "fill", "xmlns", "$color", "path", "fillRule", "clipRule", "d", "style", "flex", "RowStyle", "$level", "RowLabel", "propertyLabel", "paddingBottom", "primary200", "svg", "variant", "textColor", "header", "toLowerCase", "css", "primary600", "fontWeights", "bold", "ConditionsButtonImpl", "forwardRef", "className", "hasConditions", "ref", "ButtonContainer", "$hasConditions", "Button", "startIcon", "Cog", "type", "ConditionsButton", "ConditionsModal", "headerBreadCrumbs", "onClose", "availableConditions", "onChangeConditions", "arrayOfOptionsGroupedByCategory", "actionsToDisplay", "Boolean", "state", "setState", "handleChange", "produce", "draft", "default", "handleSubmit", "conditionsWithoutCategory", "merged", "current1", "onCloseModal", "Modal", "Content", "Breadcrumbs", "arr", "Crumb", "isCurrent", "upperFirst", "Body", "ul", "pathToConditionsObject", "isGrey", "Footer", "valueFromModifiedData", "categoryDefaultForm", "categoryName", "relatedConditions", "getNewStateFromChangedValues", "tag", "paddingTop", "maxWidth", "MultiSelectNested", "customizeContent", "getSelectedValues", "options", "getNestedOptions", "rawValue", "x", "flat", "capitalise", "child", "displayName", "changedValues", "curr", "includes", "ContentTypeCollapses", "collapseToOpen", "setCollapseToOpen", "handleClickToggleCollapse", "collapseName", "nextCollapseToOpen", "borderColor", "Collapse", "onClickToggle", "isConditionModalOpen", "setIsConditionModalOpen", "checkboxesActions", "generateCheckboxesActions", "doesConditionButtonHasConditions", "BoxWrapper", "Chevron", "ChevronUp", "ChevronDown", "restAction", "isParentCheckbox", "permissionLabel", "Cell", "top", "left", "borderRadius", "bottom", "right", "Root", "open", "onOpenChange", "Trigger", "baseCheckboxNameArray", "checkboxNameArray", "conditionsValue", "baseCheckboxAction", "activeRowStyle", "primary100", "GlobalActions", "kind", "onChangeCollectionTypeGlobalActionCheckbox", "displayedActions", "checkboxesState", "actionsIds", "relatedActionsData", "forEach", "ctUid", "actionIdData", "actionIdState", "gap", "ContentTypes", "sortedSubjects", "sort", "a", "b", "localeCompare", "PluginsAndSettingsPermissions", "restProps", "padding", "Accordion", "size", "Row", "pop", "Item", "caretPosition", "description", "SubCategory", "formattedActions", "datum", "doesButtonHasCondition", "catName", "Border", "Grid", "col", "CheckboxWrapper", "$disabled", "neutral150", "neutral100", "TAB_LABELS", "labelId", "Permissions", "api", "initialData", "layouts", "dispatch", "useReducer", "reducer", "initialState", "init", "React", "useImperativeHandle", "getPermissions", "collectionTypesDiff", "singleTypesDiff", "contentTypesDiff", "didUpdateConditions", "permission", "permissionValue", "permissionsToSend", "resetForm", "setFormAfterSubmit", "handleChangeCollectionTypeLeftActionRowCheckbox", "pathToCollectionType", "rowName", "handleChangeCollectionTypeGlobalActionCheckbox", "collectionTypeKind", "handleChangeConditions", "handleChangeSimpleCheckbox", "handleChangeParentCheckbox", "Tabs", "defaultValue", "List", "tabLabel", "draftState", "collectionType", "collectionTypeActionData", "updatedValues", "set", "nextModifiedDataState", "cloneDeep", "pathToModifiedDataCollectionType", "objToUpdate", "objValue", "pathToDataToSet", "updatedValue", "stringPathToData", "conditionsToUpdate", "pathToValue", "oldValues", "sections"]
}

{
  "version": 3,
  "sources": ["../../../lodash/_baseDifference.js", "../../../lodash/without.js", "../../../lodash/take.js", "../../../@strapi/plugin-users-permissions/admin/src/contexts/UsersPermissionsContext/index.jsx", "../../../@strapi/plugin-users-permissions/admin/src/utils/formatPluginName.js", "../../../@strapi/plugin-users-permissions/admin/src/components/Permissions/init.js", "../../../@strapi/plugin-users-permissions/admin/src/components/Permissions/PermissionRow/CheckboxWrapper.jsx", "../../../@strapi/plugin-users-permissions/admin/src/components/Permissions/PermissionRow/SubCategory.jsx", "../../../@strapi/plugin-users-permissions/admin/src/components/Permissions/PermissionRow/index.jsx", "../../../@strapi/plugin-users-permissions/admin/src/components/Permissions/reducer.js", "../../../@strapi/plugin-users-permissions/admin/src/components/Permissions/index.jsx", "../../../@strapi/plugin-users-permissions/admin/src/components/BoundRoute/getMethodColor.js", "../../../@strapi/plugin-users-permissions/admin/src/components/BoundRoute/index.jsx", "../../../@strapi/plugin-users-permissions/admin/src/components/Policies/index.jsx", "../../../@strapi/plugin-users-permissions/admin/src/components/UsersPermissions/init.js", "../../../@strapi/plugin-users-permissions/admin/src/components/UsersPermissions/reducer.js", "../../../@strapi/plugin-users-permissions/admin/src/components/UsersPermissions/index.jsx", "../../../@strapi/plugin-users-permissions/admin/src/pages/Roles/constants.js", "../../../@strapi/plugin-users-permissions/admin/src/utils/cleanPermissions.js", "../../../@strapi/plugin-users-permissions/admin/src/pages/Roles/hooks/usePlugins.js", "../../../@strapi/plugin-users-permissions/admin/src/pages/Roles/pages/CreatePage.jsx", "../../../@strapi/plugin-users-permissions/admin/src/pages/Roles/pages/EditPage.jsx", "../../../@strapi/plugin-users-permissions/admin/src/pages/Roles/pages/ListPage/components/TableBody.jsx", "../../../@strapi/plugin-users-permissions/admin/src/pages/Roles/pages/ListPage/index.jsx", "../../../@strapi/plugin-users-permissions/admin/src/pages/Roles/index.jsx"],
  "sourcesContent": ["var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    arrayMap = require('./_arrayMap'),\n    baseUnary = require('./_baseUnary'),\n    cacheHas = require('./_cacheHas');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseDifference;\n", "var baseDifference = require('./_baseDifference'),\n    baseRest = require('./_baseRest'),\n    isArrayLikeObject = require('./isArrayLikeObject');\n\n/**\n * Creates an array excluding all given values using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * **Note:** Unlike `_.pull`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...*} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.difference, _.xor\n * @example\n *\n * _.without([2, 1, 2, 3], 1, 2);\n * // => [3]\n */\nvar without = baseRest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, values)\n    : [];\n});\n\nmodule.exports = without;\n", "var baseSlice = require('./_baseSlice'),\n    toInteger = require('./toInteger');\n\n/**\n * Creates a slice of `array` with `n` elements taken from the beginning.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to take.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.take([1, 2, 3]);\n * // => [1]\n *\n * _.take([1, 2, 3], 2);\n * // => [1, 2]\n *\n * _.take([1, 2, 3], 5);\n * // => [1, 2, 3]\n *\n * _.take([1, 2, 3], 0);\n * // => []\n */\nfunction take(array, n, guard) {\n  if (!(array && array.length)) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  return baseSlice(array, 0, n < 0 ? 0 : n);\n}\n\nmodule.exports = take;\n", "import React, { createContext, useContext } from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst UsersPermissions = createContext({});\n\nconst UsersPermissionsProvider = ({ children, value }) => {\n  return <UsersPermissions.Provider value={value}>{children}</UsersPermissions.Provider>;\n};\n\nconst useUsersPermissions = () => useContext(UsersPermissions);\n\nUsersPermissionsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n  value: PropTypes.object.isRequired,\n};\n\nexport { UsersPermissions, UsersPermissionsProvider, useUsersPermissions };\n", "import upperFirst from 'lodash/upperFirst';\n\nfunction formatPluginName(pluginSlug) {\n  switch (pluginSlug) {\n    case 'application':\n      return 'Application';\n    case 'plugin::content-manager':\n      return 'Content manager';\n    case 'plugin::content-type-builder':\n      return 'Content types builder';\n    case 'plugin::documentation':\n      return 'Documentation';\n    case 'plugin::email':\n      return 'Email';\n    case 'plugin::i18n':\n      return 'i18n';\n    case 'plugin::upload':\n      return 'Upload';\n    case 'plugin::users-permissions':\n      return 'Users-permissions';\n    default:\n      return upperFirst(pluginSlug.replace('api::', '').replace('plugin::', ''));\n  }\n}\n\nexport default formatPluginName;\n", "const init = (initialState, permissions) => {\n  const collapses = Object.keys(permissions)\n    .sort()\n    .map((name) => ({ name, isOpen: false }));\n\n  return { ...initialState, collapses };\n};\n\nexport default init;\n", "import { Box } from '@strapi/design-system';\nimport { styled, css } from 'styled-components';\n\nconst activeCheckboxWrapperStyles = css`\n  background: ${(props) => props.theme.colors.primary100};\n\n  #cog {\n    opacity: 1;\n  }\n`;\n\nconst CheckboxWrapper = styled(Box)`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  #cog {\n    opacity: 0;\n    path {\n      fill: ${(props) => props.theme.colors.primary600};\n    }\n  }\n\n  /* Show active style both on hover and when the action is selected */\n  ${(props) => props.isActive && activeCheckboxWrapperStyles}\n  &:hover {\n    ${activeCheckboxWrapperStyles}\n  }\n`;\n\nexport default CheckboxWrapper;\n", "import React, { useCallback, useMemo } from 'react';\n\nimport { Box, Checkbox, Flex, Typography, Grid, VisuallyHidden } from '@strapi/design-system';\nimport { Cog } from '@strapi/icons';\nimport get from 'lodash/get';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useUsersPermissions } from '../../../contexts/UsersPermissionsContext';\n\nimport CheckboxWrapper from './CheckboxWrapper';\n\nconst Border = styled.div`\n  flex: 1;\n  align-self: center;\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\n`;\n\nconst SubCategory = ({ subCategory }) => {\n  const { formatMessage } = useIntl();\n  const { onChange, onChangeSelectAll, onSelectedAction, selectedAction, modifiedData } =\n    useUsersPermissions();\n\n  const currentScopedModifiedData = useMemo(() => {\n    return get(modifiedData, subCategory.name, {});\n  }, [modifiedData, subCategory]);\n\n  const hasAllActionsSelected = useMemo(() => {\n    return Object.values(currentScopedModifiedData).every((action) => action.enabled === true);\n  }, [currentScopedModifiedData]);\n\n  const hasSomeActionsSelected = useMemo(() => {\n    return (\n      Object.values(currentScopedModifiedData).some((action) => action.enabled === true) &&\n      !hasAllActionsSelected\n    );\n  }, [currentScopedModifiedData, hasAllActionsSelected]);\n\n  const handleChangeSelectAll = useCallback(\n    ({ target: { name } }) => {\n      onChangeSelectAll({ target: { name, value: !hasAllActionsSelected } });\n    },\n    [hasAllActionsSelected, onChangeSelectAll]\n  );\n\n  const isActionSelected = useCallback(\n    (actionName) => {\n      return selectedAction === actionName;\n    },\n    [selectedAction]\n  );\n\n  return (\n    <Box>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Box paddingRight={4}>\n          <Typography variant=\"sigma\" textColor=\"neutral600\">\n            {subCategory.label}\n          </Typography>\n        </Box>\n        <Border />\n        <Box paddingLeft={4}>\n          <Checkbox\n            name={subCategory.name}\n            checked={hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected}\n            onCheckedChange={(value) =>\n              handleChangeSelectAll({ target: { name: subCategory.name, value } })\n            }\n          >\n            {formatMessage({ id: 'app.utils.select-all', defaultMessage: 'Select all' })}\n          </Checkbox>\n        </Box>\n      </Flex>\n      <Flex paddingTop={6} paddingBottom={6}>\n        <Grid.Root gap={2} style={{ flex: 1 }}>\n          {subCategory.actions.map((action) => {\n            const name = `${action.name}.enabled`;\n\n            return (\n              <Grid.Item col={6} key={action.name} direction=\"column\" alignItems=\"stretch\">\n                <CheckboxWrapper isActive={isActionSelected(action.name)} padding={2} hasRadius>\n                  <Checkbox\n                    checked={get(modifiedData, name, false)}\n                    name={name}\n                    onCheckedChange={(value) => onChange({ target: { name, value } })}\n                  >\n                    {action.label}\n                  </Checkbox>\n                  <button\n                    type=\"button\"\n                    onClick={() => onSelectedAction(action.name)}\n                    style={{ display: 'inline-flex', alignItems: 'center' }}\n                  >\n                    <VisuallyHidden tag=\"span\">\n                      {formatMessage(\n                        {\n                          id: 'app.utils.show-bound-route',\n                          defaultMessage: 'Show bound route for {route}',\n                        },\n                        {\n                          route: action.name,\n                        }\n                      )}\n                    </VisuallyHidden>\n                    <Cog id=\"cog\" cursor=\"pointer\" />\n                  </button>\n                </CheckboxWrapper>\n              </Grid.Item>\n            );\n          })}\n        </Grid.Root>\n      </Flex>\n    </Box>\n  );\n};\n\nSubCategory.propTypes = {\n  subCategory: PropTypes.object.isRequired,\n};\n\nexport default SubCategory;\n", "import React, { useMemo } from 'react';\n\nimport { Box } from '@strapi/design-system';\nimport sortBy from 'lodash/sortBy';\nimport PropTypes from 'prop-types';\n\nimport SubCategory from './SubCategory';\n\nconst PermissionRow = ({ name, permissions }) => {\n  const subCategories = useMemo(() => {\n    return sortBy(\n      Object.values(permissions.controllers).reduce((acc, curr, index) => {\n        const currentName = `${name}.controllers.${Object.keys(permissions.controllers)[index]}`;\n        const actions = sortBy(\n          Object.keys(curr).reduce((acc, current) => {\n            return [\n              ...acc,\n              {\n                ...curr[current],\n                label: current,\n                name: `${currentName}.${current}`,\n              },\n            ];\n          }, []),\n          'label'\n        );\n\n        return [\n          ...acc,\n          {\n            actions,\n            label: Object.keys(permissions.controllers)[index],\n            name: currentName,\n          },\n        ];\n      }, []),\n      'label'\n    );\n  }, [name, permissions]);\n\n  return (\n    <Box padding={6}>\n      {subCategories.map((subCategory) => (\n        <SubCategory key={subCategory.name} subCategory={subCategory} />\n      ))}\n    </Box>\n  );\n};\n\nPermissionRow.propTypes = {\n  name: PropTypes.string.isRequired,\n  permissions: PropTypes.object.isRequired,\n};\n\nexport default PermissionRow;\n", "import { produce } from 'immer';\n\nconst initialState = {\n  collapses: [],\n};\n\nconst reducer = (state, action) =>\n  // eslint-disable-next-line consistent-return\n  produce(state, (draftState) => {\n    switch (action.type) {\n      case 'TOGGLE_COLLAPSE': {\n        draftState.collapses = state.collapses.map((collapse, index) => {\n          if (index === action.index) {\n            return { ...collapse, isOpen: !collapse.isOpen };\n          }\n\n          return { ...collapse, isOpen: false };\n        });\n\n        break;\n      }\n      default:\n        return draftState;\n    }\n  });\n\nexport { initialState, reducer };\n", "import React, { useReducer } from 'react';\n\nimport { Accordion, Flex } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { useUsersPermissions } from '../../contexts/UsersPermissionsContext';\nimport formatPluginName from '../../utils/formatPluginName';\n\nimport init from './init';\nimport PermissionRow from './PermissionRow';\nimport { initialState, reducer } from './reducer';\n\nconst Permissions = () => {\n  const { modifiedData } = useUsersPermissions();\n  const { formatMessage } = useIntl();\n  const [{ collapses }] = useReducer(reducer, initialState, (state) => init(state, modifiedData));\n\n  return (\n    <Accordion.Root size=\"M\">\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n        {collapses.map((collapse, index) => (\n          <Accordion.Item key={collapse.name} value={collapse.name}>\n            <Accordion.Header variant={index % 2 === 0 ? 'secondary' : undefined}>\n              <Accordion.Trigger\n                caretPosition=\"right\"\n                description={formatMessage(\n                  {\n                    id: 'users-permissions.Plugin.permissions.plugins.description',\n                    defaultMessage: 'Define all allowed actions for the {name} plugin.',\n                  },\n                  { name: collapse.name }\n                )}\n              >\n                {formatPluginName(collapse.name)}\n              </Accordion.Trigger>\n            </Accordion.Header>\n            <Accordion.Content>\n              <PermissionRow permissions={modifiedData[collapse.name]} name={collapse.name} />\n            </Accordion.Content>\n          </Accordion.Item>\n        ))}\n      </Flex>\n    </Accordion.Root>\n  );\n};\n\nexport default Permissions;\n", "const getMethodColor = (verb) => {\n  switch (verb) {\n    case 'POST': {\n      return {\n        text: 'success600',\n        border: 'success200',\n        background: 'success100',\n      };\n    }\n    case 'GET': {\n      return {\n        text: 'secondary600',\n        border: 'secondary200',\n        background: 'secondary100',\n      };\n    }\n    case 'PUT': {\n      return {\n        text: 'warning600',\n        border: 'warning200',\n        background: 'warning100',\n      };\n    }\n    case 'DELETE': {\n      return {\n        text: 'danger600',\n        border: 'danger200',\n        background: 'danger100',\n      };\n    }\n    default: {\n      return {\n        text: 'neutral600',\n        border: 'neutral200',\n        background: 'neutral100',\n      };\n    }\n  }\n};\n\nexport default getMethodColor;\n", "import * as React from 'react';\n\nimport { Box, Flex, Typography } from '@strapi/design-system';\nimport map from 'lodash/map';\nimport tail from 'lodash/tail';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport getMethodColor from './getMethodColor';\n\nconst MethodBox = styled(Box)`\n  margin: -1px;\n  border-radius: ${({ theme }) => theme.spaces[1]} 0 0 ${({ theme }) => theme.spaces[1]};\n`;\n\nfunction BoundRoute({ route }) {\n  const { formatMessage } = useIntl();\n\n  const { method, handler: title, path } = route;\n  const formattedRoute = path ? tail(path.split('/')) : [];\n  const [controller = '', action = ''] = title ? title.split('.') : [];\n  const colors = getMethodColor(route.method);\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n      <Typography variant=\"delta\" tag=\"h3\">\n        {formatMessage({\n          id: 'users-permissions.BoundRoute.title',\n          defaultMessage: 'Bound route to',\n        })}\n        &nbsp;\n        <span>{controller}</span>\n        <Typography variant=\"delta\" textColor=\"primary600\">\n          .{action}\n        </Typography>\n      </Typography>\n      <Flex hasRadius background=\"neutral0\" borderColor=\"neutral200\" gap={0}>\n        <MethodBox background={colors.background} borderColor={colors.border} padding={2}>\n          <Typography fontWeight=\"bold\" textColor={colors.text}>\n            {method}\n          </Typography>\n        </MethodBox>\n        <Box paddingLeft={2} paddingRight={2}>\n          {map(formattedRoute, (value) => (\n            <Typography key={value} textColor={value.includes(':') ? 'neutral600' : 'neutral900'}>\n              /{value}\n            </Typography>\n          ))}\n        </Box>\n      </Flex>\n    </Flex>\n  );\n}\n\nBoundRoute.defaultProps = {\n  route: {\n    handler: 'Nocontroller.error',\n    method: 'GET',\n    path: '/there-is-no-path',\n  },\n};\n\nBoundRoute.propTypes = {\n  route: PropTypes.shape({\n    handler: PropTypes.string,\n    method: PropTypes.string,\n    path: PropTypes.string,\n  }),\n};\n\nexport default BoundRoute;\n", "import * as React from 'react';\n\nimport { Flex, Grid, Typography } from '@strapi/design-system';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport without from 'lodash/without';\nimport { useIntl } from 'react-intl';\n\nimport { useUsersPermissions } from '../../contexts/UsersPermissionsContext';\nimport BoundRoute from '../BoundRoute';\n\nconst Policies = () => {\n  const { formatMessage } = useIntl();\n  const { selectedAction, routes } = useUsersPermissions();\n\n  const path = without(selectedAction.split('.'), 'controllers');\n  const controllerRoutes = get(routes, path[0]);\n  const pathResolved = path.slice(1).join('.');\n\n  const displayedRoutes = isEmpty(controllerRoutes)\n    ? []\n    : controllerRoutes.filter((o) => o.handler.endsWith(pathResolved));\n\n  return (\n    <Grid.Item\n      col={5}\n      background=\"neutral150\"\n      paddingTop={6}\n      paddingBottom={6}\n      paddingLeft={7}\n      paddingRight={7}\n      style={{ minHeight: '100%' }}\n      direction=\"column\"\n      alignItems=\"stretch\"\n    >\n      {selectedAction ? (\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n          {displayedRoutes.map((route, key) => (\n            // eslint-disable-next-line react/no-array-index-key\n            <BoundRoute key={key} route={route} />\n          ))}\n        </Flex>\n      ) : (\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n          <Typography variant=\"delta\" tag=\"h3\">\n            {formatMessage({\n              id: 'users-permissions.Policies.header.title',\n              defaultMessage: 'Advanced settings',\n            })}\n          </Typography>\n          <Typography tag=\"p\" textColor=\"neutral600\">\n            {formatMessage({\n              id: 'users-permissions.Policies.header.hint',\n              defaultMessage:\n                \"Select the application's actions or the plugin's actions and click on the cog icon to display the bound route\",\n            })}\n          </Typography>\n        </Flex>\n      )}\n    </Grid.Item>\n  );\n};\n\nexport default Policies;\n", "const init = (state, permissions, routes) => {\n  return {\n    ...state,\n    initialData: permissions,\n    modifiedData: permissions,\n    routes,\n  };\n};\n\nexport default init;\n", "/* eslint-disable consistent-return */\nimport { produce } from 'immer';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\nimport take from 'lodash/take';\n\nexport const initialState = {\n  initialData: {},\n  modifiedData: {},\n  routes: {},\n  selectedAction: '',\n  policies: [],\n};\n\nconst reducer = (state, action) =>\n  produce(state, (draftState) => {\n    switch (action.type) {\n      case 'ON_CHANGE': {\n        const keysLength = action.keys.length;\n        const isChangingCheckbox = action.keys[keysLength - 1] === 'enabled';\n\n        if (action.value && isChangingCheckbox) {\n          const selectedAction = take(action.keys, keysLength - 1).join('.');\n          draftState.selectedAction = selectedAction;\n        }\n\n        set(draftState, ['modifiedData', ...action.keys], action.value);\n        break;\n      }\n      case 'ON_CHANGE_SELECT_ALL': {\n        const pathToValue = ['modifiedData', ...action.keys];\n        const oldValues = get(state, pathToValue, {});\n        const updatedValues = Object.keys(oldValues).reduce((acc, current) => {\n          acc[current] = { ...oldValues[current], enabled: action.value };\n\n          return acc;\n        }, {});\n\n        set(draftState, pathToValue, updatedValues);\n\n        break;\n      }\n      case 'ON_RESET': {\n        draftState.modifiedData = state.initialData;\n        break;\n      }\n      case 'ON_SUBMIT_SUCCEEDED': {\n        draftState.initialData = state.modifiedData;\n        break;\n      }\n\n      case 'SELECT_ACTION': {\n        const { actionToSelect } = action;\n        draftState.selectedAction = actionToSelect === state.selectedAction ? '' : actionToSelect;\n        break;\n      }\n      default:\n        return draftState;\n    }\n  });\n\nexport default reducer;\n", "import React, { forwardRef, memo, useImperativeHandle, useReducer } from 'react';\n\nimport { Flex, Grid, Typography } from '@strapi/design-system';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { UsersPermissionsProvider } from '../../contexts/UsersPermissionsContext';\nimport getTrad from '../../utils/getTrad';\nimport Permissions from '../Permissions';\nimport Policies from '../Policies';\n\nimport init from './init';\nimport reducer, { initialState } from './reducer';\n\nconst UsersPermissions = forwardRef(({ permissions, routes }, ref) => {\n  const { formatMessage } = useIntl();\n  const [state, dispatch] = useReducer(reducer, initialState, (state) =>\n    init(state, permissions, routes)\n  );\n\n  useImperativeHandle(ref, () => ({\n    getPermissions() {\n      return {\n        permissions: state.modifiedData,\n      };\n    },\n    resetForm() {\n      dispatch({ type: 'ON_RESET' });\n    },\n    setFormAfterSubmit() {\n      dispatch({ type: 'ON_SUBMIT_SUCCEEDED' });\n    },\n  }));\n\n  const handleChange = ({ target: { name, value } }) =>\n    dispatch({\n      type: 'ON_CHANGE',\n      keys: name.split('.'),\n      value: value === 'empty__string_value' ? '' : value,\n    });\n\n  const handleChangeSelectAll = ({ target: { name, value } }) =>\n    dispatch({\n      type: 'ON_CHANGE_SELECT_ALL',\n      keys: name.split('.'),\n      value,\n    });\n\n  const handleSelectedAction = (actionToSelect) =>\n    dispatch({\n      type: 'SELECT_ACTION',\n      actionToSelect,\n    });\n\n  const providerValue = {\n    ...state,\n    onChange: handleChange,\n    onChangeSelectAll: handleChangeSelectAll,\n    onSelectedAction: handleSelectedAction,\n  };\n\n  return (\n    <UsersPermissionsProvider value={providerValue}>\n      <Grid.Root gap={0} shadow=\"filterShadow\" hasRadius background=\"neutral0\">\n        <Grid.Item\n          col={7}\n          paddingTop={6}\n          paddingBottom={6}\n          paddingLeft={7}\n          paddingRight={7}\n          direction=\"column\"\n          alignItems=\"stretch\"\n        >\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n              <Typography variant=\"delta\" tag=\"h2\">\n                {formatMessage({\n                  id: getTrad('Plugins.header.title'),\n                  defaultMessage: 'Permissions',\n                })}\n              </Typography>\n              <Typography tag=\"p\" textColor=\"neutral600\">\n                {formatMessage({\n                  id: getTrad('Plugins.header.description'),\n                  defaultMessage: 'Only actions bound by a route are listed below.',\n                })}\n              </Typography>\n            </Flex>\n            <Permissions />\n          </Flex>\n        </Grid.Item>\n        <Policies />\n      </Grid.Root>\n    </UsersPermissionsProvider>\n  );\n});\n\nUsersPermissions.propTypes = {\n  permissions: PropTypes.object.isRequired,\n  routes: PropTypes.object.isRequired,\n};\n\nexport default memo(UsersPermissions);\n", "import { translatedErrors } from '@strapi/strapi/admin';\nimport * as yup from 'yup';\n\nexport const createRoleSchema = yup.object().shape({\n  name: yup.string().required(translatedErrors.required.id),\n  description: yup.string().required(translatedErrors.required.id),\n});\n", "import isEmpty from 'lodash/isEmpty';\n\nconst cleanPermissions = (permissions) =>\n  Object.keys(permissions).reduce((acc, current) => {\n    const currentPermission = permissions[current].controllers;\n    const cleanedControllers = Object.keys(currentPermission).reduce((acc2, curr) => {\n      if (isEmpty(currentPermission[curr])) {\n        return acc2;\n      }\n\n      acc2[curr] = currentPermission[curr];\n\n      return acc2;\n    }, {});\n\n    if (isEmpty(cleanedControllers)) {\n      return acc;\n    }\n\n    acc[current] = { controllers: cleanedControllers };\n\n    return acc;\n  }, {});\n\nexport default cleanPermissions;\n", "import { useEffect } from 'react';\n\nimport { useAPIErrorHandler, useNotification, useFetchClient } from '@strapi/strapi/admin';\nimport { useQueries } from 'react-query';\n\nimport { cleanPermissions, getTrad } from '../../../utils';\n\nexport const usePlugins = () => {\n  const { toggleNotification } = useNotification();\n  const { get } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler(getTrad);\n\n  const [\n    {\n      data: permissions,\n      isLoading: isLoadingPermissions,\n      error: permissionsError,\n      refetch: refetchPermissions,\n    },\n    { data: routes, isLoading: isLoadingRoutes, error: routesError, refetch: refetchRoutes },\n  ] = useQueries([\n    {\n      queryKey: ['users-permissions', 'permissions'],\n      async queryFn() {\n        const {\n          data: { permissions },\n        } = await get(`/users-permissions/permissions`);\n\n        return permissions;\n      },\n    },\n    {\n      queryKey: ['users-permissions', 'routes'],\n      async queryFn() {\n        const {\n          data: { routes },\n        } = await get(`/users-permissions/routes`);\n\n        return routes;\n      },\n    },\n  ]);\n\n  const refetchQueries = async () => {\n    await Promise.all([refetchPermissions(), refetchRoutes()]);\n  };\n\n  useEffect(() => {\n    if (permissionsError) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(permissionsError),\n      });\n    }\n  }, [toggleNotification, permissionsError, formatAPIError]);\n\n  useEffect(() => {\n    if (routesError) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(routesError),\n      });\n    }\n  }, [toggleNotification, routesError, formatAPIError]);\n\n  const isLoading = isLoadingPermissions || isLoadingRoutes;\n\n  return {\n    // TODO: these return values need to be memoized, otherwise\n    // they will create infinite rendering loops when used as\n    // effect dependencies\n    permissions: permissions ? cleanPermissions(permissions) : {},\n    routes: routes ?? {},\n\n    getData: refetchQueries,\n    isLoading,\n  };\n};\n", "import * as React from 'react';\n\nimport {\n  Button,\n  Flex,\n  Grid,\n  Main,\n  Textarea,\n  TextInput,\n  Typography,\n  Field,\n} from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport { Page, useTracking, useNotification, useFetchClient, Layouts } from '@strapi/strapi/admin';\nimport { Formik, Form } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { useMutation } from 'react-query';\nimport { useNavigate } from 'react-router-dom';\n\nimport UsersPermissions from '../../../components/UsersPermissions';\nimport { PERMISSIONS } from '../../../constants';\nimport getTrad from '../../../utils/getTrad';\nimport { createRoleSchema } from '../constants';\nimport { usePlugins } from '../hooks/usePlugins';\n\nexport const CreatePage = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const navigate = useNavigate();\n  const { isLoading: isLoadingPlugins, permissions, routes } = usePlugins();\n  const { trackUsage } = useTracking();\n  const permissionsRef = React.useRef();\n  const { post } = useFetchClient();\n  const mutation = useMutation((body) => post(`/users-permissions/roles`, body), {\n    onError() {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'An error occurred',\n        }),\n      });\n    },\n\n    onSuccess() {\n      trackUsage('didCreateRole');\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: getTrad('Settings.roles.created'),\n          defaultMessage: 'Role created',\n        }),\n      });\n\n      // Forcing redirecting since we don't have the id in the response\n      navigate(-1);\n    },\n  });\n\n  const handleCreateRoleSubmit = async (data) => {\n    // TODO: refactor. Child -> parent component communication is evil;\n    // We should either move the provider one level up or move the state\n    // straight into redux.\n    const permissions = permissionsRef.current.getPermissions();\n\n    await mutation.mutate({ ...data, ...permissions, users: [] });\n  };\n\n  return (\n    <Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          { name: 'Roles' }\n        )}\n      </Page.Title>\n      <Formik\n        enableReinitialize\n        initialValues={{ name: '', description: '' }}\n        onSubmit={handleCreateRoleSubmit}\n        validationSchema={createRoleSchema}\n      >\n        {({ handleSubmit, values, handleChange, errors }) => (\n          <Form noValidate onSubmit={handleSubmit}>\n            <Layouts.Header\n              primaryAction={\n                !isLoadingPlugins && (\n                  <Button type=\"submit\" loading={mutation.isLoading} startIcon={<Check />}>\n                    {formatMessage({\n                      id: 'global.save',\n                      defaultMessage: 'Save',\n                    })}\n                  </Button>\n                )\n              }\n              title={formatMessage({\n                id: 'Settings.roles.create.title',\n                defaultMessage: 'Create a role',\n              })}\n              subtitle={formatMessage({\n                id: 'Settings.roles.create.description',\n                defaultMessage: 'Define the rights given to the role',\n              })}\n            />\n            <Layouts.Content>\n              <Flex\n                background=\"neutral0\"\n                direction=\"column\"\n                alignItems=\"stretch\"\n                gap={7}\n                hasRadius\n                paddingTop={6}\n                paddingBottom={6}\n                paddingLeft={7}\n                paddingRight={7}\n                shadow=\"filterShadow\"\n              >\n                <Flex direction=\"column\" alignItems=\"stretch\">\n                  <Typography variant=\"delta\" tag=\"h2\">\n                    {formatMessage({\n                      id: getTrad('EditPage.form.roles'),\n                      defaultMessage: 'Role details',\n                    })}\n                  </Typography>\n\n                  <Grid.Root gap={4}>\n                    <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n                      <Field.Root\n                        name=\"name\"\n                        error={\n                          errors?.name\n                            ? formatMessage({ id: errors.name, defaultMessage: 'Name is required' })\n                            : false\n                        }\n                        required\n                      >\n                        <Field.Label>\n                          {formatMessage({\n                            id: 'global.name',\n                            defaultMessage: 'Name',\n                          })}\n                        </Field.Label>\n                        <TextInput value={values.name || ''} onChange={handleChange} />\n                        <Field.Error />\n                      </Field.Root>\n                    </Grid.Item>\n                    <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n                      <Field.Root\n                        name=\"description\"\n                        error={\n                          errors?.description\n                            ? formatMessage({\n                                id: errors.description,\n                                defaultMessage: 'Description is required',\n                              })\n                            : false\n                        }\n                        required\n                      >\n                        <Field.Label>\n                          {formatMessage({\n                            id: 'global.description',\n                            defaultMessage: 'Description',\n                          })}\n                        </Field.Label>\n                        <Textarea value={values.description || ''} onChange={handleChange} />\n                        <Field.Error />\n                      </Field.Root>\n                    </Grid.Item>\n                  </Grid.Root>\n                </Flex>\n\n                {!isLoadingPlugins && (\n                  <UsersPermissions\n                    ref={permissionsRef}\n                    permissions={permissions}\n                    routes={routes}\n                  />\n                )}\n              </Flex>\n            </Layouts.Content>\n          </Form>\n        )}\n      </Formik>\n    </Main>\n  );\n};\n\nexport const ProtectedRolesCreatePage = () => (\n  <Page.Protect permissions={PERMISSIONS.createRole}>\n    <CreatePage />\n  </Page.Protect>\n);\n", "import * as React from 'react';\n\nimport {\n  Main,\n  Button,\n  Flex,\n  TextInput,\n  Textarea,\n  Typography,\n  Grid,\n  Field,\n} from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport {\n  Page,\n  BackButton,\n  useAPIErrorHandler,\n  useNotification,\n  useFetchClient,\n  Layouts,\n} from '@strapi/strapi/admin';\nimport { Formik, Form } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { useQuery, useMutation } from 'react-query';\nimport { useMatch } from 'react-router-dom';\n\nimport UsersPermissions from '../../../components/UsersPermissions';\nimport { PERMISSIONS } from '../../../constants';\nimport getTrad from '../../../utils/getTrad';\nimport { createRoleSchema } from '../constants';\nimport { usePlugins } from '../hooks/usePlugins';\n\nexport const EditPage = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const {\n    params: { id },\n  } = useMatch(`/settings/users-permissions/roles/:id`);\n  const { get } = useFetchClient();\n  const { isLoading: isLoadingPlugins, routes } = usePlugins();\n  const {\n    data: role,\n    isLoading: isLoadingRole,\n    refetch: refetchRole,\n  } = useQuery(['users-permissions', 'role', id], async () => {\n    // TODO: why doesn't this endpoint follow the admin API conventions?\n    const {\n      data: { role },\n    } = await get(`/users-permissions/roles/${id}`);\n\n    return role;\n  });\n\n  const permissionsRef = React.useRef();\n  const { put } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler();\n  const mutation = useMutation((body) => put(`/users-permissions/roles/${id}`, body), {\n    onError(error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    },\n\n    async onSuccess() {\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: getTrad('Settings.roles.created'),\n          defaultMessage: 'Role edited',\n        }),\n      });\n\n      await refetchRole();\n    },\n  });\n\n  const handleEditRoleSubmit = async (data) => {\n    const permissions = permissionsRef.current.getPermissions();\n\n    await mutation.mutate({ ...data, ...permissions, users: [] });\n  };\n\n  if (isLoadingRole) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          { name: 'Roles' }\n        )}\n      </Page.Title>\n      <Formik\n        enableReinitialize\n        initialValues={{ name: role.name, description: role.description }}\n        onSubmit={handleEditRoleSubmit}\n        validationSchema={createRoleSchema}\n      >\n        {({ handleSubmit, values, handleChange, errors }) => (\n          <Form noValidate onSubmit={handleSubmit}>\n            <Layouts.Header\n              primaryAction={\n                !isLoadingPlugins ? (\n                  <Button\n                    disabled={role.code === 'strapi-super-admin'}\n                    type=\"submit\"\n                    loading={mutation.isLoading}\n                    startIcon={<Check />}\n                  >\n                    {formatMessage({\n                      id: 'global.save',\n                      defaultMessage: 'Save',\n                    })}\n                  </Button>\n                ) : null\n              }\n              title={role.name}\n              subtitle={role.description}\n              navigationAction={<BackButton fallback=\"..\" />}\n            />\n            <Layouts.Content>\n              <Flex\n                background=\"neutral0\"\n                direction=\"column\"\n                alignItems=\"stretch\"\n                gap={7}\n                hasRadius\n                paddingTop={6}\n                paddingBottom={6}\n                paddingLeft={7}\n                paddingRight={7}\n                shadow=\"filterShadow\"\n              >\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n                  <Typography variant=\"delta\" tag=\"h2\">\n                    {formatMessage({\n                      id: getTrad('EditPage.form.roles'),\n                      defaultMessage: 'Role details',\n                    })}\n                  </Typography>\n\n                  <Grid.Root gap={4}>\n                    <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n                      <Field.Root\n                        name=\"name\"\n                        error={\n                          errors?.name\n                            ? formatMessage({\n                                id: errors.name,\n                                defaultMessage: 'Name is required',\n                              })\n                            : false\n                        }\n                        required\n                      >\n                        <Field.Label>\n                          {formatMessage({\n                            id: 'global.name',\n                            defaultMessage: 'Name',\n                          })}\n                        </Field.Label>\n                        <TextInput value={values.name || ''} onChange={handleChange} />\n                        <Field.Error />\n                      </Field.Root>\n                    </Grid.Item>\n                    <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n                      <Field.Root\n                        name=\"description\"\n                        error={\n                          errors?.description\n                            ? formatMessage({\n                                id: errors.description,\n                                defaultMessage: 'Description is required',\n                              })\n                            : false\n                        }\n                        required\n                      >\n                        <Field.Label>\n                          {formatMessage({\n                            id: 'global.description',\n                            defaultMessage: 'Description',\n                          })}\n                        </Field.Label>\n                        <Textarea value={values.description || ''} onChange={handleChange} />\n                        <Field.Error />\n                      </Field.Root>\n                    </Grid.Item>\n                  </Grid.Root>\n                </Flex>\n\n                {!isLoadingPlugins && (\n                  <UsersPermissions\n                    ref={permissionsRef}\n                    permissions={role.permissions}\n                    routes={routes}\n                  />\n                )}\n              </Flex>\n            </Layouts.Content>\n          </Form>\n        )}\n      </Formik>\n    </Main>\n  );\n};\n\nexport const ProtectedRolesEditPage = () => (\n  <Page.Protect permissions={PERMISSIONS.updateRole}>\n    <EditPage />\n  </Page.Protect>\n);\n", "import * as React from 'react';\n\nimport { Flex, IconButton, Link, Tbody, Td, Tr, Typography } from '@strapi/design-system';\nimport { Pencil, Trash } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nconst EditLink = styled(Link)`\n  align-items: center;\n  height: 3.2rem;\n  width: 3.2rem;\n  display: flex;\n  justify-content: center;\n  padding: ${({ theme }) => `${theme.spaces[2]}`};\n\n  svg {\n    height: 1.6rem;\n    width: 1.6rem;\n\n    path {\n      fill: ${({ theme }) => theme.colors.neutral500};\n    }\n  }\n\n  &:hover,\n  &:focus {\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.neutral800};\n      }\n    }\n  }\n`;\n\nconst TableBody = ({ sortedRoles, canDelete, canUpdate, setRoleToDelete, onDelete }) => {\n  const { formatMessage } = useIntl();\n  const navigate = useNavigate();\n  const [showConfirmDelete, setShowConfirmDelete] = onDelete;\n\n  const checkCanDeleteRole = (role) =>\n    canDelete && !['public', 'authenticated'].includes(role.type);\n\n  const handleClickDelete = (id) => {\n    setRoleToDelete(id);\n    setShowConfirmDelete(!showConfirmDelete);\n  };\n\n  return (\n    <Tbody>\n      {sortedRoles?.map((role) => (\n        <Tr cursor=\"pointer\" key={role.name} onClick={() => navigate(role.id.toString())}>\n          <Td width=\"20%\">\n            <Typography>{role.name}</Typography>\n          </Td>\n          <Td width=\"50%\">\n            <Typography>{role.description}</Typography>\n          </Td>\n          <Td width=\"30%\">\n            <Typography>\n              {formatMessage(\n                {\n                  id: 'Roles.RoleRow.user-count',\n                  defaultMessage: '{number, plural, =0 {# user} one {# user} other {# users}}',\n                },\n                { number: role.nb_users }\n              )}\n            </Typography>\n          </Td>\n          <Td>\n            <Flex justifyContent=\"end\" onClick={(e) => e.stopPropagation()}>\n              {canUpdate ? (\n                <EditLink\n                  tag={NavLink}\n                  to={role.id.toString()}\n                  aria-label={formatMessage(\n                    { id: 'app.component.table.edit', defaultMessage: 'Edit {target}' },\n                    { target: `${role.name}` }\n                  )}\n                >\n                  <Pencil />\n                </EditLink>\n              ) : null}\n\n              {checkCanDeleteRole(role) && (\n                <IconButton\n                  onClick={() => handleClickDelete(role.id.toString())}\n                  variant=\"ghost\"\n                  label={formatMessage(\n                    { id: 'global.delete-target', defaultMessage: 'Delete {target}' },\n                    { target: `${role.name}` }\n                  )}\n                >\n                  <Trash />\n                </IconButton>\n              )}\n            </Flex>\n          </Td>\n        </Tr>\n      ))}\n    </Tbody>\n  );\n};\n\nexport default TableBody;\n\nTableBody.defaultProps = {\n  canDelete: false,\n  canUpdate: false,\n};\n\nTableBody.propTypes = {\n  onDelete: PropTypes.array.isRequired,\n  setRoleToDelete: PropTypes.func.isRequired,\n  sortedRoles: PropTypes.array.isRequired,\n  canDelete: PropTypes.bool,\n  canUpdate: PropTypes.bool,\n};\n", "import React, { useState } from 'react';\n\nimport {\n  Table,\n  Th,\n  Thead,\n  Tr,\n  Typography,\n  useNotifyAT,\n  VisuallyHidden,\n  EmptyStateLayout,\n  useCollator,\n  useFilter,\n  LinkButton,\n  Dialog,\n} from '@strapi/design-system';\nimport { Plus } from '@strapi/icons';\nimport {\n  ConfirmDialog,\n  useTracking,\n  Page,\n  SearchInput,\n  useNotification,\n  useQueryParams,\n  useFetchClient,\n  useRBAC,\n  Layouts,\n} from '@strapi/strapi/admin';\nimport { useIntl } from 'react-intl';\nimport { useMutation, useQuery } from 'react-query';\nimport { NavLink } from 'react-router-dom';\n\nimport { PERMISSIONS } from '../../../../constants';\nimport { getTrad } from '../../../../utils';\n\nimport TableBody from './components/TableBody';\n\nexport const RolesListPage = () => {\n  const { trackUsage } = useTracking();\n  const { formatMessage, locale } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { notifyStatus } = useNotifyAT();\n  const [{ query }] = useQueryParams();\n  const _q = query?._q || '';\n  const [showConfirmDelete, setShowConfirmDelete] = useState(false);\n  const [roleToDelete, setRoleToDelete] = useState();\n  const { del, get } = useFetchClient();\n\n  const {\n    isLoading: isLoadingForPermissions,\n    allowedActions: { canRead, canDelete, canCreate, canUpdate },\n  } = useRBAC({\n    create: PERMISSIONS.createRole,\n    read: PERMISSIONS.readRoles,\n    update: PERMISSIONS.updateRole,\n    delete: PERMISSIONS.deleteRole,\n  });\n\n  const {\n    isLoading: isLoadingForData,\n    data: { roles },\n    isFetching,\n    refetch,\n  } = useQuery('get-roles', () => fetchData(toggleNotification, formatMessage, notifyStatus), {\n    initialData: {},\n    enabled: canRead,\n  });\n\n  const { contains } = useFilter(locale, {\n    sensitivity: 'base',\n  });\n\n  /**\n   * @type {Intl.Collator}\n   */\n  const formatter = useCollator(locale, {\n    sensitivity: 'base',\n  });\n\n  const isLoading = isLoadingForData || isFetching || isLoadingForPermissions;\n\n  const handleShowConfirmDelete = () => {\n    setShowConfirmDelete(!showConfirmDelete);\n  };\n\n  const deleteData = async (id, formatMessage, toggleNotification) => {\n    try {\n      await del(`/users-permissions/roles/${id}`);\n    } catch (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occured' }),\n      });\n    }\n  };\n\n  const fetchData = async (toggleNotification, formatMessage, notifyStatus) => {\n    try {\n      const { data } = await get('/users-permissions/roles');\n      notifyStatus('The roles have loaded successfully');\n\n      return data;\n    } catch (err) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n\n      throw new Error(err);\n    }\n  };\n\n  const emptyLayout = {\n    roles: {\n      id: getTrad('Roles.empty'),\n      defaultMessage: \"You don't have any roles yet.\",\n    },\n    search: {\n      id: getTrad('Roles.empty.search'),\n      defaultMessage: 'No roles match the search.',\n    },\n  };\n\n  const pageTitle = formatMessage({\n    id: 'global.roles',\n    defaultMessage: 'Roles',\n  });\n\n  const deleteMutation = useMutation((id) => deleteData(id, formatMessage, toggleNotification), {\n    async onSuccess() {\n      await refetch();\n    },\n  });\n\n  const handleConfirmDelete = async () => {\n    await deleteMutation.mutateAsync(roleToDelete);\n    setShowConfirmDelete(!showConfirmDelete);\n  };\n\n  const sortedRoles = (roles || [])\n    .filter((role) => contains(role.name, _q) || contains(role.description, _q))\n    .sort(\n      (a, b) => formatter.compare(a.name, b.name) || formatter.compare(a.description, b.description)\n    );\n\n  const emptyContent = _q && !sortedRoles.length ? 'search' : 'roles';\n\n  const colCount = 4;\n  const rowCount = (roles?.length || 0) + 1;\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Layouts.Root>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          { name: pageTitle }\n        )}\n      </Page.Title>\n      <Page.Main>\n        <Layouts.Header\n          title={formatMessage({\n            id: 'global.roles',\n            defaultMessage: 'Roles',\n          })}\n          subtitle={formatMessage({\n            id: 'Settings.roles.list.description',\n            defaultMessage: 'List of roles',\n          })}\n          primaryAction={\n            canCreate ? (\n              <LinkButton\n                to=\"new\"\n                tag={NavLink}\n                onClick={() => trackUsage('willCreateRole')}\n                startIcon={<Plus />}\n                size=\"S\"\n              >\n                {formatMessage({\n                  id: getTrad('List.button.roles'),\n                  defaultMessage: 'Add new role',\n                })}\n              </LinkButton>\n            ) : null\n          }\n        />\n\n        <Layouts.Action\n          startActions={\n            <SearchInput\n              label={formatMessage({\n                id: 'app.component.search.label',\n                defaultMessage: 'Search',\n              })}\n            />\n          }\n        />\n\n        <Layouts.Content>\n          {!canRead && <Page.NoPermissions />}\n          {canRead && sortedRoles && sortedRoles?.length ? (\n            <Table colCount={colCount} rowCount={rowCount}>\n              <Thead>\n                <Tr>\n                  <Th>\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\n                      {formatMessage({ id: 'global.name', defaultMessage: 'Name' })}\n                    </Typography>\n                  </Th>\n                  <Th>\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\n                      {formatMessage({\n                        id: 'global.description',\n                        defaultMessage: 'Description',\n                      })}\n                    </Typography>\n                  </Th>\n                  <Th>\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\n                      {formatMessage({\n                        id: 'global.users',\n                        defaultMessage: 'Users',\n                      })}\n                    </Typography>\n                  </Th>\n                  <Th>\n                    <VisuallyHidden>\n                      {formatMessage({\n                        id: 'global.actions',\n                        defaultMessage: 'Actions',\n                      })}\n                    </VisuallyHidden>\n                  </Th>\n                </Tr>\n              </Thead>\n              <TableBody\n                sortedRoles={sortedRoles}\n                canDelete={canDelete}\n                canUpdate={canUpdate}\n                permissions={PERMISSIONS}\n                setRoleToDelete={setRoleToDelete}\n                onDelete={[showConfirmDelete, setShowConfirmDelete]}\n              />\n            </Table>\n          ) : (\n            <EmptyStateLayout content={formatMessage(emptyLayout[emptyContent])} />\n          )}\n        </Layouts.Content>\n        <Dialog.Root open={showConfirmDelete} onOpenChange={handleShowConfirmDelete}>\n          <ConfirmDialog onConfirm={handleConfirmDelete} />\n        </Dialog.Root>\n      </Page.Main>\n    </Layouts.Root>\n  );\n};\n\nexport const ProtectedRolesListPage = () => {\n  return (\n    <Page.Protect permissions={PERMISSIONS.accessRoles}>\n      <RolesListPage />\n    </Page.Protect>\n  );\n};\n", "import * as React from 'react';\n\nimport { Page } from '@strapi/strapi/admin';\nimport { Route, Routes } from 'react-router-dom';\n\nimport { PERMISSIONS } from '../../constants';\n\nimport { ProtectedRolesCreatePage } from './pages/CreatePage';\nimport { ProtectedRolesEditPage } from './pages/EditPage';\nimport { ProtectedRolesListPage } from './pages/ListPage';\n\nconst Roles = () => {\n  return (\n    <Page.Protect permissions={PERMISSIONS.accessRoles}>\n      <Routes>\n        <Route index element={<ProtectedRolesListPage />} />\n        <Route path=\"new\" element={<ProtectedRolesCreatePage />} />\n        <Route path=\":id\" element={<ProtectedRolesEditPage />} />\n      </Routes>\n    </Page.Protect>\n  );\n};\n\nexport default Roles;\n"],
  "mappings": "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",
  "names": ["without", "take", "UsersPermissions", "createContext", "UsersPermissionsProvider", "children", "value", "_jsx", "Provider", "useUsersPermissions", "useContext", "propTypes", "PropTypes", "node", "isRequired", "object", "formatPluginName", "pluginSlug", "upperFirst", "replace", "init", "initialState", "permissions", "collapses", "Object", "keys", "sort", "map", "name", "isOpen", "activeCheckboxWrapperStyles", "css", "props", "theme", "colors", "primary100", "CheckboxWrapper", "styled", "Box", "primary600", "isActive", "Border", "div", "neutral150", "SubCategory", "subCategory", "formatMessage", "useIntl", "onChange", "onChangeSelectAll", "onSelectedAction", "selectedAction", "modifiedData", "currentScopedModifiedData", "useMemo", "get", "hasAllActionsSelected", "values", "every", "action", "enabled", "hasSomeActionsSelected", "some", "handleChangeSelectAll", "useCallback", "target", "isActionSelected", "actionName", "_jsxs", "Flex", "justifyContent", "alignItems", "paddingRight", "Typography", "variant", "textColor", "label", "paddingLeft", "Checkbox", "checked", "onCheckedChange", "id", "defaultMessage", "paddingTop", "paddingBottom", "Grid", "Root", "gap", "style", "flex", "actions", "Item", "col", "direction", "padding", "hasRadius", "button", "type", "onClick", "display", "VisuallyHidden", "tag", "route", "Cog", "cursor", "PermissionRow", "subCategories", "sortBy", "controllers", "reduce", "acc", "curr", "index", "currentName", "current", "string", "reducer", "state", "produce", "draftState", "collapse", "Permissions", "useReducer", "Accordion", "size", "Header", "undefined", "Trigger", "caretPosition", "description", "Content", "getMethodColor", "verb", "text", "border", "background", "MethodBox", "spaces", "BoundRoute", "method", "handler", "title", "path", "formattedRoute", "tail", "split", "controller", "span", "borderColor", "fontWeight", "includes", "defaultProps", "shape", "Policies", "routes", "without", "controllerRoutes", "pathResolved", "slice", "join", "displayedRoutes", "isEmpty", "filter", "o", "endsWith", "minHeight", "key", "initialData", "policies", "keysLength", "length", "isChangingCheckbox", "take", "set", "pathToValue", "oldValues", "updatedValues", "actionToSelect", "forwardRef", "ref", "dispatch", "useImperativeHandle", "getPermissions", "resetForm", "setFormAfterSubmit", "handleChange", "handleSelectedAction", "providerValue", "shadow", "getTrad", "memo", "createRoleSchema", "required", "translatedErrors", "cleanPermissions", "currentPermission", "cleanedControllers", "acc2", "usePlugins", "toggleNotification", "useNotification", "useFetchClient", "formatAPIError", "useAPIErrorHandler", "data", "isLoading", "isLoadingPermissions", "error", "permissionsError", "refetch", "refetchPermissions", "isLoadingRoutes", "routesError", "refetchRoutes", "useQueries", "queryKey", "queryFn", "refetchQueries", "Promise", "all", "useEffect", "message", "getData", "CreatePage", "navigate", "useNavigate", "isLoadingPlugins", "trackUsage", "useTracking", "permissionsRef", "useRef", "post", "mutation", "useMutation", "body", "onError", "onSuccess", "handleCreateRoleSubmit", "mutate", "users", "Main", "Page", "Title", "Formik", "enableReinitialize", "initialValues", "onSubmit", "validationSchema", "handleSubmit", "errors", "Form", "noValidate", "Layouts", "primaryAction", "Button", "loading", "startIcon", "Check", "subtitle", "Field", "Label", "TextInput", "Error", "Textarea", "ProtectedRolesCreatePage", "Protect", "PERMISSIONS", "createRole", "EditPage", "params", "useMatch", "role", "isLoadingRole", "refetchRole", "useQuery", "put", "handleEditRoleSubmit", "Loading", "disabled", "code", "navigationAction", "BackButton", "fallback", "ProtectedRolesEditPage", "updateRole", "EditLink", "Link", "neutral500", "neutral800", "TableBody", "sortedRoles", "canDelete", "canUpdate", "setRoleToDelete", "onDelete", "showConfirmDelete", "setShowConfirmDelete", "checkCanDeleteRole", "handleClickDelete", "Tbody", "Tr", "toString", "Td", "width", "number", "nb_users", "e", "stopPropagation", "NavLink", "to", "aria-label", "Pencil", "IconButton", "Trash", "array", "func", "bool", "RolesListPage", "locale", "notifyStatus", "useNotifyAT", "query", "useQueryParams", "_q", "useState", "roleToDelete", "del", "isLoadingForPermissions", "allowedActions", "canRead", "canCreate", "useRBAC", "create", "read", "readRoles", "update", "delete", "deleteRole", "isLoadingForData", "roles", "isFetching", "fetchData", "contains", "useFilter", "sensitivity", "formatter", "useCollator", "handleShowConfirmDelete", "deleteData", "err", "emptyLayout", "search", "pageTitle", "deleteMutation", "handleConfirmDelete", "mutateAsync", "a", "b", "compare", "emptyContent", "colCount", "rowCount", "LinkButton", "Plus", "Action", "startActions", "SearchInput", "NoPermissions", "Table", "Thead", "Th", "EmptyStateLayout", "content", "Dialog", "open", "onOpenChange", "ConfirmDialog", "onConfirm", "ProtectedRolesListPage", "accessRoles", "Roles", "Routes", "Route", "element"]
}

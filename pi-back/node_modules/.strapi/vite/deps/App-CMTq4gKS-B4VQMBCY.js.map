{
  "version": 3,
  "sources": ["../../../@strapi/upload/admin/src/utils/getBreadcrumbDataML.ts", "../../../@strapi/upload/admin/src/components/FolderCard/FolderCardCheckbox/FolderCardCheckbox.tsx", "../../../@strapi/upload/admin/src/pages/App/MediaLibrary/components/BulkDeleteButton.tsx", "../../../@strapi/upload/admin/src/hooks/useBulkMove.ts", "../../../@strapi/upload/admin/src/components/BulkMoveDialog/BulkMoveDialog.tsx", "../../../@strapi/upload/admin/src/pages/App/MediaLibrary/components/BulkMoveButton.tsx", "../../../@strapi/upload/admin/src/pages/App/MediaLibrary/components/BulkActions.tsx", "../../../@strapi/upload/admin/src/pages/App/MediaLibrary/components/EmptyOrNoPermissions.tsx", "../../../@strapi/upload/admin/src/pages/App/MediaLibrary/components/Filters.tsx", "../../../@strapi/upload/admin/src/pages/App/MediaLibrary/components/Header.tsx", "../../../@strapi/upload/admin/src/pages/App/MediaLibrary/MediaLibrary.tsx", "../../../@strapi/upload/admin/src/pages/App/App.tsx"],
  "sourcesContent": ["import { getFolderURL } from './getFolderURL';\nimport { getTrad } from './getTrad';\n\nimport type { Query } from '../../../shared/contracts/files';\nimport type { Folder } from '../../../shared/contracts/folders';\nimport type { MessageDescriptor } from 'react-intl';\n\ninterface GetBreadcrumbDataMLProps {\n  folder: Folder;\n  options: {\n    pathname: string;\n    query?: Query;\n  };\n}\n\ninterface GetBreadcrumbDataMLReturn {\n  id: number | null;\n  label: string | MessageDescriptor;\n  href?: string;\n}\n\ntype BreadcrumbData = GetBreadcrumbDataMLReturn | [];\n\nexport const getBreadcrumbDataML = (\n  folder: GetBreadcrumbDataMLProps['folder'] | null,\n  { pathname, query }: GetBreadcrumbDataMLProps['options']\n) => {\n  const data: BreadcrumbData[] = [\n    {\n      id: null,\n      label: { id: getTrad('plugin.name'), defaultMessage: 'Media Library' },\n      href: folder ? getFolderURL(pathname, query || {}) : undefined,\n    },\n  ];\n\n  if (folder?.parent && typeof folder?.parent !== 'number' && folder?.parent?.parent) {\n    data.push([]);\n  }\n\n  if (folder?.parent && typeof folder.parent !== 'number') {\n    data.push({\n      id: folder.parent.id,\n      label: folder.parent.name,\n      href: getFolderURL(pathname, query || {}, {\n        folder: folder.parent.id?.toString(),\n        folderPath: folder.parent.path,\n      }),\n    });\n  }\n\n  if (folder) {\n    data.push({\n      id: folder.id,\n      label: folder.name,\n    });\n  }\n\n  return data;\n};\n", "import { Checkbox, Box, CheckboxProps } from '@strapi/design-system';\n\nimport { useFolderCard } from '../contexts/FolderCard';\n\nexport const FolderCardCheckbox = (props: CheckboxProps) => {\n  const { id } = useFolderCard();\n\n  return (\n    <Box position=\"relative\" zIndex={2}>\n      <Checkbox aria-labelledby={`${id}-title`} {...props} />\n    </Box>\n  );\n};\n", "import { ConfirmDialog } from '@strapi/admin/strapi-admin';\nimport { Button, Dialog } from '@strapi/design-system';\nimport { Trash } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { useBulkRemove } from '../../../../hooks/useBulkRemove';\n\nimport type { FolderDefinition } from '../../../../../../shared/contracts/folders';\nimport type { FileWithType } from '../../../../hooks/useBulkRemove';\n\nexport interface BulkDeleteButtonProps {\n  selected: Array<FileWithType | FolderDefinition>;\n  onSuccess: () => void;\n}\n\nexport const BulkDeleteButton = ({ selected, onSuccess }: BulkDeleteButtonProps) => {\n  const { formatMessage } = useIntl();\n  const { remove } = useBulkRemove();\n\n  const handleConfirmRemove = async () => {\n    await remove(selected);\n    onSuccess();\n  };\n\n  return (\n    <Dialog.Root>\n      <Dialog.Trigger>\n        <Button variant=\"danger-light\" size=\"S\" startIcon={<Trash />}>\n          {formatMessage({ id: 'global.delete', defaultMessage: 'Delete' })}\n        </Button>\n      </Dialog.Trigger>\n      <ConfirmDialog onConfirm={handleConfirmRemove} />\n    </Dialog.Root>\n  );\n};\n", "import { useNotification, useFetchClient } from '@strapi/admin/strapi-admin';\nimport { useIntl } from 'react-intl';\nimport { useMutation, useQueryClient } from 'react-query';\n\nimport { File, BulkMoveFiles } from '../../../shared/contracts/files';\nimport { Folder, BulkMoveFolders } from '../../../shared/contracts/folders';\nimport { pluginId } from '../pluginId';\nimport { getTrad } from '../utils';\n\nexport interface FolderWithType extends Folder {\n  type: string;\n}\n\nexport interface FileWithType extends File {\n  type: string;\n}\n\ninterface BulkMoveParams {\n  destinationFolderId: number | string;\n  filesAndFolders: Array<FolderWithType | FileWithType>;\n}\n\n// Define the shape of the accumulator object\ntype Payload = {\n  fileIds?: number[];\n  folderIds?: number[];\n};\n\nexport const useBulkMove = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const queryClient = useQueryClient();\n  const { post } = useFetchClient();\n\n  const bulkMoveQuery = ({ destinationFolderId, filesAndFolders }: BulkMoveParams) => {\n    const payload = filesAndFolders.reduce<Payload>((acc, selected) => {\n      const { id, type } = selected;\n      const key = type === 'asset' ? 'fileIds' : 'folderIds';\n\n      if (!acc[key]) {\n        acc[key] = [];\n      }\n\n      acc[key]!.push(id);\n\n      return acc;\n    }, {});\n\n    return post('/upload/actions/bulk-move', { ...payload, destinationFolderId });\n  };\n\n  const mutation = useMutation<\n    BulkMoveFolders.Response | BulkMoveFiles.Response,\n    BulkMoveFolders.Response['error'] | BulkMoveFiles.Response['error'],\n    BulkMoveParams\n  >(bulkMoveQuery, {\n    onSuccess(res) {\n      const {\n        data: { data },\n      } = res;\n\n      if (data?.files?.length > 0) {\n        queryClient.refetchQueries([pluginId, 'assets'], { active: true });\n        queryClient.refetchQueries([pluginId, 'asset-count'], { active: true });\n      }\n\n      // folders need to be re-fetched in any case, because assets might have been\n      // moved into a sub-folder and therefore the count needs to be updated\n      queryClient.refetchQueries([pluginId, 'folders'], { active: true });\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: getTrad('modal.move.success-label'),\n          defaultMessage: 'Elements have been moved successfully.',\n        }),\n      });\n    },\n  });\n\n  const move = (\n    destinationFolderId: number | string,\n    filesAndFolders: Array<FolderWithType | FileWithType>\n  ) => mutation.mutateAsync({ destinationFolderId, filesAndFolders });\n\n  return { ...mutation, move };\n};\n", "import { Button, Flex, Grid, Field, Loader, Modal, Typography } from '@strapi/design-system';\nimport { Form, Formik, FormikErrors } from 'formik';\nimport isEmpty from 'lodash/isEmpty';\nimport { useIntl } from 'react-intl';\n\nimport { File } from '../../../../shared/contracts/files';\nimport { useBulkMove } from '../../hooks/useBulkMove';\nimport { useFolderStructure } from '../../hooks/useFolderStructure';\nimport { getTrad, normalizeAPIError } from '../../utils';\nimport { SelectTree } from '../SelectTree/SelectTree';\n\nimport type { Folder } from '../../../../shared/contracts/folders';\nimport type { OptionSelectTree } from '../SelectTree/SelectTree';\nimport type { FetchError } from '@strapi/admin/strapi-admin';\n\ntype InitialFormData = {\n  destination:\n    | {\n        value: string | number;\n        label: string;\n      }\n    | string;\n};\n\ninterface FolderWithType extends Folder {\n  type: string;\n}\n\ninterface FileWithType extends File {\n  type: string;\n}\n\nexport interface BulkMoveDialogProps {\n  onClose: () => void;\n  selected?: Array<FolderWithType | FileWithType>;\n  currentFolder?: FolderWithType;\n}\n\nexport const BulkMoveDialog = ({ onClose, selected = [], currentFolder }: BulkMoveDialogProps) => {\n  const { formatMessage } = useIntl();\n  const { data: folderStructure, isLoading } = useFolderStructure();\n  const { move } = useBulkMove();\n\n  if (!folderStructure) {\n    return null;\n  }\n\n  const handleSubmit = async (\n    values: InitialFormData,\n    { setErrors }: { setErrors: (errors: FormikErrors<InitialFormData>) => void }\n  ) => {\n    try {\n      if (typeof values.destination !== 'string') {\n        const destinationValue = values.destination.value;\n        await move(destinationValue, selected);\n        onClose();\n      }\n    } catch (error) {\n      const normalizedError = normalizeAPIError(error as FetchError)!;\n\n      if (normalizedError && 'errors' in normalizedError) {\n        const formikErrors = normalizedError.errors?.reduce<Record<string, string>>(\n          (acc, error) => {\n            acc[error.values?.path?.length || 'destination'] = error.defaultMessage;\n\n            return acc;\n          },\n          {}\n        );\n\n        if (!isEmpty(formikErrors)) {\n          setErrors(formikErrors);\n        }\n      }\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Modal.Content>\n        <Modal.Body>\n          <Flex justifyContent=\"center\" paddingTop={4} paddingBottom={4}>\n            <Loader>\n              {formatMessage({\n                id: getTrad('content.isLoading'),\n                defaultMessage: 'Content is loading.',\n              })}\n            </Loader>\n          </Flex>\n        </Modal.Body>\n      </Modal.Content>\n    );\n  }\n\n  const initialFormData: InitialFormData = {\n    destination: {\n      value: currentFolder?.id || '',\n      label: currentFolder?.name || folderStructure[0].label,\n    },\n  };\n\n  return (\n    <Modal.Content>\n      <Formik validateOnChange={false} onSubmit={handleSubmit} initialValues={initialFormData}>\n        {({ values, errors, setFieldValue }) => (\n          <Form noValidate>\n            <Modal.Header>\n              <Modal.Title>\n                {formatMessage({\n                  id: getTrad('modal.folder.move.title'),\n                  defaultMessage: 'Move elements to',\n                })}\n              </Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n              <Grid.Root gap={4}>\n                <Grid.Item xs={12} col={12} direction=\"column\" alignItems=\"stretch\">\n                  <Field.Root id=\"folder-destination\">\n                    <Field.Label>\n                      {formatMessage({\n                        id: getTrad('form.input.label.folder-location'),\n                        defaultMessage: 'Location',\n                      })}\n                    </Field.Label>\n\n                    <SelectTree\n                      options={folderStructure as OptionSelectTree[]}\n                      onChange={(value: Record<string, string | number>) => {\n                        setFieldValue('destination', value);\n                      }}\n                      defaultValue={\n                        typeof values.destination !== 'string' ? values.destination : undefined\n                      }\n                      name=\"destination\"\n                      menuPortalTarget={document.querySelector('body')}\n                      inputId=\"folder-destination\"\n                      error={errors?.destination}\n                      ariaErrorMessage=\"destination-error\"\n                    />\n\n                    {errors.destination && (\n                      <Typography variant=\"pi\" tag=\"p\" textColor=\"danger600\">\n                        {errors.destination}\n                      </Typography>\n                    )}\n                  </Field.Root>\n                </Grid.Item>\n              </Grid.Root>\n            </Modal.Body>\n\n            <Modal.Footer>\n              <Modal.Close>\n                <Button variant=\"tertiary\" name=\"cancel\">\n                  {formatMessage({ id: 'cancel', defaultMessage: 'Cancel' })}\n                </Button>\n              </Modal.Close>\n              <Button type=\"submit\" loading={isLoading}>\n                {formatMessage({ id: 'modal.folder.move.submit', defaultMessage: 'Move' })}\n              </Button>\n            </Modal.Footer>\n          </Form>\n        )}\n      </Formik>\n    </Modal.Content>\n  );\n};\n", "import * as React from 'react';\n\nimport { Button, Modal } from '@strapi/design-system';\nimport { Folder } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { BulkMoveDialog } from '../../../../components/BulkMoveDialog/BulkMoveDialog';\n\nimport type { File } from '../../../../../../shared/contracts/files';\nimport type { Folder as FolderDefinition } from '../../../../../../shared/contracts/folders';\n\ninterface FolderWithType extends FolderDefinition {\n  type: string;\n}\n\ninterface FileWithType extends File {\n  type: string;\n}\n\nexport interface BulkMoveButtonProps {\n  onSuccess: () => void;\n  currentFolder?: FolderWithType;\n  selected?: Array<FolderWithType | FileWithType>;\n}\n\nexport const BulkMoveButton = ({\n  selected = [],\n  onSuccess,\n  currentFolder,\n}: BulkMoveButtonProps) => {\n  const { formatMessage } = useIntl();\n  const [showConfirmDialog, setShowConfirmDialog] = React.useState(false);\n\n  const handleConfirmMove = () => {\n    setShowConfirmDialog(false);\n    onSuccess();\n  };\n\n  return (\n    <Modal.Root open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n      <Modal.Trigger>\n        <Button variant=\"secondary\" size=\"S\" startIcon={<Folder />}>\n          {formatMessage({ id: 'global.move', defaultMessage: 'Move' })}\n        </Button>\n      </Modal.Trigger>\n      <BulkMoveDialog\n        currentFolder={currentFolder}\n        onClose={handleConfirmMove}\n        selected={selected}\n      />\n    </Modal.Root>\n  );\n};\n", "import { Flex, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../../../utils';\n\nimport { BulkDeleteButton } from './BulkDeleteButton';\nimport { BulkMoveButton } from './BulkMoveButton';\n\nimport type { File } from '../../../../../../shared/contracts/files';\nimport type {\n  FolderDefinition,\n  Folder as FolderInitial,\n} from '../../../../../../shared/contracts/folders';\n\ninterface FolderWithType extends FolderInitial {\n  type: string;\n}\n\nexport interface FileWithType extends File {\n  type: string;\n}\n\nexport interface BulkActionsProps {\n  selected: Array<FileWithType | FolderDefinition> | Array<FolderWithType | FileWithType>;\n  onSuccess: () => void;\n  currentFolder?: FolderWithType;\n}\n\nexport const BulkActions = ({ selected = [], onSuccess, currentFolder }: BulkActionsProps) => {\n  const { formatMessage } = useIntl();\n  const numberAssets = selected?.reduce(function (_this, val) {\n    return val?.type === 'folder' && 'files' in val && val?.files && 'count' in val.files\n      ? _this + val?.files?.count\n      : _this + 1;\n  }, 0);\n\n  return (\n    <Flex gap={2} paddingBottom={5}>\n      <Typography variant=\"epsilon\" textColor=\"neutral600\">\n        {formatMessage(\n          {\n            id: getTrad('list.assets.selected'),\n            defaultMessage:\n              '{numberFolders, plural, one {1 folder} other {# folders}} - {numberAssets, plural, one {1 asset} other {# assets}} selected',\n          },\n          {\n            numberFolders: selected?.filter(({ type }) => type === 'folder').length,\n            numberAssets,\n          }\n        )}\n      </Typography>\n\n      <BulkDeleteButton\n        selected={selected as Array<FileWithType | FolderDefinition>}\n        onSuccess={onSuccess}\n      />\n      <BulkMoveButton\n        currentFolder={currentFolder}\n        selected={selected as Array<FolderWithType | FileWithType>}\n        onSuccess={onSuccess}\n      />\n    </Flex>\n  );\n};\n", "import { Button } from '@strapi/design-system';\nimport { Plus } from '@strapi/icons';\nimport { EmptyPermissions } from '@strapi/icons/symbols';\nimport { useIntl } from 'react-intl';\n\nimport { EmptyAssets } from '../../../../components/EmptyAssets/EmptyAssets';\nimport { getTrad } from '../../../../utils';\n\nexport interface EmptyOrNoPermissionsProps {\n  canCreate: boolean;\n  canRead: boolean;\n  isFiltering: boolean;\n  onActionClick: () => void;\n}\n\nconst getContentIntlMessage = ({\n  isFiltering,\n  canCreate,\n  canRead,\n}: Omit<EmptyOrNoPermissionsProps, 'onActionClick'>) => {\n  if (isFiltering) {\n    return {\n      id: 'list.assets-empty.title-withSearch',\n      defaultMessage: 'There are no elements with the applied filters',\n    };\n  }\n\n  if (canRead) {\n    if (canCreate) {\n      return {\n        id: 'list.assets.empty-upload',\n        defaultMessage: 'Upload your first assets...',\n      };\n    }\n\n    return {\n      id: 'list.assets.empty',\n      defaultMessage: 'Media Library is empty',\n    };\n  }\n\n  return {\n    id: 'header.actions.no-permissions',\n    defaultMessage: 'No permissions to view',\n  };\n};\n\nexport const EmptyOrNoPermissions = ({\n  canCreate,\n  isFiltering,\n  canRead,\n  onActionClick,\n}: EmptyOrNoPermissionsProps) => {\n  const { formatMessage } = useIntl();\n  const content = getContentIntlMessage({ isFiltering, canCreate, canRead });\n\n  return (\n    <EmptyAssets\n      icon={!canRead ? EmptyPermissions : undefined}\n      action={\n        canCreate &&\n        !isFiltering && (\n          <Button variant=\"secondary\" startIcon={<Plus />} onClick={onActionClick}>\n            {formatMessage({\n              id: getTrad('header.actions.add-assets'),\n              defaultMessage: 'Add new assets',\n            })}\n          </Button>\n        )\n      }\n      content={formatMessage({\n        ...content,\n        id: getTrad(content.id),\n      })}\n    />\n  );\n};\n", "import * as React from 'react';\n\nimport { useTracking, useQueryParams } from '@strapi/admin/strapi-admin';\nimport { Button, Popover } from '@strapi/design-system';\nimport { Filter } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { FilterList } from '../../../../components/FilterList/FilterList';\nimport { FilterPopover } from '../../../../components/FilterPopover/FilterPopover';\nimport { displayedFilters } from '../../../../utils';\n\nimport type { Query } from '../../../../../../shared/contracts/files';\nimport type { FilterListProps } from '../../../../components/FilterList/FilterList';\nimport type { FilterPopoverProps } from '../../../../components/FilterPopover/FilterPopover';\n\nexport const Filters = () => {\n  const [open, setOpen] = React.useState(false);\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const [{ query }, setQuery] = useQueryParams<Query>();\n  const filters = query?.filters?.$and || [];\n\n  const handleRemoveFilter: FilterListProps['onRemoveFilter'] = (nextFilters) => {\n    setQuery({ filters: { $and: nextFilters }, page: 1 } as Query);\n  };\n\n  const handleSubmit: FilterPopoverProps['onSubmit'] = (filters) => {\n    trackUsage('didFilterMediaLibraryElements', {\n      location: 'content-manager',\n      filter: Object.keys(filters[filters.length - 1])[0],\n    });\n    setQuery({ filters: { $and: filters }, page: 1 } as Query);\n  };\n\n  return (\n    <Popover.Root open={open} onOpenChange={setOpen}>\n      <Popover.Trigger>\n        <Button variant=\"tertiary\" startIcon={<Filter />} size=\"S\">\n          {formatMessage({ id: 'app.utils.filters', defaultMessage: 'Filters' })}\n        </Button>\n      </Popover.Trigger>\n      <FilterPopover\n        displayedFilters={displayedFilters}\n        filters={filters}\n        onSubmit={handleSubmit}\n        onToggle={setOpen as FilterPopoverProps['onToggle']}\n      />\n      <FilterList\n        appliedFilters={filters as FilterListProps['appliedFilters']}\n        filtersSchema={displayedFilters}\n        onRemoveFilter={handleRemoveFilter}\n      />\n    </Popover.Root>\n  );\n};\n", "import { useQueryParams, Layouts } from '@strapi/admin/strapi-admin';\nimport { Button, Flex, Link } from '@strapi/design-system';\nimport { ArrowLeft, Plus } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { useLocation, NavLink } from 'react-router-dom';\n\nimport { Breadcrumbs } from '../../../../components/Breadcrumbs/Breadcrumbs';\nimport { getTrad } from '../../../../utils';\n\nimport type { Folder } from '../../../../../../shared/contracts/folders';\nimport type { CrumbDefinition } from '../../../../components/Breadcrumbs/Breadcrumbs';\n\ninterface FolderDefinition extends Omit<Folder, 'children' | 'files' | 'parent'> {\n  children: {\n    count: number;\n  };\n  files: {\n    count: number;\n  };\n  parent?: FolderDefinition;\n}\n\nexport interface HeaderProps {\n  breadcrumbs?: Array<CrumbDefinition> | null;\n  canCreate: boolean;\n  folder?: FolderDefinition | null;\n  onToggleEditFolderDialog: ({ created }?: { created?: boolean }) => void;\n  onToggleUploadAssetDialog: () => void;\n}\n\nexport const Header = ({\n  breadcrumbs = null,\n  canCreate,\n  folder = null,\n  onToggleEditFolderDialog,\n  onToggleUploadAssetDialog,\n}: HeaderProps) => {\n  const { formatMessage } = useIntl();\n  const { pathname } = useLocation();\n  const [{ query }] = useQueryParams();\n  const backQuery = {\n    ...query,\n    folder:\n      folder?.parent && typeof folder.parent !== 'number' && folder.parent.id\n        ? folder.parent.id\n        : undefined,\n    folderPath:\n      folder?.parent && typeof folder.parent !== 'number' && folder.parent.path\n        ? folder.parent.path\n        : undefined,\n  };\n\n  return (\n    <Layouts.Header\n      title={formatMessage({\n        id: getTrad('plugin.name'),\n        defaultMessage: `Media Library`,\n      })}\n      subtitle={\n        breadcrumbs &&\n        typeof breadcrumbs !== 'boolean' &&\n        folder && (\n          <Breadcrumbs\n            label={formatMessage({\n              id: getTrad('header.breadcrumbs.nav.label'),\n              defaultMessage: 'Folders navigation',\n            })}\n            breadcrumbs={breadcrumbs}\n            currentFolderId={folder?.id}\n          />\n        )\n      }\n      navigationAction={\n        folder && (\n          <Link\n            tag={NavLink}\n            startIcon={<ArrowLeft />}\n            to={`${pathname}?${stringify(backQuery, { encode: false })}`}\n          >\n            {formatMessage({\n              id: getTrad('header.actions.folder-level-up'),\n              defaultMessage: 'Back',\n            })}\n          </Link>\n        )\n      }\n      primaryAction={\n        canCreate && (\n          <Flex gap={2}>\n            <Button startIcon={<Plus />} variant=\"secondary\" onClick={onToggleEditFolderDialog}>\n              {formatMessage({\n                id: getTrad('header.actions.add-folder'),\n                defaultMessage: 'Add new folder',\n              })}\n            </Button>\n\n            <Button startIcon={<Plus />} onClick={onToggleUploadAssetDialog}>\n              {formatMessage({\n                id: getTrad('header.actions.add-assets'),\n                defaultMessage: 'Add new assets',\n              })}\n            </Button>\n          </Flex>\n        )\n      }\n    />\n  );\n};\n", "// TODO: find a better naming convention for the file that was an index file before\nimport * as React from 'react';\n\nimport {\n  Page,\n  SearchInput,\n  Pagination,\n  useTracking,\n  useQueryParams,\n  Layouts,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Checkbox,\n  Box,\n  Divider,\n  Flex,\n  IconButton,\n  Typography,\n  VisuallyHidden,\n  Grid,\n} from '@strapi/design-system';\nimport { Cog, GridFour as GridIcon, List, Pencil } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { Link as ReactRouterLink, useNavigate, useLocation } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { AssetGridList } from '../../../components/AssetGridList/AssetGridList';\nimport { EditAssetDialog } from '../../../components/EditAssetDialog/EditAssetContent';\nimport { EditFolderDialog } from '../../../components/EditFolderDialog/EditFolderDialog';\nimport { FolderCard } from '../../../components/FolderCard/FolderCard/FolderCard';\nimport { FolderCardBody } from '../../../components/FolderCard/FolderCardBody/FolderCardBody';\nimport { FolderCardBodyAction } from '../../../components/FolderCard/FolderCardBodyAction/FolderCardBodyAction';\nimport { FolderCardCheckbox } from '../../../components/FolderCard/FolderCardCheckbox/FolderCardCheckbox';\nimport { FolderGridList } from '../../../components/FolderGridList/FolderGridList';\nimport { SortPicker } from '../../../components/SortPicker/SortPicker';\nimport { TableList } from '../../../components/TableList/TableList';\nimport { UploadAssetDialog } from '../../../components/UploadAssetDialog/UploadAssetDialog';\nimport { localStorageKeys, viewOptions } from '../../../constants';\nimport { useAssets } from '../../../hooks/useAssets';\nimport { useFolder } from '../../../hooks/useFolder';\nimport { useFolders } from '../../../hooks/useFolders';\nimport { useMediaLibraryPermissions } from '../../../hooks/useMediaLibraryPermissions';\nimport { usePersistentState } from '../../../hooks/usePersistentState';\nimport { useSelectionState } from '../../../hooks/useSelectionState';\nimport { containsAssetFilter, getBreadcrumbDataML, getFolderURL, getTrad } from '../../../utils';\n\nimport { BulkActions } from './components/BulkActions';\nimport { EmptyOrNoPermissions } from './components/EmptyOrNoPermissions';\nimport { Filters } from './components/Filters';\nimport { Header } from './components/Header';\n\nimport type { BulkActionsProps } from './components/BulkActions';\nimport type { HeaderProps } from './components/Header';\nimport type { Query } from '../../../../../shared/contracts/files';\nimport type { FolderDefinition } from '../../../../../shared/contracts/folders';\nimport type { AssetGridListProps } from '../../../components/AssetGridList/AssetGridList';\nimport type { Asset } from '../../../components/EditAssetDialog/EditAssetContent';\nimport type { FolderRow, FileRow, TableListProps } from '../../../components/TableList/TableList';\n\nconst BoxWithHeight = styled(Box)`\n  height: 3.2rem;\n  display: flex;\n  align-items: center;\n`;\n\nconst TypographyMaxWidth = styled(Typography)`\n  max-width: 100%;\n`;\n\nconst ActionContainer = styled(Box)`\n  svg {\n    path {\n      fill: ${({ theme }) => theme.colors.neutral500};\n    }\n  }\n`;\n\nexport const MediaLibrary = () => {\n  const navigate = useNavigate();\n  const {\n    canRead,\n    canCreate,\n    canUpdate,\n    canCopyLink,\n    canDownload,\n    canConfigureView,\n    isLoading: permissionsLoading,\n  } = useMediaLibraryPermissions();\n  const currentFolderToEditRef = React.useRef<HTMLDivElement>();\n  const { formatMessage } = useIntl();\n  const { pathname } = useLocation();\n  const { trackUsage } = useTracking();\n  const [{ query }, setQuery] = useQueryParams<Query>();\n  const isFiltering = Boolean(query._q || query.filters);\n  const [view, setView] = usePersistentState(localStorageKeys.view, viewOptions.GRID);\n  const isGridView = view === viewOptions.GRID;\n\n  const {\n    data: assetsData,\n    isLoading: assetsLoading,\n    error: assetsError,\n  } = useAssets({\n    skipWhen: !canRead,\n    query,\n  });\n\n  const {\n    data: foldersData,\n    isLoading: foldersLoading,\n    error: foldersError,\n  } = useFolders({\n    enabled: canRead && assetsData?.pagination?.page === 1 && !containsAssetFilter(query),\n    query,\n  });\n\n  const {\n    data: currentFolder,\n    isLoading: isCurrentFolderLoading,\n    error: currentFolderError,\n  } = useFolder(query?.folder as number | null | undefined, {\n    enabled: canRead && !!query?.folder,\n  });\n\n  // Folder was not found: redirect to the media library root\n  if (currentFolderError?.name === 'NotFoundError') {\n    navigate(pathname);\n  }\n\n  const folders =\n    foldersData?.map((folder) => ({\n      ...folder,\n      type: 'folder',\n      folderURL: getFolderURL(pathname, query, {\n        folder: folder.id.toString(),\n        folderPath: folder.path,\n      }),\n      isSelectable: canUpdate,\n    })) ?? [];\n  const folderCount = folders?.length || 0;\n  const assets =\n    assetsData?.results?.map((asset) => ({ ...asset, type: 'asset', isSelectable: canUpdate })) ||\n    [];\n  const assetCount = assets?.length ?? 0;\n  const totalAssetCount = assetsData?.pagination?.total;\n\n  const isLoading = isCurrentFolderLoading || foldersLoading || permissionsLoading || assetsLoading;\n  const [showUploadAssetDialog, setShowUploadAssetDialog] = React.useState(false);\n  const [showEditFolderDialog, setShowEditFolderDialog] = React.useState(false);\n  const [assetToEdit, setAssetToEdit] = React.useState<Asset | undefined>(undefined);\n  const [folderToEdit, setFolderToEdit] = React.useState<FolderRow | undefined | null>(undefined);\n  const [selected, { selectOne, selectAll }] = useSelectionState<FolderRow | FileRow>(\n    ['type', 'id'],\n    []\n  );\n  const indeterminateBulkSelect =\n    selected?.length > 0 && selected?.length !== assetCount + folderCount;\n  const toggleUploadAssetDialog = () => setShowUploadAssetDialog((prev) => !prev);\n  const toggleEditFolderDialog = ({ created = false } = {}) => {\n    // folders are only displayed on the first page, therefore\n    // we have to navigate the user to that page, in case a folder\n    // was created successfully in order for them to see it\n    if (created && query?.page !== '1') {\n      setQuery({\n        ...query,\n        page: 1,\n      });\n    }\n\n    setShowEditFolderDialog((prev) => !prev);\n  };\n\n  const handleBulkSelect = (\n    checked: boolean | 'indeterminate',\n    elements?: FolderRow[] | FileRow[]\n  ) => {\n    if (checked) {\n      trackUsage('didSelectAllMediaLibraryElements');\n    }\n\n    selectAll(elements as (FolderRow | FileRow)[]);\n  };\n\n  const handleChangeSort = (value: Query['sort'] | string) => {\n    trackUsage('didSortMediaLibraryElements', {\n      location: 'upload',\n      sort: value,\n    });\n    setQuery({ sort: value as Query['sort'] });\n  };\n\n  const handleEditFolder = (folder: FolderRow) => {\n    setFolderToEdit(folder);\n    setShowEditFolderDialog(true);\n  };\n\n  const handleEditFolderClose = (payload?: { created?: boolean | undefined }) => {\n    setFolderToEdit(null);\n    toggleEditFolderDialog(payload);\n\n    if (currentFolderToEditRef.current) {\n      currentFolderToEditRef.current.focus();\n    }\n  };\n\n  const handleAssetDeleted = (numberOfAssets: number) => {\n    if (\n      numberOfAssets === assetCount &&\n      assetsData?.pagination?.page === assetsData?.pagination?.pageCount &&\n      assetsData?.pagination?.page &&\n      assetsData.pagination.page > 1\n    ) {\n      setQuery({\n        ...query,\n        page: assetsData.pagination.page - 1,\n      });\n    }\n  };\n\n  const handleBulkActionSuccess = () => {\n    selectAll();\n\n    handleAssetDeleted(selected.length);\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  if (assetsError || foldersError) {\n    return <Page.Error />;\n  }\n\n  return (\n    <Layouts.Root>\n      <Page.Main>\n        <Header\n          breadcrumbs={\n            !isCurrentFolderLoading\n              ? (getBreadcrumbDataML(currentFolder!, {\n                  pathname,\n                  query,\n                }) as HeaderProps['breadcrumbs'])\n              : null\n          }\n          canCreate={canCreate}\n          onToggleEditFolderDialog={toggleEditFolderDialog}\n          onToggleUploadAssetDialog={toggleUploadAssetDialog}\n          folder={currentFolder as HeaderProps['folder']}\n        />\n        <Layouts.Action\n          startActions={\n            <>\n              {canUpdate && isGridView && (assetCount > 0 || folderCount > 0) && (\n                <BoxWithHeight\n                  paddingLeft={2}\n                  paddingRight={2}\n                  background=\"neutral0\"\n                  hasRadius\n                  borderColor=\"neutral200\"\n                >\n                  <Checkbox\n                    aria-label={formatMessage({\n                      id: getTrad('bulk.select.label'),\n                      defaultMessage: 'Select all folders & assets',\n                    })}\n                    checked={\n                      indeterminateBulkSelect\n                        ? 'indeterminate'\n                        : (assetCount > 0 || folderCount > 0) &&\n                          selected.length === assetCount + folderCount\n                    }\n                    onCheckedChange={(e) =>\n                      handleBulkSelect(e, [...assets, ...folders] as FolderRow[] | FileRow[])\n                    }\n                  />\n                </BoxWithHeight>\n              )}\n              {canRead && isGridView && (\n                <SortPicker value={query?.sort} onChangeSort={handleChangeSort} />\n              )}\n              {canRead && <Filters />}\n            </>\n          }\n          endActions={\n            <>\n              {canConfigureView ? (\n                <ActionContainer paddingTop={1} paddingBottom={1}>\n                  <IconButton\n                    tag={ReactRouterLink}\n                    to={{\n                      pathname: `${pathname}/configuration`,\n                      search: stringify(query, { encode: false }),\n                    }}\n                    label={formatMessage({\n                      id: 'app.links.configure-view',\n                      defaultMessage: 'Configure the view',\n                    })}\n                  >\n                    <Cog />\n                  </IconButton>\n                </ActionContainer>\n              ) : null}\n              <ActionContainer paddingTop={1} paddingBottom={1}>\n                <IconButton\n                  label={\n                    isGridView\n                      ? formatMessage({\n                          id: getTrad('view-switch.list'),\n                          defaultMessage: 'List View',\n                        })\n                      : formatMessage({\n                          id: getTrad('view-switch.grid'),\n                          defaultMessage: 'Grid View',\n                        })\n                  }\n                  onClick={() => setView(isGridView ? viewOptions.LIST : viewOptions.GRID)}\n                >\n                  {isGridView ? <List /> : <GridIcon />}\n                </IconButton>\n              </ActionContainer>\n              <SearchInput\n                label={formatMessage({\n                  id: getTrad('search.label'),\n                  defaultMessage: 'Search for an asset',\n                })}\n                trackedEvent=\"didSearchMediaLibraryElements\"\n                trackedEventDetails={{ location: 'upload' }}\n              />\n            </>\n          }\n        />\n\n        <Layouts.Content>\n          {selected.length > 0 && (\n            <BulkActions\n              currentFolder={currentFolder as BulkActionsProps['currentFolder']}\n              selected={selected as BulkActionsProps['selected']}\n              onSuccess={handleBulkActionSuccess}\n            />\n          )}\n\n          {folderCount === 0 && assetCount === 0 && (\n            <EmptyOrNoPermissions\n              canCreate={canCreate}\n              canRead={canRead}\n              isFiltering={isFiltering}\n              onActionClick={toggleUploadAssetDialog}\n            />\n          )}\n\n          {/* TODO: fix AssetListTable should handle no assets views (loading) */}\n          {canRead && !isGridView && (assetCount > 0 || folderCount > 0) && (\n            <TableList\n              assetCount={assetCount}\n              folderCount={folderCount}\n              indeterminate={indeterminateBulkSelect}\n              onChangeSort={handleChangeSort}\n              onChangeFolder={(folderID, folderPath) =>\n                navigate(getFolderURL(pathname, query, { folder: folderID.toString(), folderPath }))\n              }\n              onEditAsset={setAssetToEdit as TableListProps['onEditAsset']}\n              onEditFolder={handleEditFolder}\n              onSelectOne={selectOne}\n              onSelectAll={handleBulkSelect as TableListProps['onSelectAll']}\n              rows={[...folders, ...assets] as TableListProps['rows']}\n              selected={selected as TableListProps['selected']}\n              shouldDisableBulkSelect={!canUpdate}\n              sortQuery={query?.sort ?? ''}\n            />\n          )}\n\n          {canRead && isGridView && (\n            <>\n              {folderCount > 0 && (\n                <FolderGridList\n                  title={\n                    // Folders title should only appear if:\n                    // user is filtering and there are assets to display, to divide both type of elements\n                    // user is not filtering\n                    (((isFiltering && assetCount > 0) || !isFiltering) &&\n                      formatMessage(\n                        {\n                          id: getTrad('list.folders.title'),\n                          defaultMessage: 'Folders ({count})',\n                        },\n                        { count: folderCount }\n                      )) ||\n                    ''\n                  }\n                >\n                  {folders.map((folder) => {\n                    const selectedFolders = selected.filter(({ type }) => type === 'folder');\n                    const isSelected = !!selectedFolders.find(\n                      (currentFolder) => currentFolder.id === folder.id\n                    );\n\n                    const url = getFolderURL(pathname, query, {\n                      folder: folder?.id.toString(),\n                      folderPath: folder?.path,\n                    });\n\n                    return (\n                      <Grid.Item\n                        col={3}\n                        key={`folder-${folder.id}`}\n                        direction=\"column\"\n                        alignItems=\"stretch\"\n                      >\n                        <FolderCard\n                          ref={\n                            folderToEdit && folder.id === folderToEdit.id\n                              ? currentFolderToEditRef\n                              : undefined\n                          }\n                          ariaLabel={folder.name}\n                          id={`folder-${folder.id}`}\n                          to={url}\n                          startAction={\n                            folder.isSelectable ? (\n                              <FolderCardCheckbox\n                                data-testid={`folder-checkbox-${folder.id}`}\n                                checked={isSelected}\n                                onCheckedChange={() => selectOne(folder)}\n                              />\n                            ) : null\n                          }\n                          cardActions={\n                            <IconButton\n                              label={formatMessage({\n                                id: getTrad('list.folder.edit'),\n                                defaultMessage: 'Edit folder',\n                              })}\n                              onClick={() => handleEditFolder(folder)}\n                            >\n                              <Pencil />\n                            </IconButton>\n                          }\n                        >\n                          <FolderCardBody>\n                            <FolderCardBodyAction to={url}>\n                              <Flex tag=\"h2\" direction=\"column\" alignItems=\"start\" maxWidth=\"100%\">\n                                <TypographyMaxWidth\n                                  fontWeight=\"semiBold\"\n                                  textColor=\"neutral800\"\n                                  ellipsis\n                                >\n                                  {folder.name}\n                                  <VisuallyHidden>:</VisuallyHidden>\n                                </TypographyMaxWidth>\n\n                                <TypographyMaxWidth\n                                  tag=\"span\"\n                                  textColor=\"neutral600\"\n                                  variant=\"pi\"\n                                  ellipsis\n                                >\n                                  {formatMessage(\n                                    {\n                                      id: getTrad('list.folder.subtitle'),\n                                      defaultMessage:\n                                        '{folderCount, plural, =0 {# folder} one {# folder} other {# folders}}, {filesCount, plural, =0 {# asset} one {# asset} other {# assets}}',\n                                    },\n                                    {\n                                      folderCount: (folder as FolderDefinition).children?.count,\n                                      filesCount: (folder as FolderDefinition).files?.count,\n                                    }\n                                  )}\n                                </TypographyMaxWidth>\n                              </Flex>\n                            </FolderCardBodyAction>\n                          </FolderCardBody>\n                        </FolderCard>\n                      </Grid.Item>\n                    );\n                  })}\n                </FolderGridList>\n              )}\n\n              {assetCount > 0 && folderCount > 0 && (\n                <Box paddingTop={6} paddingBottom={4}>\n                  <Divider />\n                </Box>\n              )}\n\n              {assetCount > 0 && (\n                <AssetGridList\n                  assets={assets}\n                  onEditAsset={setAssetToEdit as AssetGridListProps['onEditAsset']}\n                  onSelectAsset={selectOne}\n                  selectedAssets={\n                    selected.filter(\n                      ({ type }) => type === 'asset'\n                    ) as AssetGridListProps['selectedAssets']\n                  }\n                  title={\n                    // Assets title should only appear if:\n                    // - user is not filtering\n                    // - user is filtering and there are folders to display, to separate them\n                    // - user is on page 1 since folders won't appear on any other page than the first one (no need to visually separate them)\n                    ((!isFiltering || (isFiltering && folderCount > 0)) &&\n                      assetsData?.pagination?.page === 1 &&\n                      formatMessage(\n                        {\n                          id: getTrad('list.assets.title'),\n                          defaultMessage: 'Assets ({count})',\n                        },\n                        { count: totalAssetCount }\n                      )) ||\n                    ''\n                  }\n                />\n              )}\n            </>\n          )}\n          <Pagination.Root {...assetsData?.pagination}>\n            <Pagination.PageSize />\n            <Pagination.Links />\n          </Pagination.Root>\n        </Layouts.Content>\n      </Page.Main>\n      {showUploadAssetDialog && (\n        <UploadAssetDialog\n          open={showUploadAssetDialog}\n          onClose={toggleUploadAssetDialog}\n          trackedLocation=\"upload\"\n          folderId={query?.folder as string | number | null | undefined}\n        />\n      )}\n      {showEditFolderDialog && (\n        <EditFolderDialog\n          open={showEditFolderDialog}\n          onClose={() => handleEditFolderClose()}\n          folder={folderToEdit as FolderDefinition}\n          parentFolderId={query?.folder as string | number | null | undefined}\n          location=\"upload\"\n        />\n      )}\n      {assetToEdit && (\n        <EditAssetDialog\n          onClose={(editedAsset) => {\n            // The asset has been deleted\n            if (editedAsset === null) {\n              handleAssetDeleted(1);\n            }\n\n            setAssetToEdit(undefined);\n          }}\n          open={!!assetToEdit}\n          asset={assetToEdit}\n          canUpdate={canUpdate}\n          canCopyLink={canCopyLink}\n          canDownload={canDownload}\n          trackedLocation=\"upload\"\n        />\n      )}\n    </Layouts.Root>\n  );\n};\n", "// TODO: find a better naming convention for the file that was an index file before\nimport * as React from 'react';\n\nimport { Page, useQueryParams } from '@strapi/admin/strapi-admin';\nimport { useIntl } from 'react-intl';\nimport { Route, Routes } from 'react-router-dom';\n\nimport { useConfig } from '../../hooks/useConfig';\nimport { getTrad } from '../../utils';\n\nimport { MediaLibrary } from './MediaLibrary/MediaLibrary';\n\nimport type { Configuration } from '../../../../shared/contracts/configuration';\n\nconst ConfigureTheView = React.lazy(async () =>\n  import('./ConfigureTheView/ConfigureTheView').then((mod) => ({ default: mod.ConfigureTheView }))\n);\n\nexport const Upload = () => {\n  const {\n    config: { isLoading, isError, data: config },\n  } = useConfig() as { config: { isLoading: boolean; isError: boolean; data: Configuration } };\n\n  const [{ rawQuery }, setQuery] = useQueryParams();\n  const { formatMessage } = useIntl();\n  const title = formatMessage({ id: getTrad('plugin.name'), defaultMessage: 'Media Library' });\n\n  React.useEffect(() => {\n    if (isLoading || isError || rawQuery) {\n      return;\n    }\n    setQuery({\n      sort: config.sort,\n      page: 1,\n      pageSize: config.pageSize,\n    });\n  }, [isLoading, isError, config, rawQuery, setQuery]);\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Page.Main>\n      <Page.Title>{title}</Page.Title>\n      {rawQuery ? (\n        <React.Suspense fallback={<Page.Loading />}>\n          <Routes>\n            <Route index element={<MediaLibrary />} />\n            <Route\n              path=\"configuration\"\n              element={<ConfigureTheView config={config as Configuration} />}\n            />\n          </Routes>\n        </React.Suspense>\n      ) : null}\n    </Page.Main>\n  );\n};\n"],
  "mappings": "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",
  "names": ["getBreadcrumbDataML", "folder", "pathname", "query", "data", "id", "label", "getTrad", "defaultMessage", "href", "getFolderURL", "undefined", "parent", "push", "name", "toString", "folderPath", "path", "FolderCardCheckbox", "props", "useFolderCard", "_jsx", "Box", "position", "zIndex", "Checkbox", "aria-labelledby", "BulkDeleteButton", "selected", "onSuccess", "formatMessage", "useIntl", "remove", "useBulkRemove", "handleConfirmRemove", "_jsxs", "Dialog", "Root", "Trigger", "Button", "variant", "size", "startIcon", "Trash", "ConfirmDialog", "onConfirm", "useBulkMove", "toggleNotification", "useNotification", "queryClient", "useQueryClient", "post", "useFetchClient", "bulkMoveQuery", "destinationFolderId", "filesAndFolders", "payload", "reduce", "acc", "type", "key", "mutation", "useMutation", "res", "files", "length", "refetchQueries", "pluginId", "active", "message", "move", "mutateAsync", "BulkMoveDialog", "onClose", "currentFolder", "folderStructure", "isLoading", "useFolderStructure", "handleSubmit", "values", "setErrors", "destination", "destinationValue", "value", "error", "normalizedError", "normalizeAPIError", "formikErrors", "errors", "isEmpty", "Modal", "Content", "Body", "Flex", "justifyContent", "paddingTop", "paddingBottom", "Loader", "initialFormData", "Formik", "validateOnChange", "onSubmit", "initialValues", "setFieldValue", "Form", "noValidate", "Header", "Title", "Grid", "gap", "Item", "xs", "col", "direction", "alignItems", "Field", "Label", "SelectTree", "options", "onChange", "defaultValue", "menuPortalTarget", "document", "querySelector", "inputId", "ariaErrorMessage", "Typography", "tag", "textColor", "Footer", "Close", "loading", "BulkMoveButton", "showConfirmDialog", "setShowConfirmDialog", "useState", "handleConfirmMove", "open", "onOpenChange", "Folder", "BulkActions", "numberAssets", "_this", "val", "count", "numberFolders", "filter", "getContentIntlMessage", "isFiltering", "canCreate", "canRead", "EmptyOrNoPermissions", "onActionClick", "content", "EmptyAssets", "icon", "EmptyPermissions", "action", "Plus", "onClick", "Filters", "setOpen", "trackUsage", "useTracking", "setQuery", "useQueryParams", "filters", "$and", "handleRemoveFilter", "nextFilters", "page", "location", "Object", "keys", "Popover", "Filter", "FilterPopover", "displayedFilters", "onToggle", "FilterList", "appliedFilters", "filtersSchema", "onRemoveFilter", "breadcrumbs", "onToggleEditFolderDialog", "onToggleUploadAssetDialog", "useLocation", "backQuery", "Layouts", "title", "subtitle", "Breadcrumbs", "currentFolderId", "navigationAction", "Link", "NavLink", "ArrowLeft", "to", "stringify", "encode", "primaryAction", "BoxWithHeight", "styled", "TypographyMaxWidth", "ActionContainer", "theme", "colors", "neutral500", "MediaLibrary", "navigate", "useNavigate", "canUpdate", "canCopyLink", "canDownload", "canConfigureView", "permissionsLoading", "useMediaLibraryPermissions", "currentFolderToEditRef", "useRef", "Boolean", "_q", "view", "setView", "usePersistentState", "localStorageKeys", "viewOptions", "GRID", "isGridView", "assetsData", "assetsLoading", "assetsError", "useAssets", "skipWhen", "foldersData", "foldersLoading", "foldersError", "useFolders", "enabled", "pagination", "containsAssetFilter", "isCurrentFolderLoading", "currentFolderError", "useFolder", "folders", "map", "folderURL", "isSelectable", "folderCount", "assets", "results", "asset", "assetCount", "totalAssetCount", "total", "showUploadAssetDialog", "setShowUploadAssetDialog", "showEditFolderDialog", "setShowEditFolderDialog", "assetToEdit", "setAssetToEdit", "folderToEdit", "setFolderToEdit", "selectOne", "selectAll", "useSelectionState", "indeterminateBulkSelect", "toggleUploadAssetDialog", "prev", "toggleEditFolderDialog", "created", "handleBulkSelect", "checked", "elements", "handleChangeSort", "sort", "handleEditFolder", "handleEditFolderClose", "current", "focus", "handleAssetDeleted", "numberOfAssets", "pageCount", "handleBulkActionSuccess", "Page", "Loading", "Error", "Main", "Action", "startActions", "_Fragment", "paddingLeft", "paddingRight", "background", "hasRadius", "borderColor", "aria-label", "onCheckedChange", "e", "SortPicker", "onChangeSort", "endActions", "IconButton", "ReactRouterLink", "search", "Cog", "LIST", "List", "GridIcon", "SearchInput", "trackedEvent", "trackedEventDetails", "TableList", "indeterminate", "onChangeFolder", "folderID", "onEditAsset", "onEditFolder", "onSelectOne", "onSelectAll", "rows", "shouldDisableBulkSelect", "sortQuery", "FolderGridList", "selectedFolders", "isSelected", "find", "url", "FolderCard", "ref", "ariaLabel", "startAction", "data-testid", "cardActions", "Pencil", "FolderCardBody", "FolderCardBodyAction", "maxWidth", "fontWeight", "ellipsis", "VisuallyHidden", "children", "filesCount", "Divider", "AssetGridList", "onSelectAsset", "selectedAssets", "Pagination", "PageSize", "Links", "UploadAssetDialog", "trackedLocation", "folderId", "EditFolderDialog", "parentFolderId", "EditAssetDialog", "editedAsset", "ConfigureTheView", "lazy", "then", "mod", "default", "Upload", "config", "isError", "useConfig", "rawQuery", "React", "useEffect", "pageSize", "Suspense", "fallback", "Routes", "Route", "index", "element"]
}

{
  "version": 3,
  "sources": ["../../../@strapi/email/admin/src/constants.ts", "../../../@strapi/email/admin/src/utils/prefixPluginTranslations.ts", "../../../@strapi/email/admin/src/index.ts"],
  "sourcesContent": ["export const PERMISSIONS = {\n  // This permission regards the main component (App) and is used to tell\n  // If the plugin link should be displayed in the menu\n  // And also if the plugin is accessible. This use case is found when a user types the url of the\n  // plugin directly in the browser\n  settings: [{ action: 'plugin::email.settings.read', subject: null }],\n};\n", "type TradOptions = Record<string, string>;\n\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\n  if (!pluginId) {\n    throw new TypeError(\"pluginId can't be empty\");\n  }\n  return Object.keys(trad).reduce((acc, current) => {\n    acc[`${pluginId}.${current}`] = trad[current];\n    return acc;\n  }, {} as TradOptions);\n};\n\nexport { prefixPluginTranslations };\n", "import { PERMISSIONS } from './constants';\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\n\nimport type { Plugin } from '@strapi/types';\n\nconst admin: Plugin.Config.AdminInput = {\n  // TODO typing app in strapi/types as every plugin needs it\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register(app: any) {\n    // Create the email settings section\n    app.createSettingSection(\n      {\n        id: 'email',\n        intlLabel: { id: 'email.SettingsNav.section-label', defaultMessage: 'Email Plugin' },\n      },\n      [\n        {\n          intlLabel: {\n            id: 'email.Settings.email.plugin.title',\n            defaultMessage: 'Settings',\n          },\n          id: 'settings',\n          to: 'email',\n          Component: () =>\n            import('./pages/Settings').then((mod) => ({\n              default: mod.ProtectedSettingsPage,\n            })),\n          permissions: PERMISSIONS.settings,\n        },\n      ]\n    );\n    app.registerPlugin({\n      id: 'email',\n      name: 'email',\n    });\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  bootstrap() {},\n  async registerTrads({ locales }: { locales: string[] }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, 'email'),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default admin;\n"],
  "mappings": ";IAAaA,cAAc;;;;;EAKzBC,UAAU;IAAC;MAAEC,QAAQ;MAA+BC,SAAS;IAAK;EAAE;AACtE;ACJA,IAAMC,2BAA2B,CAACC,MAAmBC,aAAAA;AAInD,SAAOC,OAAOC,KAAKH,IAAAA,EAAMI,OAAO,CAACC,KAAKC,YAAAA;AACpCD,QAAI,GAAGJ,QAAAA,IAAYK,OAAQ,EAAC,IAAIN,KAAKM,OAAQ;AAC7C,WAAOD;EACT,GAAG,CAAA,CAAC;AACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA,IAAME,QAAkC;;;EAGtCC,SAASC,KAAQ;AAEfA,QAAIC,qBACF;MACEC,IAAI;MACJC,WAAW;QAAED,IAAI;QAAmCE,gBAAgB;MAAe;OAErF;MACE;QACED,WAAW;UACTD,IAAI;UACJE,gBAAgB;QAClB;QACAF,IAAI;QACJG,IAAI;QACJC,WAAW,MACT,OAAO,iCAAA,EAAoBC,KAAK,CAACC,SAAS;UACxCC,SAASD,IAAIE;UACf;QACFC,aAAazB,YAAYC;MAC3B;IACD,CAAA;AAEHa,QAAIY,eAAe;MACjBV,IAAI;MACJW,MAAM;IACR,CAAA;EACF;;EAEAC,YAAa;EAAA;EACb,MAAMC,cAAc,EAAEC,QAAO,GAAyB;AACpD,UAAMC,gBAAgB,MAAMC,QAAQC,IAClCH,QAAQI,IAAI,CAACC,WAAAA;AACX,aAAO,kCAAO,kBAAkBA,MAAO,OAAM,EAC1Cd,KAAK,CAAC,EAAEE,SAASa,KAAI,MAAE;AACtB,eAAO;UACLA,MAAMhC,yBAAyBgC,MAAM,OAAA;UACrCD;QACF;MACF,CAAA,EACCE,MAAM,MAAA;AACL,eAAO;UACLD,MAAM,CAAA;UACND;QACF;MACF,CAAA;IACJ,CAAA,CAAA;AAGF,WAAOH,QAAQM,QAAQP,aAAAA;EACzB;AACF;",
  "names": ["PERMISSIONS", "settings", "action", "subject", "prefixPluginTranslations", "trad", "pluginId", "Object", "keys", "reduce", "acc", "current", "admin", "register", "app", "createSettingSection", "id", "intlLabel", "defaultMessage", "to", "Component", "then", "mod", "default", "ProtectedSettingsPage", "permissions", "registerPlugin", "name", "bootstrap", "registerTrads", "locales", "importedTrads", "Promise", "all", "map", "locale", "data", "catch", "resolve"]
}

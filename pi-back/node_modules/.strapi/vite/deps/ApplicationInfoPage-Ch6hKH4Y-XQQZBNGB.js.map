{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/pages/Settings/pages/ApplicationInfo/utils/constants.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/ApplicationInfo/utils/files.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/ApplicationInfo/components/LogoInput.tsx", "../../../@strapi/admin/admin/src/pages/Settings/pages/ApplicationInfo/ApplicationInfoPage.tsx"],
  "sourcesContent": ["export const DIMENSION = 750;\nexport const SIZE = 100;\nexport const ACCEPTED_FORMAT = ['image/jpeg', 'image/png', 'image/svg+xml'];\n", "import { ACCEPTED_FORMAT, DIMENSION, SIZE } from './constants';\n\nimport type { MessageDescriptor } from 'react-intl';\n\nconst FILE_FORMAT_ERROR_MESSAGE = {\n  id: 'Settings.application.customization.modal.upload.error-format',\n  defaultMessage: 'Wrong format uploaded (accepted formats only: jpeg, jpg, png, svg).',\n};\n\nconst FILE_SIZING_ERROR_MESSAGE = {\n  id: 'Settings.application.customization.modal.upload.error-size',\n  defaultMessage:\n    'The file uploaded is too large (max dimension: {dimension}x{dimension}, max file size: {size}KB)',\n};\n\ninterface ImageDimensions {\n  height: number;\n  width: number;\n}\n\ninterface ImageAsset extends ImageDimensions {\n  ext: string | undefined;\n  size: number;\n  name: string;\n  url: string;\n  rawFile: File;\n}\n\nconst parseFileMetadatas = async (file: File): Promise<ImageAsset> => {\n  const isFormatAuthorized = ACCEPTED_FORMAT.includes(file.type);\n\n  if (!isFormatAuthorized) {\n    throw new ParsingFileError('File format', FILE_FORMAT_ERROR_MESSAGE);\n  }\n\n  const fileDimensions = await new Promise<ImageDimensions>((resolve) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      const img = new Image();\n      img.onload = () => {\n        resolve({ width: img.width, height: img.height });\n      };\n      img.src = reader.result as string;\n    };\n    reader.readAsDataURL(file);\n  });\n\n  const areDimensionsAuthorized =\n    fileDimensions.width <= DIMENSION && fileDimensions.height <= DIMENSION;\n\n  if (!areDimensionsAuthorized) {\n    throw new ParsingFileError('File sizing', FILE_SIZING_ERROR_MESSAGE);\n  }\n\n  const asset = {\n    ext: file.name.split('.').pop(),\n    size: file.size / 1000,\n    name: file.name,\n    url: URL.createObjectURL(file),\n    rawFile: file,\n    width: fileDimensions.width,\n    height: fileDimensions.height,\n  };\n\n  const isSizeAuthorized = asset.size <= SIZE;\n\n  if (!isSizeAuthorized) {\n    throw new ParsingFileError('File sizing', FILE_SIZING_ERROR_MESSAGE);\n  }\n\n  return asset;\n};\n\nclass ParsingFileError extends Error {\n  displayMessage: MessageDescriptor;\n\n  constructor(message: string, displayMessage: MessageDescriptor, options?: ErrorOptions) {\n    super(message, options);\n    this.displayMessage = displayMessage;\n  }\n}\n\nexport { parseFileMetadatas, ParsingFileError };\nexport type { ImageAsset };\n", "import * as React from 'react';\n\nimport { createContext } from '@radix-ui/react-context';\nimport {\n  Box,\n  Button,\n  ButtonProps,\n  Card,\n  CardAsset,\n  CardBadge,\n  CardBody,\n  CardContent,\n  CardHeader,\n  CardSubtitle,\n  CardTitle,\n  CarouselActions,\n  CarouselInput,\n  CarouselInputProps,\n  CarouselSlide,\n  Field,\n  Flex,\n  IconButton,\n  Modal,\n  Tabs,\n  TextInput,\n  TextInputProps,\n  Typography,\n} from '@strapi/design-system';\nimport { PlusCircle, Plus, ArrowClockwise } from '@strapi/icons';\nimport axios, { AxiosError } from 'axios';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { ConfigurationContextValue } from '../../../../../features/Configuration';\nimport { ACCEPTED_FORMAT, DIMENSION, SIZE } from '../utils/constants';\nimport { ImageAsset, ParsingFileError, parseFileMetadatas } from '../utils/files';\n\n/* -------------------------------------------------------------------------------------------------\n * LogoInputContext\n * -----------------------------------------------------------------------------------------------*/\n\ninterface LogoInputContextValue {\n  localImage: ImageAsset | undefined;\n  goToStep: (step: Step) => void;\n  onClose: () => void;\n  setLocalImage: (asset: ImageAsset | undefined) => void;\n}\n\nconst [LogoInputContextProvider, useLogoInputContext] =\n  createContext<LogoInputContextValue>('LogoInput');\n\n/* -------------------------------------------------------------------------------------------------\n * LogoInput\n * -----------------------------------------------------------------------------------------------*/\n\ninterface LogoInputProps\n  extends Pick<PendingLogoDialogProps, 'onChangeLogo'>,\n    Pick<CarouselInputProps, 'label' | 'hint'> {\n  canUpdate: boolean;\n  customLogo?: ConfigurationContextValue['logos']['auth']['custom'];\n  defaultLogo: string;\n}\n\ntype Step = 'pending' | 'upload' | undefined;\n\nconst LogoInput = ({\n  canUpdate,\n  customLogo,\n  defaultLogo,\n  hint,\n  label,\n  onChangeLogo,\n}: LogoInputProps) => {\n  const [localImage, setLocalImage] = React.useState<ImageAsset | undefined>();\n  const [currentStep, setCurrentStep] = React.useState<Step>();\n  const { formatMessage } = useIntl();\n\n  const handleClose = () => {\n    setLocalImage(undefined);\n    setCurrentStep(undefined);\n  };\n\n  return (\n    <Modal.Root\n      open={!!currentStep}\n      onOpenChange={(state) => {\n        if (state === false) {\n          handleClose();\n        }\n      }}\n    >\n      <LogoInputContextProvider\n        setLocalImage={setLocalImage}\n        localImage={localImage}\n        goToStep={setCurrentStep}\n        onClose={handleClose}\n      >\n        <CarouselInput\n          label={label}\n          selectedSlide={0}\n          hint={hint}\n          // Carousel is used here for a single media,\n          // we don't need previous and next labels but these props are required\n          previousLabel=\"\"\n          nextLabel=\"\"\n          onNext={() => {}}\n          onPrevious={() => {}}\n          secondaryLabel={customLogo?.name || 'logo.png'}\n          actions={\n            <CarouselActions>\n              <Modal.Trigger>\n                <IconButton\n                  disabled={!canUpdate}\n                  onClick={() => setCurrentStep('upload')}\n                  label={formatMessage({\n                    id: 'Settings.application.customization.carousel.change-action',\n                    defaultMessage: 'Change logo',\n                  })}\n                >\n                  <Plus />\n                </IconButton>\n              </Modal.Trigger>\n              {customLogo?.url && (\n                <IconButton\n                  disabled={!canUpdate}\n                  onClick={() => onChangeLogo(null)}\n                  label={formatMessage({\n                    id: 'Settings.application.customization.carousel.reset-action',\n                    defaultMessage: 'Reset logo',\n                  })}\n                >\n                  <ArrowClockwise />\n                </IconButton>\n              )}\n            </CarouselActions>\n          }\n        >\n          <CarouselSlide\n            label={formatMessage({\n              id: 'Settings.application.customization.carousel-slide.label',\n              defaultMessage: 'Logo slide',\n            })}\n          >\n            <Box\n              maxHeight=\"40%\"\n              maxWidth=\"40%\"\n              tag=\"img\"\n              src={customLogo?.url || defaultLogo}\n              alt={formatMessage({\n                id: 'Settings.application.customization.carousel.title',\n                defaultMessage: 'Logo',\n              })}\n            />\n          </CarouselSlide>\n        </CarouselInput>\n        <Modal.Content>\n          <Modal.Header>\n            <Modal.Title>\n              {formatMessage(\n                currentStep === 'upload'\n                  ? {\n                      id: 'Settings.application.customization.modal.upload',\n                      defaultMessage: 'Upload logo',\n                    }\n                  : {\n                      id: 'Settings.application.customization.modal.pending',\n                      defaultMessage: 'Pending logo',\n                    }\n              )}\n            </Modal.Title>\n          </Modal.Header>\n          {currentStep === 'upload' ? (\n            <AddLogoDialog />\n          ) : (\n            <PendingLogoDialog onChangeLogo={onChangeLogo} />\n          )}\n        </Modal.Content>\n      </LogoInputContextProvider>\n    </Modal.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * AddLogoDialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst AddLogoDialog = () => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Tabs.Root variant=\"simple\" defaultValue=\"computer\">\n      <Box paddingLeft={8} paddingRight={8}>\n        <Tabs.List\n          aria-label={formatMessage({\n            id: 'Settings.application.customization.modal.tab.label',\n            defaultMessage: 'How do you want to upload your assets?',\n          })}\n        >\n          <Tabs.Trigger value=\"computer\">\n            {formatMessage({\n              id: 'Settings.application.customization.modal.upload.from-computer',\n              defaultMessage: 'From computer',\n            })}\n          </Tabs.Trigger>\n          <Tabs.Trigger value=\"url\">\n            {formatMessage({\n              id: 'Settings.application.customization.modal.upload.from-url',\n              defaultMessage: 'From url',\n            })}\n          </Tabs.Trigger>\n        </Tabs.List>\n      </Box>\n      <Tabs.Content value=\"computer\">\n        <ComputerForm />\n      </Tabs.Content>\n      <Tabs.Content value=\"url\">\n        <URLForm />\n      </Tabs.Content>\n    </Tabs.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * URLForm\n * -----------------------------------------------------------------------------------------------*/\n\nconst URLForm = () => {\n  const { formatMessage } = useIntl();\n  const [logoUrl, setLogoUrl] = React.useState('');\n  const [error, setError] = React.useState<string>();\n  const { setLocalImage, goToStep, onClose } = useLogoInputContext('URLForm');\n\n  const handleChange: TextInputProps['onChange'] = (e) => {\n    setLogoUrl(e.target.value);\n  };\n\n  const handleSubmit: React.FormEventHandler<HTMLFormElement> = async (event) => {\n    event.preventDefault();\n\n    const data = new FormData(event.target as HTMLFormElement);\n\n    const url = data.get('logo-url');\n\n    if (!url) {\n      return;\n    }\n\n    try {\n      const res = await axios.get(url.toString(), { responseType: 'blob', timeout: 8000 });\n\n      const file = new File([res.data], res.config.url ?? '', {\n        type: res.headers['content-type'],\n      });\n\n      const asset = await parseFileMetadatas(file);\n\n      setLocalImage(asset);\n      goToStep('pending');\n    } catch (err) {\n      if (err instanceof AxiosError) {\n        setError(\n          formatMessage({\n            id: 'Settings.application.customization.modal.upload.error-network',\n            defaultMessage: 'Network error',\n          })\n        );\n      } else if (err instanceof ParsingFileError) {\n        setError(formatMessage(err.displayMessage, { size: SIZE, dimension: DIMENSION }));\n      } else {\n        throw err;\n      }\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Box paddingLeft={8} paddingRight={8} paddingTop={6} paddingBottom={6}>\n        <Field.Root error={error} name=\"logo-url\">\n          <Field.Label>\n            {formatMessage({\n              id: 'Settings.application.customization.modal.upload.from-url.input-label',\n              defaultMessage: 'URL',\n            })}\n          </Field.Label>\n          <TextInput onChange={handleChange} value={logoUrl} />\n          <Field.Error />\n        </Field.Root>\n      </Box>\n      <Modal.Footer>\n        <Button onClick={onClose} variant=\"tertiary\">\n          {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n        </Button>\n        <Button type=\"submit\">\n          {formatMessage({\n            id: 'Settings.application.customization.modal.upload.next',\n            defaultMessage: 'Next',\n          })}\n        </Button>\n      </Modal.Footer>\n    </form>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ComputerForm\n * -----------------------------------------------------------------------------------------------*/\n\nconst ComputerForm = () => {\n  const { formatMessage } = useIntl();\n  const [dragOver, setDragOver] = React.useState(false);\n  const [fileError, setFileError] = React.useState<string>();\n  const inputRef = React.useRef<HTMLInputElement>(null!);\n  const id = React.useId();\n\n  const { setLocalImage, goToStep, onClose } = useLogoInputContext('ComputerForm');\n\n  const handleDragEnter = () => {\n    setDragOver(true);\n  };\n  const handleDragLeave = () => {\n    setDragOver(false);\n  };\n\n  const handleClick: ButtonProps['onClick'] = (e) => {\n    e.preventDefault();\n    inputRef.current.click();\n  };\n\n  const handleChange = async () => {\n    handleDragLeave();\n\n    if (!inputRef.current.files) {\n      return;\n    }\n\n    const [file] = inputRef.current.files;\n\n    try {\n      const asset = await parseFileMetadatas(file);\n      setLocalImage(asset);\n      goToStep('pending');\n    } catch (err) {\n      if (err instanceof ParsingFileError) {\n        setFileError(formatMessage(err.displayMessage, { size: SIZE, dimension: DIMENSION }));\n        inputRef.current.focus();\n      } else {\n        throw err;\n      }\n    }\n  };\n\n  return (\n    <>\n      <form>\n        <Box paddingLeft={8} paddingRight={8} paddingTop={6} paddingBottom={6}>\n          <Field.Root name={id} error={fileError}>\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n              <Flex\n                paddingTop={9}\n                paddingBottom={7}\n                hasRadius\n                justifyContent=\"center\"\n                direction=\"column\"\n                background={dragOver ? 'primary100' : 'neutral100'}\n                borderColor={dragOver ? 'primary500' : fileError ? 'danger600' : 'neutral300'}\n                borderStyle=\"dashed\"\n                borderWidth=\"1px\"\n                position=\"relative\"\n                onDragEnter={handleDragEnter}\n                onDragLeave={handleDragLeave}\n              >\n                <PlusCircle fill=\"primary600\" width=\"6rem\" height=\"6rem\" aria-hidden />\n                <Box paddingTop={3} paddingBottom={5}>\n                  <Typography variant=\"delta\" tag=\"label\" htmlFor={id}>\n                    {formatMessage({\n                      id: 'Settings.application.customization.modal.upload.drag-drop',\n                      defaultMessage: 'Drag and Drop here or',\n                    })}\n                  </Typography>\n                </Box>\n                <Box position=\"relative\">\n                  <FileInput\n                    accept={ACCEPTED_FORMAT.join(', ')}\n                    type=\"file\"\n                    name=\"files\"\n                    tabIndex={-1}\n                    onChange={handleChange}\n                    ref={inputRef}\n                    id={id}\n                  />\n                </Box>\n                <Button type=\"button\" onClick={handleClick}>\n                  {formatMessage({\n                    id: 'Settings.application.customization.modal.upload.cta.browse',\n                    defaultMessage: 'Browse files',\n                  })}\n                </Button>\n                <Box paddingTop={6}>\n                  <Typography variant=\"pi\" textColor=\"neutral600\">\n                    {formatMessage(\n                      {\n                        id: 'Settings.application.customization.modal.upload.file-validation',\n                        defaultMessage:\n                          'Max dimension: {dimension}x{dimension}, Max size: {size}KB',\n                      },\n                      { size: SIZE, dimension: DIMENSION }\n                    )}\n                  </Typography>\n                </Box>\n              </Flex>\n              <Field.Error />\n            </Flex>\n          </Field.Root>\n        </Box>\n      </form>\n      <Modal.Footer>\n        <Button onClick={onClose} variant=\"tertiary\">\n          {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n        </Button>\n      </Modal.Footer>\n    </>\n  );\n};\n\nconst FileInput = styled(Field.Input)`\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 1;\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * PendingLogoDialog\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PendingLogoDialogProps {\n  onChangeLogo: (file: ImageAsset | null) => void;\n}\n\nconst PendingLogoDialog = ({ onChangeLogo }: PendingLogoDialogProps) => {\n  const { formatMessage } = useIntl();\n  const { localImage, setLocalImage, goToStep, onClose } = useLogoInputContext('PendingLogoDialog');\n\n  const handleGoBack = () => {\n    setLocalImage(undefined);\n    goToStep('upload');\n  };\n\n  const handleUpload = () => {\n    if (localImage) {\n      onChangeLogo(localImage);\n    }\n    onClose();\n  };\n\n  return (\n    <>\n      <Modal.Body>\n        <Box paddingLeft={8} paddingRight={8} paddingTop={6} paddingBottom={6}>\n          <Flex justifyContent=\"space-between\" paddingBottom={6}>\n            <Flex direction=\"column\" alignItems=\"flex-start\">\n              <Typography variant=\"pi\" fontWeight=\"bold\">\n                {formatMessage({\n                  id: 'Settings.application.customization.modal.pending.title',\n                  defaultMessage: 'Logo ready to upload',\n                })}\n              </Typography>\n              <Typography variant=\"pi\" textColor=\"neutral500\">\n                {formatMessage({\n                  id: 'Settings.application.customization.modal.pending.subtitle',\n                  defaultMessage: 'Manage the chosen logo before uploading it',\n                })}\n              </Typography>\n            </Flex>\n            <Button onClick={handleGoBack} variant=\"secondary\">\n              {formatMessage({\n                id: 'Settings.application.customization.modal.pending.choose-another',\n                defaultMessage: 'Choose another logo',\n              })}\n            </Button>\n          </Flex>\n          <Box maxWidth={`18rem`}>\n            {localImage?.url ? <ImageCardAsset asset={localImage} /> : null}\n          </Box>\n        </Box>\n      </Modal.Body>\n      <Modal.Footer>\n        <Modal.Close>\n          <Button onClick={onClose} variant=\"tertiary\">\n            {formatMessage({\n              id: 'Settings.application.customization.modal.cancel',\n              defaultMessage: 'Cancel',\n            })}\n          </Button>\n        </Modal.Close>\n        <Button onClick={handleUpload}>\n          {formatMessage({\n            id: 'Settings.application.customization.modal.pending.upload',\n            defaultMessage: 'Upload logo',\n          })}\n        </Button>\n      </Modal.Footer>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ImageCardAsset\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ImageCardAssetProps {\n  asset: ImageAsset;\n}\n\nconst ImageCardAsset = ({ asset }: ImageCardAssetProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardAsset size=\"S\" src={asset.url} />\n      </CardHeader>\n      <CardBody>\n        <CardContent>\n          <CardTitle>{asset.name}</CardTitle>\n          <CardSubtitle>\n            {`${asset.ext?.toUpperCase()} - ${asset.width}✕${asset.height}`}\n          </CardSubtitle>\n        </CardContent>\n        <CardBadge>\n          {formatMessage({\n            id: 'Settings.application.customization.modal.pending.card-badge',\n            defaultMessage: 'image',\n          })}\n        </CardBadge>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport { LogoInput };\nexport type { LogoInputProps };\n", "import * as React from 'react';\n\nimport { Box, Button, Flex, Grid, Link, Typography } from '@strapi/design-system';\nimport { Check, ExternalLink } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\n\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { useAppInfo } from '../../../../features/AppInfo';\nimport { useConfiguration } from '../../../../features/Configuration';\nimport { useTracking } from '../../../../features/Tracking';\nimport { useEnterprise } from '../../../../hooks/useEnterprise';\nimport { useRBAC } from '../../../../hooks/useRBAC';\nimport { selectAdminPermissions } from '../../../../selectors';\n\nimport { LogoInput, LogoInputProps } from './components/LogoInput';\nimport { DIMENSION, SIZE } from './utils/constants';\n\nconst AdminSeatInfoCE = () => null;\n\n/* -------------------------------------------------------------------------------------------------\n * ApplicationInfoPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ApplicationInfoPage = () => {\n  const { trackUsage } = useTracking();\n  const { formatMessage } = useIntl();\n  const { logos: serverLogos, updateProjectSettings } = useConfiguration('ApplicationInfoPage');\n  const [logos, setLogos] = React.useState({ menu: serverLogos.menu, auth: serverLogos.auth });\n  const { settings } = useSelector(selectAdminPermissions);\n\n  const communityEdition = useAppInfo('ApplicationInfoPage', (state) => state.communityEdition);\n  const latestStrapiReleaseTag = useAppInfo(\n    'ApplicationInfoPage',\n    (state) => state.latestStrapiReleaseTag\n  );\n  const nodeVersion = useAppInfo('ApplicationInfoPage', (state) => state.nodeVersion);\n  const shouldUpdateStrapi = useAppInfo('ApplicationInfoPage', (state) => state.shouldUpdateStrapi);\n  const strapiVersion = useAppInfo('ApplicationInfoPage', (state) => state.strapiVersion);\n\n  const AdminSeatInfo = useEnterprise(\n    AdminSeatInfoCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../ee/admin/src/pages/SettingsPage/pages/ApplicationInfoPage/components/AdminSeatInfo'\n        )\n      ).AdminSeatInfoEE\n  );\n\n  const {\n    allowedActions: { canRead, canUpdate },\n  } = useRBAC(settings ? settings['project-settings'] : {});\n\n  const handleSubmit: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n\n    updateProjectSettings({\n      authLogo: logos.auth.custom ?? null,\n      menuLogo: logos.menu.custom ?? null,\n    });\n  };\n\n  const handleChangeLogo =\n    (logo: 'menu' | 'auth'): LogoInputProps['onChangeLogo'] =>\n    (newLogo) => {\n      /**\n       * If there's no newLogo value we can assume we're reseting.\n       */\n      if (newLogo === null) {\n        trackUsage('didClickResetLogo', {\n          logo,\n        });\n      }\n\n      setLogos((prev) => ({\n        ...prev,\n        [logo]: {\n          ...prev[logo],\n          custom: newLogo,\n        },\n      }));\n    };\n\n  React.useEffect(() => {\n    setLogos({\n      menu: serverLogos.menu,\n      auth: serverLogos.auth,\n    });\n  }, [serverLogos]);\n\n  // block rendering until the EE component is fully loaded\n  if (!AdminSeatInfo) {\n    return null;\n  }\n\n  const isSaveDisabled =\n    logos.auth.custom === serverLogos.auth.custom && logos.menu.custom === serverLogos.menu.custom;\n\n  return (\n    <Layouts.Root>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: formatMessage({\n              id: 'Settings.application.header',\n              defaultMessage: 'Application',\n            }),\n          }\n        )}\n      </Page.Title>\n      <Page.Main>\n        <form onSubmit={handleSubmit}>\n          <Layouts.Header\n            title={formatMessage({\n              id: 'Settings.application.title',\n              defaultMessage: 'Overview',\n            })}\n            subtitle={formatMessage({\n              id: 'Settings.application.description',\n              defaultMessage: 'Administration panel’s global information',\n            })}\n            primaryAction={\n              canUpdate && (\n                <Button disabled={isSaveDisabled} type=\"submit\" startIcon={<Check />}>\n                  {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n                </Button>\n              )\n            }\n          />\n          <Layouts.Content>\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n              <Flex\n                direction=\"column\"\n                alignItems=\"stretch\"\n                gap={4}\n                hasRadius\n                background=\"neutral0\"\n                shadow=\"tableShadow\"\n                paddingTop={6}\n                paddingBottom={6}\n                paddingRight={7}\n                paddingLeft={7}\n              >\n                <Typography variant=\"delta\" tag=\"h3\">\n                  {formatMessage({\n                    id: 'global.details',\n                    defaultMessage: 'Details',\n                  })}\n                </Typography>\n\n                <Grid.Root gap={5} tag=\"dl\">\n                  <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"start\">\n                    <Typography variant=\"sigma\" textColor=\"neutral600\" tag=\"dt\">\n                      {formatMessage({\n                        id: 'Settings.application.strapiVersion',\n                        defaultMessage: 'strapi version',\n                      })}\n                    </Typography>\n                    <Flex gap={3} direction=\"column\" alignItems=\"start\" tag=\"dd\">\n                      <Typography>v{strapiVersion}</Typography>\n                      {shouldUpdateStrapi && (\n                        <Link\n                          href={`https://github.com/strapi/strapi/releases/tag/${latestStrapiReleaseTag}`}\n                          endIcon={<ExternalLink />}\n                        >\n                          {formatMessage({\n                            id: 'Settings.application.link-upgrade',\n                            defaultMessage: 'Upgrade your admin panel',\n                          })}\n                        </Link>\n                      )}\n                    </Flex>\n                  </Grid.Item>\n                  <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"start\">\n                    <Typography variant=\"sigma\" textColor=\"neutral600\" tag=\"dt\">\n                      {formatMessage({\n                        id: 'Settings.application.edition-title',\n                        defaultMessage: 'current edition',\n                      })}\n                    </Typography>\n                    <Flex gap={3} direction=\"column\" alignItems=\"start\" tag=\"dd\">\n                      <Typography>\n                        {formatMessage(\n                          {\n                            id: 'Settings.application.ee-or-ce',\n                            defaultMessage:\n                              '{communityEdition, select, true {Community Edition} other {Enterprise Edition}}',\n                          },\n                          { communityEdition }\n                        )}\n                      </Typography>\n                      <Link href=\"https://strapi.io/pricing-self-hosted\" endIcon={<ExternalLink />}>\n                        {formatMessage({\n                          id: 'Settings.application.link-pricing',\n                          defaultMessage: 'See all pricing plans',\n                        })}\n                      </Link>\n                    </Flex>\n                  </Grid.Item>\n\n                  <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"start\">\n                    <Typography variant=\"sigma\" textColor=\"neutral600\" tag=\"dt\">\n                      {formatMessage({\n                        id: 'Settings.application.node-version',\n                        defaultMessage: 'node version',\n                      })}\n                    </Typography>\n                    <Typography tag=\"dd\">{nodeVersion}</Typography>\n                  </Grid.Item>\n                  <AdminSeatInfo />\n                </Grid.Root>\n              </Flex>\n              {canRead && (\n                <Box\n                  hasRadius\n                  background=\"neutral0\"\n                  shadow=\"tableShadow\"\n                  paddingTop={6}\n                  paddingBottom={6}\n                  paddingRight={7}\n                  paddingLeft={7}\n                >\n                  <Typography variant=\"delta\" tag=\"h3\">\n                    {formatMessage({\n                      id: 'Settings.application.customization',\n                      defaultMessage: 'Customization',\n                    })}\n                  </Typography>\n                  <Typography variant=\"pi\" textColor=\"neutral600\">\n                    {formatMessage(\n                      {\n                        id: 'Settings.application.customization.size-details',\n                        defaultMessage:\n                          'Max dimension: {dimension}×{dimension}, Max file size: {size}KB',\n                      },\n                      { dimension: DIMENSION, size: SIZE }\n                    )}\n                  </Typography>\n                  <Grid.Root paddingTop={4} gap={4}>\n                    <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                      <LogoInput\n                        canUpdate={canUpdate}\n                        customLogo={logos.menu.custom}\n                        defaultLogo={logos.menu.default}\n                        hint={formatMessage({\n                          id: 'Settings.application.customization.menu-logo.carousel-hint',\n                          defaultMessage: 'Replace the logo in the main navigation',\n                        })}\n                        label={formatMessage({\n                          id: 'Settings.application.customization.carousel.menu-logo.title',\n                          defaultMessage: 'Menu logo',\n                        })}\n                        onChangeLogo={handleChangeLogo('menu')}\n                      />\n                    </Grid.Item>\n                    <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                      <LogoInput\n                        canUpdate={canUpdate}\n                        customLogo={logos.auth.custom}\n                        defaultLogo={logos.auth.default}\n                        hint={formatMessage({\n                          id: 'Settings.application.customization.auth-logo.carousel-hint',\n                          defaultMessage: 'Replace the logo in the authentication pages',\n                        })}\n                        label={formatMessage({\n                          id: 'Settings.application.customization.carousel.auth-logo.title',\n                          defaultMessage: 'Auth logo',\n                        })}\n                        onChangeLogo={handleChangeLogo('auth')}\n                      />\n                    </Grid.Item>\n                  </Grid.Root>\n                </Box>\n              )}\n            </Flex>\n          </Layouts.Content>\n        </form>\n      </Page.Main>\n    </Layouts.Root>\n  );\n};\n\nexport { ApplicationInfoPage };\n"],
  "mappings": "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",
  "names": ["DIMENSION", "SIZE", "ACCEPTED_FORMAT", "FILE_FORMAT_ERROR_MESSAGE", "id", "defaultMessage", "FILE_SIZING_ERROR_MESSAGE", "parseFileMetadatas", "file", "isFormatAuthorized", "includes", "type", "ParsingFileError", "fileDimensions", "Promise", "resolve", "reader", "FileReader", "onload", "img", "Image", "width", "height", "src", "result", "readAsDataURL", "areDimensionsAuthorized", "asset", "ext", "name", "split", "pop", "size", "url", "URL", "createObjectURL", "rawFile", "isSizeAuthorized", "Error", "constructor", "message", "displayMessage", "options", "LogoInputContextProvider", "useLogoInputContext", "createContext", "LogoInput", "canUpdate", "customLogo", "defaultLogo", "hint", "label", "onChangeLogo", "localImage", "setLocalImage", "useState", "currentStep", "setCurrentStep", "formatMessage", "useIntl", "handleClose", "undefined", "_jsx", "Modal", "Root", "open", "onOpenChange", "state", "_jsxs", "goToStep", "onClose", "CarouselInput", "selectedSlide", "previousLabel", "nextLabel", "onNext", "onPrevious", "secondaryLabel", "actions", "CarouselActions", "Trigger", "IconButton", "disabled", "onClick", "Plus", "ArrowClockwise", "CarouselSlide", "Box", "maxHeight", "maxWidth", "tag", "alt", "Content", "Header", "Title", "AddLogoDialog", "PendingLogoDialog", "Tabs", "variant", "defaultValue", "paddingLeft", "paddingRight", "List", "aria-label", "value", "ComputerForm", "URLForm", "logoUrl", "setLogoUrl", "error", "setError", "handleChange", "e", "target", "handleSubmit", "event", "preventDefault", "data", "FormData", "get", "res", "axios", "toString", "responseType", "timeout", "File", "config", "headers", "err", "AxiosError", "dimension", "form", "onSubmit", "paddingTop", "paddingBottom", "Field", "Label", "TextInput", "onChange", "Footer", "Button", "dragOver", "setDragOver", "fileError", "setFileError", "inputRef", "useRef", "useId", "handleDragEnter", "handleDragLeave", "handleClick", "current", "click", "files", "focus", "_Fragment", "Flex", "direction", "alignItems", "gap", "hasRadius", "justifyContent", "background", "borderColor", "borderStyle", "borderWidth", "position", "onDragEnter", "onDragLeave", "PlusCircle", "fill", "aria-hidden", "Typography", "htmlFor", "FileInput", "accept", "join", "tabIndex", "ref", "textColor", "styled", "Input", "handleGoBack", "handleUpload", "Body", "fontWeight", "ImageCardAsset", "Close", "Card", "CardHeader", "CardAsset", "CardBody", "CardContent", "CardTitle", "CardSubtitle", "toUpperCase", "CardBadge", "AdminSeatInfoCE", "ApplicationInfoPage", "trackUsage", "useTracking", "logos", "serverLogos", "updateProjectSettings", "useConfiguration", "setLogos", "menu", "auth", "settings", "useSelector", "selectAdminPermissions", "communityEdition", "useAppInfo", "latestStrapiReleaseTag", "nodeVersion", "shouldUpdateStrapi", "strapiVersion", "AdminSeatInfo", "useEnterprise", "AdminSeatInfoEE", "allowedActions", "canRead", "useRBAC", "authLogo", "custom", "menuLogo", "handleChangeLogo", "logo", "newLogo", "prev", "React", "useEffect", "isSaveDisabled", "Layouts", "Page", "Main", "title", "subtitle", "primaryAction", "startIcon", "Check", "shadow", "Grid", "Item", "col", "s", "Link", "href", "endIcon", "ExternalLink", "default"]
}

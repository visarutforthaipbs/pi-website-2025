{
  "version": 3,
  "sources": ["../../../@strapi/review-workflows/admin/src/routes/settings/hooks/useReviewWorkflows.ts", "../../../@strapi/review-workflows/admin/src/routes/settings/constants.ts", "../../../@strapi/review-workflows/admin/src/routes/settings/components/StageDragPreview.tsx", "../../../@strapi/review-workflows/admin/src/routes/settings/components/Layout.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { useAPIErrorHandler, useNotification } from '@strapi/admin/strapi-admin';\nimport { type MessageDescriptor, useIntl } from 'react-intl';\n\nimport {\n  GetWorkflowsParams,\n  useCreateWorkflowMutation,\n  useDeleteWorkflowMutation,\n  useGetWorkflowsQuery,\n  useUpdateWorkflowMutation,\n} from '../../../services/settings';\n\nimport type { Create, Update } from '../../../../../shared/contracts/review-workflows';\n\nconst DEFAULT_UNEXPECTED_ERROR_MSG = {\n  id: 'notification.error',\n  defaultMessage: 'An error occurred, please try again',\n} satisfies MessageDescriptor;\n\ntype UseReviewWorkflowsArgs = GetWorkflowsParams & {\n  skip?: boolean;\n};\n\nconst useReviewWorkflows = (params: UseReviewWorkflowsArgs = {}) => {\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const { skip = false, ...queryParams } = params;\n\n  const { data, isLoading, error } = useGetWorkflowsQuery(\n    {\n      populate: ['stages', 'stageRequiredToPublish'],\n      ...queryParams,\n    },\n    {\n      skip,\n    }\n  );\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  const [createWorkflow] = useCreateWorkflowMutation();\n  const create = React.useCallback(\n    async (data: Create.Request['body']['data']) => {\n      try {\n        const res = await createWorkflow({ data });\n\n        if ('error' in res) {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n\n          return res;\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'actions.created', defaultMessage: 'Created workflow' }),\n        });\n\n        return res;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [createWorkflow, formatAPIError, formatMessage, toggleNotification]\n  );\n\n  const [updateWorkflow] = useUpdateWorkflowMutation();\n  const update = React.useCallback(\n    async (id: string, data: Update.Request['body']['data']) => {\n      try {\n        const res = await updateWorkflow({ id, data });\n\n        if ('error' in res) {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n\n          return res;\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'actions.updated', defaultMessage: 'Updated workflow' }),\n        });\n\n        return res;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [formatAPIError, formatMessage, toggleNotification, updateWorkflow]\n  );\n\n  const [deleteWorkflow] = useDeleteWorkflowMutation();\n  const deleteAction = React.useCallback(\n    async (id: string) => {\n      try {\n        const res = await deleteWorkflow({ id });\n\n        if ('error' in res) {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n\n          return;\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'actions.deleted', defaultMessage: 'Deleted workflow' }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [deleteWorkflow, formatAPIError, formatMessage, toggleNotification]\n  );\n\n  const { workflows = [], meta } = data ?? {};\n\n  return {\n    // meta contains e.g. the total of all workflows. we can not use\n    // the pagination object here, because the list is not paginated.\n    meta,\n    workflows,\n    isLoading,\n    error,\n    create,\n    delete: deleteAction,\n    update,\n  };\n};\n\nexport { useReviewWorkflows };\n", "export type DragDropTypes = 'stage';\n\nexport const DRAG_DROP_TYPES: Record<Uppercase<DragDropTypes>, DragDropTypes> = {\n  STAGE: 'stage',\n};\n", "import { Flex, Typography } from '@strapi/design-system';\nimport { CaretDown } from '@strapi/icons';\n\ninterface StageDragPreviewType {\n  name: string | null;\n}\n\nconst StageDragPreview = ({ name }: StageDragPreviewType) => {\n  return (\n    <Flex\n      background=\"primary100\"\n      borderStyle=\"dashed\"\n      borderColor=\"primary600\"\n      borderWidth=\"1px\"\n      gap={3}\n      hasRadius\n      padding={3}\n      shadow=\"tableShadow\"\n      width=\"30rem\"\n    >\n      <Flex\n        alignItems=\"center\"\n        background=\"neutral200\"\n        borderRadius=\"50%\"\n        height={6}\n        justifyContent=\"center\"\n        width={6}\n      >\n        <CaretDown width=\"0.8rem\" fill=\"neutral600\" />\n      </Flex>\n\n      <Typography fontWeight=\"bold\">{name}</Typography>\n    </Flex>\n  );\n};\n\nexport { StageDragPreview };\nexport type { StageDragPreviewType };\n", "import * as React from 'react';\n\nimport { Page, Layouts } from '@strapi/admin/strapi-admin';\nimport { Box } from '@strapi/design-system';\nimport { XYCoord, useDragLayer } from 'react-dnd';\nimport { useIntl } from 'react-intl';\n\nimport { DRAG_DROP_TYPES } from '../constants';\n\nimport { StageDragPreview } from './StageDragPreview';\n\nfunction getStyle(\n  initialOffset: XYCoord | null,\n  currentOffset: XYCoord | null,\n  mouseOffset: XYCoord | null\n) {\n  if (!initialOffset || !currentOffset || !mouseOffset) {\n    return { display: 'none' };\n  }\n\n  const { x, y } = mouseOffset;\n\n  return {\n    transform: `translate(${x}px, ${y}px)`,\n  };\n}\n\nconst DragLayerRendered = () => {\n  const { itemType, isDragging, item, initialOffset, currentOffset, mouseOffset } = useDragLayer(\n    (monitor) => ({\n      item: monitor.getItem(),\n      itemType: monitor.getItemType(),\n      initialOffset: monitor.getInitialSourceClientOffset(),\n      currentOffset: monitor.getSourceClientOffset(),\n      isDragging: monitor.isDragging(),\n      mouseOffset: monitor.getClientOffset(),\n    })\n  );\n\n  if (!isDragging || itemType !== DRAG_DROP_TYPES.STAGE) {\n    return null;\n  }\n\n  return (\n    <Box\n      height=\"100%\"\n      left={0}\n      position=\"fixed\"\n      pointerEvents=\"none\"\n      top={0}\n      zIndex={100}\n      width=\"100%\"\n    >\n      <Box style={getStyle(initialOffset, currentOffset, mouseOffset)}>\n        <StageDragPreview name={typeof item.item === 'string' ? item.item : null} />;\n      </Box>\n    </Box>\n  );\n};\n\nconst Root: React.FC<React.PropsWithChildren> = ({ children }) => {\n  return (\n    <Page.Main>\n      <Layouts.Content>{children}</Layouts.Content>\n    </Page.Main>\n  );\n};\n\ninterface HeaderProps {\n  title: string;\n  navigationAction?: React.ReactNode;\n  primaryAction?: React.ReactNode;\n  secondaryAction?: React.ReactNode;\n  subtitle?: React.ReactNode;\n}\n\nconst Header: React.FC<HeaderProps> = ({ title, subtitle, navigationAction, primaryAction }) => {\n  const { formatMessage } = useIntl();\n  return (\n    <>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: title,\n          }\n        )}\n      </Page.Title>\n      <Layouts.BaseHeader\n        navigationAction={navigationAction}\n        primaryAction={primaryAction}\n        title={title}\n        subtitle={subtitle}\n      />\n    </>\n  );\n};\n\nexport { DragLayerRendered, Header, Root };\n"],
  "mappings": "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",
  "names": ["DEFAULT_UNEXPECTED_ERROR_MSG", "id", "defaultMessage", "useReviewWorkflows", "params", "toggleNotification", "useNotification", "formatMessage", "useIntl", "_unstableFormatAPIError", "formatAPIError", "useAPIErrorHandler", "skip", "queryParams", "data", "isLoading", "error", "useGetWorkflowsQuery", "populate", "React", "useEffect", "type", "message", "createWorkflow", "useCreateWorkflowMutation", "create", "useCallback", "res", "err", "updateWorkflow", "useUpdateWorkflowMutation", "update", "deleteWorkflow", "useDeleteWorkflowMutation", "deleteAction", "workflows", "meta", "delete", "DRAG_DROP_TYPES", "STAGE", "StageDragPreview", "name", "_jsxs", "Flex", "background", "borderStyle", "borderColor", "borderWidth", "gap", "hasRadius", "padding", "shadow", "width", "_jsx", "alignItems", "borderRadius", "height", "justifyContent", "CaretDown", "fill", "Typography", "fontWeight", "getStyle", "initialOffset", "currentOffset", "mouseOffset", "display", "x", "y", "transform", "DragLayerRendered", "itemType", "isDragging", "item", "useDragLayer", "monitor", "getItem", "getItemType", "getInitialSourceClientOffset", "getSourceClientOffset", "getClientOffset", "Box", "left", "position", "pointerEvents", "top", "zIndex", "style", "Root", "children", "Page", "Main", "Layouts", "Content", "Header", "title", "subtitle", "navigationAction", "primaryAction", "_Fragment", "Title", "BaseHeader"]
}

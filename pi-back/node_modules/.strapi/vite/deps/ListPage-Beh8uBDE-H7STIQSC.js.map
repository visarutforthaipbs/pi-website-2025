{
  "version": 3,
  "sources": ["../../../@strapi/admin/ee/admin/src/services/auditLogs.ts", "../../../@strapi/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/hooks/useFormatTimeStamp.ts", "../../../@strapi/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/utils/getActionTypesDefaultMessages.ts", "../../../@strapi/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/components/Modal.tsx", "../../../@strapi/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/hooks/useAuditLogsData.ts", "../../../@strapi/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/components/ComboboxFilter.tsx", "../../../@strapi/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/utils/getDisplayedFilters.ts", "../../../@strapi/admin/ee/admin/src/pages/SettingsPage/pages/AuditLogs/ListPage.tsx"],
  "sourcesContent": ["import { adminApi } from '../../../../admin/src/services/api';\nimport * as AuditLogs from '../../../../shared/contracts/audit-logs';\n\nconst auditLogsService = adminApi.injectEndpoints({\n  endpoints: (builder) => ({\n    getAuditLogs: builder.query<AuditLogs.GetAll.Response, AuditLogs.GetAll.Request['query']>({\n      query: (params) => ({\n        url: `/admin/audit-logs`,\n        config: {\n          params,\n        },\n      }),\n    }),\n    getAuditLog: builder.query<AuditLogs.Get.Response, AuditLogs.Get.Params['id']>({\n      query: (id) => `/admin/audit-logs/${id}`,\n    }),\n  }),\n  overrideExisting: false,\n});\n\nconst { useGetAuditLogsQuery, useGetAuditLogQuery } = auditLogsService;\n\nexport { useGetAuditLogsQuery, useGetAuditLogQuery };\n", "import parseISO from 'date-fns/parseISO';\nimport { useIntl } from 'react-intl';\n\nexport const useFormatTimeStamp = () => {\n  const { formatDate } = useIntl();\n\n  const formatTimeStamp = (value: string) => {\n    const date = parseISO(value);\n\n    const formattedDate = formatDate(date, {\n      dateStyle: 'long',\n    });\n    const formattedTime = formatDate(date, {\n      timeStyle: 'medium',\n      hourCycle: 'h24',\n    });\n\n    return `${formattedDate}, ${formattedTime}`;\n  };\n\n  return formatTimeStamp;\n};\n", "export const actionTypes = {\n  'entry.create': 'Create entry{model, select, undefined {} other { ({model})}}',\n  'entry.update': 'Update entry{model, select, undefined {} other { ({model})}}',\n  'entry.delete': 'Delete entry{model, select, undefined {} other { ({model})}}',\n  'entry.publish': 'Publish entry{model, select, undefined {} other { ({model})}}',\n  'entry.unpublish': 'Unpublish entry{model, select, undefined {} other { ({model})}}',\n  'media.create': 'Create media',\n  'media.update': 'Update media',\n  'media.delete': 'Delete media',\n  'media-folder.create': 'Create media folder',\n  'media-folder.update': 'Update media folder',\n  'media-folder.delete': 'Delete media folder',\n  'user.create': 'Create user',\n  'user.update': 'Update user',\n  'user.delete': 'Delete user',\n  'admin.auth.success': 'Admin login',\n  'admin.logout': 'Admin logout',\n  'content-type.create': 'Create content type',\n  'content-type.update': 'Update content type',\n  'content-type.delete': 'Delete content type',\n  'component.create': 'Create component',\n  'component.update': 'Update component',\n  'component.delete': 'Delete component',\n  'role.create': 'Create role',\n  'role.update': 'Update role',\n  'role.delete': 'Delete role',\n  'permission.create': 'Create permission',\n  'permission.update': 'Update permission',\n  'permission.delete': 'Delete permission',\n};\n\nexport const getDefaultMessage = (value: keyof typeof actionTypes) => {\n  return actionTypes[value] || value;\n};\n", "import * as React from 'react';\n\nimport {\n  Box,\n  Flex,\n  Grid,\n  JSONInput,\n  Loader,\n  Modal as DSModal,\n  Typography,\n  Breadcrumbs,\n  Crumb,\n  Field,\n} from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useNotification } from '../../../../../../../../admin/src/features/Notifications';\nimport { useAPIErrorHandler } from '../../../../../../../../admin/src/hooks/useAPIErrorHandler';\nimport { AuditLog } from '../../../../../../../../shared/contracts/audit-logs';\nimport { useGetAuditLogQuery } from '../../../../../services/auditLogs';\nimport { useFormatTimeStamp } from '../hooks/useFormatTimeStamp';\nimport { actionTypes, getDefaultMessage } from '../utils/getActionTypesDefaultMessages';\n\ninterface ModalProps {\n  handleClose: () => void;\n  logId: string;\n}\n\nexport const Modal = ({ handleClose, logId }: ModalProps) => {\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const { data, error, isLoading } = useGetAuditLogQuery(logId);\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n      handleClose();\n    }\n  }, [error, formatAPIError, handleClose, toggleNotification]);\n\n  const formatTimeStamp = useFormatTimeStamp();\n  const formattedDate = data && 'date' in data ? formatTimeStamp(data.date) : '';\n\n  return (\n    <DSModal.Root defaultOpen onOpenChange={handleClose}>\n      <DSModal.Content>\n        <DSModal.Header>\n          {/**\n           * TODO: this is not semantically correct and should be amended.\n           */}\n          <Breadcrumbs label={formattedDate} id=\"title\">\n            <Crumb isCurrent>{formattedDate}</Crumb>\n          </Breadcrumbs>\n        </DSModal.Header>\n        <DSModal.Body>\n          <ActionBody isLoading={isLoading} data={data as AuditLog} formattedDate={formattedDate} />\n        </DSModal.Body>\n      </DSModal.Content>\n    </DSModal.Root>\n  );\n};\n\ninterface ActionBodyProps {\n  isLoading?: boolean;\n  data: AuditLog;\n  formattedDate: string;\n}\n\nconst ActionBody = ({ isLoading, data, formattedDate }: ActionBodyProps) => {\n  const { formatMessage } = useIntl();\n\n  if (isLoading) {\n    return (\n      <Flex padding={7} justifyContent=\"center\" alignItems=\"center\">\n        {/**\n         * TODO: this will need to be translated.\n         */}\n        <Loader>Loading content...</Loader>\n      </Flex>\n    );\n  }\n\n  const { action, user, payload } = data;\n\n  return (\n    <>\n      <Box marginBottom={3}>\n        <Typography variant=\"delta\" id=\"title\">\n          {formatMessage({\n            id: 'Settings.permissions.auditLogs.details',\n            defaultMessage: 'Log Details',\n          })}\n        </Typography>\n      </Box>\n      <Grid.Root\n        gap={4}\n        gridCols={2}\n        paddingTop={4}\n        paddingBottom={4}\n        paddingLeft={6}\n        paddingRight={6}\n        marginBottom={4}\n        background=\"neutral100\"\n        hasRadius\n      >\n        <ActionItem\n          actionLabel={formatMessage({\n            id: 'Settings.permissions.auditLogs.action',\n            defaultMessage: 'Action',\n          })}\n          actionName={formatMessage(\n            {\n              id: `Settings.permissions.auditLogs.${action}`,\n              defaultMessage: getDefaultMessage(action as keyof typeof actionTypes),\n            },\n            // @ts-expect-error - any\n            { model: payload?.model }\n          )}\n        />\n        <ActionItem\n          actionLabel={formatMessage({\n            id: 'Settings.permissions.auditLogs.date',\n            defaultMessage: 'Date',\n          })}\n          actionName={formattedDate}\n        />\n        <ActionItem\n          actionLabel={formatMessage({\n            id: 'Settings.permissions.auditLogs.user',\n            defaultMessage: 'User',\n          })}\n          actionName={user?.displayName || '-'}\n        />\n        <ActionItem\n          actionLabel={formatMessage({\n            id: 'Settings.permissions.auditLogs.userId',\n            defaultMessage: 'User ID',\n          })}\n          actionName={user?.id.toString() || '-'}\n        />\n      </Grid.Root>\n      <Field.Root>\n        <Field.Label>\n          {formatMessage({\n            id: 'Settings.permissions.auditLogs.payload',\n            defaultMessage: 'Payload',\n          })}\n        </Field.Label>\n        <Payload value={JSON.stringify(payload, null, 2)} disabled />\n      </Field.Root>\n    </>\n  );\n};\n\nconst Payload = styled(JSONInput)`\n  max-width: 100%;\n  overflow: scroll;\n`;\n\ninterface ActionItemProps {\n  actionLabel: string;\n  actionName: string;\n}\n\nconst ActionItem = ({ actionLabel, actionName }: ActionItemProps) => {\n  return (\n    <Flex direction=\"column\" alignItems=\"baseline\" gap={1}>\n      <Typography textColor=\"neutral600\" variant=\"sigma\">\n        {actionLabel}\n      </Typography>\n      <Typography textColor=\"neutral600\">{actionName}</Typography>\n    </Flex>\n  );\n};\n", "import * as React from 'react';\n\nimport { useNotification } from '../../../../../../../../admin/src/features/Notifications';\nimport { useAPIErrorHandler } from '../../../../../../../../admin/src/hooks/useAPIErrorHandler';\nimport { useQueryParams } from '../../../../../../../../admin/src/hooks/useQueryParams';\nimport { useAdminUsers } from '../../../../../../../../admin/src/services/users';\nimport { useGetAuditLogsQuery } from '../../../../../services/auditLogs';\n\nexport const useAuditLogsData = ({\n  canReadAuditLogs,\n  canReadUsers,\n}: {\n  canReadAuditLogs: boolean;\n  canReadUsers: boolean;\n}) => {\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const [{ query }] = useQueryParams();\n\n  const {\n    data,\n    error,\n    isError: isUsersError,\n    isLoading: isLoadingUsers,\n  } = useAdminUsers(\n    {},\n    {\n      skip: !canReadUsers,\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({ type: 'danger', message: formatAPIError(error) });\n    }\n  }, [error, toggleNotification, formatAPIError]);\n\n  const {\n    data: auditLogs,\n    isLoading: isLoadingAuditLogs,\n    isError: isAuditLogsError,\n    error: auditLogsError,\n  } = useGetAuditLogsQuery(query, {\n    refetchOnMountOrArgChange: true,\n    skip: !canReadAuditLogs,\n  });\n\n  React.useEffect(() => {\n    if (auditLogsError) {\n      toggleNotification({ type: 'danger', message: formatAPIError(auditLogsError) });\n    }\n  }, [auditLogsError, toggleNotification, formatAPIError]);\n\n  return {\n    auditLogs,\n    users: data?.users ?? [],\n    isLoading: isLoadingUsers || isLoadingAuditLogs,\n    hasError: isAuditLogsError || isUsersError,\n  };\n};\n", "import { Combobox, ComboboxOption } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { Filters } from '../../../../../../../../admin/src/components/Filters';\nimport { useField } from '../../../../../../../../admin/src/components/Form';\n\nexport const ComboboxFilter = (props: Filters.ValueInputProps) => {\n  const { formatMessage } = useIntl();\n  const field = useField(props.name);\n  const ariaLabel = formatMessage({\n    id: 'Settings.permissions.auditLogs.filter.aria-label',\n    defaultMessage: 'Search and select an option to filter',\n  });\n\n  const handleChange = (value?: string) => {\n    field.onChange(props.name, value);\n  };\n\n  return (\n    <Combobox aria-label={ariaLabel} value={field.value} onChange={handleChange}>\n      {props.options?.map((opt) => {\n        const value = typeof opt === 'string' ? opt : opt.value;\n        const label = typeof opt === 'string' ? opt : opt.label;\n        return (\n          <ComboboxOption key={value} value={value}>\n            {label}\n          </ComboboxOption>\n        );\n      })}\n    </Combobox>\n  );\n};\n", "import { IntlShape } from 'react-intl';\n\nimport { Filters } from '../../../../../../../../admin/src/components/Filters';\nimport { getDisplayName } from '../../../../../../../../admin/src/utils/users';\nimport { SanitizedAdminUser } from '../../../../../../../../shared/contracts/shared';\nimport { ComboboxFilter } from '../components/ComboboxFilter';\n\nimport { actionTypes, getDefaultMessage } from './getActionTypesDefaultMessages';\n\nexport const getDisplayedFilters = ({\n  formatMessage,\n  users,\n  canReadUsers,\n}: {\n  formatMessage: IntlShape['formatMessage'];\n  users: SanitizedAdminUser[];\n  canReadUsers: boolean;\n}): Filters.Filter[] => {\n  const operators = [\n    {\n      label: formatMessage({\n        id: 'components.FilterOptions.FILTER_TYPES.$eq',\n        defaultMessage: 'is',\n      }),\n      value: '$eq',\n    },\n    {\n      label: formatMessage({\n        id: 'components.FilterOptions.FILTER_TYPES.$ne',\n        defaultMessage: 'is not',\n      }),\n      value: '$ne',\n    },\n  ] as NonNullable<Filters.Filter['operators']>;\n\n  const filters = [\n    {\n      input: ComboboxFilter,\n      label: formatMessage({\n        id: 'Settings.permissions.auditLogs.action',\n        defaultMessage: 'Action',\n      }),\n      name: 'action',\n      operators,\n      options: (Object.keys(actionTypes) as (keyof typeof actionTypes)[]).map((action) => ({\n        label: formatMessage(\n          {\n            id: `Settings.permissions.auditLogs.${action}`,\n            defaultMessage: getDefaultMessage(action),\n          },\n          { model: undefined }\n        ),\n        value: action,\n      })),\n      type: 'enumeration',\n    },\n    {\n      label: formatMessage({\n        id: 'Settings.permissions.auditLogs.date',\n        defaultMessage: 'Date',\n      }),\n      name: 'date',\n      type: 'datetime',\n    },\n  ] satisfies Filters.Filter[];\n\n  if (canReadUsers && users) {\n    return [\n      ...filters,\n      {\n        input: ComboboxFilter,\n        label: formatMessage({\n          id: 'Settings.permissions.auditLogs.user',\n          defaultMessage: 'User',\n        }),\n        mainField: { name: 'id', type: 'integer' },\n        name: 'user',\n        operators,\n        options: users.map((user) => ({\n          label: getDisplayName(user),\n          value: user.id.toString(),\n        })),\n        type: 'relation',\n      } satisfies Filters.Filter,\n    ];\n  }\n\n  return filters;\n};\n", "import { Flex, IconButton, Typography } from '@strapi/design-system';\nimport { Eye } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { Filters } from '../../../../../../../admin/src/components/Filters';\nimport { Layouts } from '../../../../../../../admin/src/components/Layouts/Layout';\nimport { Page } from '../../../../../../../admin/src/components/PageHelpers';\nimport { Pagination } from '../../../../../../../admin/src/components/Pagination';\nimport { Table } from '../../../../../../../admin/src/components/Table';\nimport { useTypedSelector } from '../../../../../../../admin/src/core/store/hooks';\nimport { useQueryParams } from '../../../../../../../admin/src/hooks/useQueryParams';\nimport { useRBAC } from '../../../../../../../admin/src/hooks/useRBAC';\nimport { AuditLog } from '../../../../../../../shared/contracts/audit-logs';\n\nimport { Modal } from './components/Modal';\nimport { useAuditLogsData } from './hooks/useAuditLogsData';\nimport { useFormatTimeStamp } from './hooks/useFormatTimeStamp';\nimport { getDefaultMessage } from './utils/getActionTypesDefaultMessages';\nimport { getDisplayedFilters } from './utils/getDisplayedFilters';\n\nconst ListPage = () => {\n  const { formatMessage } = useIntl();\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings);\n\n  const {\n    allowedActions: { canRead: canReadAuditLogs, canReadUsers },\n    isLoading: isLoadingRBAC,\n  } = useRBAC({\n    ...permissions?.auditLogs,\n    readUsers: permissions?.users.read || [],\n  });\n\n  const [{ query }, setQuery] = useQueryParams<{ id?: AuditLog['id'] }>();\n  const {\n    auditLogs,\n    users,\n    isLoading: isLoadingData,\n    hasError,\n  } = useAuditLogsData({\n    canReadAuditLogs,\n    canReadUsers,\n  });\n\n  const formatTimeStamp = useFormatTimeStamp();\n\n  const displayedFilters = getDisplayedFilters({ formatMessage, users, canReadUsers });\n\n  const headers: Table.Header<AuditLog, object>[] = [\n    {\n      name: 'action',\n      label: formatMessage({\n        id: 'Settings.permissions.auditLogs.action',\n        defaultMessage: 'Action',\n      }),\n      sortable: true,\n    },\n    {\n      name: 'date',\n      label: formatMessage({\n        id: 'Settings.permissions.auditLogs.date',\n        defaultMessage: 'Date',\n      }),\n      sortable: true,\n    },\n    {\n      name: 'user',\n      label: formatMessage({\n        id: 'Settings.permissions.auditLogs.user',\n        defaultMessage: 'User',\n      }),\n      sortable: false,\n      // In this case, the passed parameter cannot and shouldn't be something else than User\n      cellFormatter: ({ user }) => (user ? user.displayName : ''),\n    },\n  ];\n\n  if (hasError) {\n    return <Page.Error />;\n  }\n\n  const isLoading = isLoadingData || isLoadingRBAC;\n\n  const { results = [] } = auditLogs ?? {};\n\n  return (\n    <Page.Main aria-busy={isLoading}>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: formatMessage({\n              id: 'global.auditLogs',\n              defaultMessage: 'Audit Logs',\n            }),\n          }\n        )}\n      </Page.Title>\n      <Layouts.Header\n        title={formatMessage({\n          id: 'global.auditLogs',\n          defaultMessage: 'Audit Logs',\n        })}\n        subtitle={formatMessage({\n          id: 'Settings.permissions.auditLogs.listview.header.subtitle',\n          defaultMessage: 'Logs of all the activities that happened in your environment',\n        })}\n      />\n      <Layouts.Action\n        startActions={\n          <Filters.Root options={displayedFilters}>\n            <Filters.Trigger />\n            <Filters.Popover />\n            <Filters.List />\n          </Filters.Root>\n        }\n      />\n      <Layouts.Content>\n        <Table.Root rows={results} headers={headers} isLoading={isLoading}>\n          <Table.Content>\n            <Table.Head>\n              {headers.map((header) => (\n                <Table.HeaderCell key={header.name} {...header} />\n              ))}\n            </Table.Head>\n            <Table.Empty />\n            <Table.Loading />\n            <Table.Body>\n              {results.map((log) => (\n                <Table.Row key={log.id} onClick={() => setQuery({ id: log.id })}>\n                  {headers.map((header) => {\n                    const { name, cellFormatter } = header;\n\n                    switch (name) {\n                      case 'action':\n                        return (\n                          <Table.Cell key={name}>\n                            <Typography textColor=\"neutral800\">\n                              {formatMessage(\n                                {\n                                  id: `Settings.permissions.auditLogs.${log.action}`,\n                                  // @ts-expect-error – getDefaultMessage probably doesn't benefit from being so strongly typed unless we just add string at the end.\n                                  defaultMessage: getDefaultMessage(log.action),\n                                },\n                                { model: (log.payload?.model as string) ?? '' }\n                              )}\n                            </Typography>\n                          </Table.Cell>\n                        );\n                      case 'date':\n                        return (\n                          <Table.Cell key={name}>\n                            <Typography textColor=\"neutral800\">\n                              {formatTimeStamp(log.date)}\n                            </Typography>\n                          </Table.Cell>\n                        );\n                      case 'user':\n                        return (\n                          <Table.Cell key={name}>\n                            <Typography textColor=\"neutral800\">\n                              {cellFormatter ? cellFormatter(log, header) : '-'}\n                            </Typography>\n                          </Table.Cell>\n                        );\n                      default:\n                        return (\n                          <Table.Cell key={name}>\n                            <Typography textColor=\"neutral800\">\n                              {(log[name as keyof AuditLog] as string) || '-'}\n                            </Typography>\n                          </Table.Cell>\n                        );\n                    }\n                  })}\n                  <Table.Cell onClick={(e) => e.stopPropagation()}>\n                    <Flex justifyContent=\"end\">\n                      <IconButton\n                        onClick={() => setQuery({ id: log.id })}\n                        withTooltip={false}\n                        label={formatMessage(\n                          { id: 'app.component.table.view', defaultMessage: '{target} details' },\n                          { target: `${log.action} action` }\n                        )}\n                        variant=\"ghost\"\n                      >\n                        <Eye />\n                      </IconButton>\n                    </Flex>\n                  </Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table.Content>\n        </Table.Root>\n\n        <Pagination.Root {...auditLogs?.pagination}>\n          <Pagination.PageSize />\n          <Pagination.Links />\n        </Pagination.Root>\n      </Layouts.Content>\n      {query?.id && (\n        <Modal handleClose={() => setQuery({ id: '' }, 'remove')} logId={query.id.toString()} />\n      )}\n    </Page.Main>\n  );\n};\n\nconst ProtectedListPage = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.auditLogs?.main\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <ListPage />\n    </Page.Protect>\n  );\n};\n\nexport { ListPage, ProtectedListPage };\n"],
  "mappings": "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",
  "names": ["auditLogsService", "adminApi", "injectEndpoints", "endpoints", "builder", "getAuditLogs", "query", "params", "url", "config", "getAuditLog", "id", "overrideExisting", "useGetAuditLogsQuery", "useGetAuditLogQuery", "useFormatTimeStamp", "formatDate", "useIntl", "formatTimeStamp", "value", "date", "parseISO", "formattedDate", "dateStyle", "formattedTime", "timeStyle", "hourCycle", "actionTypes", "getDefaultMessage", "Modal", "handleClose", "logId", "toggleNotification", "useNotification", "_unstableFormatAPIError", "formatAPIError", "useAPIErrorHandler", "data", "error", "isLoading", "React", "useEffect", "type", "message", "_jsx", "DSModal", "Root", "defaultOpen", "onOpenChange", "_jsxs", "Content", "Header", "Breadcrumbs", "label", "Crumb", "isCurrent", "Body", "ActionBody", "formatMessage", "Flex", "padding", "justifyContent", "alignItems", "Loader", "action", "user", "payload", "_Fragment", "Box", "marginBottom", "Typography", "variant", "defaultMessage", "Grid", "gap", "gridCols", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight", "background", "hasRadius", "ActionItem", "actionLabel", "actionName", "model", "displayName", "toString", "Field", "Label", "Payload", "JSON", "stringify", "disabled", "styled", "JSONInput", "direction", "textColor", "useAuditLogsData", "canReadAuditLogs", "canReadUsers", "useQueryParams", "isError", "isUsersError", "isLoadingUsers", "useAdminUsers", "skip", "refetchOnMountOrArgChange", "auditLogs", "isLoadingAuditLogs", "isAuditLogsError", "auditLogsError", "users", "hasError", "ComboboxFilter", "props", "field", "useField", "name", "ariaLabel", "handleChange", "onChange", "Combobox", "aria-label", "options", "map", "opt", "ComboboxOption", "getDisplayedFilters", "operators", "filters", "input", "Object", "keys", "undefined", "mainField", "getDisplayName", "ListPage", "permissions", "useTypedSelector", "state", "admin_app", "settings", "allowedActions", "canRead", "isLoadingRBAC", "useRBAC", "readUsers", "read", "setQuery", "isLoadingData", "displayedFilters", "headers", "sortable", "cellFormatter", "Page", "Error", "results", "Main", "aria-busy", "Title", "Layouts", "title", "subtitle", "Action", "startActions", "Filters", "Trigger", "Popover", "List", "Table", "rows", "Head", "header", "HeaderCell", "Empty", "Loading", "log", "Row", "onClick", "Cell", "e", "stopPropagation", "IconButton", "withTooltip", "target", "Eye", "Pagination", "pagination", "PageSize", "Links", "ProtectedListPage", "main", "Protect"]
}

import {
  getDocumentStatus
} from "./chunk-JBEBGJMP.js";
import {
  FormLayout,
  require_codemirror,
  require_lib as require_lib2,
  require_markdown_it,
  require_markdown_it_abbr,
  require_markdown_it_container,
  require_markdown_it_deflist,
  require_markdown_it_emoji,
  require_markdown_it_footnote,
  require_markdown_it_ins,
  require_markdown_it_mark,
  require_markdown_it_sub,
  require_markdown_it_sup,
  require_placeholder,
  require_sanitize_html
} from "./chunk-UZVBTJK2.js";
import "./chunk-2LWHDGWO.js";
import "./chunk-QGLPGGWX.js";
import "./chunk-E6Q65MSH.js";
import "./chunk-4J7WO4RC.js";
import "./chunk-4T7QAQJ4.js";
import "./chunk-VRLFP6IO.js";
import "./chunk-BFFKEB7B.js";
import {
  COLLECTION_TYPES,
  DocumentRBAC,
  DocumentStatus,
  buildValidParams,
  require_mapValues,
  require_prism,
  useDocument,
  useDocumentLayout,
  useGetPreviewUrlQuery
} from "./chunk-7EUVMRZZ.js";
import "./chunk-IDV2IX4L.js";
import "./chunk-7OK4HBDN.js";
import "./chunk-FIXJNFD6.js";
import "./chunk-RR2OGC23.js";
import "./chunk-Q3HNH76V.js";
import "./chunk-ZESFYHFX.js";
import "./chunk-MMOBCIZG.js";
import {
  Form2 as Form,
  useClipboard,
  useHistory
} from "./chunk-RWGGLXMY.js";
import {
  Page,
  createContext,
  useNotification,
  useQueryParams,
  useRBAC
} from "./chunk-SNGAK6QT.js";
import {
  Box,
  Flex,
  FocusTrap,
  Grid,
  IconButton,
  Portal$1,
  Tabs,
  Typography,
  require_clone,
  require_lib,
  require_pipe,
  require_toPath,
  useIntl
} from "./chunk-Y2P3SHYJ.js";
import "./chunk-HMQGRD3H.js";
import {
  Link,
  useParams
} from "./chunk-NZJNG4T4.js";
import "./chunk-XUW2YTNL.js";
import {
  ForwardRef$2l,
  ForwardRef$3$
} from "./chunk-TKMBRDQV.js";
import {
  require_jsx_runtime
} from "./chunk-GOQBQZHW.js";
import {
  dt
} from "./chunk-GO6TWMX3.js";
import {
  require_react
} from "./chunk-MTZNWPB2.js";
import {
  __toESM
} from "./chunk-GFT2G5UO.js";

// node_modules/@strapi/content-manager/dist/admin/chunks/Preview-BEq0FXda.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var import_qs = __toESM(require_lib(), 1);
var import_mapValues = __toESM(require_mapValues(), 1);
var import_pipe = __toESM(require_pipe(), 1);
var import_prismjs = __toESM(require_prism(), 1);
import "/Users/visarutsankham/pi-web-2025/pi-back/node_modules/prismjs/themes/prism-solarizedlight.css";
var import_clone = __toESM(require_clone(), 1);
var import_toPath = __toESM(require_toPath(), 1);
var import_codemirror5 = __toESM(require_codemirror(), 1);
var import_sanitize_html = __toESM(require_sanitize_html(), 1);
var import_highlight = __toESM(require_lib2(), 1);
var import_markdown_it = __toESM(require_markdown_it(), 1);
var import_markdown_it_abbr = __toESM(require_markdown_it_abbr(), 1);
var import_markdown_it_container = __toESM(require_markdown_it_container(), 1);
var import_markdown_it_deflist = __toESM(require_markdown_it_deflist(), 1);
var import_markdown_it_emoji = __toESM(require_markdown_it_emoji(), 1);
var import_markdown_it_footnote = __toESM(require_markdown_it_footnote(), 1);
var import_markdown_it_ins = __toESM(require_markdown_it_ins(), 1);
var import_markdown_it_mark = __toESM(require_markdown_it_mark(), 1);
var import_markdown_it_sub = __toESM(require_markdown_it_sub(), 1);
var import_markdown_it_sup = __toESM(require_markdown_it_sup(), 1);
var import_placeholder = __toESM(require_placeholder(), 1);
import "/Users/visarutsankham/pi-web-2025/pi-back/node_modules/highlight.js/styles/solarized-dark.css";
var UnstablePreviewContent = () => {
  const previewUrl = usePreviewContext("PreviewContent", (state) => state.url);
  const layout = usePreviewContext("PreviewContent", (state) => state.layout);
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsxs)(Flex, {
    flex: 1,
    overflow: "auto",
    alignItems: "stretch",
    children: [
      (0, import_jsx_runtime.jsx)(Box, {
        overflow: "auto",
        flex: 1,
        borderWidth: "0 1px 0 0",
        borderColor: "neutral150",
        padding: 6,
        children: (0, import_jsx_runtime.jsx)(FormLayout, {
          layout: layout.layout,
          hasBackground: true
        })
      }),
      (0, import_jsx_runtime.jsx)(Box, {
        src: previewUrl,
        title: formatMessage({
          id: "content-manager.preview.panel.title",
          defaultMessage: "Preview"
        }),
        flex: 1,
        height: "100%",
        borderWidth: 0,
        tag: "iframe"
      }, previewUrl)
    ]
  });
};
var PreviewContent = () => {
  const previewUrl = usePreviewContext("PreviewContent", (state) => state.url);
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsx)(Box, {
    src: previewUrl,
    title: formatMessage({
      id: "content-manager.preview.panel.title",
      defaultMessage: "Preview"
    }),
    width: "100%",
    height: "100%",
    borderWidth: 0,
    tag: "iframe"
  }, previewUrl);
};
var ClosePreviewButton = () => {
  const [{ query }] = useQueryParams();
  const { formatMessage } = useIntl();
  const canGoBack = useHistory("BackButton", (state) => state.canGoBack);
  const goBack = useHistory("BackButton", (state) => state.goBack);
  const history = useHistory("BackButton", (state) => state.history);
  const locationIndex = useHistory("BackButton", (state) => state.currentLocationIndex);
  const historyTo = canGoBack ? history.at(locationIndex - 2) : void 0;
  const fallback = {
    pathname: "..",
    search: (0, import_qs.stringify)(query, {
      encode: false
    })
  };
  const toWithFallback = historyTo ?? fallback;
  const handleClick = (e) => {
    if (canGoBack) {
      e.preventDefault();
      goBack();
      return;
    }
  };
  return (0, import_jsx_runtime.jsx)(IconButton, {
    variant: "ghost",
    tag: Link,
    relative: "path",
    to: toWithFallback,
    onClick: handleClick,
    label: formatMessage({
      id: "content-manager.preview.header.close",
      defaultMessage: "Close preview"
    }),
    children: (0, import_jsx_runtime.jsx)(ForwardRef$3$, {})
  });
};
var Status = () => {
  var _a;
  const document = usePreviewContext("PreviewHeader", (state) => state.document);
  const schema = usePreviewContext("PreviewHeader", (state) => state.schema);
  const meta = usePreviewContext("PreviewHeader", (state) => state.meta);
  const hasDraftAndPublished = ((_a = schema == null ? void 0 : schema.options) == null ? void 0 : _a.draftAndPublish) ?? false;
  if (!hasDraftAndPublished) {
    return null;
  }
  const status = getDocumentStatus(document, meta);
  return (0, import_jsx_runtime.jsx)(DocumentStatus, {
    status,
    size: "XS"
  });
};
var PreviewTabs = () => {
  var _a;
  const { formatMessage } = useIntl();
  const [{ query }, setQuery] = useQueryParams();
  const document = usePreviewContext("PreviewHeader", (state) => state.document);
  const schema = usePreviewContext("PreviewHeader", (state) => state.schema);
  const meta = usePreviewContext("PreviewHeader", (state) => state.meta);
  const hasDraftAndPublish = ((_a = schema == null ? void 0 : schema.options) == null ? void 0 : _a.draftAndPublish) ?? false;
  const documentStatus = getDocumentStatus(document, meta);
  const handleTabChange = (status) => {
    if (status === "published" || status === "draft") {
      setQuery({
        status
      }, "push", true);
    }
  };
  if (!hasDraftAndPublish) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {
    children: (0, import_jsx_runtime.jsx)(Tabs.Root, {
      variant: "simple",
      value: query.status || "draft",
      onValueChange: handleTabChange,
      children: (0, import_jsx_runtime.jsxs)(Tabs.List, {
        "aria-label": formatMessage({
          id: "preview.tabs.label",
          defaultMessage: "Document status"
        }),
        children: [
          (0, import_jsx_runtime.jsx)(StatusTab, {
            value: "draft",
            children: formatMessage({
              id: "content-manager.containers.List.draft",
              defaultMessage: "draft"
            })
          }),
          (0, import_jsx_runtime.jsx)(StatusTab, {
            value: "published",
            disabled: documentStatus === "draft",
            children: formatMessage({
              id: "content-manager.containers.List.published",
              defaultMessage: "published"
            })
          })
        ]
      })
    })
  });
};
var UnstablePreviewHeader = () => {
  const title = usePreviewContext("PreviewHeader", (state) => state.title);
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { copy } = useClipboard();
  const handleCopyLink = () => {
    copy(window.location.href);
    toggleNotification({
      message: formatMessage({
        id: "content-manager.preview.copy.success",
        defaultMessage: "Copied preview link"
      }),
      type: "success"
    });
  };
  return (0, import_jsx_runtime.jsxs)(Flex, {
    gap: 4,
    background: "neutral0",
    borderColor: "neutral150",
    tag: "header",
    children: [
      (0, import_jsx_runtime.jsxs)(TitleContainer, {
        height: "100%",
        paddingLeft: 2,
        paddingRight: 4,
        children: [
          (0, import_jsx_runtime.jsx)(ClosePreviewButton, {}),
          (0, import_jsx_runtime.jsx)(PreviewTitle, {
            tag: "h1",
            title,
            maxWidth: "200px",
            fontSize: 2,
            paddingLeft: 2,
            paddingRight: 3,
            fontWeight: 600,
            children: title
          }),
          (0, import_jsx_runtime.jsx)(Status, {})
        ]
      }),
      (0, import_jsx_runtime.jsxs)(Flex, {
        flex: 1,
        paddingRight: 2,
        justifyContent: "space-between",
        children: [
          (0, import_jsx_runtime.jsx)(PreviewTabs, {}),
          (0, import_jsx_runtime.jsx)(IconButton, {
            type: "button",
            label: formatMessage({
              id: "preview.copy.label",
              defaultMessage: "Copy preview link"
            }),
            onClick: handleCopyLink,
            children: (0, import_jsx_runtime.jsx)(ForwardRef$2l, {})
          })
        ]
      })
    ]
  });
};
var PreviewHeader = () => {
  const title = usePreviewContext("PreviewHeader", (state) => state.title);
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { copy } = useClipboard();
  const handleCopyLink = () => {
    copy(window.location.href);
    toggleNotification({
      message: formatMessage({
        id: "content-manager.preview.copy.success",
        defaultMessage: "Copied preview link"
      }),
      type: "success"
    });
  };
  return (0, import_jsx_runtime.jsxs)(Grid.Root, {
    gap: 3,
    gridCols: 3,
    paddingLeft: 2,
    paddingRight: 2,
    background: "neutral0",
    borderColor: "neutral150",
    tag: "header",
    children: [
      (0, import_jsx_runtime.jsxs)(Grid.Item, {
        xs: 1,
        paddingTop: 2,
        paddingBottom: 2,
        gap: 3,
        children: [
          (0, import_jsx_runtime.jsx)(ClosePreviewButton, {}),
          (0, import_jsx_runtime.jsx)(PreviewTitle, {
            tag: "h1",
            fontWeight: 600,
            fontSize: 2,
            maxWidth: "200px",
            title,
            children: title
          }),
          (0, import_jsx_runtime.jsx)(Status, {})
        ]
      }),
      (0, import_jsx_runtime.jsx)(Grid.Item, {
        xs: 1,
        marginBottom: "-1px",
        alignItems: "end",
        margin: "auto",
        children: (0, import_jsx_runtime.jsx)(PreviewTabs, {})
      }),
      (0, import_jsx_runtime.jsx)(Grid.Item, {
        xs: 1,
        justifyContent: "end",
        paddingTop: 2,
        paddingBottom: 2,
        children: (0, import_jsx_runtime.jsx)(IconButton, {
          type: "button",
          label: formatMessage({
            id: "preview.copy.label",
            defaultMessage: "Copy preview link"
          }),
          onClick: handleCopyLink,
          children: (0, import_jsx_runtime.jsx)(ForwardRef$2l, {})
        })
      })
    ]
  });
};
var PreviewTitle = dt(Typography)`
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
var StatusTab = dt(Tabs.Trigger)`
  text-transform: uppercase;
`;
var TitleContainer = dt(Flex)`
  border-right: 1px solid ${({ theme }) => theme.colors.neutral150};
`;
var [PreviewProvider, usePreviewContext] = createContext("PreviewPage");
var PreviewPage = () => {
  var _a, _b;
  const { formatMessage } = useIntl();
  const { slug: model, id: documentId, collectionType } = useParams();
  const [{ query }] = useQueryParams();
  const params = React.useMemo(() => buildValidParams(query), [
    query
  ]);
  if (!collectionType) {
    throw new Error("Could not find collectionType in url params");
  }
  if (!model) {
    throw new Error("Could not find model in url params");
  }
  if (collectionType === COLLECTION_TYPES && !documentId) {
    throw new Error("Could not find documentId in url params");
  }
  const previewUrlResponse = useGetPreviewUrlQuery({
    params: {
      contentType: model
    },
    query: {
      documentId,
      locale: params.locale,
      status: params.status
    }
  });
  const documentResponse = useDocument({
    model,
    collectionType,
    documentId,
    params
  });
  const documentLayoutResponse = useDocumentLayout(model);
  if (documentResponse.isLoading || previewUrlResponse.isLoading || documentLayoutResponse.isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  if (previewUrlResponse.error || documentLayoutResponse.error || !documentResponse.document || !documentResponse.meta || !documentResponse.schema) {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  if (!((_b = (_a = previewUrlResponse.data) == null ? void 0 : _a.data) == null ? void 0 : _b.url)) {
    return (0, import_jsx_runtime.jsx)(Page.NoData, {});
  }
  const documentTitle = documentResponse.getTitle(documentLayoutResponse.edit.settings.mainField);
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [
      (0, import_jsx_runtime.jsx)(Page.Title, {
        children: formatMessage({
          id: "content-manager.preview.page-title",
          defaultMessage: "{contentType} preview"
        }, {
          contentType: documentTitle
        })
      }),
      (0, import_jsx_runtime.jsx)(PreviewProvider, {
        url: previewUrlResponse.data.data.url,
        document: documentResponse.document,
        title: documentTitle,
        meta: documentResponse.meta,
        schema: documentResponse.schema,
        layout: documentLayoutResponse.edit,
        children: (0, import_jsx_runtime.jsx)(Form, {
          method: "POST",
          initialValues: documentResponse.document,
          height: "100%",
          children: (0, import_jsx_runtime.jsx)(Flex, {
            direction: "column",
            height: "100%",
            alignItems: "stretch",
            children: window.strapi.future.isEnabled("unstablePreviewSideEditor") ? (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
              children: [
                (0, import_jsx_runtime.jsx)(UnstablePreviewHeader, {}),
                (0, import_jsx_runtime.jsx)(UnstablePreviewContent, {})
              ]
            }) : (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
              children: [
                (0, import_jsx_runtime.jsx)(PreviewHeader, {}),
                (0, import_jsx_runtime.jsx)(PreviewContent, {})
              ]
            })
          })
        })
      })
    ]
  });
};
var ProtectedPreviewPageImpl = () => {
  const { slug: model } = useParams();
  const { permissions = [], isLoading, error } = useRBAC([
    {
      action: "plugin::content-manager.explorer.read",
      subject: model
    },
    {
      action: "plugin::content-manager.explorer.update",
      subject: model
    }
  ]);
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  if (error || !model) {
    return (0, import_jsx_runtime.jsx)(Box, {
      height: "100vh",
      width: "100vw",
      position: "fixed",
      top: 0,
      left: 0,
      zIndex: 2,
      background: "neutral0",
      children: (0, import_jsx_runtime.jsx)(Page.Error, {})
    });
  }
  return (0, import_jsx_runtime.jsx)(Box, {
    height: "100vh",
    width: "100vw",
    position: "fixed",
    top: 0,
    left: 0,
    zIndex: 2,
    background: "neutral0",
    children: (0, import_jsx_runtime.jsx)(Page.Protect, {
      permissions: permissions.filter((permission) => permission.action.includes("explorer.read")),
      children: (0, import_jsx_runtime.jsx)(DocumentRBAC, {
        permissions,
        children: (0, import_jsx_runtime.jsx)(PreviewPage, {})
      })
    })
  });
};
var ProtectedPreviewPage = () => {
  return (0, import_jsx_runtime.jsx)(Portal$1, {
    children: (0, import_jsx_runtime.jsx)(FocusTrap, {
      children: (0, import_jsx_runtime.jsx)(ProtectedPreviewPageImpl, {})
    })
  });
};
export {
  ProtectedPreviewPage,
  usePreviewContext
};
//# sourceMappingURL=Preview-BEq0FXda-55OTWXLU.js.map

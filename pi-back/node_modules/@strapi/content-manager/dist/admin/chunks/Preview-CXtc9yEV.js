'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var strapiAdmin = require('@strapi/admin/strapi-admin');
var designSystem = require('@strapi/design-system');
var reactIntl = require('react-intl');
var reactRouterDom = require('react-router-dom');
var index = require('./index-BHimg6jW.js');
var Input = require('./Input-DLJZHw9Y.js');
var Icons = require('@strapi/icons');
var qs = require('qs');
var styledComponents = require('styled-components');
var EditViewPage = require('./EditViewPage-DFkloeMZ.js');
require('lodash/fp/mapValues');
require('yup');
require('fractional-indexing');
require('lodash/fp/pipe');
require('date-fns');
require('@reduxjs/toolkit');
require('prismjs');
require('slate');
require('slate-history');
require('slate-react');
require('prismjs/themes/prism-solarizedlight.css');
require('prismjs/components/prism-asmatmel');
require('prismjs/components/prism-bash');
require('prismjs/components/prism-basic');
require('prismjs/components/prism-c');
require('prismjs/components/prism-clojure');
require('prismjs/components/prism-cobol');
require('prismjs/components/prism-cpp');
require('prismjs/components/prism-csharp');
require('prismjs/components/prism-dart');
require('prismjs/components/prism-docker');
require('prismjs/components/prism-elixir');
require('prismjs/components/prism-erlang');
require('prismjs/components/prism-fortran');
require('prismjs/components/prism-fsharp');
require('prismjs/components/prism-go');
require('prismjs/components/prism-graphql');
require('prismjs/components/prism-groovy');
require('prismjs/components/prism-haskell');
require('prismjs/components/prism-haxe');
require('prismjs/components/prism-ini');
require('prismjs/components/prism-java');
require('prismjs/components/prism-javascript');
require('prismjs/components/prism-jsx');
require('prismjs/components/prism-json');
require('prismjs/components/prism-julia');
require('prismjs/components/prism-kotlin');
require('prismjs/components/prism-latex');
require('prismjs/components/prism-lua');
require('prismjs/components/prism-markdown');
require('prismjs/components/prism-matlab');
require('prismjs/components/prism-makefile');
require('prismjs/components/prism-objectivec');
require('prismjs/components/prism-perl');
require('prismjs/components/prism-php');
require('prismjs/components/prism-powershell');
require('prismjs/components/prism-python');
require('prismjs/components/prism-r');
require('prismjs/components/prism-ruby');
require('prismjs/components/prism-rust');
require('prismjs/components/prism-sas');
require('prismjs/components/prism-scala');
require('prismjs/components/prism-scheme');
require('prismjs/components/prism-sql');
require('prismjs/components/prism-stata');
require('prismjs/components/prism-swift');
require('prismjs/components/prism-typescript');
require('prismjs/components/prism-tsx');
require('prismjs/components/prism-vbnet');
require('prismjs/components/prism-yaml');
require('./usePrev-DIYl-IAL.js');
require('./useDragAndDrop-gcqEJMnO.js');
require('react-dnd');
require('@radix-ui/react-toolbar');
require('react-dnd-html5-backend');
require('./objects-C3EebVVe.js');
require('lodash/clone');
require('lodash/toPath');
require('./Relations-o7_hVGyK.js');
require('react-window');
require('./relations-XOYEEqMz.js');
require('./ComponentIcon-C-EjOUPA.js');
require('@strapi/icons/symbols');
require('codemirror5');
require('sanitize-html');
require('highlight.js');
require('markdown-it');
require('markdown-it-abbr');
require('markdown-it-container');
require('markdown-it-deflist');
require('markdown-it-emoji');
require('markdown-it-footnote');
require('markdown-it-ins');
require('markdown-it-mark');
require('markdown-it-sub');
require('markdown-it-sup');
require('highlight.js/styles/solarized-dark.css');
require('codemirror5/addon/display/placeholder');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const UnstablePreviewContent = ()=>{
    const previewUrl = usePreviewContext('PreviewContent', (state)=>state.url);
    const layout = usePreviewContext('PreviewContent', (state)=>state.layout);
    const { formatMessage } = reactIntl.useIntl();
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
        flex: 1,
        overflow: "auto",
        alignItems: "stretch",
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                overflow: "auto",
                flex: 1,
                borderWidth: "0 1px 0 0",
                borderColor: "neutral150",
                padding: 6,
                children: /*#__PURE__*/ jsxRuntime.jsx(Input.FormLayout, {
                    layout: layout.layout,
                    hasBackground: true
                })
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                src: previewUrl,
                title: formatMessage({
                    id: 'content-manager.preview.panel.title',
                    defaultMessage: 'Preview'
                }),
                flex: 1,
                height: "100%",
                borderWidth: 0,
                tag: "iframe"
            }, previewUrl)
        ]
    });
};
const PreviewContent = ()=>{
    const previewUrl = usePreviewContext('PreviewContent', (state)=>state.url);
    const { formatMessage } = reactIntl.useIntl();
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
        src: previewUrl,
        title: formatMessage({
            id: 'content-manager.preview.panel.title',
            defaultMessage: 'Preview'
        }),
        width: "100%",
        height: "100%",
        borderWidth: 0,
        tag: "iframe"
    }, previewUrl);
};

/* -------------------------------------------------------------------------------------------------
 * ClosePreviewButton
 * -----------------------------------------------------------------------------------------------*/ const ClosePreviewButton = ()=>{
    const [{ query }] = strapiAdmin.useQueryParams();
    const { formatMessage } = reactIntl.useIntl();
    const canGoBack = strapiAdmin.useHistory('BackButton', (state)=>state.canGoBack);
    const goBack = strapiAdmin.useHistory('BackButton', (state)=>state.goBack);
    const history = strapiAdmin.useHistory('BackButton', (state)=>state.history);
    const locationIndex = strapiAdmin.useHistory('BackButton', (state)=>state.currentLocationIndex);
    /**
   * Get the link destination from the history.
   * Rely on a fallback (the parent edit view page) if there's no page to go back .
   */ const historyTo = canGoBack ? history.at(locationIndex - 2) : undefined;
    const fallback = {
        pathname: '..',
        search: qs.stringify(query, {
            encode: false
        })
    };
    const toWithFallback = historyTo ?? fallback;
    const handleClick = (e)=>{
        if (canGoBack) {
            // Prevent normal link behavior, go back in the history stack instead
            e.preventDefault();
            goBack();
            return;
        }
    // Otherwise rely on native link behavior to go back to the edit view. We don't use navigate()
    // here in order to get the relative="path" functionality from the Link component.
    };
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.IconButton, {
        variant: "ghost",
        tag: reactRouterDom.Link,
        relative: "path",
        to: toWithFallback,
        onClick: handleClick,
        label: formatMessage({
            id: 'content-manager.preview.header.close',
            defaultMessage: 'Close preview'
        }),
        children: /*#__PURE__*/ jsxRuntime.jsx(Icons.Cross, {})
    });
};
/* -------------------------------------------------------------------------------------------------
 * Status
 * -----------------------------------------------------------------------------------------------*/ const Status = ()=>{
    // Get status
    const document = usePreviewContext('PreviewHeader', (state)=>state.document);
    const schema = usePreviewContext('PreviewHeader', (state)=>state.schema);
    const meta = usePreviewContext('PreviewHeader', (state)=>state.meta);
    const hasDraftAndPublished = schema?.options?.draftAndPublish ?? false;
    if (!hasDraftAndPublished) {
        return null;
    }
    const status = EditViewPage.getDocumentStatus(document, meta);
    return /*#__PURE__*/ jsxRuntime.jsx(index.DocumentStatus, {
        status: status,
        size: "XS"
    });
};
const PreviewTabs = ()=>{
    const { formatMessage } = reactIntl.useIntl();
    // URL query params
    const [{ query }, setQuery] = strapiAdmin.useQueryParams();
    // Get status
    const document = usePreviewContext('PreviewHeader', (state)=>state.document);
    const schema = usePreviewContext('PreviewHeader', (state)=>state.schema);
    const meta = usePreviewContext('PreviewHeader', (state)=>state.meta);
    const hasDraftAndPublish = schema?.options?.draftAndPublish ?? false;
    const documentStatus = EditViewPage.getDocumentStatus(document, meta);
    const handleTabChange = (status)=>{
        if (status === 'published' || status === 'draft') {
            setQuery({
                status
            }, 'push', true);
        }
    };
    if (!hasDraftAndPublish) {
        return null;
    }
    return /*#__PURE__*/ jsxRuntime.jsx(jsxRuntime.Fragment, {
        children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Tabs.Root, {
            variant: "simple",
            value: query.status || 'draft',
            onValueChange: handleTabChange,
            children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Tabs.List, {
                "aria-label": formatMessage({
                    id: 'preview.tabs.label',
                    defaultMessage: 'Document status'
                }),
                children: [
                    /*#__PURE__*/ jsxRuntime.jsx(StatusTab, {
                        value: "draft",
                        children: formatMessage({
                            id: 'content-manager.containers.List.draft',
                            defaultMessage: 'draft'
                        })
                    }),
                    /*#__PURE__*/ jsxRuntime.jsx(StatusTab, {
                        value: "published",
                        disabled: documentStatus === 'draft',
                        children: formatMessage({
                            id: 'content-manager.containers.List.published',
                            defaultMessage: 'published'
                        })
                    })
                ]
            })
        })
    });
};
/* -------------------------------------------------------------------------------------------------
 * PreviewHeader
 * -----------------------------------------------------------------------------------------------*/ const UnstablePreviewHeader = ()=>{
    // Get the document title
    const title = usePreviewContext('PreviewHeader', (state)=>state.title);
    const { formatMessage } = reactIntl.useIntl();
    const { toggleNotification } = strapiAdmin.useNotification();
    const { copy } = strapiAdmin.useClipboard();
    const handleCopyLink = ()=>{
        copy(window.location.href);
        toggleNotification({
            message: formatMessage({
                id: 'content-manager.preview.copy.success',
                defaultMessage: 'Copied preview link'
            }),
            type: 'success'
        });
    };
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
        gap: 4,
        background: "neutral0",
        borderColor: "neutral150",
        tag: "header",
        children: [
            /*#__PURE__*/ jsxRuntime.jsxs(TitleContainer, {
                height: "100%",
                paddingLeft: 2,
                paddingRight: 4,
                children: [
                    /*#__PURE__*/ jsxRuntime.jsx(ClosePreviewButton, {}),
                    /*#__PURE__*/ jsxRuntime.jsx(PreviewTitle, {
                        tag: "h1",
                        title: title,
                        maxWidth: "200px",
                        fontSize: 2,
                        paddingLeft: 2,
                        paddingRight: 3,
                        fontWeight: 600,
                        children: title
                    }),
                    /*#__PURE__*/ jsxRuntime.jsx(Status, {})
                ]
            }),
            /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                flex: 1,
                paddingRight: 2,
                justifyContent: "space-between",
                children: [
                    /*#__PURE__*/ jsxRuntime.jsx(PreviewTabs, {}),
                    /*#__PURE__*/ jsxRuntime.jsx(designSystem.IconButton, {
                        type: "button",
                        label: formatMessage({
                            id: 'preview.copy.label',
                            defaultMessage: 'Copy preview link'
                        }),
                        onClick: handleCopyLink,
                        children: /*#__PURE__*/ jsxRuntime.jsx(Icons.Link, {})
                    })
                ]
            })
        ]
    });
};
const PreviewHeader = ()=>{
    // Get the document title
    const title = usePreviewContext('PreviewHeader', (state)=>state.title);
    const { formatMessage } = reactIntl.useIntl();
    const { toggleNotification } = strapiAdmin.useNotification();
    const { copy } = strapiAdmin.useClipboard();
    const handleCopyLink = ()=>{
        copy(window.location.href);
        toggleNotification({
            message: formatMessage({
                id: 'content-manager.preview.copy.success',
                defaultMessage: 'Copied preview link'
            }),
            type: 'success'
        });
    };
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Grid.Root, {
        gap: 3,
        gridCols: 3,
        paddingLeft: 2,
        paddingRight: 2,
        background: "neutral0",
        borderColor: "neutral150",
        tag: "header",
        children: [
            /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Grid.Item, {
                xs: 1,
                paddingTop: 2,
                paddingBottom: 2,
                gap: 3,
                children: [
                    /*#__PURE__*/ jsxRuntime.jsx(ClosePreviewButton, {}),
                    /*#__PURE__*/ jsxRuntime.jsx(PreviewTitle, {
                        tag: "h1",
                        fontWeight: 600,
                        fontSize: 2,
                        maxWidth: "200px",
                        title: title,
                        children: title
                    }),
                    /*#__PURE__*/ jsxRuntime.jsx(Status, {})
                ]
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Grid.Item, {
                xs: 1,
                marginBottom: "-1px",
                alignItems: "end",
                margin: "auto",
                children: /*#__PURE__*/ jsxRuntime.jsx(PreviewTabs, {})
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Grid.Item, {
                xs: 1,
                justifyContent: "end",
                paddingTop: 2,
                paddingBottom: 2,
                children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.IconButton, {
                    type: "button",
                    label: formatMessage({
                        id: 'preview.copy.label',
                        defaultMessage: 'Copy preview link'
                    }),
                    onClick: handleCopyLink,
                    children: /*#__PURE__*/ jsxRuntime.jsx(Icons.Link, {})
                })
            })
        ]
    });
};
const PreviewTitle = styledComponents.styled(designSystem.Typography)`
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
const StatusTab = styledComponents.styled(designSystem.Tabs.Trigger)`
  text-transform: uppercase;
`;
const TitleContainer = styledComponents.styled(designSystem.Flex)`
  border-right: 1px solid ${({ theme })=>theme.colors.neutral150};
`;

const [PreviewProvider, usePreviewContext] = strapiAdmin.createContext('PreviewPage');
/* -------------------------------------------------------------------------------------------------
 * PreviewPage
 * -----------------------------------------------------------------------------------------------*/ const PreviewPage = ()=>{
    const { formatMessage } = reactIntl.useIntl();
    // Read all the necessary data from the URL to find the right preview URL
    const { slug: model, id: documentId, collectionType } = reactRouterDom.useParams();
    const [{ query }] = strapiAdmin.useQueryParams();
    const params = React__namespace.useMemo(()=>index.buildValidParams(query), [
        query
    ]);
    if (!collectionType) {
        throw new Error('Could not find collectionType in url params');
    }
    if (!model) {
        throw new Error('Could not find model in url params');
    }
    // Only collection types must have a documentId
    if (collectionType === index.COLLECTION_TYPES && !documentId) {
        throw new Error('Could not find documentId in url params');
    }
    const previewUrlResponse = index.useGetPreviewUrlQuery({
        params: {
            contentType: model
        },
        query: {
            documentId,
            locale: params.locale,
            status: params.status
        }
    });
    const documentResponse = index.useDocument({
        model,
        collectionType,
        documentId,
        params
    });
    const documentLayoutResponse = index.useDocumentLayout(model);
    if (documentResponse.isLoading || previewUrlResponse.isLoading || documentLayoutResponse.isLoading) {
        return /*#__PURE__*/ jsxRuntime.jsx(strapiAdmin.Page.Loading, {});
    }
    if (previewUrlResponse.error || documentLayoutResponse.error || !documentResponse.document || !documentResponse.meta || !documentResponse.schema) {
        return /*#__PURE__*/ jsxRuntime.jsx(strapiAdmin.Page.Error, {});
    }
    if (!previewUrlResponse.data?.data?.url) {
        return /*#__PURE__*/ jsxRuntime.jsx(strapiAdmin.Page.NoData, {});
    }
    const documentTitle = documentResponse.getTitle(documentLayoutResponse.edit.settings.mainField);
    return /*#__PURE__*/ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(strapiAdmin.Page.Title, {
                children: formatMessage({
                    id: 'content-manager.preview.page-title',
                    defaultMessage: '{contentType} preview'
                }, {
                    contentType: documentTitle
                })
            }),
            /*#__PURE__*/ jsxRuntime.jsx(PreviewProvider, {
                url: previewUrlResponse.data.data.url,
                document: documentResponse.document,
                title: documentTitle,
                meta: documentResponse.meta,
                schema: documentResponse.schema,
                layout: documentLayoutResponse.edit,
                children: /*#__PURE__*/ jsxRuntime.jsx(strapiAdmin.Form, {
                    method: "POST",
                    initialValues: documentResponse.document,
                    height: "100%",
                    children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Flex, {
                        direction: "column",
                        height: "100%",
                        alignItems: "stretch",
                        children: window.strapi.future.isEnabled('unstablePreviewSideEditor') ? /*#__PURE__*/ jsxRuntime.jsxs(jsxRuntime.Fragment, {
                            children: [
                                /*#__PURE__*/ jsxRuntime.jsx(UnstablePreviewHeader, {}),
                                /*#__PURE__*/ jsxRuntime.jsx(UnstablePreviewContent, {})
                            ]
                        }) : /*#__PURE__*/ jsxRuntime.jsxs(jsxRuntime.Fragment, {
                            children: [
                                /*#__PURE__*/ jsxRuntime.jsx(PreviewHeader, {}),
                                /*#__PURE__*/ jsxRuntime.jsx(PreviewContent, {})
                            ]
                        })
                    })
                })
            })
        ]
    });
};
/* -------------------------------------------------------------------------------------------------
 * ProtectedPreviewPage
 * -----------------------------------------------------------------------------------------------*/ const ProtectedPreviewPageImpl = ()=>{
    const { slug: model } = reactRouterDom.useParams();
    const { permissions = [], isLoading, error } = strapiAdmin.useRBAC([
        {
            action: 'plugin::content-manager.explorer.read',
            subject: model
        },
        {
            action: 'plugin::content-manager.explorer.update',
            subject: model
        }
    ]);
    if (isLoading) {
        return /*#__PURE__*/ jsxRuntime.jsx(strapiAdmin.Page.Loading, {});
    }
    if (error || !model) {
        return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
            height: "100vh",
            width: "100vw",
            position: "fixed",
            top: 0,
            left: 0,
            zIndex: 2,
            background: "neutral0",
            children: /*#__PURE__*/ jsxRuntime.jsx(strapiAdmin.Page.Error, {})
        });
    }
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
        height: "100vh",
        width: "100vw",
        position: "fixed",
        top: 0,
        left: 0,
        zIndex: 2,
        background: "neutral0",
        children: /*#__PURE__*/ jsxRuntime.jsx(strapiAdmin.Page.Protect, {
            permissions: permissions.filter((permission)=>permission.action.includes('explorer.read')),
            children: /*#__PURE__*/ jsxRuntime.jsx(index.DocumentRBAC, {
                permissions: permissions,
                children: /*#__PURE__*/ jsxRuntime.jsx(PreviewPage, {})
            })
        })
    });
};
const ProtectedPreviewPage = ()=>{
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Portal, {
        children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.FocusTrap, {
            children: /*#__PURE__*/ jsxRuntime.jsx(ProtectedPreviewPageImpl, {})
        })
    });
};

exports.ProtectedPreviewPage = ProtectedPreviewPage;
exports.usePreviewContext = usePreviewContext;
//# sourceMappingURL=Preview-CXtc9yEV.js.map

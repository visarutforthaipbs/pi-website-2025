{"version":3,"file":"Preview-BEq0FXda.mjs","sources":["../../../admin/src/preview/components/PreviewContent.tsx","../../../admin/src/preview/components/PreviewHeader.tsx","../../../admin/src/preview/pages/Preview.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Box, Flex } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { FormLayout } from '../../pages/EditView/components/FormLayout';\nimport { usePreviewContext } from '../pages/Preview';\n\nconst UnstablePreviewContent = () => {\n  const previewUrl = usePreviewContext('PreviewContent', (state) => state.url);\n  const layout = usePreviewContext('PreviewContent', (state) => state.layout);\n\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex flex={1} overflow=\"auto\" alignItems=\"stretch\">\n      <Box overflow=\"auto\" flex={1} borderWidth=\"0 1px 0 0\" borderColor=\"neutral150\" padding={6}>\n        <FormLayout layout={layout.layout} hasBackground />\n      </Box>\n      <Box\n        src={previewUrl}\n        /**\n         * For some reason, changing an iframe's src tag causes the browser to add a new item in the\n         * history stack. This is an issue for us as it means clicking the back button will not let us\n         * go back to the edit view. To fix it, we need to trick the browser into thinking this is a\n         * different iframe when the preview URL changes. So we set a key prop to force React\n         * to mount a different node when the src changes.\n         */\n        key={previewUrl}\n        title={formatMessage({\n          id: 'content-manager.preview.panel.title',\n          defaultMessage: 'Preview',\n        })}\n        flex={1}\n        height=\"100%\"\n        borderWidth={0}\n        tag=\"iframe\"\n      />\n    </Flex>\n  );\n};\n\nconst PreviewContent = () => {\n  const previewUrl = usePreviewContext('PreviewContent', (state) => state.url);\n\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box\n      src={previewUrl}\n      /**\n       * For some reason, changing an iframe's src tag causes the browser to add a new item in the\n       * history stack. This is an issue for us as it means clicking the back button will not let us\n       * go back to the edit view. To fix it, we need to trick the browser into thinking this is a\n       * different iframe when the preview URL changes. So we set a key prop to force React\n       * to mount a different node when the src changes.\n       */\n      key={previewUrl}\n      title={formatMessage({\n        id: 'content-manager.preview.panel.title',\n        defaultMessage: 'Preview',\n      })}\n      width=\"100%\"\n      height=\"100%\"\n      borderWidth={0}\n      tag=\"iframe\"\n    />\n  );\n};\n\nexport { PreviewContent, UnstablePreviewContent };\n","import * as React from 'react';\n\nimport {\n  useClipboard,\n  useHistory,\n  useNotification,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport { IconButton, Tabs, Typography, Grid, Flex } from '@strapi/design-system';\nimport { Cross, Link as LinkIcon } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { Link, type To } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { DocumentStatus } from '../../pages/EditView/components/DocumentStatus';\nimport { getDocumentStatus } from '../../pages/EditView/EditViewPage';\nimport { usePreviewContext } from '../pages/Preview';\n\n/* -------------------------------------------------------------------------------------------------\n * ClosePreviewButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst ClosePreviewButton = () => {\n  const [{ query }] = useQueryParams<{\n    plugins?: Record<string, unknown>;\n  }>();\n  const { formatMessage } = useIntl();\n\n  const canGoBack = useHistory('BackButton', (state) => state.canGoBack);\n  const goBack = useHistory('BackButton', (state) => state.goBack);\n  const history = useHistory('BackButton', (state) => state.history);\n  const locationIndex = useHistory('BackButton', (state) => state.currentLocationIndex);\n\n  /**\n   * Get the link destination from the history.\n   * Rely on a fallback (the parent edit view page) if there's no page to go back .\n   */\n  const historyTo = canGoBack ? history.at(locationIndex - 2) : undefined;\n  const fallback = {\n    pathname: '..',\n    search: stringify(query, { encode: false }),\n  } satisfies To;\n  const toWithFallback = historyTo ?? fallback;\n\n  const handleClick = (e: React.MouseEvent) => {\n    if (canGoBack) {\n      // Prevent normal link behavior, go back in the history stack instead\n      e.preventDefault();\n      goBack();\n      return;\n    }\n\n    // Otherwise rely on native link behavior to go back to the edit view. We don't use navigate()\n    // here in order to get the relative=\"path\" functionality from the Link component.\n  };\n\n  return (\n    <IconButton\n      variant=\"ghost\"\n      tag={Link}\n      relative=\"path\"\n      to={toWithFallback}\n      onClick={handleClick}\n      label={formatMessage({\n        id: 'content-manager.preview.header.close',\n        defaultMessage: 'Close preview',\n      })}\n    >\n      <Cross />\n    </IconButton>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Status\n * -----------------------------------------------------------------------------------------------*/\n\nconst Status = () => {\n  // Get status\n  const document = usePreviewContext('PreviewHeader', (state) => state.document);\n  const schema = usePreviewContext('PreviewHeader', (state) => state.schema);\n  const meta = usePreviewContext('PreviewHeader', (state) => state.meta);\n  const hasDraftAndPublished = schema?.options?.draftAndPublish ?? false;\n\n  if (!hasDraftAndPublished) {\n    return null;\n  }\n\n  const status = getDocumentStatus(document, meta);\n\n  return <DocumentStatus status={status} size=\"XS\" />;\n};\n\nconst PreviewTabs = () => {\n  const { formatMessage } = useIntl();\n\n  // URL query params\n  const [{ query }, setQuery] = useQueryParams<{ status: 'draft' | 'published' }>();\n\n  // Get status\n  const document = usePreviewContext('PreviewHeader', (state) => state.document);\n  const schema = usePreviewContext('PreviewHeader', (state) => state.schema);\n  const meta = usePreviewContext('PreviewHeader', (state) => state.meta);\n  const hasDraftAndPublish = schema?.options?.draftAndPublish ?? false;\n  const documentStatus = getDocumentStatus(document, meta);\n\n  const handleTabChange = (status: string) => {\n    if (status === 'published' || status === 'draft') {\n      setQuery({ status }, 'push', true);\n    }\n  };\n\n  if (!hasDraftAndPublish) {\n    return null;\n  }\n\n  return (\n    <>\n      <Tabs.Root variant=\"simple\" value={query.status || 'draft'} onValueChange={handleTabChange}>\n        <Tabs.List\n          aria-label={formatMessage({\n            id: 'preview.tabs.label',\n            defaultMessage: 'Document status',\n          })}\n        >\n          <StatusTab value=\"draft\">\n            {formatMessage({\n              id: 'content-manager.containers.List.draft',\n              defaultMessage: 'draft',\n            })}\n          </StatusTab>\n          <StatusTab value=\"published\" disabled={documentStatus === 'draft'}>\n            {formatMessage({\n              id: 'content-manager.containers.List.published',\n              defaultMessage: 'published',\n            })}\n          </StatusTab>\n        </Tabs.List>\n      </Tabs.Root>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PreviewHeader\n * -----------------------------------------------------------------------------------------------*/\n\nconst UnstablePreviewHeader = () => {\n  // Get the document title\n  const title = usePreviewContext('PreviewHeader', (state) => state.title);\n\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { copy } = useClipboard();\n\n  const handleCopyLink = () => {\n    copy(window.location.href);\n    toggleNotification({\n      message: formatMessage({\n        id: 'content-manager.preview.copy.success',\n        defaultMessage: 'Copied preview link',\n      }),\n      type: 'success',\n    });\n  };\n\n  return (\n    <Flex gap={4} background=\"neutral0\" borderColor=\"neutral150\" tag=\"header\">\n      {/* Title and status */}\n      <TitleContainer height=\"100%\" paddingLeft={2} paddingRight={4}>\n        <ClosePreviewButton />\n        <PreviewTitle\n          tag=\"h1\"\n          title={title}\n          maxWidth=\"200px\"\n          fontSize={2}\n          paddingLeft={2}\n          paddingRight={3}\n          fontWeight={600}\n        >\n          {title}\n        </PreviewTitle>\n        <Status />\n      </TitleContainer>\n\n      {/* Tabs and actions */}\n      <Flex flex={1} paddingRight={2} justifyContent=\"space-between\">\n        <PreviewTabs />\n        <IconButton\n          type=\"button\"\n          label={formatMessage({\n            id: 'preview.copy.label',\n            defaultMessage: 'Copy preview link',\n          })}\n          onClick={handleCopyLink}\n        >\n          <LinkIcon />\n        </IconButton>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst PreviewHeader = () => {\n  // Get the document title\n  const title = usePreviewContext('PreviewHeader', (state) => state.title);\n\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { copy } = useClipboard();\n\n  const handleCopyLink = () => {\n    copy(window.location.href);\n    toggleNotification({\n      message: formatMessage({\n        id: 'content-manager.preview.copy.success',\n        defaultMessage: 'Copied preview link',\n      }),\n      type: 'success',\n    });\n  };\n\n  return (\n    <Grid.Root\n      gap={3}\n      gridCols={3}\n      paddingLeft={2}\n      paddingRight={2}\n      background=\"neutral0\"\n      borderColor=\"neutral150\"\n      tag=\"header\"\n    >\n      {/* Title and status */}\n      <Grid.Item xs={1} paddingTop={2} paddingBottom={2} gap={3}>\n        <ClosePreviewButton />\n        <PreviewTitle tag=\"h1\" fontWeight={600} fontSize={2} maxWidth=\"200px\" title={title}>\n          {title}\n        </PreviewTitle>\n        <Status />\n      </Grid.Item>\n      {/* Tabs */}\n      <Grid.Item xs={1} marginBottom=\"-1px\" alignItems=\"end\" margin=\"auto\">\n        <PreviewTabs />\n      </Grid.Item>\n      {/* Copy link */}\n      <Grid.Item xs={1} justifyContent=\"end\" paddingTop={2} paddingBottom={2}>\n        <IconButton\n          type=\"button\"\n          label={formatMessage({\n            id: 'preview.copy.label',\n            defaultMessage: 'Copy preview link',\n          })}\n          onClick={handleCopyLink}\n        >\n          <LinkIcon />\n        </IconButton>\n      </Grid.Item>\n    </Grid.Root>\n  );\n};\n\nconst PreviewTitle = styled(Typography)`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst StatusTab = styled(Tabs.Trigger)`\n  text-transform: uppercase;\n`;\n\nconst TitleContainer = styled(Flex)`\n  border-right: 1px solid ${({ theme }) => theme.colors.neutral150};\n`;\n\nexport { PreviewHeader, UnstablePreviewHeader };\n","import * as React from 'react';\n\nimport {\n  Page,\n  useQueryParams,\n  useRBAC,\n  createContext,\n  Form as FormContext,\n} from '@strapi/admin/strapi-admin';\nimport { Box, Flex, FocusTrap, Portal } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\n\nimport { GetPreviewUrl } from '../../../../shared/contracts/preview';\nimport { COLLECTION_TYPES } from '../../constants/collections';\nimport { DocumentRBAC } from '../../features/DocumentRBAC';\nimport { type UseDocument, useDocument } from '../../hooks/useDocument';\nimport { type EditLayout, useDocumentLayout } from '../../hooks/useDocumentLayout';\nimport { buildValidParams } from '../../utils/api';\nimport { PreviewContent, UnstablePreviewContent } from '../components/PreviewContent';\nimport { PreviewHeader, UnstablePreviewHeader } from '../components/PreviewHeader';\nimport { useGetPreviewUrlQuery } from '../services/preview';\n\nimport type { UID } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * PreviewProvider\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PreviewContextValue {\n  url: string;\n  title: string;\n  document: NonNullable<ReturnType<UseDocument>['document']>;\n  meta: NonNullable<ReturnType<UseDocument>['meta']>;\n  schema: NonNullable<ReturnType<UseDocument>['schema']>;\n  layout: EditLayout;\n}\n\nconst [PreviewProvider, usePreviewContext] = createContext<PreviewContextValue>('PreviewPage');\n\n/* -------------------------------------------------------------------------------------------------\n * PreviewPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst PreviewPage = () => {\n  const { formatMessage } = useIntl();\n\n  // Read all the necessary data from the URL to find the right preview URL\n  const {\n    slug: model,\n    id: documentId,\n    collectionType,\n  } = useParams<{\n    slug: UID.ContentType;\n    id: string;\n    collectionType: string;\n  }>();\n  const [{ query }] = useQueryParams<{\n    plugins?: Record<string, unknown>;\n  }>();\n\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  if (!collectionType) {\n    throw new Error('Could not find collectionType in url params');\n  }\n\n  if (!model) {\n    throw new Error('Could not find model in url params');\n  }\n\n  // Only collection types must have a documentId\n  if (collectionType === COLLECTION_TYPES && !documentId) {\n    throw new Error('Could not find documentId in url params');\n  }\n\n  const previewUrlResponse = useGetPreviewUrlQuery({\n    params: {\n      contentType: model,\n    },\n    query: {\n      documentId,\n      locale: params.locale,\n      status: params.status as GetPreviewUrl.Request['query']['status'],\n    },\n  });\n\n  const documentResponse = useDocument({\n    model,\n    collectionType,\n    documentId,\n    params,\n  });\n\n  const documentLayoutResponse = useDocumentLayout(model);\n\n  if (\n    documentResponse.isLoading ||\n    previewUrlResponse.isLoading ||\n    documentLayoutResponse.isLoading\n  ) {\n    return <Page.Loading />;\n  }\n\n  if (\n    previewUrlResponse.error ||\n    documentLayoutResponse.error ||\n    !documentResponse.document ||\n    !documentResponse.meta ||\n    !documentResponse.schema\n  ) {\n    return <Page.Error />;\n  }\n\n  if (!previewUrlResponse.data?.data?.url) {\n    return <Page.NoData />;\n  }\n\n  const documentTitle = documentResponse.getTitle(documentLayoutResponse.edit.settings.mainField);\n\n  return (\n    <>\n      <Page.Title>\n        {formatMessage(\n          {\n            id: 'content-manager.preview.page-title',\n            defaultMessage: '{contentType} preview',\n          },\n          {\n            contentType: documentTitle,\n          }\n        )}\n      </Page.Title>\n      <PreviewProvider\n        url={previewUrlResponse.data.data.url}\n        document={documentResponse.document}\n        title={documentTitle}\n        meta={documentResponse.meta}\n        schema={documentResponse.schema}\n        layout={documentLayoutResponse.edit}\n      >\n        <FormContext method=\"POST\" initialValues={documentResponse.document} height=\"100%\">\n          <Flex direction=\"column\" height=\"100%\" alignItems=\"stretch\">\n            {window.strapi.future.isEnabled('unstablePreviewSideEditor') ? (\n              <>\n                <UnstablePreviewHeader />\n                <UnstablePreviewContent />\n              </>\n            ) : (\n              <>\n                <PreviewHeader />\n                <PreviewContent />\n              </>\n            )}\n          </Flex>\n        </FormContext>\n      </PreviewProvider>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedPreviewPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedPreviewPageImpl = () => {\n  const { slug: model } = useParams<{\n    slug: string;\n  }>();\n  const {\n    permissions = [],\n    isLoading,\n    error,\n  } = useRBAC([\n    { action: 'plugin::content-manager.explorer.read', subject: model },\n    { action: 'plugin::content-manager.explorer.update', subject: model },\n  ]);\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  if (error || !model) {\n    return (\n      <Box\n        height=\"100vh\"\n        width=\"100vw\"\n        position=\"fixed\"\n        top={0}\n        left={0}\n        zIndex={2}\n        background=\"neutral0\"\n      >\n        <Page.Error />\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      height=\"100vh\"\n      width=\"100vw\"\n      position=\"fixed\"\n      top={0}\n      left={0}\n      zIndex={2}\n      background=\"neutral0\"\n    >\n      <Page.Protect\n        permissions={permissions.filter((permission) =>\n          permission.action.includes('explorer.read')\n        )}\n      >\n        <DocumentRBAC permissions={permissions}>\n          <PreviewPage />\n        </DocumentRBAC>\n      </Page.Protect>\n    </Box>\n  );\n};\n\nconst ProtectedPreviewPage = () => {\n  return (\n    <Portal>\n      <FocusTrap>\n        <ProtectedPreviewPageImpl />\n      </FocusTrap>\n    </Portal>\n  );\n};\n\nexport { ProtectedPreviewPage, usePreviewContext };\n"],"names":["UnstablePreviewContent","previewUrl","usePreviewContext","state","url","layout","formatMessage","useIntl","_jsxs","Flex","flex","overflow","alignItems","_jsx","Box","borderWidth","borderColor","padding","FormLayout","hasBackground","src","title","id","defaultMessage","height","tag","PreviewContent","width","ClosePreviewButton","query","useQueryParams","canGoBack","useHistory","goBack","history","locationIndex","currentLocationIndex","historyTo","at","undefined","fallback","pathname","search","stringify","encode","toWithFallback","handleClick","e","preventDefault","IconButton","variant","Link","relative","to","onClick","label","Cross","Status","document","schema","meta","hasDraftAndPublished","options","draftAndPublish","status","getDocumentStatus","DocumentStatus","size","PreviewTabs","setQuery","hasDraftAndPublish","documentStatus","handleTabChange","_Fragment","Tabs","Root","value","onValueChange","List","aria-label","StatusTab","disabled","UnstablePreviewHeader","toggleNotification","useNotification","copy","useClipboard","handleCopyLink","window","location","href","message","type","gap","background","TitleContainer","paddingLeft","paddingRight","PreviewTitle","maxWidth","fontSize","fontWeight","justifyContent","LinkIcon","PreviewHeader","Grid","gridCols","Item","xs","paddingTop","paddingBottom","marginBottom","margin","styled","Typography","Trigger","theme","colors","neutral150","PreviewProvider","createContext","PreviewPage","slug","model","documentId","collectionType","useParams","params","React","useMemo","buildValidParams","Error","COLLECTION_TYPES","previewUrlResponse","useGetPreviewUrlQuery","contentType","locale","documentResponse","useDocument","documentLayoutResponse","useDocumentLayout","isLoading","Page","Loading","error","data","NoData","documentTitle","getTitle","edit","settings","mainField","Title","FormContext","method","initialValues","direction","strapi","future","isEnabled","ProtectedPreviewPageImpl","permissions","useRBAC","action","subject","position","top","left","zIndex","Protect","filter","permission","includes","DocumentRBAC","ProtectedPreviewPage","Portal","FocusTrap"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,MAAMA,sBAAyB,GAAA,IAAA;AAC7B,IAAA,MAAMC,aAAaC,iBAAkB,CAAA,gBAAA,EAAkB,CAACC,KAAAA,GAAUA,MAAMC,GAAG,CAAA;AAC3E,IAAA,MAAMC,SAASH,iBAAkB,CAAA,gBAAA,EAAkB,CAACC,KAAAA,GAAUA,MAAME,MAAM,CAAA;IAE1E,MAAM,EAAEC,aAAa,EAAE,GAAGC,OAAAA,EAAAA;AAE1B,IAAA,qBACEC,IAACC,CAAAA,IAAAA,EAAAA;QAAKC,IAAM,EAAA,CAAA;QAAGC,QAAS,EAAA,MAAA;QAAOC,UAAW,EAAA,SAAA;;0BACxCC,GAACC,CAAAA,GAAAA,EAAAA;gBAAIH,QAAS,EAAA,MAAA;gBAAOD,IAAM,EAAA,CAAA;gBAAGK,WAAY,EAAA,WAAA;gBAAYC,WAAY,EAAA,YAAA;gBAAaC,OAAS,EAAA,CAAA;AACtF,gBAAA,QAAA,gBAAAJ,GAACK,CAAAA,UAAAA,EAAAA;AAAWb,oBAAAA,MAAAA,EAAQA,OAAOA,MAAM;oBAAEc,aAAa,EAAA;;;0BAElDN,GAACC,CAAAA,GAAAA,EAAAA;gBACCM,GAAKnB,EAAAA,UAAAA;AASLoB,gBAAAA,KAAAA,EAAOf,aAAc,CAAA;oBACnBgB,EAAI,EAAA,qCAAA;oBACJC,cAAgB,EAAA;AAClB,iBAAA,CAAA;gBACAb,IAAM,EAAA,CAAA;gBACNc,MAAO,EAAA,MAAA;gBACPT,WAAa,EAAA,CAAA;gBACbU,GAAI,EAAA;AARCxB,aAAAA,EAAAA,UAAAA;;;AAYb,CAAA;AAEA,MAAMyB,cAAiB,GAAA,IAAA;AACrB,IAAA,MAAMzB,aAAaC,iBAAkB,CAAA,gBAAA,EAAkB,CAACC,KAAAA,GAAUA,MAAMC,GAAG,CAAA;IAE3E,MAAM,EAAEE,aAAa,EAAE,GAAGC,OAAAA,EAAAA;AAE1B,IAAA,qBACEM,GAACC,CAAAA,GAAAA,EAAAA;QACCM,GAAKnB,EAAAA,UAAAA;AASLoB,QAAAA,KAAAA,EAAOf,aAAc,CAAA;YACnBgB,EAAI,EAAA,qCAAA;YACJC,cAAgB,EAAA;AAClB,SAAA,CAAA;QACAI,KAAM,EAAA,MAAA;QACNH,MAAO,EAAA,MAAA;QACPT,WAAa,EAAA,CAAA;QACbU,GAAI,EAAA;AARCxB,KAAAA,EAAAA,UAAAA,CAAAA;AAWX,CAAA;;ACjDA;;AAEkG,qGAElG,MAAM2B,kBAAqB,GAAA,IAAA;AACzB,IAAA,MAAM,CAAC,EAAEC,KAAK,EAAE,CAAC,GAAGC,cAAAA,EAAAA;IAGpB,MAAM,EAAExB,aAAa,EAAE,GAAGC,OAAAA,EAAAA;AAE1B,IAAA,MAAMwB,YAAYC,UAAW,CAAA,YAAA,EAAc,CAAC7B,KAAAA,GAAUA,MAAM4B,SAAS,CAAA;AACrE,IAAA,MAAME,SAASD,UAAW,CAAA,YAAA,EAAc,CAAC7B,KAAAA,GAAUA,MAAM8B,MAAM,CAAA;AAC/D,IAAA,MAAMC,UAAUF,UAAW,CAAA,YAAA,EAAc,CAAC7B,KAAAA,GAAUA,MAAM+B,OAAO,CAAA;AACjE,IAAA,MAAMC,gBAAgBH,UAAW,CAAA,YAAA,EAAc,CAAC7B,KAAAA,GAAUA,MAAMiC,oBAAoB,CAAA;AAEpF;;;AAGC,MACD,MAAMC,SAAYN,GAAAA,SAAAA,GAAYG,QAAQI,EAAE,CAACH,gBAAgB,CAAKI,CAAAA,GAAAA,SAAAA;AAC9D,IAAA,MAAMC,QAAW,GAAA;QACfC,QAAU,EAAA,IAAA;AACVC,QAAAA,MAAAA,EAAQC,UAAUd,KAAO,EAAA;YAAEe,MAAQ,EAAA;AAAM,SAAA;AAC3C,KAAA;AACA,IAAA,MAAMC,iBAAiBR,SAAaG,IAAAA,QAAAA;AAEpC,IAAA,MAAMM,cAAc,CAACC,CAAAA,GAAAA;AACnB,QAAA,IAAIhB,SAAW,EAAA;;AAEbgB,YAAAA,CAAAA,CAAEC,cAAc,EAAA;AAChBf,YAAAA,MAAAA,EAAAA;AACA,YAAA;AACF;;;AAIF,KAAA;AAEA,IAAA,qBACEpB,GAACoC,CAAAA,UAAAA,EAAAA;QACCC,OAAQ,EAAA,OAAA;QACRzB,GAAK0B,EAAAA,MAAAA;QACLC,QAAS,EAAA,MAAA;QACTC,EAAIR,EAAAA,cAAAA;QACJS,OAASR,EAAAA,WAAAA;AACTS,QAAAA,KAAAA,EAAOjD,aAAc,CAAA;YACnBgB,EAAI,EAAA,sCAAA;YACJC,cAAgB,EAAA;AAClB,SAAA,CAAA;AAEA,QAAA,QAAA,gBAAAV,GAAC2C,CAAAA,KAAAA,EAAAA,EAAAA;;AAGP,CAAA;AAEA;;AAEkG,qGAElG,MAAMC,MAAS,GAAA,IAAA;;AAEb,IAAA,MAAMC,WAAWxD,iBAAkB,CAAA,eAAA,EAAiB,CAACC,KAAAA,GAAUA,MAAMuD,QAAQ,CAAA;AAC7E,IAAA,MAAMC,SAASzD,iBAAkB,CAAA,eAAA,EAAiB,CAACC,KAAAA,GAAUA,MAAMwD,MAAM,CAAA;AACzE,IAAA,MAAMC,OAAO1D,iBAAkB,CAAA,eAAA,EAAiB,CAACC,KAAAA,GAAUA,MAAMyD,IAAI,CAAA;IACrE,MAAMC,oBAAAA,GAAuBF,MAAQG,EAAAA,OAAAA,EAASC,eAAmB,IAAA,KAAA;AAEjE,IAAA,IAAI,CAACF,oBAAsB,EAAA;QACzB,OAAO,IAAA;AACT;IAEA,MAAMG,MAAAA,GAASC,kBAAkBP,QAAUE,EAAAA,IAAAA,CAAAA;AAE3C,IAAA,qBAAO/C,GAACqD,CAAAA,cAAAA,EAAAA;QAAeF,MAAQA,EAAAA,MAAAA;QAAQG,IAAK,EAAA;;AAC9C,CAAA;AAEA,MAAMC,WAAc,GAAA,IAAA;IAClB,MAAM,EAAE9D,aAAa,EAAE,GAAGC,OAAAA,EAAAA;;AAG1B,IAAA,MAAM,CAAC,EAAEsB,KAAK,EAAE,EAAEwC,SAAS,GAAGvC,cAAAA,EAAAA;;AAG9B,IAAA,MAAM4B,WAAWxD,iBAAkB,CAAA,eAAA,EAAiB,CAACC,KAAAA,GAAUA,MAAMuD,QAAQ,CAAA;AAC7E,IAAA,MAAMC,SAASzD,iBAAkB,CAAA,eAAA,EAAiB,CAACC,KAAAA,GAAUA,MAAMwD,MAAM,CAAA;AACzE,IAAA,MAAMC,OAAO1D,iBAAkB,CAAA,eAAA,EAAiB,CAACC,KAAAA,GAAUA,MAAMyD,IAAI,CAAA;IACrE,MAAMU,kBAAAA,GAAqBX,MAAQG,EAAAA,OAAAA,EAASC,eAAmB,IAAA,KAAA;IAC/D,MAAMQ,cAAAA,GAAiBN,kBAAkBP,QAAUE,EAAAA,IAAAA,CAAAA;AAEnD,IAAA,MAAMY,kBAAkB,CAACR,MAAAA,GAAAA;QACvB,IAAIA,MAAAA,KAAW,WAAeA,IAAAA,MAAAA,KAAW,OAAS,EAAA;YAChDK,QAAS,CAAA;AAAEL,gBAAAA;AAAO,aAAA,EAAG,MAAQ,EAAA,IAAA,CAAA;AAC/B;AACF,KAAA;AAEA,IAAA,IAAI,CAACM,kBAAoB,EAAA;QACvB,OAAO,IAAA;AACT;IAEA,qBACEzD,GAAA,CAAA4D,QAAA,EAAA;gCACE5D,GAAA,CAAC6D,KAAKC,IAAI,EAAA;YAACzB,OAAQ,EAAA,QAAA;YAAS0B,KAAO/C,EAAAA,KAAAA,CAAMmC,MAAM,IAAI,OAAA;YAASa,aAAeL,EAAAA,eAAAA;oCACzEhE,IAAA,CAACkE,KAAKI,IAAI,EAAA;AACRC,gBAAAA,YAAAA,EAAYzE,aAAc,CAAA;oBACxBgB,EAAI,EAAA,oBAAA;oBACJC,cAAgB,EAAA;AAClB,iBAAA,CAAA;;kCAEAV,GAACmE,CAAAA,SAAAA,EAAAA;wBAAUJ,KAAM,EAAA,OAAA;kCACdtE,aAAc,CAAA;4BACbgB,EAAI,EAAA,uCAAA;4BACJC,cAAgB,EAAA;AAClB,yBAAA;;kCAEFV,GAACmE,CAAAA,SAAAA,EAAAA;wBAAUJ,KAAM,EAAA,WAAA;AAAYK,wBAAAA,QAAAA,EAAUV,cAAmB,KAAA,OAAA;kCACvDjE,aAAc,CAAA;4BACbgB,EAAI,EAAA,2CAAA;4BACJC,cAAgB,EAAA;AAClB,yBAAA;;;;;;AAMZ,CAAA;AAEA;;AAEkG,qGAElG,MAAM2D,qBAAwB,GAAA,IAAA;;AAE5B,IAAA,MAAM7D,QAAQnB,iBAAkB,CAAA,eAAA,EAAiB,CAACC,KAAAA,GAAUA,MAAMkB,KAAK,CAAA;IAEvE,MAAM,EAAEf,aAAa,EAAE,GAAGC,OAAAA,EAAAA;IAC1B,MAAM,EAAE4E,kBAAkB,EAAE,GAAGC,eAAAA,EAAAA;IAC/B,MAAM,EAAEC,IAAI,EAAE,GAAGC,YAAAA,EAAAA;AAEjB,IAAA,MAAMC,cAAiB,GAAA,IAAA;QACrBF,IAAKG,CAAAA,MAAAA,CAAOC,QAAQ,CAACC,IAAI,CAAA;QACzBP,kBAAmB,CAAA;AACjBQ,YAAAA,OAAAA,EAASrF,aAAc,CAAA;gBACrBgB,EAAI,EAAA,sCAAA;gBACJC,cAAgB,EAAA;AAClB,aAAA,CAAA;YACAqE,IAAM,EAAA;AACR,SAAA,CAAA;AACF,KAAA;AAEA,IAAA,qBACEpF,IAACC,CAAAA,IAAAA,EAAAA;QAAKoF,GAAK,EAAA,CAAA;QAAGC,UAAW,EAAA,UAAA;QAAW9E,WAAY,EAAA,YAAA;QAAaS,GAAI,EAAA,QAAA;;0BAE/DjB,IAACuF,CAAAA,cAAAA,EAAAA;gBAAevE,MAAO,EAAA,MAAA;gBAAOwE,WAAa,EAAA,CAAA;gBAAGC,YAAc,EAAA,CAAA;;kCAC1DpF,GAACe,CAAAA,kBAAAA,EAAAA,EAAAA,CAAAA;kCACDf,GAACqF,CAAAA,YAAAA,EAAAA;wBACCzE,GAAI,EAAA,IAAA;wBACJJ,KAAOA,EAAAA,KAAAA;wBACP8E,QAAS,EAAA,OAAA;wBACTC,QAAU,EAAA,CAAA;wBACVJ,WAAa,EAAA,CAAA;wBACbC,YAAc,EAAA,CAAA;wBACdI,UAAY,EAAA,GAAA;AAEXhF,wBAAAA,QAAAA,EAAAA;;kCAEHR,GAAC4C,CAAAA,MAAAA,EAAAA,EAAAA;;;0BAIHjD,IAACC,CAAAA,IAAAA,EAAAA;gBAAKC,IAAM,EAAA,CAAA;gBAAGuF,YAAc,EAAA,CAAA;gBAAGK,cAAe,EAAA,eAAA;;kCAC7CzF,GAACuD,CAAAA,WAAAA,EAAAA,EAAAA,CAAAA;kCACDvD,GAACoC,CAAAA,UAAAA,EAAAA;wBACC2C,IAAK,EAAA,QAAA;AACLrC,wBAAAA,KAAAA,EAAOjD,aAAc,CAAA;4BACnBgB,EAAI,EAAA,oBAAA;4BACJC,cAAgB,EAAA;AAClB,yBAAA,CAAA;wBACA+B,OAASiC,EAAAA,cAAAA;AAET,wBAAA,QAAA,gBAAA1E,GAAC0F,CAAAA,IAAAA,EAAAA,EAAAA;;;;;;AAKX,CAAA;AAEA,MAAMC,aAAgB,GAAA,IAAA;;AAEpB,IAAA,MAAMnF,QAAQnB,iBAAkB,CAAA,eAAA,EAAiB,CAACC,KAAAA,GAAUA,MAAMkB,KAAK,CAAA;IAEvE,MAAM,EAAEf,aAAa,EAAE,GAAGC,OAAAA,EAAAA;IAC1B,MAAM,EAAE4E,kBAAkB,EAAE,GAAGC,eAAAA,EAAAA;IAC/B,MAAM,EAAEC,IAAI,EAAE,GAAGC,YAAAA,EAAAA;AAEjB,IAAA,MAAMC,cAAiB,GAAA,IAAA;QACrBF,IAAKG,CAAAA,MAAAA,CAAOC,QAAQ,CAACC,IAAI,CAAA;QACzBP,kBAAmB,CAAA;AACjBQ,YAAAA,OAAAA,EAASrF,aAAc,CAAA;gBACrBgB,EAAI,EAAA,sCAAA;gBACJC,cAAgB,EAAA;AAClB,aAAA,CAAA;YACAqE,IAAM,EAAA;AACR,SAAA,CAAA;AACF,KAAA;IAEA,qBACEpF,IAAA,CAACiG,KAAK9B,IAAI,EAAA;QACRkB,GAAK,EAAA,CAAA;QACLa,QAAU,EAAA,CAAA;QACVV,WAAa,EAAA,CAAA;QACbC,YAAc,EAAA,CAAA;QACdH,UAAW,EAAA,UAAA;QACX9E,WAAY,EAAA,YAAA;QACZS,GAAI,EAAA,QAAA;;AAGJ,0BAAAjB,IAAA,CAACiG,KAAKE,IAAI,EAAA;gBAACC,EAAI,EAAA,CAAA;gBAAGC,UAAY,EAAA,CAAA;gBAAGC,aAAe,EAAA,CAAA;gBAAGjB,GAAK,EAAA,CAAA;;kCACtDhF,GAACe,CAAAA,kBAAAA,EAAAA,EAAAA,CAAAA;kCACDf,GAACqF,CAAAA,YAAAA,EAAAA;wBAAazE,GAAI,EAAA,IAAA;wBAAK4E,UAAY,EAAA,GAAA;wBAAKD,QAAU,EAAA,CAAA;wBAAGD,QAAS,EAAA,OAAA;wBAAQ9E,KAAOA,EAAAA,KAAAA;AAC1EA,wBAAAA,QAAAA,EAAAA;;kCAEHR,GAAC4C,CAAAA,MAAAA,EAAAA,EAAAA;;;AAGH,0BAAA5C,GAAA,CAAC4F,KAAKE,IAAI,EAAA;gBAACC,EAAI,EAAA,CAAA;gBAAGG,YAAa,EAAA,MAAA;gBAAOnG,UAAW,EAAA,KAAA;gBAAMoG,MAAO,EAAA,MAAA;AAC5D,gBAAA,QAAA,gBAAAnG,GAACuD,CAAAA,WAAAA,EAAAA,EAAAA;;AAGH,0BAAAvD,GAAA,CAAC4F,KAAKE,IAAI,EAAA;gBAACC,EAAI,EAAA,CAAA;gBAAGN,cAAe,EAAA,KAAA;gBAAMO,UAAY,EAAA,CAAA;gBAAGC,aAAe,EAAA,CAAA;AACnE,gBAAA,QAAA,gBAAAjG,GAACoC,CAAAA,UAAAA,EAAAA;oBACC2C,IAAK,EAAA,QAAA;AACLrC,oBAAAA,KAAAA,EAAOjD,aAAc,CAAA;wBACnBgB,EAAI,EAAA,oBAAA;wBACJC,cAAgB,EAAA;AAClB,qBAAA,CAAA;oBACA+B,OAASiC,EAAAA,cAAAA;AAET,oBAAA,QAAA,gBAAA1E,GAAC0F,CAAAA,IAAAA,EAAAA,EAAAA;;;;;AAKX,CAAA;AAEA,MAAML,YAAAA,GAAee,MAAOC,CAAAA,UAAAA,CAAW;;;;AAIvC,CAAC;AAED,MAAMlC,SAAYiC,GAAAA,MAAAA,CAAOvC,IAAKyC,CAAAA,OAAO,CAAC;;AAEtC,CAAC;AAED,MAAMpB,cAAAA,GAAiBkB,MAAOxG,CAAAA,IAAAA,CAAK;0BACT,EAAE,CAAC,EAAE2G,KAAK,EAAE,GAAKA,KAAMC,CAAAA,MAAM,CAACC,UAAU,CAAC;AACnE,CAAC;;AC5OD,MAAM,CAACC,eAAAA,EAAiBrH,iBAAkB,CAAA,GAAGsH,aAAmC,CAAA,aAAA;AAEhF;;AAEkG,qGAElG,MAAMC,WAAc,GAAA,IAAA;IAClB,MAAM,EAAEnH,aAAa,EAAE,GAAGC,OAAAA,EAAAA;;IAG1B,MAAM,EACJmH,MAAMC,KAAK,EACXrG,IAAIsG,UAAU,EACdC,cAAc,EACf,GAAGC,SAAAA,EAAAA;AAKJ,IAAA,MAAM,CAAC,EAAEjG,KAAK,EAAE,CAAC,GAAGC,cAAAA,EAAAA;AAIpB,IAAA,MAAMiG,SAASC,KAAMC,CAAAA,OAAO,CAAC,IAAMC,iBAAiBrG,KAAQ,CAAA,EAAA;AAACA,QAAAA;AAAM,KAAA,CAAA;AAEnE,IAAA,IAAI,CAACgG,cAAgB,EAAA;AACnB,QAAA,MAAM,IAAIM,KAAM,CAAA,6CAAA,CAAA;AAClB;AAEA,IAAA,IAAI,CAACR,KAAO,EAAA;AACV,QAAA,MAAM,IAAIQ,KAAM,CAAA,oCAAA,CAAA;AAClB;;IAGA,IAAIN,cAAAA,KAAmBO,gBAAoB,IAAA,CAACR,UAAY,EAAA;AACtD,QAAA,MAAM,IAAIO,KAAM,CAAA,yCAAA,CAAA;AAClB;AAEA,IAAA,MAAME,qBAAqBC,qBAAsB,CAAA;QAC/CP,MAAQ,EAAA;YACNQ,WAAaZ,EAAAA;AACf,SAAA;QACA9F,KAAO,EAAA;AACL+F,YAAAA,UAAAA;AACAY,YAAAA,MAAAA,EAAQT,OAAOS,MAAM;AACrBxE,YAAAA,MAAAA,EAAQ+D,OAAO/D;AACjB;AACF,KAAA,CAAA;AAEA,IAAA,MAAMyE,mBAAmBC,WAAY,CAAA;AACnCf,QAAAA,KAAAA;AACAE,QAAAA,cAAAA;AACAD,QAAAA,UAAAA;AACAG,QAAAA;AACF,KAAA,CAAA;AAEA,IAAA,MAAMY,yBAAyBC,iBAAkBjB,CAAAA,KAAAA,CAAAA;IAEjD,IACEc,gBAAAA,CAAiBI,SAAS,IAC1BR,kBAAAA,CAAmBQ,SAAS,IAC5BF,sBAAAA,CAAuBE,SAAS,EAChC;QACA,qBAAOhI,GAAA,CAACiI,KAAKC,OAAO,EAAA,EAAA,CAAA;AACtB;AAEA,IAAA,IACEV,mBAAmBW,KAAK,IACxBL,sBAAuBK,CAAAA,KAAK,IAC5B,CAACP,gBAAAA,CAAiB/E,QAAQ,IAC1B,CAAC+E,gBAAiB7E,CAAAA,IAAI,IACtB,CAAC6E,gBAAAA,CAAiB9E,MAAM,EACxB;QACA,qBAAO9C,GAAA,CAACiI,KAAKX,KAAK,EAAA,EAAA,CAAA;AACpB;AAEA,IAAA,IAAI,CAACE,kBAAAA,CAAmBY,IAAI,EAAEA,MAAM7I,GAAK,EAAA;QACvC,qBAAOS,GAAA,CAACiI,KAAKI,MAAM,EAAA,EAAA,CAAA;AACrB;IAEA,MAAMC,aAAAA,GAAgBV,iBAAiBW,QAAQ,CAACT,uBAAuBU,IAAI,CAACC,QAAQ,CAACC,SAAS,CAAA;IAE9F,qBACE/I,IAAA,CAAAiE,QAAA,EAAA;;AACE,0BAAA5D,GAAA,CAACiI,KAAKU,KAAK,EAAA;0BACRlJ,aACC,CAAA;oBACEgB,EAAI,EAAA,oCAAA;oBACJC,cAAgB,EAAA;iBAElB,EAAA;oBACEgH,WAAaY,EAAAA;AACf,iBAAA;;0BAGJtI,GAAC0G,CAAAA,eAAAA,EAAAA;AACCnH,gBAAAA,GAAAA,EAAKiI,kBAAmBY,CAAAA,IAAI,CAACA,IAAI,CAAC7I,GAAG;AACrCsD,gBAAAA,QAAAA,EAAU+E,iBAAiB/E,QAAQ;gBACnCrC,KAAO8H,EAAAA,aAAAA;AACPvF,gBAAAA,IAAAA,EAAM6E,iBAAiB7E,IAAI;AAC3BD,gBAAAA,MAAAA,EAAQ8E,iBAAiB9E,MAAM;AAC/BtD,gBAAAA,MAAAA,EAAQsI,uBAAuBU,IAAI;AAEnC,gBAAA,QAAA,gBAAAxI,GAAC4I,CAAAA,IAAAA,EAAAA;oBAAYC,MAAO,EAAA,MAAA;AAAOC,oBAAAA,aAAAA,EAAelB,iBAAiB/E,QAAQ;oBAAElC,MAAO,EAAA,MAAA;AAC1E,oBAAA,QAAA,gBAAAX,GAACJ,CAAAA,IAAAA,EAAAA;wBAAKmJ,SAAU,EAAA,QAAA;wBAASpI,MAAO,EAAA,MAAA;wBAAOZ,UAAW,EAAA,SAAA;AAC/C4E,wBAAAA,QAAAA,EAAAA,MAAAA,CAAOqE,MAAM,CAACC,MAAM,CAACC,SAAS,CAAC,2BAC9B,CAAA,iBAAAvJ,IAAA,CAAAiE,QAAA,EAAA;;8CACE5D,GAACqE,CAAAA,qBAAAA,EAAAA,EAAAA,CAAAA;8CACDrE,GAACb,CAAAA,sBAAAA,EAAAA,EAAAA;;AAGH,yBAAA,CAAA,iBAAAQ,IAAA,CAAAiE,QAAA,EAAA;;8CACE5D,GAAC2F,CAAAA,aAAAA,EAAAA,EAAAA,CAAAA;8CACD3F,GAACa,CAAAA,cAAAA,EAAAA,EAAAA;;;;;;;;AAQjB,CAAA;AAEA;;AAEkG,qGAElG,MAAMsI,wBAA2B,GAAA,IAAA;AAC/B,IAAA,MAAM,EAAEtC,IAAAA,EAAMC,KAAK,EAAE,GAAGG,SAAAA,EAAAA;IAGxB,MAAM,EACJmC,cAAc,EAAE,EAChBpB,SAAS,EACTG,KAAK,EACN,GAAGkB,OAAQ,CAAA;AACV,QAAA;YAAEC,MAAQ,EAAA,uCAAA;YAAyCC,OAASzC,EAAAA;AAAM,SAAA;AAClE,QAAA;YAAEwC,MAAQ,EAAA,yCAAA;YAA2CC,OAASzC,EAAAA;AAAM;AACrE,KAAA,CAAA;AAED,IAAA,IAAIkB,SAAW,EAAA;QACb,qBAAOhI,GAAA,CAACiI,KAAKC,OAAO,EAAA,EAAA,CAAA;AACtB;IAEA,IAAIC,KAAAA,IAAS,CAACrB,KAAO,EAAA;AACnB,QAAA,qBACE9G,GAACC,CAAAA,GAAAA,EAAAA;YACCU,MAAO,EAAA,OAAA;YACPG,KAAM,EAAA,OAAA;YACN0I,QAAS,EAAA,OAAA;YACTC,GAAK,EAAA,CAAA;YACLC,IAAM,EAAA,CAAA;YACNC,MAAQ,EAAA,CAAA;YACR1E,UAAW,EAAA,UAAA;oCAEXjF,GAAA,CAACiI,KAAKX,KAAK,EAAA,EAAA;;AAGjB;AAEA,IAAA,qBACEtH,GAACC,CAAAA,GAAAA,EAAAA;QACCU,MAAO,EAAA,OAAA;QACPG,KAAM,EAAA,OAAA;QACN0I,QAAS,EAAA,OAAA;QACTC,GAAK,EAAA,CAAA;QACLC,IAAM,EAAA,CAAA;QACNC,MAAQ,EAAA,CAAA;QACR1E,UAAW,EAAA,UAAA;gCAEXjF,GAAA,CAACiI,KAAK2B,OAAO,EAAA;YACXR,WAAaA,EAAAA,WAAAA,CAAYS,MAAM,CAAC,CAACC,aAC/BA,UAAWR,CAAAA,MAAM,CAACS,QAAQ,CAAC,eAAA,CAAA,CAAA;AAG7B,YAAA,QAAA,gBAAA/J,GAACgK,CAAAA,YAAAA,EAAAA;gBAAaZ,WAAaA,EAAAA,WAAAA;AACzB,gBAAA,QAAA,gBAAApJ,GAAC4G,CAAAA,WAAAA,EAAAA,EAAAA;;;;AAKX,CAAA;AAEA,MAAMqD,oBAAuB,GAAA,IAAA;AAC3B,IAAA,qBACEjK,GAACkK,CAAAA,MAAAA,EAAAA;AACC,QAAA,QAAA,gBAAAlK,GAACmK,CAAAA,SAAAA,EAAAA;AACC,YAAA,QAAA,gBAAAnK,GAACmJ,CAAAA,wBAAAA,EAAAA,EAAAA;;;AAIT;;;;"}
var name$1 = "@strapi/plugin-users-permissions";
var strapi = {
    displayName: "Roles & Permissions",
    name: "users-permissions",
    description: "Protect your API with a full authentication process based on JWT. This plugin comes also with an ACL strategy that allows you to manage the permissions between the groups of users.",
    required: true,
    kind: "plugin"
};

const PERMISSIONS = {
    // Roles
    accessRoles: [
        {
            action: 'plugin::users-permissions.roles.create',
            subject: null
        },
        {
            action: 'plugin::users-permissions.roles.read',
            subject: null
        }
    ],
    createRole: [
        {
            action: 'plugin::users-permissions.roles.create',
            subject: null
        }
    ],
    deleteRole: [
        {
            action: 'plugin::users-permissions.roles.delete',
            subject: null
        }
    ],
    readRoles: [
        {
            action: 'plugin::users-permissions.roles.read',
            subject: null
        }
    ],
    updateRole: [
        {
            action: 'plugin::users-permissions.roles.update',
            subject: null
        }
    ],
    // AdvancedSettings
    readAdvancedSettings: [
        {
            action: 'plugin::users-permissions.advanced-settings.read',
            subject: null
        }
    ],
    updateAdvancedSettings: [
        {
            action: 'plugin::users-permissions.advanced-settings.update',
            subject: null
        }
    ],
    // Emails
    readEmailTemplates: [
        {
            action: 'plugin::users-permissions.email-templates.read',
            subject: null
        }
    ],
    updateEmailTemplates: [
        {
            action: 'plugin::users-permissions.email-templates.update',
            subject: null
        }
    ],
    // Providers
    readProviders: [
        {
            action: 'plugin::users-permissions.providers.read',
            subject: null
        }
    ],
    updateProviders: [
        {
            action: 'plugin::users-permissions.providers.update',
            subject: null
        }
    ]
};

const pluginId = name$1.replace(/^@strapi\/plugin-/i, '');

const getTrad = (id)=>`${pluginId}.${id}`;

const prefixPluginTranslations = (trad, pluginId)=>{
    return Object.keys(trad).reduce((acc, current)=>{
        acc[`${pluginId}.${current}`] = trad[current];
        return acc;
    }, {});
};

function __variableDynamicImportRuntime4__(path) {
  switch (path) {
    case './translations/ar.json': return import('./ar-G6bUGuUb.mjs');
    case './translations/cs.json': return import('./cs-Bu59JqhG.mjs');
    case './translations/de.json': return import('./de-B81A69_5.mjs');
    case './translations/dk.json': return import('./dk-BaelzvBE.mjs');
    case './translations/en.json': return import('./en-BhgCBe7M.mjs');
    case './translations/es.json': return import('./es-B0wXmvRj.mjs');
    case './translations/fr.json': return import('./fr-CGYvGUXg.mjs');
    case './translations/id.json': return import('./id-CNzbwFjA.mjs');
    case './translations/it.json': return import('./it-B2H2foTf.mjs');
    case './translations/ja.json': return import('./ja-C0z9d7L9.mjs');
    case './translations/ko.json': return import('./ko-CzUgzpeS.mjs');
    case './translations/ms.json': return import('./ms-CCacxjim.mjs');
    case './translations/nl.json': return import('./nl-DDC3nZW-.mjs');
    case './translations/pl.json': return import('./pl-XkS463rN.mjs');
    case './translations/pt-BR.json': return import('./pt-BR-8cC7z8Km.mjs');
    case './translations/pt.json': return import('./pt-DQpEvio8.mjs');
    case './translations/ru.json': return import('./ru-nzL_7Mhg.mjs');
    case './translations/sk.json': return import('./sk-Ddxc_tZA.mjs');
    case './translations/sv.json': return import('./sv-By3RYpMG.mjs');
    case './translations/th.json': return import('./th-COl50vqb.mjs');
    case './translations/tr.json': return import('./tr-80SJU6jg.mjs');
    case './translations/uk.json': return import('./uk-D8JHuzch.mjs');
    case './translations/vi.json': return import('./vi-69AF03Iv.mjs');
    case './translations/zh-Hans.json': return import('./zh-Hans-DmDcSsp7.mjs');
    case './translations/zh.json': return import('./zh-BzSkqxo-.mjs');
    default: return new Promise(function(resolve, reject) {
      (typeof queueMicrotask === 'function' ? queueMicrotask : setTimeout)(
        reject.bind(null, new Error("Unknown variable dynamic import: " + path))
      );
    })
   }
 }
const name = strapi.name;
var index = {
    register (app) {
        // Create the plugin's settings section
        app.createSettingSection({
            id: 'users-permissions',
            intlLabel: {
                id: getTrad('Settings.section-label'),
                defaultMessage: 'Users & Permissions plugin'
            }
        }, [
            {
                intlLabel: {
                    id: 'global.roles',
                    defaultMessage: 'Roles'
                },
                id: 'roles',
                to: `users-permissions/roles`,
                Component: ()=>import('./index-Cu2GvTiT.mjs'),
                permissions: PERMISSIONS.accessRoles
            },
            {
                intlLabel: {
                    id: getTrad('HeaderNav.link.providers'),
                    defaultMessage: 'Providers'
                },
                id: 'providers',
                to: `users-permissions/providers`,
                Component: ()=>import('./index-COXjHxFm.mjs'),
                permissions: PERMISSIONS.readProviders
            },
            {
                intlLabel: {
                    id: getTrad('HeaderNav.link.emailTemplates'),
                    defaultMessage: 'Email templates'
                },
                id: 'email-templates',
                to: `users-permissions/email-templates`,
                Component: ()=>import('./index-DVNIct2-.mjs').then((mod)=>({
                            default: mod.ProtectedEmailTemplatesPage
                        })),
                permissions: PERMISSIONS.readEmailTemplates
            },
            {
                intlLabel: {
                    id: getTrad('HeaderNav.link.advancedSettings'),
                    defaultMessage: 'Advanced Settings'
                },
                id: 'advanced-settings',
                to: `users-permissions/advanced-settings`,
                Component: ()=>import('./index-B2MJiSOD.mjs').then((mod)=>({
                            default: mod.ProtectedAdvancedSettingsPage
                        })),
                permissions: PERMISSIONS.readAdvancedSettings
            }
        ]);
        app.registerPlugin({
            id: 'users-permissions',
            name
        });
    },
    bootstrap () {},
    async registerTrads ({ locales }) {
        const importedTrads = await Promise.all(locales.map((locale)=>{
            return __variableDynamicImportRuntime4__(`./translations/${locale}.json`).then(({ default: data })=>{
                return {
                    data: prefixPluginTranslations(data, 'users-permissions'),
                    locale
                };
            }).catch(()=>{
                return {
                    data: {},
                    locale
                };
            });
        }));
        return Promise.resolve(importedTrads);
    }
};

export { PERMISSIONS as P, getTrad as g, index as i };
//# sourceMappingURL=index-B-Z_z_qb.mjs.map

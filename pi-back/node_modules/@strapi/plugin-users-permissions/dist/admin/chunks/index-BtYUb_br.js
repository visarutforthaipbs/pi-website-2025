'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var strapiAdmin = require('@strapi/admin/strapi-admin');
var designSystem = require('@strapi/design-system');
var icons = require('@strapi/icons');
var admin = require('@strapi/strapi/admin');
var upperFirst = require('lodash/upperFirst');
var reactIntl = require('react-intl');
var reactQuery = require('react-query');
var formik = require('formik');
var PropTypes = require('prop-types');
var index = require('./index-DAclA-0k.js');
require('lodash/isEmpty');
var yup = require('yup');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);
var yup__namespace = /*#__PURE__*/_interopNamespaceDefault(yup);

const Input = ({ description, disabled, intlLabel, error, name, onChange, placeholder, providerToEditName, type, value })=>{
    const { formatMessage } = reactIntl.useIntl();
    const inputValue = name === 'noName' ? `${window.strapi.backendURL}/api/connect/${providerToEditName}/callback` : value;
    const label = formatMessage({
        id: intlLabel.id,
        defaultMessage: intlLabel.defaultMessage
    }, {
        provider: providerToEditName,
        ...intlLabel.values
    });
    const hint = description ? formatMessage({
        id: description.id,
        defaultMessage: description.defaultMessage
    }, {
        provider: providerToEditName,
        ...description.values
    }) : '';
    if (type === 'bool') {
        return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
            hint: hint,
            name: name,
            children: [
                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                    children: label
                }),
                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Toggle, {
                    "aria-label": name,
                    checked: value,
                    disabled: disabled,
                    offLabel: formatMessage({
                        id: 'app.components.ToggleCheckbox.off-label',
                        defaultMessage: 'Off'
                    }),
                    onLabel: formatMessage({
                        id: 'app.components.ToggleCheckbox.on-label',
                        defaultMessage: 'On'
                    }),
                    onChange: (e)=>{
                        onChange({
                            target: {
                                name,
                                value: e.target.checked
                            }
                        });
                    }
                }),
                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Hint, {})
            ]
        });
    }
    const formattedPlaceholder = placeholder ? formatMessage({
        id: placeholder.id,
        defaultMessage: placeholder.defaultMessage
    }, {
        ...placeholder.values
    }) : '';
    const errorMessage = error ? formatMessage({
        id: error,
        defaultMessage: error
    }) : '';
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
        error: errorMessage,
        name: name,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                children: label
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.TextInput, {
                disabled: disabled,
                onChange: onChange,
                placeholder: formattedPlaceholder,
                type: type,
                value: inputValue
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Error, {})
        ]
    });
};
Input.defaultProps = {
    description: null,
    disabled: false,
    error: '',
    placeholder: null,
    value: ''
};
Input.propTypes = {
    description: PropTypes.shape({
        id: PropTypes.string.isRequired,
        defaultMessage: PropTypes.string.isRequired,
        values: PropTypes.object
    }),
    disabled: PropTypes.bool,
    error: PropTypes.string,
    intlLabel: PropTypes.shape({
        id: PropTypes.string.isRequired,
        defaultMessage: PropTypes.string.isRequired,
        values: PropTypes.object
    }).isRequired,
    name: PropTypes.string.isRequired,
    onChange: PropTypes.func.isRequired,
    placeholder: PropTypes.shape({
        id: PropTypes.string.isRequired,
        defaultMessage: PropTypes.string.isRequired,
        values: PropTypes.object
    }),
    providerToEditName: PropTypes.string.isRequired,
    type: PropTypes.string.isRequired,
    value: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.string
    ])
};

const FormModal = ({ headerBreadcrumbs, initialData, isSubmiting, layout, isOpen, onSubmit, onToggle, providerToEditName })=>{
    const { formatMessage } = reactIntl.useIntl();
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Modal.Root, {
        open: isOpen,
        onOpenChange: onToggle,
        children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Modal.Content, {
            children: [
                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Modal.Header, {
                    children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Breadcrumbs, {
                        label: headerBreadcrumbs.join(', '),
                        children: headerBreadcrumbs.map((crumb, index, arr)=>/*#__PURE__*/ jsxRuntime.jsx(designSystem.Crumb, {
                                isCurrent: index === arr.length - 1,
                                children: crumb
                            }, crumb))
                    })
                }),
                /*#__PURE__*/ jsxRuntime.jsx(formik.Formik, {
                    onSubmit: (values)=>onSubmit(values),
                    initialValues: initialData,
                    validationSchema: layout.schema,
                    validateOnChange: false,
                    children: ({ errors, handleChange, values })=>{
                        return /*#__PURE__*/ jsxRuntime.jsxs(formik.Form, {
                            children: [
                                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Modal.Body, {
                                    children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Flex, {
                                        direction: "column",
                                        alignItems: "stretch",
                                        gap: 1,
                                        children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Grid.Root, {
                                            gap: 5,
                                            children: layout.form.map((row)=>{
                                                return row.map((input)=>{
                                                    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Grid.Item, {
                                                        col: input.size,
                                                        xs: 12,
                                                        direction: "column",
                                                        alignItems: "stretch",
                                                        children: /*#__PURE__*/ jsxRuntime.jsx(Input, {
                                                            ...input,
                                                            error: errors[input.name],
                                                            onChange: handleChange,
                                                            value: values[input.name],
                                                            providerToEditName: providerToEditName
                                                        })
                                                    }, input.name);
                                                });
                                            })
                                        })
                                    })
                                }),
                                /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Modal.Footer, {
                                    children: [
                                        /*#__PURE__*/ jsxRuntime.jsx(designSystem.Button, {
                                            variant: "tertiary",
                                            onClick: onToggle,
                                            type: "button",
                                            children: formatMessage({
                                                id: 'app.components.Button.cancel',
                                                defaultMessage: 'Cancel'
                                            })
                                        }),
                                        /*#__PURE__*/ jsxRuntime.jsx(designSystem.Button, {
                                            type: "submit",
                                            loading: isSubmiting,
                                            children: formatMessage({
                                                id: 'global.save',
                                                defaultMessage: 'Save'
                                            })
                                        })
                                    ]
                                })
                            ]
                        });
                    }
                })
            ]
        })
    });
};
FormModal.defaultProps = {
    initialData: null,
    providerToEditName: null
};
FormModal.propTypes = {
    headerBreadcrumbs: PropTypes.arrayOf(PropTypes.string).isRequired,
    initialData: PropTypes.object,
    layout: PropTypes.shape({
        form: PropTypes.arrayOf(PropTypes.array),
        schema: PropTypes.object
    }).isRequired,
    isOpen: PropTypes.bool.isRequired,
    isSubmiting: PropTypes.bool.isRequired,
    onSubmit: PropTypes.func.isRequired,
    onToggle: PropTypes.func.isRequired,
    providerToEditName: PropTypes.string
};

const callbackLabel = {
    id: index.getTrad('PopUpForm.Providers.redirectURL.front-end.label'),
    defaultMessage: 'The redirect URL to your front-end app'
};
const callbackPlaceholder = {
    id: 'http://www.client-app.com',
    defaultMessage: 'http://www.client-app.com'
};
const enabledDescription = {
    id: index.getTrad('PopUpForm.Providers.enabled.description'),
    defaultMessage: "If disabled, users won't be able to use this provider."
};
const enabledLabel = {
    id: index.getTrad('PopUpForm.Providers.enabled.label'),
    defaultMessage: 'Enable'
};
const keyLabel = {
    id: index.getTrad('PopUpForm.Providers.key.label'),
    defaultMessage: 'Client ID'
};
const hintLabel = {
    id: index.getTrad('PopUpForm.Providers.redirectURL.label'),
    defaultMessage: 'The redirect URL to add in your {provider} application configurations'
};
const textPlaceholder = {
    id: index.getTrad('PopUpForm.Providers.key.placeholder'),
    defaultMessage: 'TEXT'
};
const secretLabel = {
    id: index.getTrad('PopUpForm.Providers.secret.label'),
    defaultMessage: 'Client Secret'
};
const CALLBACK_REGEX = /^$|^[a-z][a-z0-9+.-]*:\/\/[^\s/$.?#](?:[^\s]*[^\s/$.?#])?$/i;
const SUBDOMAIN_REGEX = /^(([a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+)(:\d+)?(\/\S*)?$/i;
const forms = {
    email: {
        form: [
            [
                {
                    intlLabel: enabledLabel,
                    name: 'enabled',
                    type: 'bool',
                    description: enabledDescription,
                    size: 6
                }
            ]
        ],
        schema: yup__namespace.object().shape({
            enabled: yup__namespace.bool().required(admin.translatedErrors.required.id)
        })
    },
    providers: {
        form: [
            [
                {
                    intlLabel: enabledLabel,
                    name: 'enabled',
                    type: 'bool',
                    description: enabledDescription,
                    size: 6,
                    validations: {
                        required: true
                    }
                }
            ],
            [
                {
                    intlLabel: keyLabel,
                    name: 'key',
                    type: 'text',
                    placeholder: textPlaceholder,
                    size: 12,
                    validations: {
                        required: true
                    }
                }
            ],
            [
                {
                    intlLabel: secretLabel,
                    name: 'secret',
                    type: 'text',
                    placeholder: textPlaceholder,
                    size: 12,
                    validations: {
                        required: true
                    }
                }
            ],
            [
                {
                    intlLabel: callbackLabel,
                    placeholder: callbackPlaceholder,
                    name: 'callback',
                    type: 'text',
                    size: 12,
                    validations: {
                        required: true
                    }
                }
            ],
            [
                {
                    intlLabel: hintLabel,
                    name: 'noName',
                    type: 'text',
                    validations: {},
                    size: 12,
                    disabled: true
                }
            ]
        ],
        schema: yup__namespace.object().shape({
            enabled: yup__namespace.bool().required(admin.translatedErrors.required.id),
            key: yup__namespace.string().when('enabled', {
                is: true,
                then: yup__namespace.string().required(admin.translatedErrors.required.id),
                otherwise: yup__namespace.string()
            }),
            secret: yup__namespace.string().when('enabled', {
                is: true,
                then: yup__namespace.string().required(admin.translatedErrors.required.id),
                otherwise: yup__namespace.string()
            }),
            callback: yup__namespace.string().when('enabled', {
                is: true,
                then: yup__namespace.string().matches(CALLBACK_REGEX, admin.translatedErrors.regex.id).required(admin.translatedErrors.required.id),
                otherwise: yup__namespace.string()
            })
        })
    },
    providersWithSubdomain: {
        form: [
            [
                {
                    intlLabel: enabledLabel,
                    name: 'enabled',
                    type: 'bool',
                    description: enabledDescription,
                    size: 6,
                    validations: {
                        required: true
                    }
                }
            ],
            [
                {
                    intlLabel: keyLabel,
                    name: 'key',
                    type: 'text',
                    placeholder: textPlaceholder,
                    size: 12,
                    validations: {
                        required: true
                    }
                }
            ],
            [
                {
                    intlLabel: secretLabel,
                    name: 'secret',
                    type: 'text',
                    placeholder: textPlaceholder,
                    size: 12,
                    validations: {
                        required: true
                    }
                }
            ],
            [
                {
                    intlLabel: {
                        id: index.getTrad({
                            id: 'PopUpForm.Providers.jwksurl.label'
                        }),
                        defaultMessage: 'JWKS URL'
                    },
                    name: 'jwksurl',
                    type: 'text',
                    placeholder: textPlaceholder,
                    size: 12,
                    validations: {
                        required: false
                    }
                }
            ],
            [
                {
                    intlLabel: {
                        id: index.getTrad('PopUpForm.Providers.subdomain.label'),
                        defaultMessage: 'Host URI (Subdomain)'
                    },
                    name: 'subdomain',
                    type: 'text',
                    placeholder: {
                        id: index.getTrad('PopUpForm.Providers.subdomain.placeholder'),
                        defaultMessage: 'my.subdomain.com'
                    },
                    size: 12,
                    validations: {
                        required: true
                    }
                }
            ],
            [
                {
                    intlLabel: callbackLabel,
                    placeholder: callbackPlaceholder,
                    name: 'callback',
                    type: 'text',
                    size: 12,
                    validations: {
                        required: true
                    }
                }
            ],
            [
                {
                    intlLabel: hintLabel,
                    name: 'noName',
                    type: 'text',
                    validations: {},
                    size: 12,
                    disabled: true
                }
            ]
        ],
        schema: yup__namespace.object().shape({
            enabled: yup__namespace.bool().required(admin.translatedErrors.required.id),
            key: yup__namespace.string().when('enabled', {
                is: true,
                then: yup__namespace.string().required(admin.translatedErrors.required.id),
                otherwise: yup__namespace.string()
            }),
            secret: yup__namespace.string().when('enabled', {
                is: true,
                then: yup__namespace.string().required(admin.translatedErrors.required.id),
                otherwise: yup__namespace.string()
            }),
            subdomain: yup__namespace.string().when('enabled', {
                is: true,
                then: yup__namespace.string().matches(SUBDOMAIN_REGEX, admin.translatedErrors.regex.id).required(admin.translatedErrors.required.id),
                otherwise: yup__namespace.string()
            }),
            callback: yup__namespace.string().when('enabled', {
                is: true,
                then: yup__namespace.string().matches(CALLBACK_REGEX, admin.translatedErrors.regex.id).required(admin.translatedErrors.required.id),
                otherwise: yup__namespace.string()
            })
        })
    }
};

const ProvidersPage = ()=>{
    const { formatMessage, locale } = reactIntl.useIntl();
    const queryClient = reactQuery.useQueryClient();
    const { trackUsage } = strapiAdmin.useTracking();
    const [isOpen, setIsOpen] = React__namespace.useState(false);
    const [providerToEditName, setProviderToEditName] = React__namespace.useState(null);
    const { toggleNotification } = admin.useNotification();
    const { get, put } = admin.useFetchClient();
    const { formatAPIError } = admin.useAPIErrorHandler();
    const formatter = designSystem.useCollator(locale, {
        sensitivity: 'base'
    });
    const { isLoading: isLoadingPermissions, allowedActions: { canUpdate } } = admin.useRBAC({
        update: index.PERMISSIONS.updateProviders
    });
    const { isLoading: isLoadingData, data } = reactQuery.useQuery([
        'users-permissions',
        'get-providers'
    ], async ()=>{
        const { data } = await get('/users-permissions/providers');
        return data;
    }, {
        initialData: {}
    });
    const submitMutation = reactQuery.useMutation((body)=>put('/users-permissions/providers', body), {
        async onSuccess () {
            await queryClient.invalidateQueries([
                'users-permissions',
                'get-providers'
            ]);
            toggleNotification({
                type: 'success',
                message: formatMessage({
                    id: index.getTrad('notification.success.submit')
                })
            });
            trackUsage('didEditAuthenticationProvider');
            handleToggleModal();
        },
        onError (error) {
            toggleNotification({
                type: 'danger',
                message: formatAPIError(error)
            });
        },
        refetchActive: false
    });
    const providers = Object.entries(data).reduce((acc, [name, provider])=>{
        const { icon, enabled, subdomain } = provider;
        acc.push({
            name,
            icon: icon === 'envelope' ? [
                'fas',
                'envelope'
            ] : [
                'fab',
                icon
            ],
            enabled,
            subdomain
        });
        return acc;
    }, []).sort((a, b)=>formatter.compare(a.name, b.name));
    const isLoading = isLoadingData || isLoadingPermissions;
    const isProviderWithSubdomain = React__namespace.useMemo(()=>{
        if (!providerToEditName) {
            return false;
        }
        const providerToEdit = providers.find((obj)=>obj.name === providerToEditName);
        return !!providerToEdit?.subdomain;
    }, [
        providers,
        providerToEditName
    ]);
    const layoutToRender = React__namespace.useMemo(()=>{
        if (providerToEditName === 'email') {
            return forms.email;
        }
        if (isProviderWithSubdomain) {
            return forms.providersWithSubdomain;
        }
        return forms.providers;
    }, [
        providerToEditName,
        isProviderWithSubdomain
    ]);
    const handleToggleModal = ()=>{
        setIsOpen((prev)=>!prev);
    };
    const handleClickEdit = (provider)=>{
        if (canUpdate) {
            setProviderToEditName(provider.name);
            handleToggleModal();
        }
    };
    const handleSubmit = async (values)=>{
        trackUsage('willEditAuthenticationProvider');
        submitMutation.mutate({
            providers: {
                ...data,
                [providerToEditName]: values
            }
        });
    };
    if (isLoading) {
        return /*#__PURE__*/ jsxRuntime.jsx(admin.Page.Loading, {});
    }
    return /*#__PURE__*/ jsxRuntime.jsxs(strapiAdmin.Layouts.Root, {
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(admin.Page.Title, {
                children: formatMessage({
                    id: 'Settings.PageTitle',
                    defaultMessage: 'Settings - {name}'
                }, {
                    name: formatMessage({
                        id: index.getTrad('HeaderNav.link.providers'),
                        defaultMessage: 'Providers'
                    })
                })
            }),
            /*#__PURE__*/ jsxRuntime.jsxs(admin.Page.Main, {
                children: [
                    /*#__PURE__*/ jsxRuntime.jsx(strapiAdmin.Layouts.Header, {
                        title: formatMessage({
                            id: index.getTrad('HeaderNav.link.providers'),
                            defaultMessage: 'Providers'
                        })
                    }),
                    /*#__PURE__*/ jsxRuntime.jsx(strapiAdmin.Layouts.Content, {
                        children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Table, {
                            colCount: 3,
                            rowCount: providers.length + 1,
                            children: [
                                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Thead, {
                                    children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Tr, {
                                        children: [
                                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Th, {
                                                children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                                    variant: "sigma",
                                                    textColor: "neutral600",
                                                    children: formatMessage({
                                                        id: 'global.name',
                                                        defaultMessage: 'Name'
                                                    })
                                                })
                                            }),
                                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Th, {
                                                children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                                    variant: "sigma",
                                                    textColor: "neutral600",
                                                    children: formatMessage({
                                                        id: index.getTrad('Providers.status'),
                                                        defaultMessage: 'Status'
                                                    })
                                                })
                                            }),
                                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Th, {
                                                children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                                    variant: "sigma",
                                                    children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.VisuallyHidden, {
                                                        children: formatMessage({
                                                            id: 'global.settings',
                                                            defaultMessage: 'Settings'
                                                        })
                                                    })
                                                })
                                            })
                                        ]
                                    })
                                }),
                                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Tbody, {
                                    children: providers.map((provider)=>/*#__PURE__*/ jsxRuntime.jsxs(designSystem.Tr, {
                                            onClick: ()=>canUpdate ? handleClickEdit(provider) : undefined,
                                            children: [
                                                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Td, {
                                                    width: "45%",
                                                    children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                                        fontWeight: "semiBold",
                                                        textColor: "neutral800",
                                                        children: provider.name
                                                    })
                                                }),
                                                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Td, {
                                                    width: "65%",
                                                    children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                                        textColor: provider.enabled ? 'success600' : 'danger600',
                                                        "data-testid": `enable-${provider.name}`,
                                                        children: provider.enabled ? formatMessage({
                                                            id: 'global.enabled',
                                                            defaultMessage: 'Enabled'
                                                        }) : formatMessage({
                                                            id: 'global.disabled',
                                                            defaultMessage: 'Disabled'
                                                        })
                                                    })
                                                }),
                                                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Td, {
                                                    onClick: (e)=>e.stopPropagation(),
                                                    children: canUpdate && /*#__PURE__*/ jsxRuntime.jsx(designSystem.IconButton, {
                                                        onClick: ()=>handleClickEdit(provider),
                                                        variant: "ghost",
                                                        label: "Edit",
                                                        children: /*#__PURE__*/ jsxRuntime.jsx(icons.Pencil, {})
                                                    })
                                                })
                                            ]
                                        }, provider.name))
                                })
                            ]
                        })
                    })
                ]
            }),
            /*#__PURE__*/ jsxRuntime.jsx(FormModal, {
                initialData: data[providerToEditName],
                isOpen: isOpen,
                isSubmiting: submitMutation.isLoading,
                layout: layoutToRender,
                headerBreadcrumbs: [
                    formatMessage({
                        id: index.getTrad('PopUpForm.header.edit.providers'),
                        defaultMessage: 'Edit Provider'
                    }),
                    upperFirst(providerToEditName)
                ],
                onToggle: handleToggleModal,
                onSubmit: handleSubmit,
                providerToEditName: providerToEditName
            })
        ]
    });
};
const ProtectedProvidersPage = ()=>/*#__PURE__*/ jsxRuntime.jsx(admin.Page.Protect, {
        permissions: index.PERMISSIONS.readProviders,
        children: /*#__PURE__*/ jsxRuntime.jsx(ProvidersPage, {})
    });

exports.ProvidersPage = ProvidersPage;
exports.default = ProtectedProvidersPage;
//# sourceMappingURL=index-BtYUb_br.js.map

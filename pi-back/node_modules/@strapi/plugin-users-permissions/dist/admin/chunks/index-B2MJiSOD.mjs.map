{"version":3,"file":"index-B2MJiSOD.mjs","sources":["../../../admin/src/pages/AdvancedSettings/utils/layout.js","../../../admin/src/pages/AdvancedSettings/utils/schema.js","../../../admin/src/pages/AdvancedSettings/index.jsx"],"sourcesContent":["import { getTrad } from '../../../utils';\n\nconst layout = [\n  {\n    label: {\n      id: getTrad('EditForm.inputToggle.label.email'),\n      defaultMessage: 'One account per email address',\n    },\n    hint: {\n      id: getTrad('EditForm.inputToggle.description.email'),\n      defaultMessage:\n        'Disallow the user to create multiple accounts using the same email address with different authentication providers.',\n    },\n    name: 'unique_email',\n    type: 'boolean',\n    size: 12,\n  },\n  {\n    label: {\n      id: getTrad('EditForm.inputToggle.label.sign-up'),\n      defaultMessage: 'Enable sign-ups',\n    },\n    hint: {\n      id: getTrad('EditForm.inputToggle.description.sign-up'),\n      defaultMessage:\n        'When disabled (OFF), the registration process is forbidden. No one can subscribe anymore no matter the used provider.',\n    },\n    name: 'allow_register',\n    type: 'boolean',\n    size: 12,\n  },\n  {\n    label: {\n      id: getTrad('EditForm.inputToggle.label.email-reset-password'),\n      defaultMessage: 'Reset password page',\n    },\n    hint: {\n      id: getTrad('EditForm.inputToggle.description.email-reset-password'),\n      defaultMessage: \"URL of your application's reset password page.\",\n    },\n    placeholder: {\n      id: getTrad('EditForm.inputToggle.placeholder.email-reset-password'),\n      defaultMessage: 'ex: https://youtfrontend.com/reset-password',\n    },\n    name: 'email_reset_password',\n    type: 'string',\n    size: 12,\n  },\n  {\n    label: {\n      id: getTrad('EditForm.inputToggle.label.email-confirmation'),\n      defaultMessage: 'Enable email confirmation',\n    },\n    hint: {\n      id: getTrad('EditForm.inputToggle.description.email-confirmation'),\n      defaultMessage: 'When enabled (ON), new registered users receive a confirmation email.',\n    },\n    name: 'email_confirmation',\n    type: 'boolean',\n    size: 12,\n  },\n  {\n    label: {\n      id: getTrad('EditForm.inputToggle.label.email-confirmation-redirection'),\n      defaultMessage: 'Redirection url',\n    },\n    hint: {\n      id: getTrad('EditForm.inputToggle.description.email-confirmation-redirection'),\n      defaultMessage: 'After you confirmed your email, choose where you will be redirected.',\n    },\n    placeholder: {\n      id: getTrad('EditForm.inputToggle.placeholder.email-confirmation-redirection'),\n      defaultMessage: 'ex: https://youtfrontend.com/email-confirmation',\n    },\n    name: 'email_confirmation_redirection',\n    type: 'string',\n    size: 12,\n  },\n];\n\nexport default layout;\n","import { translatedErrors } from '@strapi/strapi/admin';\nimport * as yup from 'yup';\n\n// eslint-disable-next-line prefer-regex-literals\nconst URL_REGEX = new RegExp('(^$)|((.+:\\\\/\\\\/.*)(d*)\\\\/?(.*))');\n\nconst schema = yup.object().shape({\n  email_confirmation_redirection: yup.mixed().when('email_confirmation', {\n    is: true,\n    then: yup.string().matches(URL_REGEX).required(),\n    otherwise: yup.string().nullable(),\n  }),\n  email_reset_password: yup\n    .string(translatedErrors.string)\n    .matches(URL_REGEX, {\n      id: translatedErrors.regex.id,\n      defaultMessage: 'This is not a valid URL',\n    })\n    .nullable(),\n});\n\nexport default schema;\n","import * as React from 'react';\n\nimport { Box, Button, Flex, Grid, Typography, useNotifyAT } from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport {\n  useAPIErrorHandler,\n  Page,\n  Form,\n  InputRenderer,\n  useNotification,\n  useFetchClient,\n  useRBAC,\n  Layouts,\n} from '@strapi/strapi/admin';\nimport { useIntl } from 'react-intl';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\n\nimport { PERMISSIONS } from '../../constants';\nimport { getTrad } from '../../utils';\n\nimport layout from './utils/layout';\nimport schema from './utils/schema';\n\nconst ProtectedAdvancedSettingsPage = () => (\n  <Page.Protect permissions={PERMISSIONS.readAdvancedSettings}>\n    <AdvancedSettingsPage />\n  </Page.Protect>\n);\n\nconst AdvancedSettingsPage = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { notifyStatus } = useNotifyAT();\n  const queryClient = useQueryClient();\n  const { get, put } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler();\n\n  const {\n    isLoading: isLoadingForPermissions,\n    allowedActions: { canUpdate },\n  } = useRBAC({ update: PERMISSIONS.updateAdvancedSettings });\n\n  const { isLoading: isLoadingData, data } = useQuery(\n    ['users-permissions', 'advanced'],\n    async () => {\n      const { data } = await get('/users-permissions/advanced');\n\n      return data;\n    },\n    {\n      onSuccess() {\n        notifyStatus(\n          formatMessage({\n            id: getTrad('Form.advancedSettings.data.loaded'),\n            defaultMessage: 'Advanced settings data has been loaded',\n          })\n        );\n      },\n      onError() {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: getTrad('notification.error'),\n            defaultMessage: 'An error occured',\n          }),\n        });\n      },\n    }\n  );\n\n  const isLoading = isLoadingForPermissions || isLoadingData;\n\n  const submitMutation = useMutation((body) => put('/users-permissions/advanced', body), {\n    async onSuccess() {\n      await queryClient.invalidateQueries(['users-permissions', 'advanced']);\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: getTrad('notification.success.saved'),\n          defaultMessage: 'Saved',\n        }),\n      });\n    },\n    onError(error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    },\n    refetchActive: true,\n  });\n\n  const { isLoading: isSubmittingForm } = submitMutation;\n\n  const handleSubmit = async (body) => {\n    submitMutation.mutate({\n      ...body,\n      email_confirmation_redirection: body.email_confirmation\n        ? body.email_confirmation_redirection\n        : '',\n    });\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Page.Main aria-busy={isSubmittingForm}>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: formatMessage({\n              id: getTrad('HeaderNav.link.advancedSettings'),\n              defaultMessage: 'Advanced Settings',\n            }),\n          }\n        )}\n      </Page.Title>\n      <Form onSubmit={handleSubmit} initialValues={data.settings} validationSchema={schema}>\n        {({ values, isSubmitting, modified }) => {\n          return (\n            <>\n              <Layouts.Header\n                title={formatMessage({\n                  id: getTrad('HeaderNav.link.advancedSettings'),\n                  defaultMessage: 'Advanced Settings',\n                })}\n                primaryAction={\n                  <Button\n                    loading={isSubmitting}\n                    type=\"submit\"\n                    disabled={!modified || !canUpdate}\n                    startIcon={<Check />}\n                    size=\"S\"\n                  >\n                    {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n                  </Button>\n                }\n              />\n              <Layouts.Content>\n                <Box\n                  background=\"neutral0\"\n                  hasRadius\n                  shadow=\"filterShadow\"\n                  paddingTop={6}\n                  paddingBottom={6}\n                  paddingLeft={7}\n                  paddingRight={7}\n                >\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n                    <Typography variant=\"delta\" tag=\"h2\">\n                      {formatMessage({\n                        id: 'global.settings',\n                        defaultMessage: 'Settings',\n                      })}\n                    </Typography>\n                    <Grid.Root gap={6}>\n                      {[\n                        {\n                          label: {\n                            id: getTrad('EditForm.inputSelect.label.role'),\n                            defaultMessage: 'Default role for authenticated users',\n                          },\n                          hint: {\n                            id: getTrad('EditForm.inputSelect.description.role'),\n                            defaultMessage:\n                              'It will attach the new authenticated user to the selected role.',\n                          },\n                          options: data.roles.map((role) => ({\n                            label: role.name,\n                            value: role.type,\n                          })),\n                          name: 'default_role',\n                          size: 6,\n                          type: 'enumeration',\n                        },\n                        ...layout,\n                      ].map(({ size, ...field }) => (\n                        <Grid.Item\n                          key={field.name}\n                          col={size}\n                          direction=\"column\"\n                          alignItems=\"stretch\"\n                        >\n                          <InputRenderer\n                            {...field}\n                            disabled={\n                              field.name === 'email_confirmation_redirection' &&\n                              values.email_confirmation === false\n                            }\n                            label={formatMessage(field.label)}\n                            hint={field.hint ? formatMessage(field.hint) : undefined}\n                            placeholder={\n                              field.placeholder ? formatMessage(field.placeholder) : undefined\n                            }\n                          />\n                        </Grid.Item>\n                      ))}\n                    </Grid.Root>\n                  </Flex>\n                </Box>\n              </Layouts.Content>\n            </>\n          );\n        }}\n      </Form>\n    </Page.Main>\n  );\n};\n\nexport { ProtectedAdvancedSettingsPage, AdvancedSettingsPage };\n"],"names":["layout","label","id","getTrad","defaultMessage","hint","name","type","size","placeholder","URL_REGEX","RegExp","schema","yup","object","shape","email_confirmation_redirection","mixed","when","is","then","string","matches","required","otherwise","nullable","email_reset_password","translatedErrors","regex","ProtectedAdvancedSettingsPage","_jsx","Page","Protect","permissions","PERMISSIONS","readAdvancedSettings","AdvancedSettingsPage","formatMessage","useIntl","toggleNotification","useNotification","notifyStatus","useNotifyAT","queryClient","useQueryClient","get","put","useFetchClient","formatAPIError","useAPIErrorHandler","isLoading","isLoadingForPermissions","allowedActions","canUpdate","useRBAC","update","updateAdvancedSettings","isLoadingData","data","useQuery","onSuccess","onError","message","submitMutation","useMutation","body","invalidateQueries","error","refetchActive","isSubmittingForm","handleSubmit","mutate","email_confirmation","Loading","_jsxs","Main","aria-busy","Title","Form","onSubmit","initialValues","settings","validationSchema","values","isSubmitting","modified","_Fragment","Layouts","Header","title","primaryAction","Button","loading","disabled","startIcon","Check","Content","Box","background","hasRadius","shadow","paddingTop","paddingBottom","paddingLeft","paddingRight","Flex","direction","alignItems","gap","Typography","variant","tag","Grid","Root","options","roles","map","role","value","field","Item","col","InputRenderer","undefined"],"mappings":"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"}
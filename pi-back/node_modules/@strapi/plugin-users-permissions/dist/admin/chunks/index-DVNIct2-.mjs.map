{"version":3,"file":"index-DVNIct2-.mjs","sources":["../../../admin/src/pages/EmailTemplates/utils/schema.js","../../../admin/src/pages/EmailTemplates/components/EmailForm.jsx","../../../admin/src/pages/EmailTemplates/components/EmailTable.jsx","../../../admin/src/pages/EmailTemplates/index.jsx"],"sourcesContent":["import { translatedErrors } from '@strapi/strapi/admin';\nimport * as yup from 'yup';\n\nconst schema = yup.object().shape({\n  options: yup\n    .object()\n    .shape({\n      from: yup\n        .object()\n        .shape({\n          name: yup.string().required({\n            id: translatedErrors.required.id,\n            defaultMessage: 'This field is required',\n          }),\n          email: yup.string().email(translatedErrors.email).required({\n            id: translatedErrors.required.id,\n            defaultMessage: 'This field is required',\n          }),\n        })\n        .required(),\n      response_email: yup.string().email(translatedErrors.email),\n      object: yup.string().required({\n        id: translatedErrors.required.id,\n        defaultMessage: 'This field is required',\n      }),\n      message: yup.string().required({\n        id: translatedErrors.required.id,\n        defaultMessage: 'This field is required',\n      }),\n    })\n    .required(translatedErrors.required.id),\n});\n\nexport default schema;\n","import * as React from 'react';\n\nimport { Button, Grid, Modal, Breadcrumbs, Crumb, VisuallyHidden } from '@strapi/design-system';\nimport { Form, InputRenderer } from '@strapi/strapi/admin';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../../utils';\nimport schema from '../utils/schema';\n\nconst EmailForm = ({ template = {}, onToggle, open, onSubmit }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Modal.Root open={open} onOpenChange={onToggle}>\n      <Modal.Content>\n        <Modal.Header>\n          <Breadcrumbs\n            label={`${formatMessage({\n              id: getTrad('PopUpForm.header.edit.email-templates'),\n              defaultMessage: 'Edit email template',\n            })}, ${\n              template.display\n                ? formatMessage({\n                    id: getTrad(template.display),\n                    defaultMessage: template.display,\n                  })\n                : ''\n            }`}\n          >\n            <Crumb>\n              {formatMessage({\n                id: getTrad('PopUpForm.header.edit.email-templates'),\n                defaultMessage: 'Edit email template',\n              })}\n            </Crumb>\n            <Crumb isCurrent>\n              {template.display\n                ? formatMessage({ id: getTrad(template.display), defaultMessage: template.display })\n                : ''}\n            </Crumb>\n          </Breadcrumbs>\n          <VisuallyHidden>\n            <Modal.Title>\n              {`${formatMessage({\n                id: getTrad('PopUpForm.header.edit.email-templates'),\n                defaultMessage: 'Edit email template',\n              })}, ${template.display ? formatMessage({ id: getTrad(template.display), defaultMessage: template.display }) : ''}`}\n            </Modal.Title>\n          </VisuallyHidden>\n        </Modal.Header>\n        <Form onSubmit={onSubmit} initialValues={template} validationSchema={schema}>\n          {({ isSubmitting }) => {\n            return (\n              <>\n                <Modal.Body>\n                  <Grid.Root gap={5}>\n                    {[\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.from.name.label'),\n                          defaultMessage: 'Shipper name',\n                        }),\n                        name: 'options.from.name',\n                        size: 6,\n                        type: 'string',\n                      },\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.from.email.label'),\n                          defaultMessage: 'Shipper email',\n                        }),\n                        name: 'options.from.email',\n                        size: 6,\n                        type: 'string',\n                      },\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.response_email.label'),\n                          defaultMessage: 'Response email',\n                        }),\n                        name: 'options.response_email',\n                        size: 6,\n                        type: 'string',\n                      },\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.object.label'),\n                          defaultMessage: 'Subject',\n                        }),\n                        name: 'options.object',\n                        size: 6,\n                        type: 'string',\n                      },\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.message.label'),\n                          defaultMessage: 'Message',\n                        }),\n                        name: 'options.message',\n                        size: 12,\n                        type: 'text',\n                      },\n                    ].map(({ size, ...field }) => (\n                      <Grid.Item\n                        key={field.name}\n                        col={size}\n                        direction=\"column\"\n                        alignItems=\"stretch\"\n                      >\n                        <InputRenderer {...field} />\n                      </Grid.Item>\n                    ))}\n                  </Grid.Root>\n                </Modal.Body>\n                <Modal.Footer>\n                  <Modal.Close>\n                    <Button variant=\"tertiary\">Cancel</Button>\n                  </Modal.Close>\n                  <Button loading={isSubmitting} type=\"submit\">\n                    Finish\n                  </Button>\n                </Modal.Footer>\n              </>\n            );\n          }}\n        </Form>\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\nEmailForm.defaultProps = {\n  template: {},\n};\n\nEmailForm.propTypes = {\n  template: PropTypes.shape({\n    display: PropTypes.string,\n    icon: PropTypes.string,\n    options: PropTypes.shape({\n      from: PropTypes.shape({\n        name: PropTypes.string,\n        email: PropTypes.string,\n      }),\n      message: PropTypes.string,\n      object: PropTypes.string,\n      response_email: PropTypes.string,\n    }),\n  }),\n  open: PropTypes.bool.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n};\n\nexport default EmailForm;\n","import * as React from 'react';\n\nimport {\n  IconButton,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  Typography,\n  VisuallyHidden,\n  Box,\n} from '@strapi/design-system';\nimport { Check, Pencil, ArrowClockwise as Refresh } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../../utils';\n\nconst EmailTable = ({ canUpdate, onEditClick }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Table colCount={3} rowCount={3}>\n      <Thead>\n        <Tr>\n          <Th width=\"1%\">\n            <VisuallyHidden>\n              {formatMessage({\n                id: getTrad('Email.template.table.icon.label'),\n                defaultMessage: 'icon',\n              })}\n            </VisuallyHidden>\n          </Th>\n          <Th>\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\n              {formatMessage({\n                id: getTrad('Email.template.table.name.label'),\n                defaultMessage: 'name',\n              })}\n            </Typography>\n          </Th>\n          <Th width=\"1%\">\n            <VisuallyHidden>\n              {formatMessage({\n                id: getTrad('Email.template.table.action.label'),\n                defaultMessage: 'action',\n              })}\n            </VisuallyHidden>\n          </Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        <Tr cursor=\"pointer\" onClick={() => onEditClick('reset_password')}>\n          <Td>\n            <Box width=\"3.2rem\" height=\"3.2rem\" padding=\"0.8rem\">\n              <Refresh\n                aria-label={formatMessage({\n                  id: 'global.reset-password',\n                  defaultMessage: 'Reset password',\n                })}\n              />\n            </Box>\n          </Td>\n          <Td>\n            <Typography>\n              {formatMessage({\n                id: 'global.reset-password',\n                defaultMessage: 'Reset password',\n              })}\n            </Typography>\n          </Td>\n          <Td onClick={(e) => e.stopPropagation()}>\n            <IconButton\n              onClick={() => onEditClick('reset_password')}\n              label={formatMessage({\n                id: getTrad('Email.template.form.edit.label'),\n                defaultMessage: 'Edit a template',\n              })}\n              variant=\"ghost\"\n              disabled={!canUpdate}\n            >\n              <Pencil />\n            </IconButton>\n          </Td>\n        </Tr>\n        <Tr cursor=\"pointer\" onClick={() => onEditClick('email_confirmation')}>\n          <Td>\n            <Box width=\"3.2rem\" height=\"3.2rem\" padding=\"0.8rem\">\n              <Check\n                aria-label={formatMessage({\n                  id: getTrad('Email.template.email_confirmation'),\n                  defaultMessage: 'Email address confirmation',\n                })}\n              />\n            </Box>\n          </Td>\n          <Td>\n            <Typography>\n              {formatMessage({\n                id: getTrad('Email.template.email_confirmation'),\n                defaultMessage: 'Email address confirmation',\n              })}\n            </Typography>\n          </Td>\n          <Td onClick={(e) => e.stopPropagation()}>\n            <IconButton\n              onClick={() => onEditClick('email_confirmation')}\n              label={formatMessage({\n                id: getTrad('Email.template.form.edit.label'),\n                defaultMessage: 'Edit a template',\n              })}\n              variant=\"ghost\"\n              disabled={!canUpdate}\n            >\n              <Pencil />\n            </IconButton>\n          </Td>\n        </Tr>\n      </Tbody>\n    </Table>\n  );\n};\n\nEmailTable.propTypes = {\n  canUpdate: PropTypes.bool.isRequired,\n  onEditClick: PropTypes.func.isRequired,\n};\n\nexport default EmailTable;\n","import * as React from 'react';\n\nimport { useTracking } from '@strapi/admin/strapi-admin';\nimport { useNotifyAT } from '@strapi/design-system';\nimport {\n  Page,\n  useAPIErrorHandler,\n  useNotification,\n  useFetchClient,\n  useRBAC,\n  Layouts,\n} from '@strapi/strapi/admin';\nimport { useIntl } from 'react-intl';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\n\nimport { PERMISSIONS } from '../../constants';\nimport { getTrad } from '../../utils';\n\nimport EmailForm from './components/EmailForm';\nimport EmailTable from './components/EmailTable';\n\nconst ProtectedEmailTemplatesPage = () => (\n  <Page.Protect permissions={PERMISSIONS.readEmailTemplates}>\n    <EmailTemplatesPage />\n  </Page.Protect>\n);\nconst EmailTemplatesPage = () => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { notifyStatus } = useNotifyAT();\n  const { toggleNotification } = useNotification();\n  const queryClient = useQueryClient();\n  const { get, put } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler();\n\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const [templateToEdit, setTemplateToEdit] = React.useState(null);\n\n  const {\n    isLoading: isLoadingForPermissions,\n    allowedActions: { canUpdate },\n  } = useRBAC({ update: PERMISSIONS.updateEmailTemplates });\n\n  const { isLoading: isLoadingData, data } = useQuery(\n    ['users-permissions', 'email-templates'],\n    async () => {\n      const { data } = await get('/users-permissions/email-templates');\n\n      return data;\n    },\n    {\n      onSuccess() {\n        notifyStatus(\n          formatMessage({\n            id: getTrad('Email.template.data.loaded'),\n            defaultMessage: 'Email templates has been loaded',\n          })\n        );\n      },\n      onError(error) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(error),\n        });\n      },\n    }\n  );\n\n  const isLoading = isLoadingForPermissions || isLoadingData;\n\n  const handleToggle = () => {\n    setIsModalOpen((prev) => !prev);\n  };\n\n  const handleEditClick = (template) => {\n    setTemplateToEdit(template);\n    handleToggle();\n  };\n\n  const submitMutation = useMutation(\n    (body) => put('/users-permissions/email-templates', { 'email-templates': body }),\n    {\n      async onSuccess() {\n        await queryClient.invalidateQueries(['users-permissions', 'email-templates']);\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'notification.success.saved', defaultMessage: 'Saved' }),\n        });\n\n        trackUsage('didEditEmailTemplates');\n\n        handleToggle();\n      },\n      onError(error) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(error),\n        });\n      },\n      refetchActive: true,\n    }\n  );\n\n  const handleSubmit = (body) => {\n    trackUsage('willEditEmailTemplates');\n\n    const editedTemplates = { ...data, [templateToEdit]: body };\n    submitMutation.mutate(editedTemplates);\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Page.Main aria-busy={submitMutation.isLoading}>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: formatMessage({\n              id: getTrad('HeaderNav.link.emailTemplates'),\n              defaultMessage: 'Email templates',\n            }),\n          }\n        )}\n      </Page.Title>\n      <Layouts.Header\n        title={formatMessage({\n          id: getTrad('HeaderNav.link.emailTemplates'),\n          defaultMessage: 'Email templates',\n        })}\n      />\n      <Layouts.Content>\n        <EmailTable onEditClick={handleEditClick} canUpdate={canUpdate} />\n        <EmailForm\n          template={data[templateToEdit]}\n          onToggle={handleToggle}\n          open={isModalOpen}\n          onSubmit={handleSubmit}\n        />\n      </Layouts.Content>\n    </Page.Main>\n  );\n};\n\nexport { ProtectedEmailTemplatesPage, EmailTemplatesPage };\n"],"names":["schema","yup","object","shape","options","from","name","string","required","id","translatedErrors","defaultMessage","email","response_email","message","EmailForm","template","onToggle","open","onSubmit","formatMessage","useIntl","_jsx","Modal","Root","onOpenChange","_jsxs","Content","Header","Breadcrumbs","label","getTrad","display","Crumb","isCurrent","VisuallyHidden","Title","Form","initialValues","validationSchema","isSubmitting","_Fragment","Body","Grid","gap","size","type","map","field","Item","col","direction","alignItems","InputRenderer","Footer","Close","Button","variant","loading","defaultProps","propTypes","PropTypes","icon","bool","isRequired","func","EmailTable","canUpdate","onEditClick","Table","colCount","rowCount","Thead","Tr","Th","width","Typography","textColor","Tbody","cursor","onClick","Td","Box","height","padding","Refresh","aria-label","e","stopPropagation","IconButton","disabled","Pencil","Check","ProtectedEmailTemplatesPage","Page","Protect","permissions","PERMISSIONS","readEmailTemplates","EmailTemplatesPage","trackUsage","useTracking","notifyStatus","useNotifyAT","toggleNotification","useNotification","queryClient","useQueryClient","get","put","useFetchClient","formatAPIError","useAPIErrorHandler","isModalOpen","setIsModalOpen","React","useState","templateToEdit","setTemplateToEdit","isLoading","isLoadingForPermissions","allowedActions","useRBAC","update","updateEmailTemplates","isLoadingData","data","useQuery","onSuccess","onError","error","handleToggle","prev","handleEditClick","submitMutation","useMutation","body","invalidateQueries","refetchActive","handleSubmit","editedTemplates","mutate","Loading","Main","aria-busy","Layouts","title"],"mappings":"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"}
{"version":3,"file":"index-COXjHxFm.mjs","sources":["../../../admin/src/components/FormModal/Input/index.jsx","../../../admin/src/components/FormModal/index.jsx","../../../admin/src/pages/Providers/utils/forms.js","../../../admin/src/pages/Providers/index.jsx"],"sourcesContent":["/**\n *\n * Input\n *\n */\n\nimport * as React from 'react';\n\nimport { TextInput, Toggle, Field } from '@strapi/design-system';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nconst Input = ({\n  description,\n  disabled,\n  intlLabel,\n  error,\n  name,\n  onChange,\n  placeholder,\n  providerToEditName,\n  type,\n  value,\n}) => {\n  const { formatMessage } = useIntl();\n  const inputValue =\n    name === 'noName'\n      ? `${window.strapi.backendURL}/api/connect/${providerToEditName}/callback`\n      : value;\n\n  const label = formatMessage(\n    { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\n    { provider: providerToEditName, ...intlLabel.values }\n  );\n  const hint = description\n    ? formatMessage(\n        { id: description.id, defaultMessage: description.defaultMessage },\n        { provider: providerToEditName, ...description.values }\n      )\n    : '';\n\n  if (type === 'bool') {\n    return (\n      <Field.Root hint={hint} name={name}>\n        <Field.Label>{label}</Field.Label>\n        <Toggle\n          aria-label={name}\n          checked={value}\n          disabled={disabled}\n          offLabel={formatMessage({\n            id: 'app.components.ToggleCheckbox.off-label',\n            defaultMessage: 'Off',\n          })}\n          onLabel={formatMessage({\n            id: 'app.components.ToggleCheckbox.on-label',\n            defaultMessage: 'On',\n          })}\n          onChange={(e) => {\n            onChange({ target: { name, value: e.target.checked } });\n          }}\n        />\n        <Field.Hint />\n      </Field.Root>\n    );\n  }\n\n  const formattedPlaceholder = placeholder\n    ? formatMessage(\n        { id: placeholder.id, defaultMessage: placeholder.defaultMessage },\n        { ...placeholder.values }\n      )\n    : '';\n\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\n\n  return (\n    <Field.Root error={errorMessage} name={name}>\n      <Field.Label>{label}</Field.Label>\n      <TextInput\n        disabled={disabled}\n        onChange={onChange}\n        placeholder={formattedPlaceholder}\n        type={type}\n        value={inputValue}\n      />\n      <Field.Error />\n    </Field.Root>\n  );\n};\n\nInput.defaultProps = {\n  description: null,\n  disabled: false,\n  error: '',\n  placeholder: null,\n  value: '',\n};\n\nInput.propTypes = {\n  description: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    defaultMessage: PropTypes.string.isRequired,\n    values: PropTypes.object,\n  }),\n  disabled: PropTypes.bool,\n  error: PropTypes.string,\n  intlLabel: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    defaultMessage: PropTypes.string.isRequired,\n    values: PropTypes.object,\n  }).isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    defaultMessage: PropTypes.string.isRequired,\n    values: PropTypes.object,\n  }),\n  providerToEditName: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n};\n\nexport default Input;\n","/**\n *\n * FormModal\n *\n */\n\nimport * as React from 'react';\n\nimport { Button, Flex, Grid, Modal, Breadcrumbs, Crumb } from '@strapi/design-system';\nimport { Form, Formik } from 'formik';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport Input from './Input';\n\nconst FormModal = ({\n  headerBreadcrumbs,\n  initialData,\n  isSubmiting,\n  layout,\n  isOpen,\n  onSubmit,\n  onToggle,\n  providerToEditName,\n}) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Modal.Root open={isOpen} onOpenChange={onToggle}>\n      <Modal.Content>\n        <Modal.Header>\n          <Breadcrumbs label={headerBreadcrumbs.join(', ')}>\n            {headerBreadcrumbs.map((crumb, index, arr) => (\n              <Crumb isCurrent={index === arr.length - 1} key={crumb}>\n                {crumb}\n              </Crumb>\n            ))}\n          </Breadcrumbs>\n        </Modal.Header>\n        <Formik\n          onSubmit={(values) => onSubmit(values)}\n          initialValues={initialData}\n          validationSchema={layout.schema}\n          validateOnChange={false}\n        >\n          {({ errors, handleChange, values }) => {\n            return (\n              <Form>\n                <Modal.Body>\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n                    <Grid.Root gap={5}>\n                      {layout.form.map((row) => {\n                        return row.map((input) => {\n                          return (\n                            <Grid.Item\n                              key={input.name}\n                              col={input.size}\n                              xs={12}\n                              direction=\"column\"\n                              alignItems=\"stretch\"\n                            >\n                              <Input\n                                {...input}\n                                error={errors[input.name]}\n                                onChange={handleChange}\n                                value={values[input.name]}\n                                providerToEditName={providerToEditName}\n                              />\n                            </Grid.Item>\n                          );\n                        });\n                      })}\n                    </Grid.Root>\n                  </Flex>\n                </Modal.Body>\n                <Modal.Footer>\n                  <Button variant=\"tertiary\" onClick={onToggle} type=\"button\">\n                    {formatMessage({\n                      id: 'app.components.Button.cancel',\n                      defaultMessage: 'Cancel',\n                    })}\n                  </Button>\n                  <Button type=\"submit\" loading={isSubmiting}>\n                    {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n                  </Button>\n                </Modal.Footer>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\nFormModal.defaultProps = {\n  initialData: null,\n  providerToEditName: null,\n};\n\nFormModal.propTypes = {\n  headerBreadcrumbs: PropTypes.arrayOf(PropTypes.string).isRequired,\n  initialData: PropTypes.object,\n  layout: PropTypes.shape({\n    form: PropTypes.arrayOf(PropTypes.array),\n    schema: PropTypes.object,\n  }).isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  isSubmiting: PropTypes.bool.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n  providerToEditName: PropTypes.string,\n};\n\nexport default FormModal;\n","import { translatedErrors } from '@strapi/strapi/admin';\nimport * as yup from 'yup';\n\nimport { getTrad } from '../../../utils';\n\nconst callbackLabel = {\n  id: getTrad('PopUpForm.Providers.redirectURL.front-end.label'),\n  defaultMessage: 'The redirect URL to your front-end app',\n};\nconst callbackPlaceholder = {\n  id: 'http://www.client-app.com',\n  defaultMessage: 'http://www.client-app.com',\n};\nconst enabledDescription = {\n  id: getTrad('PopUpForm.Providers.enabled.description'),\n  defaultMessage: \"If disabled, users won't be able to use this provider.\",\n};\nconst enabledLabel = {\n  id: getTrad('PopUpForm.Providers.enabled.label'),\n  defaultMessage: 'Enable',\n};\nconst keyLabel = { id: getTrad('PopUpForm.Providers.key.label'), defaultMessage: 'Client ID' };\nconst hintLabel = {\n  id: getTrad('PopUpForm.Providers.redirectURL.label'),\n  defaultMessage: 'The redirect URL to add in your {provider} application configurations',\n};\nconst textPlaceholder = {\n  id: getTrad('PopUpForm.Providers.key.placeholder'),\n  defaultMessage: 'TEXT',\n};\n\nconst secretLabel = {\n  id: getTrad('PopUpForm.Providers.secret.label'),\n  defaultMessage: 'Client Secret',\n};\n\nconst CALLBACK_REGEX = /^$|^[a-z][a-z0-9+.-]*:\\/\\/[^\\s/$.?#](?:[^\\s]*[^\\s/$.?#])?$/i;\nconst SUBDOMAIN_REGEX = /^(([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+)(:\\d+)?(\\/\\S*)?$/i;\n\nconst forms = {\n  email: {\n    form: [\n      [\n        {\n          intlLabel: enabledLabel,\n          name: 'enabled',\n          type: 'bool',\n          description: enabledDescription,\n          size: 6,\n          // TODO check if still needed\n          // validations: {\n          //   required: true,\n          // },\n        },\n      ],\n    ],\n    schema: yup.object().shape({\n      enabled: yup.bool().required(translatedErrors.required.id),\n    }),\n  },\n  providers: {\n    form: [\n      [\n        {\n          intlLabel: enabledLabel,\n          name: 'enabled',\n          type: 'bool',\n          description: enabledDescription,\n          size: 6,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: keyLabel,\n          name: 'key',\n          type: 'text',\n          placeholder: textPlaceholder,\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: secretLabel,\n          name: 'secret',\n          type: 'text',\n          placeholder: textPlaceholder,\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: callbackLabel,\n          placeholder: callbackPlaceholder,\n          name: 'callback',\n          type: 'text',\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: hintLabel,\n          name: 'noName',\n          type: 'text',\n          validations: {},\n          size: 12,\n          disabled: true,\n        },\n      ],\n    ],\n    schema: yup.object().shape({\n      enabled: yup.bool().required(translatedErrors.required.id),\n      key: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(translatedErrors.required.id),\n        otherwise: yup.string(),\n      }),\n      secret: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(translatedErrors.required.id),\n        otherwise: yup.string(),\n      }),\n      callback: yup.string().when('enabled', {\n        is: true,\n        then: yup\n          .string()\n          .matches(CALLBACK_REGEX, translatedErrors.regex.id)\n          .required(translatedErrors.required.id),\n        otherwise: yup.string(),\n      }),\n    }),\n  },\n  providersWithSubdomain: {\n    form: [\n      [\n        {\n          intlLabel: enabledLabel,\n          name: 'enabled',\n          type: 'bool',\n          description: enabledDescription,\n          size: 6,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: keyLabel,\n          name: 'key',\n          type: 'text',\n          placeholder: textPlaceholder,\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: secretLabel,\n          name: 'secret',\n          type: 'text',\n          placeholder: textPlaceholder,\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: {\n            id: getTrad({ id: 'PopUpForm.Providers.jwksurl.label' }),\n            defaultMessage: 'JWKS URL',\n          },\n          name: 'jwksurl',\n          type: 'text',\n          placeholder: textPlaceholder,\n          size: 12,\n          validations: {\n            required: false,\n          },\n        },\n      ],\n\n      [\n        {\n          intlLabel: {\n            id: getTrad('PopUpForm.Providers.subdomain.label'),\n            defaultMessage: 'Host URI (Subdomain)',\n          },\n          name: 'subdomain',\n          type: 'text',\n          placeholder: {\n            id: getTrad('PopUpForm.Providers.subdomain.placeholder'),\n            defaultMessage: 'my.subdomain.com',\n          },\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: callbackLabel,\n          placeholder: callbackPlaceholder,\n          name: 'callback',\n          type: 'text',\n          size: 12,\n          validations: {\n            required: true,\n          },\n        },\n      ],\n      [\n        {\n          intlLabel: hintLabel,\n          name: 'noName',\n          type: 'text',\n          validations: {},\n          size: 12,\n          disabled: true,\n        },\n      ],\n    ],\n    schema: yup.object().shape({\n      enabled: yup.bool().required(translatedErrors.required.id),\n      key: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(translatedErrors.required.id),\n        otherwise: yup.string(),\n      }),\n      secret: yup.string().when('enabled', {\n        is: true,\n        then: yup.string().required(translatedErrors.required.id),\n        otherwise: yup.string(),\n      }),\n      subdomain: yup.string().when('enabled', {\n        is: true,\n        then: yup\n          .string()\n          .matches(SUBDOMAIN_REGEX, translatedErrors.regex.id)\n          .required(translatedErrors.required.id),\n        otherwise: yup.string(),\n      }),\n      callback: yup.string().when('enabled', {\n        is: true,\n        then: yup\n          .string()\n          .matches(CALLBACK_REGEX, translatedErrors.regex.id)\n          .required(translatedErrors.required.id),\n        otherwise: yup.string(),\n      }),\n    }),\n  },\n};\n\nexport default forms;\n","import * as React from 'react';\n\nimport { useTracking, Layouts } from '@strapi/admin/strapi-admin';\nimport {\n  IconButton,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  Typography,\n  VisuallyHidden,\n  useCollator,\n} from '@strapi/design-system';\nimport { Pencil } from '@strapi/icons';\nimport {\n  Page,\n  useAPIErrorHandler,\n  useNotification,\n  useFetchClient,\n  useRBAC,\n} from '@strapi/strapi/admin';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\n\nimport FormModal from '../../components/FormModal';\nimport { PERMISSIONS } from '../../constants';\nimport { getTrad } from '../../utils';\n\nimport forms from './utils/forms';\n\nexport const ProvidersPage = () => {\n  const { formatMessage, locale } = useIntl();\n  const queryClient = useQueryClient();\n  const { trackUsage } = useTracking();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [providerToEditName, setProviderToEditName] = React.useState(null);\n  const { toggleNotification } = useNotification();\n  const { get, put } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler();\n  const formatter = useCollator(locale, {\n    sensitivity: 'base',\n  });\n\n  const {\n    isLoading: isLoadingPermissions,\n    allowedActions: { canUpdate },\n  } = useRBAC({ update: PERMISSIONS.updateProviders });\n\n  const { isLoading: isLoadingData, data } = useQuery(\n    ['users-permissions', 'get-providers'],\n    async () => {\n      const { data } = await get('/users-permissions/providers');\n\n      return data;\n    },\n    {\n      initialData: {},\n    }\n  );\n\n  const submitMutation = useMutation((body) => put('/users-permissions/providers', body), {\n    async onSuccess() {\n      await queryClient.invalidateQueries(['users-permissions', 'get-providers']);\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({ id: getTrad('notification.success.submit') }),\n      });\n\n      trackUsage('didEditAuthenticationProvider');\n\n      handleToggleModal();\n    },\n    onError(error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    },\n    refetchActive: false,\n  });\n\n  const providers = Object.entries(data)\n    .reduce((acc, [name, provider]) => {\n      const { icon, enabled, subdomain } = provider;\n\n      acc.push({\n        name,\n        icon: icon === 'envelope' ? ['fas', 'envelope'] : ['fab', icon],\n        enabled,\n        subdomain,\n      });\n\n      return acc;\n    }, [])\n    .sort((a, b) => formatter.compare(a.name, b.name));\n\n  const isLoading = isLoadingData || isLoadingPermissions;\n\n  const isProviderWithSubdomain = React.useMemo(() => {\n    if (!providerToEditName) {\n      return false;\n    }\n\n    const providerToEdit = providers.find((obj) => obj.name === providerToEditName);\n\n    return !!providerToEdit?.subdomain;\n  }, [providers, providerToEditName]);\n\n  const layoutToRender = React.useMemo(() => {\n    if (providerToEditName === 'email') {\n      return forms.email;\n    }\n\n    if (isProviderWithSubdomain) {\n      return forms.providersWithSubdomain;\n    }\n\n    return forms.providers;\n  }, [providerToEditName, isProviderWithSubdomain]);\n\n  const handleToggleModal = () => {\n    setIsOpen((prev) => !prev);\n  };\n\n  const handleClickEdit = (provider) => {\n    if (canUpdate) {\n      setProviderToEditName(provider.name);\n      handleToggleModal();\n    }\n  };\n\n  const handleSubmit = async (values) => {\n    trackUsage('willEditAuthenticationProvider');\n\n    submitMutation.mutate({ providers: { ...data, [providerToEditName]: values } });\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Layouts.Root>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: formatMessage({\n              id: getTrad('HeaderNav.link.providers'),\n              defaultMessage: 'Providers',\n            }),\n          }\n        )}\n      </Page.Title>\n      <Page.Main>\n        <Layouts.Header\n          title={formatMessage({\n            id: getTrad('HeaderNav.link.providers'),\n            defaultMessage: 'Providers',\n          })}\n        />\n        <Layouts.Content>\n          <Table colCount={3} rowCount={providers.length + 1}>\n            <Thead>\n              <Tr>\n                <Th>\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\n                    {formatMessage({ id: 'global.name', defaultMessage: 'Name' })}\n                  </Typography>\n                </Th>\n                <Th>\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\n                    {formatMessage({ id: getTrad('Providers.status'), defaultMessage: 'Status' })}\n                  </Typography>\n                </Th>\n                <Th>\n                  <Typography variant=\"sigma\">\n                    <VisuallyHidden>\n                      {formatMessage({\n                        id: 'global.settings',\n                        defaultMessage: 'Settings',\n                      })}\n                    </VisuallyHidden>\n                  </Typography>\n                </Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {providers.map((provider) => (\n                <Tr\n                  key={provider.name}\n                  onClick={() => (canUpdate ? handleClickEdit(provider) : undefined)}\n                >\n                  <Td width=\"45%\">\n                    <Typography fontWeight=\"semiBold\" textColor=\"neutral800\">\n                      {provider.name}\n                    </Typography>\n                  </Td>\n                  <Td width=\"65%\">\n                    <Typography\n                      textColor={provider.enabled ? 'success600' : 'danger600'}\n                      data-testid={`enable-${provider.name}`}\n                    >\n                      {provider.enabled\n                        ? formatMessage({\n                            id: 'global.enabled',\n                            defaultMessage: 'Enabled',\n                          })\n                        : formatMessage({\n                            id: 'global.disabled',\n                            defaultMessage: 'Disabled',\n                          })}\n                    </Typography>\n                  </Td>\n                  <Td onClick={(e) => e.stopPropagation()}>\n                    {canUpdate && (\n                      <IconButton\n                        onClick={() => handleClickEdit(provider)}\n                        variant=\"ghost\"\n                        label=\"Edit\"\n                      >\n                        <Pencil />\n                      </IconButton>\n                    )}\n                  </Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </Table>\n        </Layouts.Content>\n      </Page.Main>\n      <FormModal\n        initialData={data[providerToEditName]}\n        isOpen={isOpen}\n        isSubmiting={submitMutation.isLoading}\n        layout={layoutToRender}\n        headerBreadcrumbs={[\n          formatMessage({\n            id: getTrad('PopUpForm.header.edit.providers'),\n            defaultMessage: 'Edit Provider',\n          }),\n          upperFirst(providerToEditName),\n        ]}\n        onToggle={handleToggleModal}\n        onSubmit={handleSubmit}\n        providerToEditName={providerToEditName}\n      />\n    </Layouts.Root>\n  );\n};\n\nconst ProtectedProvidersPage = () => (\n  <Page.Protect permissions={PERMISSIONS.readProviders}>\n    <ProvidersPage />\n  </Page.Protect>\n);\n\nexport default ProtectedProvidersPage;\n"],"names":["Input","description","disabled","intlLabel","error","name","onChange","placeholder","providerToEditName","type","value","formatMessage","useIntl","inputValue","window","strapi","backendURL","label","id","defaultMessage","provider","values","hint","_jsxs","Field","Root","_jsx","Label","Toggle","aria-label","checked","offLabel","onLabel","e","target","Hint","formattedPlaceholder","errorMessage","TextInput","Error","defaultProps","propTypes","PropTypes","shape","string","isRequired","object","bool","func","oneOfType","FormModal","headerBreadcrumbs","initialData","isSubmiting","layout","isOpen","onSubmit","onToggle","Modal","open","onOpenChange","Content","Header","Breadcrumbs","join","map","crumb","index","arr","Crumb","isCurrent","length","Formik","initialValues","validationSchema","schema","validateOnChange","errors","handleChange","Form","Body","Flex","direction","alignItems","gap","Grid","form","row","input","Item","col","size","xs","Footer","Button","variant","onClick","loading","arrayOf","array","callbackLabel","getTrad","callbackPlaceholder","enabledDescription","enabledLabel","keyLabel","hintLabel","textPlaceholder","secretLabel","CALLBACK_REGEX","SUBDOMAIN_REGEX","forms","email","yup","enabled","required","translatedErrors","providers","validations","key","when","is","then","otherwise","secret","callback","matches","regex","providersWithSubdomain","subdomain","ProvidersPage","locale","queryClient","useQueryClient","trackUsage","useTracking","setIsOpen","React","useState","setProviderToEditName","toggleNotification","useNotification","get","put","useFetchClient","formatAPIError","useAPIErrorHandler","formatter","useCollator","sensitivity","isLoading","isLoadingPermissions","allowedActions","canUpdate","useRBAC","update","PERMISSIONS","updateProviders","isLoadingData","data","useQuery","submitMutation","useMutation","body","onSuccess","invalidateQueries","message","handleToggleModal","onError","refetchActive","Object","entries","reduce","acc","icon","push","sort","a","b","compare","isProviderWithSubdomain","useMemo","providerToEdit","find","obj","layoutToRender","prev","handleClickEdit","handleSubmit","mutate","Page","Loading","Layouts","Title","Main","title","Table","colCount","rowCount","Thead","Tr","Th","Typography","textColor","VisuallyHidden","Tbody","undefined","Td","width","fontWeight","data-testid","stopPropagation","IconButton","Pencil","upperFirst","ProtectedProvidersPage","Protect","permissions","readProviders"],"mappings":"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"}
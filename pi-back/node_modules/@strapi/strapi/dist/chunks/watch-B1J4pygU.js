'use strict';

var path = require('node:path');
var http = require('node:http');
var fs = require('node:fs/promises');
var config = require('./config--zIwFT_I.js');
require('browserslist-to-esbuild');
require('@vitejs/plugin-react-swc');
require('./aliases-DuFEcl9r.js');
require('path');
require('read-pkg-up');
require('./index-C8MmOlGv.js');
require('commander');
require('@strapi/cloud-cli');
require('@strapi/utils');
require('lodash');
require('inquirer');
require('@strapi/core');
require('chalk');
require('lodash/fp');
require('boxen');
require('cli-table3');
require('fs');
require('fs-extra');
require('crypto');
require('@strapi/typescript-utils');
require('node:os');
require('semver');
require('resolve-from');
require('execa');
require('perf_hooks');
require('browserslist');
require('dotenv');
require('esbuild-register/dist/node');
require('node:fs');
require('lodash/camelCase');
require('outdent');
require('react');
require('react-dom/server');
require('@strapi/admin/_internal');
require('repl');
require('node:cluster');
require('chokidar');
require('os');
require('@strapi/logger');
require('ora');
require('@strapi/data-transfer');
require('cli-progress');
require('typescript');

const HMR_DEFAULT_PORT = 5173;
const createHMRServer = ()=>{
    return http.createServer(// http server request handler. keeps the same with
    // https://github.com/websockets/ws/blob/45e17acea791d865df6b255a55182e9c42e5877a/lib/websocket-server.js#L88-L96
    (_, res)=>{
        const body = http.STATUS_CODES[426]; // Upgrade Required
        res.writeHead(426, {
            'Content-Length': body?.length ?? 0,
            'Content-Type': 'text/plain'
        });
        res.end(body);
    });
};
const watch = async (ctx)=>{
    const hmrServer = createHMRServer();
    ctx.options.hmrServer = hmrServer;
    ctx.options.hmrClientPort = HMR_DEFAULT_PORT;
    const config$1 = await config.resolveDevelopmentConfig(ctx);
    const finalConfig = await config.mergeConfigWithUserConfig(config$1, ctx);
    const hmrConfig = config$1.server?.hmr;
    // If the server used for Vite hmr is the one we've created (<> no user override)
    if (typeof hmrConfig === 'object' && hmrConfig.server === hmrServer) {
        // Only restart the hmr server when Strapi's server is listening
        strapi.server.httpServer.on('listening', async ()=>{
            hmrServer.listen(hmrConfig.clientPort ?? hmrConfig.port ?? HMR_DEFAULT_PORT);
        });
    }
    ctx.logger.debug('Vite config', finalConfig);
    const { createServer } = await import('vite');
    const vite = await createServer(finalConfig);
    const viteMiddlewares = (koaCtx, next)=>{
        return new Promise((resolve, reject)=>{
            const prefix = ctx.basePath.replace(ctx.adminPath, '').replace(/\/+$/, '');
            const originalPath = koaCtx.path;
            if (!koaCtx.path.startsWith(prefix)) {
                koaCtx.path = `${prefix}${koaCtx.path}`;
            }
            vite.middlewares(koaCtx.req, koaCtx.res, (err)=>{
                if (err) {
                    reject(err);
                } else {
                    if (!koaCtx.res.headersSent) {
                        koaCtx.path = originalPath;
                    }
                    resolve(next());
                }
            });
        });
    };
    const serveAdmin = async (koaCtx, next)=>{
        await next();
        if (koaCtx.method !== 'HEAD' && koaCtx.method !== 'GET') {
            return;
        }
        if (koaCtx.body != null || koaCtx.status !== 404) {
            return;
        }
        const url = koaCtx.originalUrl;
        let template = await fs.readFile(path.relative(ctx.cwd, '.strapi/client/index.html'), 'utf-8');
        template = await vite.transformIndexHtml(url, template);
        koaCtx.type = 'html';
        koaCtx.body = template;
    };
    const adminRoute = `${ctx.adminPath}/:path*`;
    ctx.strapi.server.router.get(adminRoute, serveAdmin);
    ctx.strapi.server.router.use(adminRoute, viteMiddlewares);
    return {
        async close () {
            await vite.close();
            if (hmrServer.listening) {
                // Manually close the hmr server
                // /!\ This operation MUST be done after calling .close() on the vite
                //      instance to avoid flaky behaviors with attached clients
                await new Promise((resolve, reject)=>{
                    hmrServer.close((err)=>err ? reject(err) : resolve());
                });
            }
        }
    };
};

exports.watch = watch;
//# sourceMappingURL=watch-B1J4pygU.js.map

import path from 'node:path';
import http from 'node:http';
import fs from 'node:fs/promises';
import { a as resolveDevelopmentConfig, m as mergeConfigWithUserConfig } from './config-Bezki5nL.mjs';
import 'browserslist-to-esbuild';
import '@vitejs/plugin-react-swc';
import './aliases-ovUFcarU.mjs';
import 'path';
import 'read-pkg-up';
import './index-CVv0hWFI.mjs';
import 'commander';
import '@strapi/cloud-cli';
import '@strapi/utils';
import 'lodash';
import 'inquirer';
import '@strapi/core';
import 'chalk';
import 'lodash/fp';
import 'boxen';
import 'cli-table3';
import 'fs';
import 'fs-extra';
import 'crypto';
import '@strapi/typescript-utils';
import 'node:os';
import 'semver';
import 'resolve-from';
import 'execa';
import 'perf_hooks';
import 'browserslist';
import 'dotenv';
import 'esbuild-register/dist/node';
import 'node:fs';
import 'lodash/camelCase';
import 'outdent';
import 'react';
import 'react-dom/server';
import '@strapi/admin/_internal';
import 'repl';
import 'node:cluster';
import 'chokidar';
import 'os';
import '@strapi/logger';
import 'ora';
import '@strapi/data-transfer';
import 'cli-progress';
import 'typescript';

const HMR_DEFAULT_PORT = 5173;
const createHMRServer = ()=>{
    return http.createServer(// http server request handler. keeps the same with
    // https://github.com/websockets/ws/blob/45e17acea791d865df6b255a55182e9c42e5877a/lib/websocket-server.js#L88-L96
    (_, res)=>{
        const body = http.STATUS_CODES[426]; // Upgrade Required
        res.writeHead(426, {
            'Content-Length': body?.length ?? 0,
            'Content-Type': 'text/plain'
        });
        res.end(body);
    });
};
const watch = async (ctx)=>{
    const hmrServer = createHMRServer();
    ctx.options.hmrServer = hmrServer;
    ctx.options.hmrClientPort = HMR_DEFAULT_PORT;
    const config = await resolveDevelopmentConfig(ctx);
    const finalConfig = await mergeConfigWithUserConfig(config, ctx);
    const hmrConfig = config.server?.hmr;
    // If the server used for Vite hmr is the one we've created (<> no user override)
    if (typeof hmrConfig === 'object' && hmrConfig.server === hmrServer) {
        // Only restart the hmr server when Strapi's server is listening
        strapi.server.httpServer.on('listening', async ()=>{
            hmrServer.listen(hmrConfig.clientPort ?? hmrConfig.port ?? HMR_DEFAULT_PORT);
        });
    }
    ctx.logger.debug('Vite config', finalConfig);
    const { createServer } = await import('vite');
    const vite = await createServer(finalConfig);
    const viteMiddlewares = (koaCtx, next)=>{
        return new Promise((resolve, reject)=>{
            const prefix = ctx.basePath.replace(ctx.adminPath, '').replace(/\/+$/, '');
            const originalPath = koaCtx.path;
            if (!koaCtx.path.startsWith(prefix)) {
                koaCtx.path = `${prefix}${koaCtx.path}`;
            }
            vite.middlewares(koaCtx.req, koaCtx.res, (err)=>{
                if (err) {
                    reject(err);
                } else {
                    if (!koaCtx.res.headersSent) {
                        koaCtx.path = originalPath;
                    }
                    resolve(next());
                }
            });
        });
    };
    const serveAdmin = async (koaCtx, next)=>{
        await next();
        if (koaCtx.method !== 'HEAD' && koaCtx.method !== 'GET') {
            return;
        }
        if (koaCtx.body != null || koaCtx.status !== 404) {
            return;
        }
        const url = koaCtx.originalUrl;
        let template = await fs.readFile(path.relative(ctx.cwd, '.strapi/client/index.html'), 'utf-8');
        template = await vite.transformIndexHtml(url, template);
        koaCtx.type = 'html';
        koaCtx.body = template;
    };
    const adminRoute = `${ctx.adminPath}/:path*`;
    ctx.strapi.server.router.get(adminRoute, serveAdmin);
    ctx.strapi.server.router.use(adminRoute, viteMiddlewares);
    return {
        async close () {
            await vite.close();
            if (hmrServer.listening) {
                // Manually close the hmr server
                // /!\ This operation MUST be done after calling .close() on the vite
                //      instance to avoid flaky behaviors with attached clients
                await new Promise((resolve, reject)=>{
                    hmrServer.close((err)=>err ? reject(err) : resolve());
                });
            }
        }
    };
};

export { watch };
//# sourceMappingURL=watch-DwVyK07I.mjs.map
